

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue May 24 15:34:29 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  000E                     	;# 
   184  000F                     	;# 
   185  0010                     	;# 
   186  0011                     	;# 
   187  0012                     	;# 
   188  0013                     	;# 
   189  0014                     	;# 
   190  0015                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0017                     	;# 
   194  0018                     	;# 
   195  0019                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  001D                     	;# 
   201  001E                     	;# 
   202  001F                     	;# 
   203  0081                     	;# 
   204  0085                     	;# 
   205  0086                     	;# 
   206  0087                     	;# 
   207  0088                     	;# 
   208  0089                     	;# 
   209  008C                     	;# 
   210  008D                     	;# 
   211  008E                     	;# 
   212  0091                     	;# 
   213  0092                     	;# 
   214  0093                     	;# 
   215  0094                     	;# 
   216  0098                     	;# 
   217  0099                     	;# 
   218  009C                     	;# 
   219  009D                     	;# 
   220  009E                     	;# 
   221  009F                     	;# 
   222  010C                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0088                     	;# 
   268  0089                     	;# 
   269  008C                     	;# 
   270  008D                     	;# 
   271  008E                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009C                     	;# 
   279  009D                     	;# 
   280  009E                     	;# 
   281  009F                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  018C                     	;# 
   287  018D                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  000E                     	;# 
   304  000F                     	;# 
   305  0010                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  001D                     	;# 
   321  001E                     	;# 
   322  001F                     	;# 
   323  0081                     	;# 
   324  0085                     	;# 
   325  0086                     	;# 
   326  0087                     	;# 
   327  0088                     	;# 
   328  0089                     	;# 
   329  008C                     	;# 
   330  008D                     	;# 
   331  008E                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0094                     	;# 
   336  0098                     	;# 
   337  0099                     	;# 
   338  009C                     	;# 
   339  009D                     	;# 
   340  009E                     	;# 
   341  009F                     	;# 
   342  010C                     	;# 
   343  010D                     	;# 
   344  010E                     	;# 
   345  010F                     	;# 
   346  018C                     	;# 
   347  018D                     	;# 
   348  0000                     	;# 
   349  0001                     	;# 
   350  0002                     	;# 
   351  0003                     	;# 
   352  0004                     	;# 
   353  0005                     	;# 
   354  0006                     	;# 
   355  0007                     	;# 
   356  0008                     	;# 
   357  0009                     	;# 
   358  000A                     	;# 
   359  000B                     	;# 
   360  000C                     	;# 
   361  000D                     	;# 
   362  000E                     	;# 
   363  000E                     	;# 
   364  000F                     	;# 
   365  0010                     	;# 
   366  0011                     	;# 
   367  0012                     	;# 
   368  0013                     	;# 
   369  0014                     	;# 
   370  0015                     	;# 
   371  0015                     	;# 
   372  0016                     	;# 
   373  0017                     	;# 
   374  0018                     	;# 
   375  0019                     	;# 
   376  001A                     	;# 
   377  001B                     	;# 
   378  001B                     	;# 
   379  001C                     	;# 
   380  001D                     	;# 
   381  001E                     	;# 
   382  001F                     	;# 
   383  0081                     	;# 
   384  0085                     	;# 
   385  0086                     	;# 
   386  0087                     	;# 
   387  0088                     	;# 
   388  0089                     	;# 
   389  008C                     	;# 
   390  008D                     	;# 
   391  008E                     	;# 
   392  0091                     	;# 
   393  0092                     	;# 
   394  0093                     	;# 
   395  0094                     	;# 
   396  0098                     	;# 
   397  0099                     	;# 
   398  009C                     	;# 
   399  009D                     	;# 
   400  009E                     	;# 
   401  009F                     	;# 
   402  010C                     	;# 
   403  010D                     	;# 
   404  010E                     	;# 
   405  010F                     	;# 
   406  018C                     	;# 
   407  018D                     	;# 
   408  0000                     	;# 
   409  0001                     	;# 
   410  0002                     	;# 
   411  0003                     	;# 
   412  0004                     	;# 
   413  0005                     	;# 
   414  0006                     	;# 
   415  0007                     	;# 
   416  0008                     	;# 
   417  0009                     	;# 
   418  000A                     	;# 
   419  000B                     	;# 
   420  000C                     	;# 
   421  000D                     	;# 
   422  000E                     	;# 
   423  000E                     	;# 
   424  000F                     	;# 
   425  0010                     	;# 
   426  0011                     	;# 
   427  0012                     	;# 
   428  0013                     	;# 
   429  0014                     	;# 
   430  0015                     	;# 
   431  0015                     	;# 
   432  0016                     	;# 
   433  0017                     	;# 
   434  0018                     	;# 
   435  0019                     	;# 
   436  001A                     	;# 
   437  001B                     	;# 
   438  001B                     	;# 
   439  001C                     	;# 
   440  001D                     	;# 
   441  001E                     	;# 
   442  001F                     	;# 
   443  0081                     	;# 
   444  0085                     	;# 
   445  0086                     	;# 
   446  0087                     	;# 
   447  0088                     	;# 
   448  0089                     	;# 
   449  008C                     	;# 
   450  008D                     	;# 
   451  008E                     	;# 
   452  0091                     	;# 
   453  0092                     	;# 
   454  0093                     	;# 
   455  0094                     	;# 
   456  0098                     	;# 
   457  0099                     	;# 
   458  009C                     	;# 
   459  009D                     	;# 
   460  009E                     	;# 
   461  009F                     	;# 
   462  010C                     	;# 
   463  010D                     	;# 
   464  010E                     	;# 
   465  010F                     	;# 
   466  018C                     	;# 
   467  018D                     	;# 
   468  0000                     	;# 
   469  0001                     	;# 
   470  0002                     	;# 
   471  0003                     	;# 
   472  0004                     	;# 
   473  0005                     	;# 
   474  0006                     	;# 
   475  0007                     	;# 
   476  0008                     	;# 
   477  0009                     	;# 
   478  000A                     	;# 
   479  000B                     	;# 
   480  000C                     	;# 
   481  000D                     	;# 
   482  000E                     	;# 
   483  000E                     	;# 
   484  000F                     	;# 
   485  0010                     	;# 
   486  0011                     	;# 
   487  0012                     	;# 
   488  0013                     	;# 
   489  0014                     	;# 
   490  0015                     	;# 
   491  0015                     	;# 
   492  0016                     	;# 
   493  0017                     	;# 
   494  0018                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001B                     	;# 
   499  001C                     	;# 
   500  001D                     	;# 
   501  001E                     	;# 
   502  001F                     	;# 
   503  0081                     	;# 
   504  0085                     	;# 
   505  0086                     	;# 
   506  0087                     	;# 
   507  0088                     	;# 
   508  0089                     	;# 
   509  008C                     	;# 
   510  008D                     	;# 
   511  008E                     	;# 
   512  0091                     	;# 
   513  0092                     	;# 
   514  0093                     	;# 
   515  0094                     	;# 
   516  0098                     	;# 
   517  0099                     	;# 
   518  009C                     	;# 
   519  009D                     	;# 
   520  009E                     	;# 
   521  009F                     	;# 
   522  010C                     	;# 
   523  010D                     	;# 
   524  010E                     	;# 
   525  010F                     	;# 
   526  018C                     	;# 
   527  018D                     	;# 
   528  0000                     	;# 
   529  0001                     	;# 
   530  0002                     	;# 
   531  0003                     	;# 
   532  0004                     	;# 
   533  0005                     	;# 
   534  0006                     	;# 
   535  0007                     	;# 
   536  0008                     	;# 
   537  0009                     	;# 
   538  000A                     	;# 
   539  000B                     	;# 
   540  000C                     	;# 
   541  000D                     	;# 
   542  000E                     	;# 
   543  000E                     	;# 
   544  000F                     	;# 
   545  0010                     	;# 
   546  0011                     	;# 
   547  0012                     	;# 
   548  0013                     	;# 
   549  0014                     	;# 
   550  0015                     	;# 
   551  0015                     	;# 
   552  0016                     	;# 
   553  0017                     	;# 
   554  0018                     	;# 
   555  0019                     	;# 
   556  001A                     	;# 
   557  001B                     	;# 
   558  001B                     	;# 
   559  001C                     	;# 
   560  001D                     	;# 
   561  001E                     	;# 
   562  001F                     	;# 
   563  0081                     	;# 
   564  0085                     	;# 
   565  0086                     	;# 
   566  0087                     	;# 
   567  0088                     	;# 
   568  0089                     	;# 
   569  008C                     	;# 
   570  008D                     	;# 
   571  008E                     	;# 
   572  0091                     	;# 
   573  0092                     	;# 
   574  0093                     	;# 
   575  0094                     	;# 
   576  0098                     	;# 
   577  0099                     	;# 
   578  009C                     	;# 
   579  009D                     	;# 
   580  009E                     	;# 
   581  009F                     	;# 
   582  010C                     	;# 
   583  010D                     	;# 
   584  010E                     	;# 
   585  010F                     	;# 
   586  018C                     	;# 
   587  018D                     	;# 
   588                           
   589                           	psect	idataBANK0
   590  07FE                     __pidataBANK0:	
   591                           
   592                           ;initializer for _pas_cooler
   593  07FE  3407               	retlw	7
   594  07FF  3400               	retlw	0
   595                           
   596                           	psect	idataBANK1
   597  0E27                     __pidataBANK1:	
   598                           
   599                           ;initializer for _tf
   600  0E27  3414               	retlw	20
   601  0E28  3400               	retlw	0
   602                           
   603                           	psect	stringtext
   604  0500                     __pstringtext:	
   605  0500                     stringtab:	
   606  0500                     __stringtab:	
   607                           
   608                           ;	String table - string pointers are 2 bytes each
   609  0500  1BFF               	btfsc	btemp+1,7
   610  0501  2D0A               	ljmp	stringcode
   611  0502  1383               	bcf	3,7
   612  0503  187F               	btfsc	btemp+1,0
   613  0504  1783               	bsf	3,7
   614  0505  0800               	movf	0,w
   615  0506  0A84               	incf	4,f
   616  0507  1903               	skipnz
   617  0508  0AFF               	incf	btemp+1,f
   618  0509  0008               	return
   619  050A                     stringcode:	
   620  050A  087F               	movf	btemp+1,w
   621  050B  397F               	andlw	127
   622  050C  008A               	movwf	10
   623  050D  0804               	movf	4,w
   624  050E  0A84               	incf	4,f
   625  050F  1903               	skipnz
   626  0510  0AFF               	incf	btemp+1,f
   627  0511  0082               	movwf	2
   628  0512                     __stringbase:	
   629  0512                     __end_of__stringtab:	
   630  0512                     _dpowers:	
   631  0512  3401               	retlw	1
   632  0513  3400               	retlw	0
   633  0514  340A               	retlw	10
   634  0515  3400               	retlw	0
   635  0516  3464               	retlw	100
   636  0517  3400               	retlw	0
   637  0518  34E8               	retlw	232
   638  0519  3403               	retlw	3
   639  051A  3410               	retlw	16
   640  051B  3427               	retlw	39
   641  051C                     __end_of_dpowers:	
   642  000E                     _TMR1	set	14
   643  001F                     _ADCON0bits	set	31
   644  001E                     _ADRESH	set	30
   645  0017                     _CCP1CON	set	23
   646  0017                     _CCP1CONbits	set	23
   647  001D                     _CCP2CON	set	29
   648  001D                     _CCP2CONbits	set	29
   649  0015                     _CCPR1L	set	21
   650  001B                     _CCPR2L	set	27
   651  000B                     _INTCONbits	set	11
   652  000C                     _PIR1bits	set	12
   653  000D                     _PIR2bits	set	13
   654  0005                     _PORTA	set	5
   655  0006                     _PORTB	set	6
   656  0006                     _PORTBbits	set	6
   657  0007                     _PORTC	set	7
   658  0008                     _PORTD	set	8
   659  0009                     _PORTE	set	9
   660  0009                     _PORTEbits	set	9
   661  001A                     _RCREG	set	26
   662  0018                     _RCSTAbits	set	24
   663  0013                     _SSPBUF	set	19
   664  0014                     _SSPCONbits	set	20
   665  0010                     _T1CON	set	16
   666  0010                     _T1CONbits	set	16
   667  0012                     _T2CONbits	set	18
   668  0001                     _TMR0	set	1
   669  000F                     _TMR1H	set	15
   670  000E                     _TMR1L	set	14
   671  0019                     _TXREG	set	25
   672  00C1                     _OERR	set	193
   673  009F                     _ADCON1bits	set	159
   674  009E                     _ADRESL	set	158
   675  0081                     _OPTION_REGbits	set	129
   676  008C                     _PIE1bits	set	140
   677  008D                     _PIE2bits	set	141
   678  0092                     _PR2	set	146
   679  0099                     _SPBRG	set	153
   680  0093                     _SSPADD	set	147
   681  0091                     _SSPCON2	set	145
   682  0091                     _SSPCON2bits	set	145
   683  0094                     _SSPSTATbits	set	148
   684  0085                     _TRISA	set	133
   685  0086                     _TRISB	set	134
   686  0087                     _TRISC	set	135
   687  0088                     _TRISD	set	136
   688  0089                     _TRISE	set	137
   689  0098                     _TXSTAbits	set	152
   690  010D                     _EEADR	set	269
   691  010C                     _EEDATA	set	268
   692  018C                     _EECON1bits	set	396
   693  018D                     _EECON2	set	397
   694  051C                     __stringdata:	
   695  051C                     STR_19:	
   696  051C  340A               	retlw	10
   697  051D  340D               	retlw	13
   698  051E  3420               	retlw	32	;' '
   699  051F  342D               	retlw	45	;'-'
   700  0520  342D               	retlw	45	;'-'
   701  0521  342D               	retlw	45	;'-'
   702  0522  342D               	retlw	45	;'-'
   703  0523  342D               	retlw	45	;'-'
   704  0524  342D               	retlw	45	;'-'
   705  0525  342D               	retlw	45	;'-'
   706  0526  3420               	retlw	32	;' '
   707  0527  3445               	retlw	69	;'E'
   708  0528  3453               	retlw	83	;'S'
   709  0529  3454               	retlw	84	;'T'
   710  052A  344F               	retlw	79	;'O'
   711  052B  3455               	retlw	85	;'U'
   712  052C  3452               	retlw	82	;'R'
   713  052D  344F               	retlw	79	;'O'
   714  052E  3420               	retlw	32	;' '
   715  052F  3444               	retlw	68	;'D'
   716  0530  3445               	retlw	69	;'E'
   717  0531  3420               	retlw	32	;' '
   718  0532  3450               	retlw	80	;'P'
   719  0533  3449               	retlw	73	;'I'
   720  0534  344C               	retlw	76	;'L'
   721  0535  3448               	retlw	72	;'H'
   722  0536  3441               	retlw	65	;'A'
   723  0537  3420               	retlw	32	;' '
   724  0538  342D               	retlw	45	;'-'
   725  0539  342D               	retlw	45	;'-'
   726  053A  342D               	retlw	45	;'-'
   727  053B  342D               	retlw	45	;'-'
   728  053C  342D               	retlw	45	;'-'
   729  053D  342D               	retlw	45	;'-'
   730  053E  342D               	retlw	45	;'-'
   731  053F  3420               	retlw	32	;' '
   732  0540  340A               	retlw	10
   733  0541  340D               	retlw	13
   734  0542  3420               	retlw	32	;' '
   735  0543  3400               	retlw	0
   736  0544                     STR_11:	
   737  0544  3449               	retlw	73	;'I'
   738  0545  346E               	retlw	110	;'n'
   739  0546  3469               	retlw	105	;'i'
   740  0547  3463               	retlw	99	;'c'
   741  0548  3469               	retlw	105	;'i'
   742  0549  3461               	retlw	97	;'a'
   743  054A  346C               	retlw	108	;'l'
   744  054B  3469               	retlw	105	;'i'
   745  054C  347A               	retlw	122	;'z'
   746  054D  3461               	retlw	97	;'a'
   747  054E  346E               	retlw	110	;'n'
   748  054F  3464               	retlw	100	;'d'
   749  0550  346F               	retlw	111	;'o'
   750  0551  3420               	retlw	32	;' '
   751  0552  346F               	retlw	111	;'o'
   752  0553  3420               	retlw	32	;' '
   753  0554  3450               	retlw	80	;'P'
   754  0555  3449               	retlw	73	;'I'
   755  0556  3443               	retlw	67	;'C'
   756  0557  3431               	retlw	49	;'1'
   757  0558  3436               	retlw	54	;'6'
   758  0559  3446               	retlw	70	;'F'
   759  055A  3438               	retlw	56	;'8'
   760  055B  3437               	retlw	55	;'7'
   761  055C  3437               	retlw	55	;'7'
   762  055D  3441               	retlw	65	;'A'
   763  055E  340A               	retlw	10
   764  055F  340D               	retlw	13
   765  0560  3400               	retlw	0
   766  0561                     STR_12:	
   767  0561  3455               	retlw	85	;'U'
   768  0562  3453               	retlw	83	;'S'
   769  0563  3441               	retlw	65	;'A'
   770  0564  3452               	retlw	82	;'R'
   771  0565  3454               	retlw	84	;'T'
   772  0566  343A               	retlw	58	;':'
   773  0567  3420               	retlw	32	;' '
   774  0568  3431               	retlw	49	;'1'
   775  0569  3431               	retlw	49	;'1'
   776  056A  3435               	retlw	53	;'5'
   777  056B  342E               	retlw	46	;'.'
   778  056C  3432               	retlw	50	;'2'
   779  056D  3430               	retlw	48	;'0'
   780  056E  3430               	retlw	48	;'0'
   781  056F  3462               	retlw	98	;'b'
   782  0570  3470               	retlw	112	;'p'
   783  0571  3473               	retlw	115	;'s'
   784  0572  340A               	retlw	10
   785  0573  340D               	retlw	13
   786  0574  3400               	retlw	0
   787  0575                     STR_13:	
   788  0575  3449               	retlw	73	;'I'
   789  0576  346E               	retlw	110	;'n'
   790  0577  3469               	retlw	105	;'i'
   791  0578  3463               	retlw	99	;'c'
   792  0579  3469               	retlw	105	;'i'
   793  057A  3461               	retlw	97	;'a'
   794  057B  346C               	retlw	108	;'l'
   795  057C  3469               	retlw	105	;'i'
   796  057D  347A               	retlw	122	;'z'
   797  057E  3461               	retlw	97	;'a'
   798  057F  346E               	retlw	110	;'n'
   799  0580  3464               	retlw	100	;'d'
   800  0581  346F               	retlw	111	;'o'
   801  0582  342E               	retlw	46	;'.'
   802  0583  342E               	retlw	46	;'.'
   803  0584  342E               	retlw	46	;'.'
   804  0585  3400               	retlw	0
   805  0586                     STR_9:	
   806  0586  340A               	retlw	10
   807  0587  340D               	retlw	13
   808  0588  3470               	retlw	112	;'p'
   809  0589  3477               	retlw	119	;'w'
   810  058A  346D               	retlw	109	;'m'
   811  058B  3420               	retlw	32	;' '
   812  058C  343D               	retlw	61	;'='
   813  058D  3420               	retlw	32	;' '
   814  058E  3431               	retlw	49	;'1'
   815  058F  3430               	retlw	48	;'0'
   816  0590  3430               	retlw	48	;'0'
   817  0591  3430               	retlw	48	;'0'
   818  0592  340A               	retlw	10
   819  0593  340D               	retlw	13
   820  0594  3400               	retlw	0
   821  0595                     STR_10:	
   822  0595  340A               	retlw	10
   823  0596  340D               	retlw	13
   824  0597  3470               	retlw	112	;'p'
   825  0598  3477               	retlw	119	;'w'
   826  0599  346D               	retlw	109	;'m'
   827  059A  3420               	retlw	32	;' '
   828  059B  343D               	retlw	61	;'='
   829  059C  3420               	retlw	32	;' '
   830  059D  3431               	retlw	49	;'1'
   831  059E  3430               	retlw	48	;'0'
   832  059F  3432               	retlw	50	;'2'
   833  05A0  3433               	retlw	51	;'3'
   834  05A1  340A               	retlw	10
   835  05A2  340D               	retlw	13
   836  05A3  3400               	retlw	0
   837  05A4                     STR_6:	
   838  05A4  340A               	retlw	10
   839  05A5  340D               	retlw	13
   840  05A6  3470               	retlw	112	;'p'
   841  05A7  3477               	retlw	119	;'w'
   842  05A8  346D               	retlw	109	;'m'
   843  05A9  3420               	retlw	32	;' '
   844  05AA  343D               	retlw	61	;'='
   845  05AB  3420               	retlw	32	;' '
   846  05AC  3435               	retlw	53	;'5'
   847  05AD  3431               	retlw	49	;'1'
   848  05AE  3432               	retlw	50	;'2'
   849  05AF  340A               	retlw	10
   850  05B0  340D               	retlw	13
   851  05B1  3400               	retlw	0
   852  05B2                     STR_5:	
   853  05B2  340A               	retlw	10
   854  05B3  340D               	retlw	13
   855  05B4  3470               	retlw	112	;'p'
   856  05B5  3477               	retlw	119	;'w'
   857  05B6  346D               	retlw	109	;'m'
   858  05B7  3420               	retlw	32	;' '
   859  05B8  343D               	retlw	61	;'='
   860  05B9  3420               	retlw	32	;' '
   861  05BA  3432               	retlw	50	;'2'
   862  05BB  3435               	retlw	53	;'5'
   863  05BC  3436               	retlw	54	;'6'
   864  05BD  340A               	retlw	10
   865  05BE  340D               	retlw	13
   866  05BF  3400               	retlw	0
   867  05C0                     STR_8:	
   868  05C0  340A               	retlw	10
   869  05C1  340D               	retlw	13
   870  05C2  3470               	retlw	112	;'p'
   871  05C3  3477               	retlw	119	;'w'
   872  05C4  346D               	retlw	109	;'m'
   873  05C5  3420               	retlw	32	;' '
   874  05C6  343D               	retlw	61	;'='
   875  05C7  3420               	retlw	32	;' '
   876  05C8  3438               	retlw	56	;'8'
   877  05C9  3439               	retlw	57	;'9'
   878  05CA  3436               	retlw	54	;'6'
   879  05CB  340A               	retlw	10
   880  05CC  340D               	retlw	13
   881  05CD  3400               	retlw	0
   882  05CE                     STR_4:	
   883  05CE  340A               	retlw	10
   884  05CF  340D               	retlw	13
   885  05D0  3470               	retlw	112	;'p'
   886  05D1  3477               	retlw	119	;'w'
   887  05D2  346D               	retlw	109	;'m'
   888  05D3  3420               	retlw	32	;' '
   889  05D4  343D               	retlw	61	;'='
   890  05D5  3420               	retlw	32	;' '
   891  05D6  3431               	retlw	49	;'1'
   892  05D7  3432               	retlw	50	;'2'
   893  05D8  3438               	retlw	56	;'8'
   894  05D9  340A               	retlw	10
   895  05DA  340D               	retlw	13
   896  05DB  3400               	retlw	0
   897  05DC                     STR_7:	
   898  05DC  340A               	retlw	10
   899  05DD  340D               	retlw	13
   900  05DE  3470               	retlw	112	;'p'
   901  05DF  3477               	retlw	119	;'w'
   902  05E0  346D               	retlw	109	;'m'
   903  05E1  3420               	retlw	32	;' '
   904  05E2  343D               	retlw	61	;'='
   905  05E3  3420               	retlw	32	;' '
   906  05E4  3437               	retlw	55	;'7'
   907  05E5  3436               	retlw	54	;'6'
   908  05E6  3438               	retlw	56	;'8'
   909  05E7  340A               	retlw	10
   910  05E8  340D               	retlw	13
   911  05E9  3400               	retlw	0
   912  05EA                     STR_1:	
   913  05EA  340A               	retlw	10
   914  05EB  340D               	retlw	13
   915  05EC  3464               	retlw	100	;'d'
   916  05ED  3465               	retlw	101	;'e'
   917  05EE  3473               	retlw	115	;'s'
   918  05EF  346C               	retlw	108	;'l'
   919  05F0  3469               	retlw	105	;'i'
   920  05F1  3467               	retlw	103	;'g'
   921  05F2  3461               	retlw	97	;'a'
   922  05F3  3464               	retlw	100	;'d'
   923  05F4  346F               	retlw	111	;'o'
   924  05F5  340A               	retlw	10
   925  05F6  340D               	retlw	13
   926  05F7  3400               	retlw	0
   927  05F8                     STR_2:	
   928  05F8  340A               	retlw	10
   929  05F9  340D               	retlw	13
   930  05FA  3470               	retlw	112	;'p'
   931  05FB  3477               	retlw	119	;'w'
   932  05FC  346D               	retlw	109	;'m'
   933  05FD  3420               	retlw	32	;' '
   934  05FE  343D               	retlw	61	;'='
   935  05FF  3420               	retlw	32	;' '
   936  0600  3433               	retlw	51	;'3'
   937  0601  3432               	retlw	50	;'2'
   938  0602  340A               	retlw	10
   939  0603  340D               	retlw	13
   940  0604  3400               	retlw	0
   941  0605                     STR_3:	
   942  0605  340A               	retlw	10
   943  0606  340D               	retlw	13
   944  0607  3470               	retlw	112	;'p'
   945  0608  3477               	retlw	119	;'w'
   946  0609  346D               	retlw	109	;'m'
   947  060A  3420               	retlw	32	;' '
   948  060B  343D               	retlw	61	;'='
   949  060C  3420               	retlw	32	;' '
   950  060D  3436               	retlw	54	;'6'
   951  060E  3434               	retlw	52	;'4'
   952  060F  340A               	retlw	10
   953  0610  340D               	retlw	13
   954  0611  3400               	retlw	0
   955  0612                     STR_17:	
   956  0612  3452               	retlw	82	;'R'
   957  0613  3450               	retlw	80	;'P'
   958  0614  344D               	retlw	77	;'M'
   959  0615  343A               	retlw	58	;':'
   960  0616  3420               	retlw	32	;' '
   961  0617  3400               	retlw	0
   962  0618                     STR_18:	
   963  0618  3450               	retlw	80	;'P'
   964  0619  3457               	retlw	87	;'W'
   965  061A  344D               	retlw	77	;'M'
   966  061B  343A               	retlw	58	;':'
   967  061C  3420               	retlw	32	;' '
   968  061D  3400               	retlw	0
   969  061E                     STR_14:	
   970  061E  3425               	retlw	37	;'%'
   971  061F  3430               	retlw	48	;'0'
   972  0620  3434               	retlw	52	;'4'
   973  0621  3464               	retlw	100	;'d'
   974  0622  3400               	retlw	0
   975  0623                     __end_of__stringdata:	
   976                           
   977                           ; #config settings
   978  0000                     
   979                           	psect	cinit
   980  0015                     start_initialization:	
   981  0015                     __initialization:	
   982                           
   983                           ; Clear objects allocated to BANK0
   984  0015  1383               	bcf	3,7	;select IRP bank0
   985  0016  3020               	movlw	low __pbssBANK0
   986  0017  0084               	movwf	4
   987  0018  3046               	movlw	low (__pbssBANK0+38)
   988  0019  120A  158A  263F  120A  118A  	fcall	clear_ram0
   989                           
   990                           ; Clear objects allocated to BANK1
   991  001E  30A0               	movlw	low __pbssBANK1
   992  001F  0084               	movwf	4
   993  0020  30CA               	movlw	low (__pbssBANK1+42)
   994  0021  120A  158A  263F  120A  118A  	fcall	clear_ram0
   995                           
   996                           ; Initialize objects allocated to BANK1
   997  0026  1683               	bsf	3,5	;RP0=1, select bank1
   998  0027  1303               	bcf	3,6	;RP1=0, select bank1
   999  0028  120A  158A  2627  120A  118A  	fcall	__pidataBANK1	;fetch initializer
  1000  002D  00CD               	movwf	__pdataBANK1& (0+127)
  1001  002E  120A  158A  2628  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
  1002  0033  00CE               	movwf	(__pdataBANK1+1)& (0+127)
  1003                           
  1004                           ; Initialize objects allocated to BANK0
  1005  0034  1283               	bcf	3,5	;RP0=0, select bank0
  1006  0035  1303               	bcf	3,6	;RP1=0, select bank0
  1007  0036  120A  118A  27FE  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1008  003B  00EA               	movwf	__pdataBANK0& (0+127)
  1009  003C  120A  118A  27FF   	fcall	__pidataBANK0+1	;fetch initializer
  1010  003F  00EB               	movwf	(__pdataBANK0+1)& (0+127)
  1011  0040                     end_of_initialization:	
  1012                           ;End of C runtime variable initialization code
  1013                           
  1014  0040                     __end_of__initialization:	
  1015  0040  0183               	clrf	3
  1016  0041  120A  118A  2B79   	ljmp	_main	;jump to C main() function
  1017                           
  1018                           	psect	bssBANK0
  1019  0020                     __pbssBANK0:	
  1020  0020                     _ADCResult:	
  1021  0020                     	ds	2
  1022  0022                     _ativa_fan:	
  1023  0022                     	ds	2
  1024  0024                     _contagens_tm0:	
  1025  0024                     	ds	2
  1026  0026                     _fitemp:	
  1027  0026                     	ds	2
  1028  0028                     _fop_rule1:	
  1029  0028                     	ds	2
  1030  002A                     _fop_rule2:	
  1031  002A                     	ds	2
  1032  002C                     _fop_rule3:	
  1033  002C                     	ds	2
  1034  002E                     _ideal:	
  1035  002E                     	ds	2
  1036  0030                     _pulsos:	
  1037  0030                     	ds	2
  1038  0032                     _pwm:	
  1039  0032                     	ds	2
  1040  0034                     _pwmAnt:	
  1041  0034                     	ds	2
  1042  0036                     _rpm:	
  1043  0036                     	ds	2
  1044  0038                     _status:	
  1045  0038                     	ds	2
  1046  003A                     _temp:	
  1047  003A                     	ds	2
  1048  003C                     _temp_lida:	
  1049  003C                     	ds	2
  1050  003E                     _tip_average:	
  1051  003E                     	ds	2
  1052  0040                     _tip_gorgeous:	
  1053  0040                     	ds	2
  1054  0042                     _x:	
  1055  0042                     	ds	2
  1056  0044                     _y:	
  1057  0044                     	ds	2
  1058                           
  1059                           	psect	dataBANK0
  1060  006A                     __pdataBANK0:	
  1061  006A                     _pas_cooler:	
  1062  006A                     	ds	2
  1063                           
  1064                           	psect	bssBANK1
  1065  00A0                     __pbssBANK1:	
  1066  00A0                     _contador_rb6:	
  1067  00A0                     	ds	2
  1068  00A2                     _derro:	
  1069  00A2                     	ds	2
  1070  00A4                     _fisetpoint:	
  1071  00A4                     	ds	2
  1072  00A6                     _foTip:	
  1073  00A6                     	ds	2
  1074  00A8                     _posicao_do_grafico:	
  1075  00A8                     	ds	2
  1076  00AA                     _posicao_do_grafico_food:	
  1077  00AA                     	ds	2
  1078  00AC                     _posicao_do_grafico_service:	
  1079  00AC                     	ds	2
  1080  00AE                     _sum:	
  1081  00AE                     	ds	2
  1082  00B0                     _tempo_rb6:	
  1083  00B0                     	ds	2
  1084  00B2                     _tip:	
  1085  00B2                     	ds	2
  1086  00B4                     _total_area:	
  1087  00B4                     	ds	2
  1088  00B6                     _display_pwm:	
  1089  00B6                     	ds	10
  1090  00C0                     _display_rpm:	
  1091  00C0                     	ds	10
  1092                           
  1093                           	psect	dataBANK1
  1094  00CD                     __pdataBANK1:	
  1095  00CD                     _tf:	
  1096  00CD                     	ds	2
  1097                           
  1098                           	psect	clrtext
  1099  0E3F                     clear_ram0:	
  1100                           ;	Called with FSR containing the base address, and
  1101                           ;	W with the last address+1
  1102                           
  1103  0E3F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1104  0E40                     clrloop0:	
  1105  0E40  0180               	clrf	0	;clear RAM location pointed to by FSR
  1106  0E41  0A84               	incf	4,f	;increment pointer
  1107  0E42  0604               	xorwf	4,w	;XOR with final address
  1108  0E43  1903               	btfsc	3,2	;have we reached the end yet?
  1109  0E44  3400               	retlw	0	;all done for this memory range, return
  1110  0E45  0604               	xorwf	4,w	;XOR again to restore value
  1111  0E46  2E40               	goto	clrloop0	;do the next byte
  1112                           
  1113                           	psect	cstackBANK1
  1114  00CA                     __pcstackBANK1:	
  1115  00CA                     ??_main:	
  1116                           
  1117                           ; 0 bytes @ 0x0
  1118  00CA                     	ds	3
  1119                           
  1120                           	psect	cstackCOMMON
  1121  0070                     __pcstackCOMMON:	
  1122  0070                     ?_TIMER0_Set:	
  1123  0070                     ?_TIMER0_Init:	
  1124                           ; 0 bytes @ 0x0
  1125                           
  1126  0070                     ?_ADC_Init:	
  1127                           ; 0 bytes @ 0x0
  1128                           
  1129  0070                     ?_PWM_Init:	
  1130                           ; 0 bytes @ 0x0
  1131                           
  1132  0070                     ?_LCD_Init:	
  1133                           ; 0 bytes @ 0x0
  1134                           
  1135  0070                     ?_LCD_Clear:	
  1136                           ; 0 bytes @ 0x0
  1137                           
  1138  0070                     ?_isdigit:	
  1139                           ; 0 bytes @ 0x0
  1140                           
  1141  0070                     ?_ISR:	
  1142                           ; 1 bit 
  1143                           
  1144  0070                     ?_main:	
  1145                           ; 0 bytes @ 0x0
  1146                           
  1147  0070                     ?_USART_WriteChar:	
  1148                           ; 0 bytes @ 0x0
  1149                           
  1150  0070                     ?_LCD_WriteCmd:	
  1151                           ; 0 bytes @ 0x0
  1152                           
  1153  0070                     ?_LCD_WriteData:	
  1154                           ; 0 bytes @ 0x0
  1155                           
  1156  0070                     ?i1_USART_WriteChar:	
  1157                           ; 0 bytes @ 0x0
  1158                           
  1159  0070                     ??i1_USART_WriteChar:	
  1160                           ; 0 bytes @ 0x0
  1161                           
  1162  0070                     ?i1_TIMER0_Set:	
  1163                           ; 0 bytes @ 0x0
  1164                           
  1165  0070                     ??i1_TIMER0_Set:	
  1166                           ; 0 bytes @ 0x0
  1167                           
  1168  0070                     ?i1_PWM_DutyCycle2:	
  1169                           ; 0 bytes @ 0x0
  1170                           
  1171  0070                     ?_USART_ReceiveChar:	
  1172                           ; 0 bytes @ 0x0
  1173                           
  1174  0070                     ?i1___lwdiv:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177  0070                     i1USART_WriteChar@byte:	
  1178                           ; 2 bytes @ 0x0
  1179                           
  1180  0070                     i1TIMER0_Set@contagens:	
  1181                           ; 1 bytes @ 0x0
  1182                           
  1183  0070                     i1PWM_DutyCycle2@valor:	
  1184                           ; 1 bytes @ 0x0
  1185                           
  1186  0070                     i1___lwdiv@divisor:	
  1187                           ; 2 bytes @ 0x0
  1188                           
  1189                           
  1190                           ; 2 bytes @ 0x0
  1191  0070                     	ds	1
  1192  0071                     ?i1_USART_WriteString:	
  1193  0071                     i1USART_WriteString@str:	
  1194                           ; 0 bytes @ 0x1
  1195                           
  1196                           
  1197                           ; 2 bytes @ 0x1
  1198  0071                     	ds	1
  1199  0072                     ??i1_PWM_DutyCycle2:	
  1200  0072                     i1___lwdiv@dividend:	
  1201                           ; 0 bytes @ 0x2
  1202                           
  1203                           
  1204                           ; 2 bytes @ 0x2
  1205  0072                     	ds	1
  1206  0073                     ??_USART_ReceiveChar:	
  1207  0073                     ??i1_USART_WriteString:	
  1208                           ; 0 bytes @ 0x3
  1209                           
  1210                           
  1211                           ; 0 bytes @ 0x3
  1212  0073                     	ds	1
  1213  0074                     ??i1___lwdiv:	
  1214  0074                     USART_ReceiveChar@byte:	
  1215                           ; 0 bytes @ 0x4
  1216                           
  1217                           
  1218                           ; 1 bytes @ 0x4
  1219  0074                     	ds	1
  1220  0075                     i1___lwdiv@quotient:	
  1221                           
  1222                           ; 2 bytes @ 0x5
  1223  0075                     	ds	2
  1224  0077                     i1___lwdiv@counter:	
  1225                           
  1226                           ; 1 bytes @ 0x7
  1227  0077                     	ds	1
  1228  0078                     ?i1___wmul:	
  1229  0078                     i1___wmul@multiplier:	
  1230                           ; 2 bytes @ 0x8
  1231                           
  1232                           
  1233                           ; 2 bytes @ 0x8
  1234  0078                     	ds	2
  1235  007A                     i1___wmul@multiplicand:	
  1236                           
  1237                           ; 2 bytes @ 0xA
  1238  007A                     	ds	2
  1239  007C                     ??i1___wmul:	
  1240  007C                     i1___wmul@product:	
  1241                           ; 0 bytes @ 0xC
  1242                           
  1243                           
  1244                           ; 2 bytes @ 0xC
  1245  007C                     	ds	2
  1246                           
  1247                           	psect	cstackBANK0
  1248  0046                     __pcstackBANK0:	
  1249  0046                     ??_ISR:	
  1250                           
  1251                           ; 0 bytes @ 0x0
  1252  0046                     	ds	4
  1253  004A                     ?_PWM_DutyCycle2:	
  1254  004A                     ??_TIMER0_Set:	
  1255                           ; 0 bytes @ 0x4
  1256                           
  1257  004A                     ??_TIMER0_Init:	
  1258                           ; 0 bytes @ 0x4
  1259                           
  1260  004A                     ??_ADC_Init:	
  1261                           ; 0 bytes @ 0x4
  1262                           
  1263  004A                     ??_PWM_Init:	
  1264                           ; 0 bytes @ 0x4
  1265                           
  1266  004A                     ?_LCD_Cursor:	
  1267                           ; 0 bytes @ 0x4
  1268                           
  1269  004A                     ?_PWM_DutyCycle1:	
  1270                           ; 0 bytes @ 0x4
  1271                           
  1272  004A                     ??_isdigit:	
  1273                           ; 0 bytes @ 0x4
  1274                           
  1275  004A                     ??_USART_WriteChar:	
  1276                           ; 0 bytes @ 0x4
  1277                           
  1278  004A                     ??_LCD_WriteCmd:	
  1279                           ; 0 bytes @ 0x4
  1280                           
  1281  004A                     ??_LCD_WriteData:	
  1282                           ; 0 bytes @ 0x4
  1283                           
  1284  004A                     ?___wmul:	
  1285                           ; 0 bytes @ 0x4
  1286                           
  1287  004A                     ?___lwdiv:	
  1288                           ; 2 bytes @ 0x4
  1289                           
  1290  004A                     ?___aldiv:	
  1291                           ; 2 bytes @ 0x4
  1292                           
  1293  004A                     USART_WriteChar@byte:	
  1294                           ; 4 bytes @ 0x4
  1295                           
  1296  004A                     TIMER0_Set@contagens:	
  1297                           ; 1 bytes @ 0x4
  1298                           
  1299  004A                     LCD_Cursor@Col:	
  1300                           ; 1 bytes @ 0x4
  1301                           
  1302  004A                     _isdigit$1449:	
  1303                           ; 1 bytes @ 0x4
  1304                           
  1305  004A                     PWM_DutyCycle1@valor:	
  1306                           ; 1 bytes @ 0x4
  1307                           
  1308  004A                     PWM_DutyCycle2@valor:	
  1309                           ; 2 bytes @ 0x4
  1310                           
  1311  004A                     ___wmul@multiplier:	
  1312                           ; 2 bytes @ 0x4
  1313                           
  1314  004A                     ___lwdiv@divisor:	
  1315                           ; 2 bytes @ 0x4
  1316                           
  1317  004A                     ___aldiv@divisor:	
  1318                           ; 2 bytes @ 0x4
  1319                           
  1320                           
  1321                           ; 4 bytes @ 0x4
  1322  004A                     	ds	1
  1323  004B                     ?_USART_WriteString:	
  1324  004B                     ??_LCD_Cursor:	
  1325                           ; 0 bytes @ 0x5
  1326                           
  1327  004B                     LCD_WriteCmd@Byte:	
  1328                           ; 0 bytes @ 0x5
  1329                           
  1330  004B                     LCD_WriteData@Byte:	
  1331                           ; 1 bytes @ 0x5
  1332                           
  1333  004B                     isdigit@c:	
  1334                           ; 1 bytes @ 0x5
  1335                           
  1336  004B                     USART_WriteString@str:	
  1337                           ; 1 bytes @ 0x5
  1338                           
  1339                           
  1340                           ; 2 bytes @ 0x5
  1341  004B                     	ds	1
  1342  004C                     ??_PWM_DutyCycle2:	
  1343  004C                     ??_LCD_Init:	
  1344                           ; 0 bytes @ 0x6
  1345                           
  1346  004C                     ?_LCD_WriteString:	
  1347                           ; 0 bytes @ 0x6
  1348                           
  1349  004C                     ??_PWM_DutyCycle1:	
  1350                           ; 0 bytes @ 0x6
  1351                           
  1352  004C                     ??_LCD_Clear:	
  1353                           ; 0 bytes @ 0x6
  1354                           
  1355  004C                     LCD_Cursor@Row:	
  1356                           ; 0 bytes @ 0x6
  1357                           
  1358  004C                     LCD_WriteString@Str:	
  1359                           ; 1 bytes @ 0x6
  1360                           
  1361  004C                     ___wmul@multiplicand:	
  1362                           ; 2 bytes @ 0x6
  1363                           
  1364  004C                     ___lwdiv@dividend:	
  1365                           ; 2 bytes @ 0x6
  1366                           
  1367                           
  1368                           ; 2 bytes @ 0x6
  1369  004C                     	ds	1
  1370  004D                     ??_USART_WriteString:	
  1371                           
  1372                           ; 0 bytes @ 0x7
  1373  004D                     	ds	1
  1374  004E                     ??_LCD_WriteString:	
  1375  004E                     ??___wmul:	
  1376                           ; 0 bytes @ 0x8
  1377                           
  1378  004E                     ??___lwdiv:	
  1379                           ; 0 bytes @ 0x8
  1380                           
  1381  004E                     ___wmul@product:	
  1382                           ; 0 bytes @ 0x8
  1383                           
  1384  004E                     ___aldiv@dividend:	
  1385                           ; 2 bytes @ 0x8
  1386                           
  1387                           
  1388                           ; 4 bytes @ 0x8
  1389  004E                     	ds	1
  1390  004F                     ___lwdiv@quotient:	
  1391                           
  1392                           ; 2 bytes @ 0x9
  1393  004F                     	ds	2
  1394  0051                     ___lwdiv@counter:	
  1395                           
  1396                           ; 1 bytes @ 0xB
  1397  0051                     	ds	1
  1398  0052                     ??___aldiv:	
  1399  0052                     ?___lwmod:	
  1400                           ; 0 bytes @ 0xC
  1401                           
  1402  0052                     ___lwmod@divisor:	
  1403                           ; 2 bytes @ 0xC
  1404                           
  1405                           
  1406                           ; 2 bytes @ 0xC
  1407  0052                     	ds	1
  1408  0053                     ___aldiv@counter:	
  1409                           
  1410                           ; 1 bytes @ 0xD
  1411  0053                     	ds	1
  1412  0054                     ___aldiv@sign:	
  1413  0054                     ___lwmod@dividend:	
  1414                           ; 1 bytes @ 0xE
  1415                           
  1416                           
  1417                           ; 2 bytes @ 0xE
  1418  0054                     	ds	1
  1419  0055                     ___aldiv@quotient:	
  1420                           
  1421                           ; 4 bytes @ 0xF
  1422  0055                     	ds	1
  1423  0056                     ??___lwmod:	
  1424                           
  1425                           ; 0 bytes @ 0x10
  1426  0056                     	ds	1
  1427  0057                     ___lwmod@counter:	
  1428                           
  1429                           ; 1 bytes @ 0x11
  1430  0057                     	ds	1
  1431  0058                     ?_sprintf:	
  1432  0058                     sprintf@f:	
  1433                           ; 2 bytes @ 0x12
  1434                           
  1435                           
  1436                           ; 2 bytes @ 0x12
  1437  0058                     	ds	1
  1438  0059                     ?_USART_Init:	
  1439  0059                     USART_Init@BaudRate:	
  1440                           ; 0 bytes @ 0x13
  1441                           
  1442                           
  1443                           ; 4 bytes @ 0x13
  1444  0059                     	ds	3
  1445  005C                     ??_sprintf:	
  1446                           
  1447                           ; 0 bytes @ 0x16
  1448  005C                     	ds	1
  1449  005D                     ??_USART_Init:	
  1450                           
  1451                           ; 0 bytes @ 0x17
  1452  005D                     	ds	2
  1453  005F                     sprintf@ap:	
  1454                           
  1455                           ; 1 bytes @ 0x19
  1456  005F                     	ds	1
  1457  0060                     sprintf@prec:	
  1458                           
  1459                           ; 1 bytes @ 0x1A
  1460  0060                     	ds	1
  1461  0061                     sprintf@_val:	
  1462                           
  1463                           ; 4 bytes @ 0x1B
  1464  0061                     	ds	4
  1465  0065                     sprintf@flag:	
  1466                           
  1467                           ; 1 bytes @ 0x1F
  1468  0065                     	ds	1
  1469  0066                     sprintf@width:	
  1470                           
  1471                           ; 2 bytes @ 0x20
  1472  0066                     	ds	2
  1473  0068                     sprintf@sp:	
  1474                           
  1475                           ; 1 bytes @ 0x22
  1476  0068                     	ds	1
  1477  0069                     sprintf@c:	
  1478                           
  1479                           ; 1 bytes @ 0x23
  1480  0069                     	ds	1
  1481                           
  1482                           	psect	maintext
  1483  0379                     __pmaintext:	
  1484 ;;
  1485 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1486 ;;
  1487 ;; *************** function _main *****************
  1488 ;; Defined at:
  1489 ;;		line 482 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;		None
  1494 ;; Return value:  Size  Location     Type
  1495 ;;		None               void
  1496 ;; Registers used:
  1497 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1498 ;; Tracked objects:
  1499 ;;		On entry : 17F/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1503 ;;      Params:         0       0       0       0       0
  1504 ;;      Locals:         0       0       0       0       0
  1505 ;;      Temps:          0       0       3       0       0
  1506 ;;      Totals:         0       0       3       0       0
  1507 ;;Total ram usage:        3 bytes
  1508 ;; Hardware stack levels required when called:    6
  1509 ;; This function calls:
  1510 ;;		_ADC_Init
  1511 ;;		_LCD_Clear
  1512 ;;		_LCD_Cursor
  1513 ;;		_LCD_Init
  1514 ;;		_LCD_WriteString
  1515 ;;		_PWM_DutyCycle1
  1516 ;;		_PWM_DutyCycle2
  1517 ;;		_PWM_Init
  1518 ;;		_TIMER0_Init
  1519 ;;		_TIMER0_Set
  1520 ;;		_USART_Init
  1521 ;;		_USART_WriteString
  1522 ;;		_sprintf
  1523 ;; This function is called by:
  1524 ;;		Startup code after reset
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           
  1529                           ;psect for function _main
  1530  0379                     _main:	
  1531                           
  1532                           ;main.c: 484: TRISA = 0b00000001;
  1533                           
  1534                           ;incstack = 0
  1535                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1536  0379  3001               	movlw	1
  1537  037A  1683               	bsf	3,5	;RP0=1, select bank1
  1538  037B  1303               	bcf	3,6	;RP1=0, select bank1
  1539  037C  0085               	movwf	5	;volatile
  1540                           
  1541                           ;main.c: 485: PORTA = 0b00000001;
  1542  037D  3001               	movlw	1
  1543  037E  1283               	bcf	3,5	;RP0=0, select bank0
  1544  037F  1303               	bcf	3,6	;RP1=0, select bank0
  1545  0380  0085               	movwf	5	;volatile
  1546                           
  1547                           ;main.c: 486: TRISB = 0b00000000;
  1548  0381  1683               	bsf	3,5	;RP0=1, select bank1
  1549  0382  1303               	bcf	3,6	;RP1=0, select bank1
  1550  0383  0186               	clrf	6	;volatile
  1551                           
  1552                           ;main.c: 487: PORTB = 0b00000000;
  1553  0384  1283               	bcf	3,5	;RP0=0, select bank0
  1554  0385  1303               	bcf	3,6	;RP1=0, select bank0
  1555  0386  0186               	clrf	6	;volatile
  1556                           
  1557                           ;main.c: 488: TRISC = 0b10000001;
  1558  0387  3081               	movlw	129
  1559  0388  1683               	bsf	3,5	;RP0=1, select bank1
  1560  0389  1303               	bcf	3,6	;RP1=0, select bank1
  1561  038A  0087               	movwf	7	;volatile
  1562                           
  1563                           ;main.c: 489: PORTC = 0b11000000;
  1564  038B  30C0               	movlw	192
  1565  038C  1283               	bcf	3,5	;RP0=0, select bank0
  1566  038D  1303               	bcf	3,6	;RP1=0, select bank0
  1567  038E  0087               	movwf	7	;volatile
  1568                           
  1569                           ;main.c: 490: TRISD = 0b00000000;
  1570  038F  1683               	bsf	3,5	;RP0=1, select bank1
  1571  0390  1303               	bcf	3,6	;RP1=0, select bank1
  1572  0391  0188               	clrf	8	;volatile
  1573                           
  1574                           ;main.c: 491: PORTD = 0b00000000;
  1575  0392  1283               	bcf	3,5	;RP0=0, select bank0
  1576  0393  1303               	bcf	3,6	;RP1=0, select bank0
  1577  0394  0188               	clrf	8	;volatile
  1578                           
  1579                           ;main.c: 492: TRISE = 0b00000000;
  1580  0395  1683               	bsf	3,5	;RP0=1, select bank1
  1581  0396  1303               	bcf	3,6	;RP1=0, select bank1
  1582  0397  0189               	clrf	9	;volatile
  1583                           
  1584                           ;main.c: 493: PORTE = 0b00000000;
  1585  0398  1283               	bcf	3,5	;RP0=0, select bank0
  1586  0399  1303               	bcf	3,6	;RP1=0, select bank0
  1587  039A  0189               	clrf	9	;volatile
  1588                           
  1589                           ;main.c: 496: T1CON = 0x03;
  1590  039B  3003               	movlw	3
  1591  039C  0090               	movwf	16	;volatile
  1592                           
  1593                           ;main.c: 497: TMR1L = 0x00;
  1594  039D  018E               	clrf	14	;volatile
  1595                           
  1596                           ;main.c: 498: TMR1H = 0x00;
  1597  039E  018F               	clrf	15	;volatile
  1598                           
  1599                           ;main.c: 501: USART_Init(115200);
  1600  039F  3000               	movlw	0
  1601  03A0  00DC               	movwf	USART_Init@BaudRate+3
  1602  03A1  3001               	movlw	1
  1603  03A2  00DB               	movwf	USART_Init@BaudRate+2
  1604  03A3  30C2               	movlw	194
  1605  03A4  00DA               	movwf	USART_Init@BaudRate+1
  1606  03A5  3000               	movlw	0
  1607  03A6  00D9               	movwf	USART_Init@BaudRate
  1608  03A7  120A  118A  271F  120A  118A  	fcall	_USART_Init
  1609                           
  1610                           ;main.c: 502: TIMER0_Init();
  1611  03AC  120A  158A  2647  120A  118A  	fcall	_TIMER0_Init
  1612                           
  1613                           ;main.c: 503: ADC_Init();
  1614  03B1  120A  158A  2680  120A  118A  	fcall	_ADC_Init
  1615                           
  1616                           ;main.c: 504: PWM_Init();
  1617  03B6  120A  158A  2744  120A  118A  	fcall	_PWM_Init
  1618                           
  1619                           ;main.c: 505: LCD_Init();
  1620  03BB  120A  118A  26B2  120A  118A  	fcall	_LCD_Init
  1621                           
  1622                           ;main.c: 508: INTCONbits.PEIE = 1;
  1623  03C0  170B               	bsf	11,6	;volatile
  1624                           
  1625                           ;main.c: 509: INTCONbits.GIE = 1;
  1626  03C1  178B               	bsf	11,7	;volatile
  1627                           
  1628                           ;main.c: 512: USART_WriteString("Inicializando o PIC16F877A\n\r");
  1629  03C2  3044               	movlw	low (STR_11| (0+32768))
  1630  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  1631  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  1632  03C5  00CB               	movwf	USART_WriteString@str
  1633  03C6  3085               	movlw	high (STR_11| (0+32768))
  1634  03C7  00CC               	movwf	USART_WriteString@str+1
  1635  03C8  120A  158A  278D  120A  118A  	fcall	_USART_WriteString
  1636                           
  1637                           ;main.c: 513: USART_WriteString("USART: 115.200bps\n\r");
  1638  03CD  3061               	movlw	low (STR_12| (0+32768))
  1639  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  1640  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  1641  03D0  00CB               	movwf	USART_WriteString@str
  1642  03D1  3085               	movlw	high (STR_12| (0+32768))
  1643  03D2  00CC               	movwf	USART_WriteString@str+1
  1644  03D3  120A  158A  278D  120A  118A  	fcall	_USART_WriteString
  1645                           
  1646                           ;main.c: 516: LCD_Init();
  1647  03D8  120A  118A  26B2  120A  118A  	fcall	_LCD_Init
  1648                           
  1649                           ;main.c: 517: LCD_Cursor(0,0);
  1650  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  1651  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  1652  03DF  01CA               	clrf	LCD_Cursor@Col
  1653  03E0  3000               	movlw	0
  1654  03E1  120A  118A  27E8  120A  118A  	fcall	_LCD_Cursor
  1655                           
  1656                           ;main.c: 518: LCD_WriteString("Inicializando...");
  1657  03E6  3075               	movlw	low (STR_13| (0+32768))
  1658  03E7  1283               	bcf	3,5	;RP0=0, select bank0
  1659  03E8  1303               	bcf	3,6	;RP1=0, select bank0
  1660  03E9  00CC               	movwf	LCD_WriteString@Str
  1661  03EA  3085               	movlw	high (STR_13| (0+32768))
  1662  03EB  00CD               	movwf	LCD_WriteString@Str+1
  1663  03EC  120A  158A  2768  120A  118A  	fcall	_LCD_WriteString
  1664                           
  1665                           ;main.c: 521: PWM_DutyCycle1(0);
  1666  03F1  3000               	movlw	0
  1667  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  1668  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  1669  03F4  00CA               	movwf	PWM_DutyCycle1@valor
  1670  03F5  3000               	movlw	0
  1671  03F6  00CB               	movwf	PWM_DutyCycle1@valor+1
  1672  03F7  120A  158A  26C8  120A  118A  	fcall	_PWM_DutyCycle1
  1673                           
  1674                           ;main.c: 522: PWM_DutyCycle2(0);
  1675  03FC  3000               	movlw	0
  1676  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  1677  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  1678  03FF  00CA               	movwf	PWM_DutyCycle2@valor
  1679  0400  3000               	movlw	0
  1680  0401  00CB               	movwf	PWM_DutyCycle2@valor+1
  1681  0402  120A  158A  26E3  120A  118A  	fcall	_PWM_DutyCycle2
  1682                           
  1683                           ;main.c: 525: TIMER0_Set(238);
  1684  0407  30EE               	movlw	238
  1685  0408  120A  118A  24FA  120A  118A  	fcall	_TIMER0_Set
  1686                           
  1687                           ;main.c: 528: _delay((unsigned long)((1000)*(18432000/4000.0)));
  1688  040D  3018               	movlw	24
  1689  040E  1683               	bsf	3,5	;RP0=1, select bank1
  1690  040F  1303               	bcf	3,6	;RP1=0, select bank1
  1691  0410  00CC               	movwf	(??_main^(0+128)+2)
  1692  0411  3061               	movlw	97
  1693  0412  00CB               	movwf	(??_main^(0+128)+1)
  1694  0413  306E               	movlw	110
  1695  0414  00CA               	movwf	??_main^(0+128)
  1696  0415                     u2707:	
  1697  0415  0BCA               	decfsz	??_main^(0+128),f
  1698  0416  2C15               	goto	u2707
  1699  0417  0BCB               	decfsz	(??_main^(0+128)+1),f
  1700  0418  2C15               	goto	u2707
  1701  0419  0BCC               	decfsz	(??_main^(0+128)+2),f
  1702  041A  2C15               	goto	u2707
  1703  041B  0000               	nop
  1704  041C                     l209:	
  1705                           ;main.c: 531: while(1)
  1706                           
  1707                           
  1708                           ;main.c: 532: {
  1709                           ;main.c: 534: sprintf(display_rpm,"%04d", rpm);
  1710  041C  301E               	movlw	low (STR_14| (0+32768))
  1711  041D  1283               	bcf	3,5	;RP0=0, select bank0
  1712  041E  1303               	bcf	3,6	;RP1=0, select bank0
  1713  041F  00D8               	movwf	sprintf@f
  1714  0420  3086               	movlw	high (STR_14| (0+32768))
  1715  0421  00D9               	movwf	sprintf@f+1
  1716  0422  0837               	movf	_rpm+1,w
  1717  0423  01DB               	clrf	?_sprintf+3
  1718  0424  07DB               	addwf	?_sprintf+3,f
  1719  0425  0836               	movf	_rpm,w
  1720  0426  01DA               	clrf	?_sprintf+2
  1721  0427  07DA               	addwf	?_sprintf+2,f
  1722  0428  30C0               	movlw	_display_rpm& (0+255)
  1723  0429  120A  118A  2044  120A  118A  	fcall	_sprintf
  1724                           
  1725                           ;main.c: 535: sprintf(display_pwm,"%04d", pwm);
  1726  042E  301E               	movlw	low (STR_14| (0+32768))
  1727  042F  1283               	bcf	3,5	;RP0=0, select bank0
  1728  0430  1303               	bcf	3,6	;RP1=0, select bank0
  1729  0431  00D8               	movwf	sprintf@f
  1730  0432  3086               	movlw	high (STR_14| (0+32768))
  1731  0433  00D9               	movwf	sprintf@f+1
  1732  0434  0833               	movf	_pwm+1,w
  1733  0435  01DB               	clrf	?_sprintf+3
  1734  0436  07DB               	addwf	?_sprintf+3,f
  1735  0437  0832               	movf	_pwm,w
  1736  0438  01DA               	clrf	?_sprintf+2
  1737  0439  07DA               	addwf	?_sprintf+2,f
  1738  043A  30B6               	movlw	_display_pwm& (0+255)
  1739  043B  120A  118A  2044  120A  118A  	fcall	_sprintf
  1740                           
  1741                           ;main.c: 539: USART_WriteString(display_rpm);
  1742  0440  30C0               	movlw	_display_rpm& (0+255)
  1743  0441  1283               	bcf	3,5	;RP0=0, select bank0
  1744  0442  1303               	bcf	3,6	;RP1=0, select bank0
  1745  0443  00CB               	movwf	USART_WriteString@str
  1746  0444  3000               	movlw	0
  1747  0445  00CC               	movwf	USART_WriteString@str+1
  1748  0446  120A  158A  278D  120A  118A  	fcall	_USART_WriteString
  1749                           
  1750                           ;main.c: 540: USART_WriteString("\n\r");
  1751  044B  3092               	movlw	low ((STR_9+12)| (0+32768))
  1752  044C  1283               	bcf	3,5	;RP0=0, select bank0
  1753  044D  1303               	bcf	3,6	;RP1=0, select bank0
  1754  044E  00CB               	movwf	USART_WriteString@str
  1755  044F  3085               	movlw	high ((STR_9+12)| (0+32768))
  1756  0450  00CC               	movwf	USART_WriteString@str+1
  1757  0451  120A  158A  278D  120A  118A  	fcall	_USART_WriteString
  1758                           
  1759                           ;main.c: 543: LCD_Clear();
  1760  0456  120A  158A  27D7  120A  118A  	fcall	_LCD_Clear
  1761                           
  1762                           ;main.c: 544: LCD_Cursor(0,0);
  1763  045B  1283               	bcf	3,5	;RP0=0, select bank0
  1764  045C  1303               	bcf	3,6	;RP1=0, select bank0
  1765  045D  01CA               	clrf	LCD_Cursor@Col
  1766  045E  3000               	movlw	0
  1767  045F  120A  118A  27E8  120A  118A  	fcall	_LCD_Cursor
  1768                           
  1769                           ;main.c: 545: LCD_WriteString("RPM: ");
  1770  0464  3012               	movlw	low (STR_17| (0+32768))
  1771  0465  1283               	bcf	3,5	;RP0=0, select bank0
  1772  0466  1303               	bcf	3,6	;RP1=0, select bank0
  1773  0467  00CC               	movwf	LCD_WriteString@Str
  1774  0468  3086               	movlw	high (STR_17| (0+32768))
  1775  0469  00CD               	movwf	LCD_WriteString@Str+1
  1776  046A  120A  158A  2768  120A  118A  	fcall	_LCD_WriteString
  1777                           
  1778                           ;main.c: 546: LCD_Cursor(0,6);
  1779  046F  3006               	movlw	6
  1780  0470  1683               	bsf	3,5	;RP0=1, select bank1
  1781  0471  1303               	bcf	3,6	;RP1=0, select bank1
  1782  0472  00CA               	movwf	??_main^(0+128)
  1783  0473  084A               	movf	??_main^(0+128),w
  1784  0474  1283               	bcf	3,5	;RP0=0, select bank0
  1785  0475  1303               	bcf	3,6	;RP1=0, select bank0
  1786  0476  00CA               	movwf	LCD_Cursor@Col
  1787  0477  3000               	movlw	0
  1788  0478  120A  118A  27E8  120A  118A  	fcall	_LCD_Cursor
  1789                           
  1790                           ;main.c: 547: LCD_WriteString(display_rpm);
  1791  047D  30C0               	movlw	_display_rpm& (0+255)
  1792  047E  1283               	bcf	3,5	;RP0=0, select bank0
  1793  047F  1303               	bcf	3,6	;RP1=0, select bank0
  1794  0480  00CC               	movwf	LCD_WriteString@Str
  1795  0481  3000               	movlw	0
  1796  0482  00CD               	movwf	LCD_WriteString@Str+1
  1797  0483  120A  158A  2768  120A  118A  	fcall	_LCD_WriteString
  1798                           
  1799                           ;main.c: 548: LCD_Cursor(1,0);
  1800  0488  1283               	bcf	3,5	;RP0=0, select bank0
  1801  0489  1303               	bcf	3,6	;RP1=0, select bank0
  1802  048A  01CA               	clrf	LCD_Cursor@Col
  1803  048B  3001               	movlw	1
  1804  048C  120A  118A  27E8  120A  118A  	fcall	_LCD_Cursor
  1805                           
  1806                           ;main.c: 549: LCD_WriteString("PWM: ");
  1807  0491  3018               	movlw	low (STR_18| (0+32768))
  1808  0492  1283               	bcf	3,5	;RP0=0, select bank0
  1809  0493  1303               	bcf	3,6	;RP1=0, select bank0
  1810  0494  00CC               	movwf	LCD_WriteString@Str
  1811  0495  3086               	movlw	high (STR_18| (0+32768))
  1812  0496  00CD               	movwf	LCD_WriteString@Str+1
  1813  0497  120A  158A  2768  120A  118A  	fcall	_LCD_WriteString
  1814                           
  1815                           ;main.c: 550: LCD_Cursor(1,6);
  1816  049C  3006               	movlw	6
  1817  049D  1683               	bsf	3,5	;RP0=1, select bank1
  1818  049E  1303               	bcf	3,6	;RP1=0, select bank1
  1819  049F  00CA               	movwf	??_main^(0+128)
  1820  04A0  084A               	movf	??_main^(0+128),w
  1821  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  1822  04A2  1303               	bcf	3,6	;RP1=0, select bank0
  1823  04A3  00CA               	movwf	LCD_Cursor@Col
  1824  04A4  3001               	movlw	1
  1825  04A5  120A  118A  27E8  120A  118A  	fcall	_LCD_Cursor
  1826                           
  1827                           ;main.c: 551: LCD_WriteString(display_pwm);
  1828  04AA  30B6               	movlw	_display_pwm& (0+255)
  1829  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  1830  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  1831  04AD  00CC               	movwf	LCD_WriteString@Str
  1832  04AE  3000               	movlw	0
  1833  04AF  00CD               	movwf	LCD_WriteString@Str+1
  1834  04B0  120A  158A  2768  120A  118A  	fcall	_LCD_WriteString
  1835                           
  1836                           ;main.c: 553: _delay((unsigned long)((200)*(18432000/4000.0)));
  1837  04B5  3005               	movlw	5
  1838  04B6  1683               	bsf	3,5	;RP0=1, select bank1
  1839  04B7  1303               	bcf	3,6	;RP1=0, select bank1
  1840  04B8  00CC               	movwf	(??_main^(0+128)+2)
  1841  04B9  30AD               	movlw	173
  1842  04BA  00CB               	movwf	(??_main^(0+128)+1)
  1843  04BB  30E0               	movlw	224
  1844  04BC  00CA               	movwf	??_main^(0+128)
  1845  04BD                     u2717:	
  1846  04BD  0BCA               	decfsz	??_main^(0+128),f
  1847  04BE  2CBD               	goto	u2717
  1848  04BF  0BCB               	decfsz	(??_main^(0+128)+1),f
  1849  04C0  2CBD               	goto	u2717
  1850  04C1  0BCC               	decfsz	(??_main^(0+128)+2),f
  1851  04C2  2CBD               	goto	u2717
  1852  04C3  2C1C               	goto	l209
  1853  04C4                     __end_of_main:	
  1854                           
  1855                           	psect	text1
  1856  0044                     __ptext1:	
  1857 ;; *************** function _sprintf *****************
  1858 ;; Defined at:
  1859 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;  sp              1    wreg     PTR unsigned char 
  1862 ;;		 -> display_pwm(10), display_rpm(10), 
  1863 ;;  f               2   18[BANK0 ] PTR const unsigned char 
  1864 ;;		 -> STR_15(5), STR_14(5), 
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;  sp              1   34[BANK0 ] PTR unsigned char 
  1867 ;;		 -> display_pwm(10), display_rpm(10), 
  1868 ;;  _val            4   27[BANK0 ] struct .
  1869 ;;  width           2   32[BANK0 ] int 
  1870 ;;  c               1   35[BANK0 ] char 
  1871 ;;  flag            1   31[BANK0 ] unsigned char 
  1872 ;;  prec            1   26[BANK0 ] char 
  1873 ;;  ap              1   25[BANK0 ] PTR void [1]
  1874 ;;		 -> ?_sprintf(2), 
  1875 ;; Return value:  Size  Location     Type
  1876 ;;                  2   18[BANK0 ] int 
  1877 ;; Registers used:
  1878 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1879 ;; Tracked objects:
  1880 ;;		On entry : 0/0
  1881 ;;		On exit  : 0/0
  1882 ;;		Unchanged: 0/0
  1883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1884 ;;      Params:         0       4       0       0       0
  1885 ;;      Locals:         0      11       0       0       0
  1886 ;;      Temps:          0       3       0       0       0
  1887 ;;      Totals:         0      18       0       0       0
  1888 ;;Total ram usage:       18 bytes
  1889 ;; Hardware stack levels used:    1
  1890 ;; Hardware stack levels required when called:    5
  1891 ;; This function calls:
  1892 ;;		___lwdiv
  1893 ;;		___lwmod
  1894 ;;		___wmul
  1895 ;;		_isdigit
  1896 ;; This function is called by:
  1897 ;;		_main
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           
  1902                           ;psect for function _sprintf
  1903  0044                     _sprintf:	
  1904                           
  1905                           ;incstack = 0
  1906                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1907                           ;sprintf@sp stored from wreg
  1908  0044  1283               	bcf	3,5	;RP0=0, select bank0
  1909  0045  1303               	bcf	3,6	;RP1=0, select bank0
  1910  0046  00E8               	movwf	sprintf@sp
  1911                           
  1912                           ;doprnt.c: 494: va_list ap;
  1913                           ;doprnt.c: 499: signed char c;
  1914                           ;doprnt.c: 501: int width;
  1915                           ;doprnt.c: 506: signed char prec;
  1916                           ;doprnt.c: 508: unsigned char flag;
  1917                           ;doprnt.c: 527: union {
  1918                           ;doprnt.c: 528: unsigned int _val;
  1919                           ;doprnt.c: 529: struct {
  1920                           ;doprnt.c: 530: const char * _cp;
  1921                           ;doprnt.c: 531: unsigned _len;
  1922                           ;doprnt.c: 532: } _str;
  1923                           ;doprnt.c: 533: } _val;
  1924                           ;doprnt.c: 542: *ap = __va_start();
  1925  0047  305A               	movlw	(?_sprintf+2)& (0+255)
  1926  0048  00DC               	movwf	??_sprintf
  1927  0049  085C               	movf	??_sprintf,w
  1928  004A  00DF               	movwf	sprintf@ap
  1929  004B                     l2399:	
  1930                           ;doprnt.c: 545: while(c = *f++) {
  1931                           
  1932  004B  1283               	bcf	3,5	;RP0=0, select bank0
  1933  004C  1303               	bcf	3,6	;RP1=0, select bank0
  1934  004D  0859               	movf	sprintf@f+1,w
  1935  004E  00DD               	movwf	??_sprintf+1
  1936  004F  0858               	movf	sprintf@f,w
  1937  0050  00DC               	movwf	??_sprintf
  1938  0051  0AD8               	incf	sprintf@f,f
  1939  0052  1903               	skipnz
  1940  0053  0AD9               	incf	sprintf@f+1,f
  1941  0054  085D               	movf	??_sprintf+1,w
  1942  0055  00FF               	movwf	127
  1943  0056  085C               	movf	??_sprintf,w
  1944  0057  0084               	movwf	4
  1945  0058  120A  118A  2500  120A  118A  	fcall	stringtab
  1946  005D  00DE               	movwf	??_sprintf+2
  1947  005E  085E               	movf	??_sprintf+2,w
  1948  005F  00E9               	movwf	sprintf@c
  1949  0060  08E9               	movf	sprintf@c,f
  1950  0061  1903               	btfsc	3,2
  1951  0062  2A10               	goto	l2401
  1952                           
  1953                           ;doprnt.c: 547: if(c != '%')
  1954  0063  0869               	movf	sprintf@c,w
  1955  0064  3A25               	xorlw	37
  1956  0065  1903               	skipnz
  1957  0066  2873               	goto	l2305
  1958                           
  1959                           ;doprnt.c: 549: {
  1960                           ;doprnt.c: 550: ((*sp++ = (c)));
  1961  0067  0869               	movf	sprintf@c,w
  1962  0068  00DC               	movwf	??_sprintf
  1963  0069  0868               	movf	sprintf@sp,w
  1964  006A  0084               	movwf	4
  1965  006B  085C               	movf	??_sprintf,w
  1966  006C  1383               	bcf	3,7	;select IRP bank0
  1967  006D  0080               	movwf	0
  1968  006E  3001               	movlw	1
  1969  006F  00DC               	movwf	??_sprintf
  1970  0070  085C               	movf	??_sprintf,w
  1971  0071  07E8               	addwf	sprintf@sp,f
  1972                           
  1973                           ;doprnt.c: 551: continue;
  1974  0072  284B               	goto	l2399
  1975  0073                     l2305:	
  1976                           
  1977                           ;doprnt.c: 552: }
  1978                           ;doprnt.c: 555: width = 0;
  1979  0073  01E6               	clrf	sprintf@width
  1980  0074  01E7               	clrf	sprintf@width+1
  1981                           
  1982                           ;doprnt.c: 557: flag = 0;
  1983  0075  01E5               	clrf	sprintf@flag
  1984                           
  1985                           ;doprnt.c: 560: switch(*f) {
  1986                           
  1987                           ;doprnt.c: 559: for(;;) {
  1988  0076  287C               	goto	l2309
  1989  0077                     l486:	
  1990                           ;doprnt.c: 588: case '0':
  1991                           
  1992                           
  1993                           ;doprnt.c: 589: flag |= 0x04;
  1994  0077  1565               	bsf	sprintf@flag,2
  1995                           
  1996                           ;doprnt.c: 590: f++;
  1997  0078  3001               	movlw	1
  1998  0079  07D8               	addwf	sprintf@f,f
  1999  007A  1803               	skipnc
  2000  007B  0AD9               	incf	sprintf@f+1,f
  2001  007C                     l2309:	
  2002                           ;doprnt.c: 593: }
  2003                           
  2004                           ;doprnt.c: 591: continue;
  2005                           
  2006  007C  0859               	movf	sprintf@f+1,w
  2007  007D  00FF               	movwf	127
  2008  007E  0858               	movf	sprintf@f,w
  2009  007F  0084               	movwf	4
  2010  0080  120A  118A  2500  120A  118A  	fcall	stringtab
  2011                           
  2012                           ; Switch size 1, requested type "space"
  2013                           ; Number of cases is 1, Range of values is 48 to 48
  2014                           ; switch strategies available:
  2015                           ; Name         Instructions Cycles
  2016                           ; simple_byte            4     3 (average)
  2017                           ; direct_byte           14    11 (fixed)
  2018                           ; jumptable            263     9 (fixed)
  2019                           ;	Chosen strategy is simple_byte
  2020  0085  3A30               	xorlw	48	; case 48
  2021  0086  1903               	skipnz
  2022  0087  2877               	goto	l486
  2023  0088  2889               	goto	l2311
  2024  0089                     l2311:	
  2025                           ;doprnt.c: 595: }
  2026                           
  2027                           ;doprnt.c: 594: break;
  2028                           
  2029                           
  2030                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2031  0089  0859               	movf	sprintf@f+1,w
  2032  008A  00FF               	movwf	127
  2033  008B  0858               	movf	sprintf@f,w
  2034  008C  0084               	movwf	4
  2035  008D  120A  118A  2500  120A  118A  	fcall	stringtab
  2036  0092  120A  158A  2670  120A  118A  	fcall	_isdigit
  2037  0097  1C03               	btfss	3,0
  2038  0098  28DF               	goto	l2325
  2039                           
  2040                           ;doprnt.c: 607: width = 0;
  2041  0099  1283               	bcf	3,5	;RP0=0, select bank0
  2042  009A  1303               	bcf	3,6	;RP1=0, select bank0
  2043  009B  01E6               	clrf	sprintf@width
  2044  009C  01E7               	clrf	sprintf@width+1
  2045  009D                     l2315:	
  2046                           ;doprnt.c: 608: do {
  2047                           
  2048                           
  2049                           ;doprnt.c: 609: width *= 10;
  2050  009D  300A               	movlw	10
  2051  009E  1283               	bcf	3,5	;RP0=0, select bank0
  2052  009F  1303               	bcf	3,6	;RP1=0, select bank0
  2053  00A0  00CA               	movwf	___wmul@multiplier
  2054  00A1  3000               	movlw	0
  2055  00A2  00CB               	movwf	___wmul@multiplier+1
  2056  00A3  0867               	movf	sprintf@width+1,w
  2057  00A4  01CD               	clrf	___wmul@multiplicand+1
  2058  00A5  07CD               	addwf	___wmul@multiplicand+1,f
  2059  00A6  0866               	movf	sprintf@width,w
  2060  00A7  01CC               	clrf	___wmul@multiplicand
  2061  00A8  07CC               	addwf	___wmul@multiplicand,f
  2062  00A9  120A  158A  27B2  120A  118A  	fcall	___wmul
  2063  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  2064  00AF  1303               	bcf	3,6	;RP1=0, select bank0
  2065  00B0  084B               	movf	?___wmul+1,w
  2066  00B1  01E7               	clrf	sprintf@width+1
  2067  00B2  07E7               	addwf	sprintf@width+1,f
  2068  00B3  084A               	movf	?___wmul,w
  2069  00B4  01E6               	clrf	sprintf@width
  2070  00B5  07E6               	addwf	sprintf@width,f
  2071                           
  2072                           ;doprnt.c: 610: width += *f++ - '0';
  2073  00B6  0859               	movf	sprintf@f+1,w
  2074  00B7  00FF               	movwf	127
  2075  00B8  0858               	movf	sprintf@f,w
  2076  00B9  0084               	movwf	4
  2077  00BA  120A  118A  2500  120A  118A  	fcall	stringtab
  2078  00BF  3ED0               	addlw	208
  2079  00C0  00DC               	movwf	??_sprintf
  2080  00C1  30FF               	movlw	255
  2081  00C2  1803               	skipnc
  2082  00C3  3000               	movlw	0
  2083  00C4  00DD               	movwf	??_sprintf+1
  2084  00C5  085C               	movf	??_sprintf,w
  2085  00C6  07E6               	addwf	sprintf@width,f
  2086  00C7  1803               	skipnc
  2087  00C8  0AE7               	incf	sprintf@width+1,f
  2088  00C9  085D               	movf	??_sprintf+1,w
  2089  00CA  07E7               	addwf	sprintf@width+1,f
  2090  00CB  3001               	movlw	1
  2091  00CC  07D8               	addwf	sprintf@f,f
  2092  00CD  1803               	skipnc
  2093  00CE  0AD9               	incf	sprintf@f+1,f
  2094                           
  2095                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2096  00CF  0859               	movf	sprintf@f+1,w
  2097  00D0  00FF               	movwf	127
  2098  00D1  0858               	movf	sprintf@f,w
  2099  00D2  0084               	movwf	4
  2100  00D3  120A  118A  2500  120A  118A  	fcall	stringtab
  2101  00D8  120A  158A  2670  120A  118A  	fcall	_isdigit
  2102  00DD  1803               	btfsc	3,0
  2103  00DE  289D               	goto	l2315
  2104  00DF                     l2325:	
  2105                           ;doprnt.c: 831: }
  2106                           
  2107                           ;doprnt.c: 822: continue;
  2108                           
  2109                           ;doprnt.c: 811: default:
  2110                           
  2111                           ;doprnt.c: 707: case 'i':
  2112                           ;doprnt.c: 708: break;
  2113                           
  2114                           ;doprnt.c: 706: case 'd':
  2115                           
  2116                           ;doprnt.c: 647: goto alldone;
  2117                           
  2118                           ;doprnt.c: 646: case 0:
  2119                           
  2120                           ;doprnt.c: 617: }
  2121                           ;doprnt.c: 644: switch(c = *f++) {
  2122                           
  2123  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  2124  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  2125  00E1  0859               	movf	sprintf@f+1,w
  2126  00E2  00DD               	movwf	??_sprintf+1
  2127  00E3  0858               	movf	sprintf@f,w
  2128  00E4  00DC               	movwf	??_sprintf
  2129  00E5  0AD8               	incf	sprintf@f,f
  2130  00E6  1903               	skipnz
  2131  00E7  0AD9               	incf	sprintf@f+1,f
  2132  00E8  085D               	movf	??_sprintf+1,w
  2133  00E9  00FF               	movwf	127
  2134  00EA  085C               	movf	??_sprintf,w
  2135  00EB  0084               	movwf	4
  2136  00EC  120A  118A  2500  120A  118A  	fcall	stringtab
  2137  00F1  00E9               	movwf	sprintf@c
  2138                           
  2139                           ; Switch size 1, requested type "space"
  2140                           ; Number of cases is 3, Range of values is 0 to 105
  2141                           ; switch strategies available:
  2142                           ; Name         Instructions Cycles
  2143                           ; simple_byte           10     6 (average)
  2144                           ; jumptable            260     6 (fixed)
  2145                           ;	Chosen strategy is simple_byte
  2146  00F2  3A00               	xorlw	0	; case 0
  2147  00F3  1903               	skipnz
  2148  00F4  2A10               	goto	l2401
  2149  00F5  3A64               	xorlw	100	; case 100
  2150  00F6  1903               	skipnz
  2151  00F7  28FC               	goto	l2327
  2152  00F8  3A0D               	xorlw	13	; case 105
  2153  00F9  1903               	skipnz
  2154  00FA  28FC               	goto	l2327
  2155  00FB  284B               	goto	l2399
  2156  00FC                     l2327:	
  2157                           
  2158                           ;doprnt.c: 1262: {
  2159                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2160  00FC  1283               	bcf	3,5	;RP0=0, select bank0
  2161  00FD  1303               	bcf	3,6	;RP1=0, select bank0
  2162  00FE  085F               	movf	sprintf@ap,w
  2163  00FF  0084               	movwf	4
  2164  0100  1383               	bcf	3,7	;select IRP bank0
  2165  0101  0800               	movf	0,w
  2166  0102  00E1               	movwf	sprintf@_val
  2167  0103  0A84               	incf	4,f
  2168  0104  0800               	movf	0,w
  2169  0105  00E2               	movwf	sprintf@_val+1
  2170  0106  3002               	movlw	2
  2171  0107  00DC               	movwf	??_sprintf
  2172  0108  085C               	movf	??_sprintf,w
  2173  0109  07DF               	addwf	sprintf@ap,f
  2174                           
  2175                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  2176  010A  1FE2               	btfss	sprintf@_val+1,7
  2177  010B  2915               	goto	l2337
  2178                           
  2179                           ;doprnt.c: 1271: flag |= 0x03;
  2180  010C  3003               	movlw	3
  2181  010D  00DC               	movwf	??_sprintf
  2182  010E  085C               	movf	??_sprintf,w
  2183  010F  04E5               	iorwf	sprintf@flag,f
  2184                           
  2185                           ;doprnt.c: 1272: _val._val = -_val._val;
  2186  0110  09E1               	comf	sprintf@_val,f
  2187  0111  09E2               	comf	sprintf@_val+1,f
  2188  0112  0AE1               	incf	sprintf@_val,f
  2189  0113  1903               	skipnz
  2190  0114  0AE2               	incf	sprintf@_val+1,f
  2191  0115                     l2337:	
  2192                           
  2193                           ;doprnt.c: 1273: }
  2194                           ;doprnt.c: 1275: }
  2195                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2196  0115  01E9               	clrf	sprintf@c
  2197  0116  0AE9               	incf	sprintf@c,f
  2198  0117  0869               	movf	sprintf@c,w
  2199  0118  3A05               	xorlw	5
  2200  0119  1903               	btfsc	3,2
  2201  011A  2940               	goto	l2349
  2202  011B                     l2341:	
  2203                           
  2204                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2205  011B  0869               	movf	sprintf@c,w
  2206  011C  00DC               	movwf	??_sprintf
  2207  011D  075C               	addwf	??_sprintf,w
  2208  011E  3E12               	addlw	low (_dpowers| (0+32768))
  2209  011F  0084               	movwf	4
  2210  0120  3085               	movlw	high (_dpowers| (0+32768))
  2211  0121  1803               	skipnc
  2212  0122  3E01               	addlw	1
  2213  0123  00FF               	movwf	127
  2214  0124  120A  118A  2500  120A  118A  	fcall	stringtab
  2215  0129  00DD               	movwf	??_sprintf+1
  2216  012A  120A  118A  2500  120A  118A  	fcall	stringtab
  2217  012F  00DE               	movwf	??_sprintf+2
  2218  0130  085E               	movf	??_sprintf+2,w
  2219  0131  0262               	subwf	sprintf@_val+1,w
  2220  0132  1D03               	skipz
  2221  0133  2936               	goto	u1935
  2222  0134  085D               	movf	??_sprintf+1,w
  2223  0135  0261               	subwf	sprintf@_val,w
  2224  0136                     u1935:	
  2225  0136  1C03               	btfss	3,0
  2226  0137  2940               	goto	l2349
  2227                           
  2228                           ;doprnt.c: 1316: break;
  2229  0138  3001               	movlw	1
  2230  0139  00DC               	movwf	??_sprintf
  2231  013A  085C               	movf	??_sprintf,w
  2232  013B  07E9               	addwf	sprintf@c,f
  2233  013C  0869               	movf	sprintf@c,w
  2234  013D  3A05               	xorlw	5
  2235  013E  1D03               	skipz
  2236  013F  291B               	goto	l2341
  2237  0140                     l2349:	
  2238                           
  2239                           ;doprnt.c: 1354: if(width && flag & 0x03)
  2240  0140  0867               	movf	sprintf@width+1,w
  2241  0141  0466               	iorwf	sprintf@width,w
  2242  0142  1903               	skipnz
  2243  0143  294E               	goto	l504
  2244  0144  0865               	movf	sprintf@flag,w
  2245  0145  3903               	andlw	3
  2246  0146  1903               	btfsc	3,2
  2247  0147  294E               	goto	l504
  2248                           
  2249                           ;doprnt.c: 1355: width--;
  2250  0148  30FF               	movlw	255
  2251  0149  07E6               	addwf	sprintf@width,f
  2252  014A  1803               	skipnc
  2253  014B  0AE7               	incf	sprintf@width+1,f
  2254  014C  30FF               	movlw	255
  2255  014D  07E7               	addwf	sprintf@width+1,f
  2256  014E                     l504:	
  2257                           
  2258                           ;doprnt.c: 1390: if(width > c)
  2259  014E  0869               	movf	sprintf@c,w
  2260  014F  00DC               	movwf	??_sprintf
  2261  0150  01DD               	clrf	??_sprintf+1
  2262  0151  1BDC               	btfsc	??_sprintf,7
  2263  0152  03DD               	decf	??_sprintf+1,f
  2264  0153  085D               	movf	??_sprintf+1,w
  2265  0154  3A80               	xorlw	128
  2266  0155  00DE               	movwf	??_sprintf+2
  2267  0156  0867               	movf	sprintf@width+1,w
  2268  0157  3A80               	xorlw	128
  2269  0158  025E               	subwf	??_sprintf+2,w
  2270  0159  1D03               	skipz
  2271  015A  295D               	goto	u1975
  2272  015B  0866               	movf	sprintf@width,w
  2273  015C  025C               	subwf	??_sprintf,w
  2274  015D                     u1975:	
  2275  015D  1803               	skipnc
  2276  015E  296D               	goto	l2357
  2277                           
  2278                           ;doprnt.c: 1391: width -= c;
  2279  015F  1283               	bcf	3,5	;RP0=0, select bank0
  2280  0160  1303               	bcf	3,6	;RP1=0, select bank0
  2281  0161  0869               	movf	sprintf@c,w
  2282  0162  00DC               	movwf	??_sprintf
  2283  0163  01DD               	clrf	??_sprintf+1
  2284  0164  1BDC               	btfsc	??_sprintf,7
  2285  0165  03DD               	decf	??_sprintf+1,f
  2286  0166  085C               	movf	??_sprintf,w
  2287  0167  02E6               	subwf	sprintf@width,f
  2288  0168  085D               	movf	??_sprintf+1,w
  2289  0169  1C03               	skipc
  2290  016A  03E7               	decf	sprintf@width+1,f
  2291  016B  02E7               	subwf	sprintf@width+1,f
  2292  016C  2971               	goto	l2359
  2293  016D                     l2357:	
  2294                           
  2295                           ;doprnt.c: 1392: else
  2296                           ;doprnt.c: 1393: width = 0;
  2297  016D  1283               	bcf	3,5	;RP0=0, select bank0
  2298  016E  1303               	bcf	3,6	;RP1=0, select bank0
  2299  016F  01E6               	clrf	sprintf@width
  2300  0170  01E7               	clrf	sprintf@width+1
  2301  0171                     l2359:	
  2302                           
  2303                           ;doprnt.c: 1396: if(flag & 0x04) {
  2304  0171  1D65               	btfss	sprintf@flag,2
  2305  0172  2998               	goto	l2375
  2306                           
  2307                           ;doprnt.c: 1401: if(flag & 0x03)
  2308  0173  0865               	movf	sprintf@flag,w
  2309  0174  3903               	andlw	3
  2310  0175  1903               	btfsc	3,2
  2311  0176  2982               	goto	l2367
  2312                           
  2313                           ;doprnt.c: 1402: ((*sp++ = ('-')));
  2314  0177  302D               	movlw	45
  2315  0178  00DC               	movwf	??_sprintf
  2316  0179  0868               	movf	sprintf@sp,w
  2317  017A  0084               	movwf	4
  2318  017B  085C               	movf	??_sprintf,w
  2319  017C  1383               	bcf	3,7	;select IRP bank0
  2320  017D  0080               	movwf	0
  2321  017E  3001               	movlw	1
  2322  017F  00DC               	movwf	??_sprintf
  2323  0180  085C               	movf	??_sprintf,w
  2324  0181  07E8               	addwf	sprintf@sp,f
  2325  0182                     l2367:	
  2326                           
  2327                           ;doprnt.c: 1424: if(width)
  2328  0182  0867               	movf	sprintf@width+1,w
  2329  0183  0466               	iorwf	sprintf@width,w
  2330  0184  1903               	skipnz
  2331  0185  29C0               	goto	l2389
  2332                           
  2333                           ;doprnt.c: 1426: ((*sp++ = ('0')));
  2334                           
  2335                           ;doprnt.c: 1425: do
  2336  0186  3030               	movlw	48
  2337  0187  00DC               	movwf	??_sprintf
  2338  0188  0868               	movf	sprintf@sp,w
  2339  0189  0084               	movwf	4
  2340  018A  085C               	movf	??_sprintf,w
  2341  018B  1383               	bcf	3,7	;select IRP bank0
  2342  018C  0080               	movwf	0
  2343  018D  3001               	movlw	1
  2344  018E  00DC               	movwf	??_sprintf
  2345  018F  085C               	movf	??_sprintf,w
  2346  0190  07E8               	addwf	sprintf@sp,f
  2347                           
  2348                           ;doprnt.c: 1427: while(--width);
  2349  0191  30FF               	movlw	255
  2350  0192  07E6               	addwf	sprintf@width,f
  2351  0193  1803               	skipnc
  2352  0194  0AE7               	incf	sprintf@width+1,f
  2353  0195  30FF               	movlw	255
  2354  0196  07E7               	addwf	sprintf@width+1,f
  2355  0197  2982               	goto	l2367
  2356  0198                     l2375:	
  2357                           ;doprnt.c: 1429: } else
  2358                           
  2359                           
  2360                           ;doprnt.c: 1431: {
  2361                           ;doprnt.c: 1433: if(width
  2362                           ;doprnt.c: 1437: )
  2363  0198  0867               	movf	sprintf@width+1,w
  2364  0199  0466               	iorwf	sprintf@width,w
  2365  019A  1903               	skipnz
  2366  019B  29B1               	goto	l2383
  2367  019C                     l2377:	
  2368                           ;doprnt.c: 1438: do
  2369                           
  2370                           
  2371                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  2372  019C  3020               	movlw	32
  2373  019D  00DC               	movwf	??_sprintf
  2374  019E  0868               	movf	sprintf@sp,w
  2375  019F  0084               	movwf	4
  2376  01A0  085C               	movf	??_sprintf,w
  2377  01A1  1383               	bcf	3,7	;select IRP bank0
  2378  01A2  0080               	movwf	0
  2379  01A3  3001               	movlw	1
  2380  01A4  00DC               	movwf	??_sprintf
  2381  01A5  085C               	movf	??_sprintf,w
  2382  01A6  07E8               	addwf	sprintf@sp,f
  2383                           
  2384                           ;doprnt.c: 1440: while(--width);
  2385  01A7  30FF               	movlw	255
  2386  01A8  07E6               	addwf	sprintf@width,f
  2387  01A9  1803               	skipnc
  2388  01AA  0AE7               	incf	sprintf@width+1,f
  2389  01AB  30FF               	movlw	255
  2390  01AC  07E7               	addwf	sprintf@width+1,f
  2391  01AD  0867               	movf	sprintf@width+1,w
  2392  01AE  0466               	iorwf	sprintf@width,w
  2393  01AF  1D03               	skipz
  2394  01B0  299C               	goto	l2377
  2395  01B1                     l2383:	
  2396                           
  2397                           ;doprnt.c: 1447: if(flag & 0x03)
  2398  01B1  0865               	movf	sprintf@flag,w
  2399  01B2  3903               	andlw	3
  2400  01B3  1903               	btfsc	3,2
  2401  01B4  29C0               	goto	l2389
  2402                           
  2403                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2404  01B5  302D               	movlw	45
  2405  01B6  00DC               	movwf	??_sprintf
  2406  01B7  0868               	movf	sprintf@sp,w
  2407  01B8  0084               	movwf	4
  2408  01B9  085C               	movf	??_sprintf,w
  2409  01BA  1383               	bcf	3,7	;select IRP bank0
  2410  01BB  0080               	movwf	0
  2411  01BC  3001               	movlw	1
  2412  01BD  00DC               	movwf	??_sprintf
  2413  01BE  085C               	movf	??_sprintf,w
  2414  01BF  07E8               	addwf	sprintf@sp,f
  2415  01C0                     l2389:	
  2416                           
  2417                           ;doprnt.c: 1478: }
  2418                           ;doprnt.c: 1481: prec = c;
  2419  01C0  0869               	movf	sprintf@c,w
  2420  01C1  00DC               	movwf	??_sprintf
  2421  01C2  085C               	movf	??_sprintf,w
  2422  01C3  00E0               	movwf	sprintf@prec
  2423  01C4                     l2397:	
  2424                           ;doprnt.c: 1483: while(prec--) {
  2425                           
  2426  01C4  30FF               	movlw	-1
  2427  01C5  00DC               	movwf	??_sprintf
  2428  01C6  085C               	movf	??_sprintf,w
  2429  01C7  07E0               	addwf	sprintf@prec,f
  2430  01C8  0860               	movf	sprintf@prec,w
  2431  01C9  3AFF               	xorlw	-1
  2432  01CA  1903               	btfsc	3,2
  2433  01CB  284B               	goto	l2399
  2434                           
  2435                           ;doprnt.c: 1487: {
  2436                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2437  01CC  300A               	movlw	10
  2438  01CD  00D2               	movwf	___lwmod@divisor
  2439  01CE  3000               	movlw	0
  2440  01CF  00D3               	movwf	___lwmod@divisor+1
  2441  01D0  0860               	movf	sprintf@prec,w
  2442  01D1  00DC               	movwf	??_sprintf
  2443  01D2  075C               	addwf	??_sprintf,w
  2444  01D3  3E12               	addlw	low (_dpowers| (0+32768))
  2445  01D4  0084               	movwf	4
  2446  01D5  3085               	movlw	high (_dpowers| (0+32768))
  2447  01D6  1803               	skipnc
  2448  01D7  3E01               	addlw	1
  2449  01D8  00FF               	movwf	127
  2450  01D9  120A  118A  2500  120A  118A  	fcall	stringtab
  2451  01DE  00CA               	movwf	___lwdiv@divisor
  2452  01DF  120A  118A  2500  120A  118A  	fcall	stringtab
  2453  01E4  00CB               	movwf	___lwdiv@divisor+1
  2454  01E5  0862               	movf	sprintf@_val+1,w
  2455  01E6  01CD               	clrf	___lwdiv@dividend+1
  2456  01E7  07CD               	addwf	___lwdiv@dividend+1,f
  2457  01E8  0861               	movf	sprintf@_val,w
  2458  01E9  01CC               	clrf	___lwdiv@dividend
  2459  01EA  07CC               	addwf	___lwdiv@dividend,f
  2460  01EB  120A  118A  276A  120A  118A  	fcall	___lwdiv
  2461  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  2462  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  2463  01F2  084B               	movf	?___lwdiv+1,w
  2464  01F3  01D5               	clrf	___lwmod@dividend+1
  2465  01F4  07D5               	addwf	___lwmod@dividend+1,f
  2466  01F5  084A               	movf	?___lwdiv,w
  2467  01F6  01D4               	clrf	___lwmod@dividend
  2468  01F7  07D4               	addwf	___lwmod@dividend,f
  2469  01F8  120A  118A  24C4  120A  118A  	fcall	___lwmod
  2470  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2471  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2472  01FF  0852               	movf	?___lwmod,w
  2473  0200  3E30               	addlw	48
  2474  0201  00DD               	movwf	??_sprintf+1
  2475  0202  085D               	movf	??_sprintf+1,w
  2476  0203  00E9               	movwf	sprintf@c
  2477                           
  2478                           ;doprnt.c: 1532: }
  2479                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2480  0204  0869               	movf	sprintf@c,w
  2481  0205  00DC               	movwf	??_sprintf
  2482  0206  0868               	movf	sprintf@sp,w
  2483  0207  0084               	movwf	4
  2484  0208  085C               	movf	??_sprintf,w
  2485  0209  1383               	bcf	3,7	;select IRP bank0
  2486  020A  0080               	movwf	0
  2487  020B  3001               	movlw	1
  2488  020C  00DC               	movwf	??_sprintf
  2489  020D  085C               	movf	??_sprintf,w
  2490  020E  07E8               	addwf	sprintf@sp,f
  2491  020F  29C4               	goto	l2397
  2492  0210                     l2401:	
  2493                           ;doprnt.c: 1534: }
  2494                           ;doprnt.c: 1542: }
  2495                           ;doprnt.c: 1544: alldone:
  2496                           
  2497                           
  2498                           ;doprnt.c: 1547: *sp = 0;
  2499  0210  1283               	bcf	3,5	;RP0=0, select bank0
  2500  0211  1303               	bcf	3,6	;RP1=0, select bank0
  2501  0212  0868               	movf	sprintf@sp,w
  2502  0213  0084               	movwf	4
  2503  0214  1383               	bcf	3,7	;select IRP bank0
  2504  0215  0180               	clrf	0
  2505  0216  0008               	return
  2506  0217                     __end_of_sprintf:	
  2507                           ;doprnt.c: 1549: return 0;
  2508                           ;	Return value of _sprintf is never used
  2509                           
  2510                           
  2511                           	psect	text2
  2512  0E70                     __ptext2:	
  2513 ;; *************** function _isdigit *****************
  2514 ;; Defined at:
  2515 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;  c               1    wreg     unsigned char 
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  c               1    5[BANK0 ] unsigned char 
  2520 ;; Return value:  Size  Location     Type
  2521 ;;		None               void
  2522 ;; Registers used:
  2523 ;;		wreg, status,2, status,0
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2529 ;;      Params:         0       0       0       0       0
  2530 ;;      Locals:         0       2       0       0       0
  2531 ;;      Temps:          0       0       0       0       0
  2532 ;;      Totals:         0       2       0       0       0
  2533 ;;Total ram usage:        2 bytes
  2534 ;; Hardware stack levels used:    1
  2535 ;; Hardware stack levels required when called:    4
  2536 ;; This function calls:
  2537 ;;		Nothing
  2538 ;; This function is called by:
  2539 ;;		_sprintf
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           
  2544                           ;psect for function _isdigit
  2545  0E70                     _isdigit:	
  2546                           
  2547                           ;incstack = 0
  2548                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2549                           ;isdigit@c stored from wreg
  2550  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  2551  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  2552  0E72  00CB               	movwf	isdigit@c
  2553  0E73  01CA               	clrf	_isdigit$1449
  2554  0E74  303A               	movlw	58
  2555  0E75  024B               	subwf	isdigit@c,w
  2556  0E76  1803               	skipnc
  2557  0E77  2E7E               	goto	l1961
  2558  0E78  3030               	movlw	48
  2559  0E79  024B               	subwf	isdigit@c,w
  2560  0E7A  1C03               	skipc
  2561  0E7B  2E7E               	goto	l1961
  2562  0E7C  01CA               	clrf	_isdigit$1449
  2563  0E7D  0ACA               	incf	_isdigit$1449,f
  2564  0E7E                     l1961:	
  2565  0E7E  0C4A               	rrf	_isdigit$1449,w
  2566  0E7F  0008               	return
  2567  0E80                     __end_of_isdigit:	
  2568                           
  2569                           	psect	text3
  2570  0FB2                     __ptext3:	
  2571 ;; *************** function ___wmul *****************
  2572 ;; Defined at:
  2573 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  multiplier      2    4[BANK0 ] unsigned int 
  2576 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  product         2    8[BANK0 ] unsigned int 
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  2    4[BANK0 ] unsigned int 
  2581 ;; Registers used:
  2582 ;;		wreg, status,2, status,0
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2588 ;;      Params:         0       4       0       0       0
  2589 ;;      Locals:         0       2       0       0       0
  2590 ;;      Temps:          0       0       0       0       0
  2591 ;;      Totals:         0       6       0       0       0
  2592 ;;Total ram usage:        6 bytes
  2593 ;; Hardware stack levels used:    1
  2594 ;; Hardware stack levels required when called:    4
  2595 ;; This function calls:
  2596 ;;		Nothing
  2597 ;; This function is called by:
  2598 ;;		_sprintf
  2599 ;; This function uses a non-reentrant model
  2600 ;;
  2601                           
  2602                           
  2603                           ;psect for function ___wmul
  2604  0FB2                     ___wmul:	
  2605                           
  2606                           ;incstack = 0
  2607                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2608  0FB2  1283               	bcf	3,5	;RP0=0, select bank0
  2609  0FB3  1303               	bcf	3,6	;RP1=0, select bank0
  2610  0FB4  01CE               	clrf	___wmul@product
  2611  0FB5  01CF               	clrf	___wmul@product+1
  2612  0FB6                     l1967:	
  2613  0FB6  1C4A               	btfss	___wmul@multiplier,0
  2614  0FB7  2FBE               	goto	l605
  2615  0FB8  084C               	movf	___wmul@multiplicand,w
  2616  0FB9  07CE               	addwf	___wmul@product,f
  2617  0FBA  1803               	skipnc
  2618  0FBB  0ACF               	incf	___wmul@product+1,f
  2619  0FBC  084D               	movf	___wmul@multiplicand+1,w
  2620  0FBD  07CF               	addwf	___wmul@product+1,f
  2621  0FBE                     l605:	
  2622  0FBE  3001               	movlw	1
  2623  0FBF                     u1395:	
  2624  0FBF  1003               	clrc
  2625  0FC0  0DCC               	rlf	___wmul@multiplicand,f
  2626  0FC1  0DCD               	rlf	___wmul@multiplicand+1,f
  2627  0FC2  3EFF               	addlw	-1
  2628  0FC3  1D03               	skipz
  2629  0FC4  2FBF               	goto	u1395
  2630  0FC5  3001               	movlw	1
  2631  0FC6                     u1405:	
  2632  0FC6  1003               	clrc
  2633  0FC7  0CCB               	rrf	___wmul@multiplier+1,f
  2634  0FC8  0CCA               	rrf	___wmul@multiplier,f
  2635  0FC9  3EFF               	addlw	-1
  2636  0FCA  1D03               	skipz
  2637  0FCB  2FC6               	goto	u1405
  2638  0FCC  084B               	movf	___wmul@multiplier+1,w
  2639  0FCD  044A               	iorwf	___wmul@multiplier,w
  2640  0FCE  1D03               	skipz
  2641  0FCF  2FB6               	goto	l1967
  2642  0FD0  084F               	movf	___wmul@product+1,w
  2643  0FD1  01CB               	clrf	?___wmul+1
  2644  0FD2  07CB               	addwf	?___wmul+1,f
  2645  0FD3  084E               	movf	___wmul@product,w
  2646  0FD4  01CA               	clrf	?___wmul
  2647  0FD5  07CA               	addwf	?___wmul,f
  2648  0FD6  0008               	return
  2649  0FD7                     __end_of___wmul:	
  2650                           
  2651                           	psect	text4
  2652  04C4                     __ptext4:	
  2653 ;; *************** function ___lwmod *****************
  2654 ;; Defined at:
  2655 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  divisor         2   12[BANK0 ] unsigned int 
  2658 ;;  dividend        2   14[BANK0 ] unsigned int 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;  counter         1   17[BANK0 ] unsigned char 
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  2   12[BANK0 ] unsigned int 
  2663 ;; Registers used:
  2664 ;;		wreg, status,2, status,0
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2670 ;;      Params:         0       4       0       0       0
  2671 ;;      Locals:         0       1       0       0       0
  2672 ;;      Temps:          0       1       0       0       0
  2673 ;;      Totals:         0       6       0       0       0
  2674 ;;Total ram usage:        6 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    4
  2677 ;; This function calls:
  2678 ;;		Nothing
  2679 ;; This function is called by:
  2680 ;;		_sprintf
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           
  2685                           ;psect for function ___lwmod
  2686  04C4                     ___lwmod:	
  2687                           
  2688                           ;incstack = 0
  2689                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2690  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  2691  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  2692  04C6  0853               	movf	___lwmod@divisor+1,w
  2693  04C7  0452               	iorwf	___lwmod@divisor,w
  2694  04C8  1903               	skipnz
  2695  04C9  2CF3               	goto	l2061
  2696  04CA  01D7               	clrf	___lwmod@counter
  2697  04CB  0AD7               	incf	___lwmod@counter,f
  2698  04CC                     l2051:	
  2699  04CC  1BD3               	btfsc	___lwmod@divisor+1,7
  2700  04CD  2CDA               	goto	l2053
  2701  04CE  3001               	movlw	1
  2702  04CF                     u1605:	
  2703  04CF  1003               	clrc
  2704  04D0  0DD2               	rlf	___lwmod@divisor,f
  2705  04D1  0DD3               	rlf	___lwmod@divisor+1,f
  2706  04D2  3EFF               	addlw	-1
  2707  04D3  1D03               	skipz
  2708  04D4  2CCF               	goto	u1605
  2709  04D5  3001               	movlw	1
  2710  04D6  00D6               	movwf	??___lwmod
  2711  04D7  0856               	movf	??___lwmod,w
  2712  04D8  07D7               	addwf	___lwmod@counter,f
  2713  04D9  2CCC               	goto	l2051
  2714  04DA                     l2053:	
  2715  04DA  0853               	movf	___lwmod@divisor+1,w
  2716  04DB  0255               	subwf	___lwmod@dividend+1,w
  2717  04DC  1D03               	skipz
  2718  04DD  2CE0               	goto	u1625
  2719  04DE  0852               	movf	___lwmod@divisor,w
  2720  04DF  0254               	subwf	___lwmod@dividend,w
  2721  04E0                     u1625:	
  2722  04E0  1C03               	skipc
  2723  04E1  2CE8               	goto	l2057
  2724  04E2  0852               	movf	___lwmod@divisor,w
  2725  04E3  02D4               	subwf	___lwmod@dividend,f
  2726  04E4  0853               	movf	___lwmod@divisor+1,w
  2727  04E5  1C03               	skipc
  2728  04E6  03D5               	decf	___lwmod@dividend+1,f
  2729  04E7  02D5               	subwf	___lwmod@dividend+1,f
  2730  04E8                     l2057:	
  2731  04E8  3001               	movlw	1
  2732  04E9                     u1635:	
  2733  04E9  1003               	clrc
  2734  04EA  0CD3               	rrf	___lwmod@divisor+1,f
  2735  04EB  0CD2               	rrf	___lwmod@divisor,f
  2736  04EC  3EFF               	addlw	-1
  2737  04ED  1D03               	skipz
  2738  04EE  2CE9               	goto	u1635
  2739  04EF  3001               	movlw	1
  2740  04F0  02D7               	subwf	___lwmod@counter,f
  2741  04F1  1D03               	btfss	3,2
  2742  04F2  2CDA               	goto	l2053
  2743  04F3                     l2061:	
  2744  04F3  0855               	movf	___lwmod@dividend+1,w
  2745  04F4  01D3               	clrf	?___lwmod+1
  2746  04F5  07D3               	addwf	?___lwmod+1,f
  2747  04F6  0854               	movf	___lwmod@dividend,w
  2748  04F7  01D2               	clrf	?___lwmod
  2749  04F8  07D2               	addwf	?___lwmod,f
  2750  04F9  0008               	return
  2751  04FA                     __end_of___lwmod:	
  2752                           
  2753                           	psect	text5
  2754  076A                     __ptext5:	
  2755 ;; *************** function ___lwdiv *****************
  2756 ;; Defined at:
  2757 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;  divisor         2    4[BANK0 ] unsigned int 
  2760 ;;  dividend        2    6[BANK0 ] unsigned int 
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;  quotient        2    9[BANK0 ] unsigned int 
  2763 ;;  counter         1   11[BANK0 ] unsigned char 
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  2    4[BANK0 ] unsigned int 
  2766 ;; Registers used:
  2767 ;;		wreg, status,2, status,0
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2773 ;;      Params:         0       4       0       0       0
  2774 ;;      Locals:         0       3       0       0       0
  2775 ;;      Temps:          0       1       0       0       0
  2776 ;;      Totals:         0       8       0       0       0
  2777 ;;Total ram usage:        8 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:    4
  2780 ;; This function calls:
  2781 ;;		Nothing
  2782 ;; This function is called by:
  2783 ;;		_sprintf
  2784 ;;		_trimf
  2785 ;;		_trapmf
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           
  2790                           ;psect for function ___lwdiv
  2791  076A                     ___lwdiv:	
  2792                           
  2793                           ;incstack = 0
  2794                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2795  076A  1283               	bcf	3,5	;RP0=0, select bank0
  2796  076B  1303               	bcf	3,6	;RP1=0, select bank0
  2797  076C  01CF               	clrf	___lwdiv@quotient
  2798  076D  01D0               	clrf	___lwdiv@quotient+1
  2799  076E  084B               	movf	___lwdiv@divisor+1,w
  2800  076F  044A               	iorwf	___lwdiv@divisor,w
  2801  0770  1903               	skipnz
  2802  0771  2FA3               	goto	l2039
  2803  0772  01D1               	clrf	___lwdiv@counter
  2804  0773  0AD1               	incf	___lwdiv@counter,f
  2805  0774                     l2027:	
  2806  0774  1BCB               	btfsc	___lwdiv@divisor+1,7
  2807  0775  2F82               	goto	l2029
  2808  0776  3001               	movlw	1
  2809  0777                     u1535:	
  2810  0777  1003               	clrc
  2811  0778  0DCA               	rlf	___lwdiv@divisor,f
  2812  0779  0DCB               	rlf	___lwdiv@divisor+1,f
  2813  077A  3EFF               	addlw	-1
  2814  077B  1D03               	skipz
  2815  077C  2F77               	goto	u1535
  2816  077D  3001               	movlw	1
  2817  077E  00CE               	movwf	??___lwdiv
  2818  077F  084E               	movf	??___lwdiv,w
  2819  0780  07D1               	addwf	___lwdiv@counter,f
  2820  0781  2F74               	goto	l2027
  2821  0782                     l2029:	
  2822  0782  3001               	movlw	1
  2823  0783                     u1555:	
  2824  0783  1003               	clrc
  2825  0784  0DCF               	rlf	___lwdiv@quotient,f
  2826  0785  0DD0               	rlf	___lwdiv@quotient+1,f
  2827  0786  3EFF               	addlw	-1
  2828  0787  1D03               	skipz
  2829  0788  2F83               	goto	u1555
  2830  0789  084B               	movf	___lwdiv@divisor+1,w
  2831  078A  024D               	subwf	___lwdiv@dividend+1,w
  2832  078B  1D03               	skipz
  2833  078C  2F8F               	goto	u1565
  2834  078D  084A               	movf	___lwdiv@divisor,w
  2835  078E  024C               	subwf	___lwdiv@dividend,w
  2836  078F                     u1565:	
  2837  078F  1C03               	skipc
  2838  0790  2F98               	goto	l2035
  2839  0791  084A               	movf	___lwdiv@divisor,w
  2840  0792  02CC               	subwf	___lwdiv@dividend,f
  2841  0793  084B               	movf	___lwdiv@divisor+1,w
  2842  0794  1C03               	skipc
  2843  0795  03CD               	decf	___lwdiv@dividend+1,f
  2844  0796  02CD               	subwf	___lwdiv@dividend+1,f
  2845  0797  144F               	bsf	___lwdiv@quotient,0
  2846  0798                     l2035:	
  2847  0798  3001               	movlw	1
  2848  0799                     u1575:	
  2849  0799  1003               	clrc
  2850  079A  0CCB               	rrf	___lwdiv@divisor+1,f
  2851  079B  0CCA               	rrf	___lwdiv@divisor,f
  2852  079C  3EFF               	addlw	-1
  2853  079D  1D03               	skipz
  2854  079E  2F99               	goto	u1575
  2855  079F  3001               	movlw	1
  2856  07A0  02D1               	subwf	___lwdiv@counter,f
  2857  07A1  1D03               	btfss	3,2
  2858  07A2  2F82               	goto	l2029
  2859  07A3                     l2039:	
  2860  07A3  0850               	movf	___lwdiv@quotient+1,w
  2861  07A4  01CB               	clrf	?___lwdiv+1
  2862  07A5  07CB               	addwf	?___lwdiv+1,f
  2863  07A6  084F               	movf	___lwdiv@quotient,w
  2864  07A7  01CA               	clrf	?___lwdiv
  2865  07A8  07CA               	addwf	?___lwdiv,f
  2866  07A9  0008               	return
  2867  07AA                     __end_of___lwdiv:	
  2868                           
  2869                           	psect	text6
  2870  0F8D                     __ptext6:	
  2871 ;; *************** function _USART_WriteString *****************
  2872 ;; Defined at:
  2873 ;;		line 52 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;  str             2    5[BANK0 ] PTR const unsigned char 
  2876 ;;		 -> STR_19(40), STR_16(3), display_rpm(10), STR_12(20), 
  2877 ;;		 -> STR_11(29), STR_10(15), STR_9(15), STR_8(14), 
  2878 ;;		 -> STR_7(14), STR_6(14), STR_5(14), STR_4(14), 
  2879 ;;		 -> STR_3(13), STR_2(13), STR_1(14), 
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;		None               void
  2884 ;; Registers used:
  2885 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2891 ;;      Params:         0       2       0       0       0
  2892 ;;      Locals:         0       0       0       0       0
  2893 ;;      Temps:          0       0       0       0       0
  2894 ;;      Totals:         0       2       0       0       0
  2895 ;;Total ram usage:        2 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    5
  2898 ;; This function calls:
  2899 ;;		_USART_WriteChar
  2900 ;; This function is called by:
  2901 ;;		_main
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           
  2906                           ;psect for function _USART_WriteString
  2907  0F8D                     _USART_WriteString:	
  2908  0F8D                     l2167:	
  2909                           ;usart.c: 54: while(*str != '\0')
  2910                           
  2911                           ;incstack = 0
  2912                           ; Regs used in _USART_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2913                           
  2914  0F8D  1283               	bcf	3,5	;RP0=0, select bank0
  2915  0F8E  1303               	bcf	3,6	;RP1=0, select bank0
  2916  0F8F  084C               	movf	USART_WriteString@str+1,w
  2917  0F90  00FF               	movwf	127
  2918  0F91  084B               	movf	USART_WriteString@str,w
  2919  0F92  0084               	movwf	4
  2920  0F93  120A  118A  2500  120A  158A  	fcall	stringtab
  2921  0F98  3800               	iorlw	0
  2922  0F99  1903               	btfsc	3,2
  2923  0F9A  0008               	return
  2924                           
  2925                           ;usart.c: 55: {
  2926                           ;usart.c: 56: USART_WriteChar(*str);
  2927  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  2928  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  2929  0F9D  084C               	movf	USART_WriteString@str+1,w
  2930  0F9E  00FF               	movwf	127
  2931  0F9F  084B               	movf	USART_WriteString@str,w
  2932  0FA0  0084               	movwf	4
  2933  0FA1  120A  118A  2500  120A  158A  	fcall	stringtab
  2934  0FA6  120A  158A  2637  120A  158A  	fcall	_USART_WriteChar
  2935                           
  2936                           ;usart.c: 57: str++;
  2937  0FAB  3001               	movlw	1
  2938  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  2939  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  2940  0FAE  07CB               	addwf	USART_WriteString@str,f
  2941  0FAF  1803               	skipnc
  2942  0FB0  0ACC               	incf	USART_WriteString@str+1,f
  2943  0FB1  2F8D               	goto	l2167
  2944  0FB2                     __end_of_USART_WriteString:	
  2945                           
  2946                           	psect	text7
  2947  0E37                     __ptext7:	
  2948 ;; *************** function _USART_WriteChar *****************
  2949 ;; Defined at:
  2950 ;;		line 44 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;  byte            1    wreg     unsigned char 
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;  byte            1    4[BANK0 ] unsigned char 
  2955 ;; Return value:  Size  Location     Type
  2956 ;;		None               void
  2957 ;; Registers used:
  2958 ;;		wreg
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2964 ;;      Params:         0       0       0       0       0
  2965 ;;      Locals:         0       1       0       0       0
  2966 ;;      Temps:          0       0       0       0       0
  2967 ;;      Totals:         0       1       0       0       0
  2968 ;;Total ram usage:        1 bytes
  2969 ;; Hardware stack levels used:    1
  2970 ;; Hardware stack levels required when called:    4
  2971 ;; This function calls:
  2972 ;;		Nothing
  2973 ;; This function is called by:
  2974 ;;		_USART_WriteString
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           
  2979                           ;psect for function _USART_WriteChar
  2980  0E37                     _USART_WriteChar:	
  2981                           
  2982                           ;incstack = 0
  2983                           ; Regs used in _USART_WriteChar: [wreg]
  2984                           ;USART_WriteChar@byte stored from wreg
  2985  0E37  1283               	bcf	3,5	;RP0=0, select bank0
  2986  0E38  1303               	bcf	3,6	;RP1=0, select bank0
  2987  0E39  00CA               	movwf	USART_WriteChar@byte
  2988  0E3A                     l234:	
  2989                           ;usart.c: 46: while(!PIR1bits.TXIF);
  2990                           
  2991  0E3A  1E0C               	btfss	12,4	;volatile
  2992  0E3B  2E3A               	goto	l234
  2993                           
  2994                           ;usart.c: 47: TXREG = byte;
  2995  0E3C  084A               	movf	USART_WriteChar@byte,w
  2996  0E3D  0099               	movwf	25	;volatile
  2997  0E3E  0008               	return
  2998  0E3F                     __end_of_USART_WriteChar:	
  2999                           
  3000                           	psect	text8
  3001  071F                     __ptext8:	
  3002 ;; *************** function _USART_Init *****************
  3003 ;; Defined at:
  3004 ;;		line 6 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  3005 ;; Parameters:    Size  Location     Type
  3006 ;;  BaudRate        4   19[BANK0 ] long 
  3007 ;; Auto vars:     Size  Location     Type
  3008 ;;		None
  3009 ;; Return value:  Size  Location     Type
  3010 ;;		None               void
  3011 ;; Registers used:
  3012 ;;		wreg, status,2, status,0, pclath, cstack
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 0/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3018 ;;      Params:         0       4       0       0       0
  3019 ;;      Locals:         0       0       0       0       0
  3020 ;;      Temps:          0       4       0       0       0
  3021 ;;      Totals:         0       8       0       0       0
  3022 ;;Total ram usage:        8 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:    5
  3025 ;; This function calls:
  3026 ;;		___aldiv
  3027 ;; This function is called by:
  3028 ;;		_main
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           
  3033                           ;psect for function _USART_Init
  3034  071F                     _USART_Init:	
  3035                           
  3036                           ;usart.c: 13: SPBRG = (unsigned char)(18432000 / (16 * BaudRate)) - 1;
  3037                           
  3038                           ;incstack = 0
  3039                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
  3040  071F  1283               	bcf	3,5	;RP0=0, select bank0
  3041  0720  1303               	bcf	3,6	;RP1=0, select bank0
  3042  0721  0859               	movf	USART_Init@BaudRate,w
  3043  0722  00DD               	movwf	??_USART_Init
  3044  0723  085A               	movf	USART_Init@BaudRate+1,w
  3045  0724  00DE               	movwf	??_USART_Init+1
  3046  0725  085B               	movf	USART_Init@BaudRate+2,w
  3047  0726  00DF               	movwf	??_USART_Init+2
  3048  0727  085C               	movf	USART_Init@BaudRate+3,w
  3049  0728  00E0               	movwf	??_USART_Init+3
  3050  0729  3004               	movlw	4
  3051  072A                     u1845:	
  3052  072A  1003               	clrc
  3053  072B  0DDD               	rlf	??_USART_Init,f
  3054  072C  0DDE               	rlf	??_USART_Init+1,f
  3055  072D  0DDF               	rlf	??_USART_Init+2,f
  3056  072E  0DE0               	rlf	??_USART_Init+3,f
  3057  072F  3EFF               	addlw	-1
  3058  0730  1D03               	skipz
  3059  0731  2F2A               	goto	u1845
  3060  0732  0860               	movf	??_USART_Init+3,w
  3061  0733  00CD               	movwf	___aldiv@divisor+3
  3062  0734  085F               	movf	??_USART_Init+2,w
  3063  0735  00CC               	movwf	___aldiv@divisor+2
  3064  0736  085E               	movf	??_USART_Init+1,w
  3065  0737  00CB               	movwf	___aldiv@divisor+1
  3066  0738  085D               	movf	??_USART_Init,w
  3067  0739  00CA               	movwf	___aldiv@divisor
  3068  073A  3001               	movlw	1
  3069  073B  00D1               	movwf	___aldiv@dividend+3
  3070  073C  3019               	movlw	25
  3071  073D  00D0               	movwf	___aldiv@dividend+2
  3072  073E  3040               	movlw	64
  3073  073F  00CF               	movwf	___aldiv@dividend+1
  3074  0740  3000               	movlw	0
  3075  0741  00CE               	movwf	___aldiv@dividend
  3076  0742  120A  118A  2623   	fcall	___aldiv
  3077  0745  1283               	bcf	3,5	;RP0=0, select bank0
  3078  0746  1303               	bcf	3,6	;RP1=0, select bank0
  3079  0747  084A               	movf	?___aldiv,w
  3080  0748  3EFF               	addlw	255
  3081  0749  1683               	bsf	3,5	;RP0=1, select bank1
  3082  074A  1303               	bcf	3,6	;RP1=0, select bank1
  3083  074B  0099               	movwf	25	;volatile
  3084                           
  3085                           ;usart.c: 16: TXSTAbits.CSRC = 0;
  3086  074C  1398               	bcf	24,7	;volatile
  3087                           
  3088                           ;usart.c: 17: TXSTAbits.TX9 = 0;
  3089  074D  1318               	bcf	24,6	;volatile
  3090                           
  3091                           ;usart.c: 18: TXSTAbits.TXEN = 1;
  3092  074E  1698               	bsf	24,5	;volatile
  3093                           
  3094                           ;usart.c: 19: TXSTAbits.SYNC = 0;
  3095  074F  1218               	bcf	24,4	;volatile
  3096                           
  3097                           ;usart.c: 21: TXSTAbits.BRGH = 1;
  3098  0750  1518               	bsf	24,2	;volatile
  3099                           
  3100                           ;usart.c: 22: TXSTAbits.TRMT = 1;
  3101  0751  1498               	bsf	24,1	;volatile
  3102                           
  3103                           ;usart.c: 23: TXSTAbits.TX9D = 0;
  3104  0752  1018               	bcf	24,0	;volatile
  3105                           
  3106                           ;usart.c: 26: RCSTAbits.SPEN = 1;
  3107  0753  1283               	bcf	3,5	;RP0=0, select bank0
  3108  0754  1303               	bcf	3,6	;RP1=0, select bank0
  3109  0755  1798               	bsf	24,7	;volatile
  3110                           
  3111                           ;usart.c: 27: RCSTAbits.RX9 = 0;
  3112  0756  1318               	bcf	24,6	;volatile
  3113                           
  3114                           ;usart.c: 28: RCSTAbits.SREN = 0;
  3115  0757  1298               	bcf	24,5	;volatile
  3116                           
  3117                           ;usart.c: 29: RCSTAbits.CREN = 1;
  3118  0758  1618               	bsf	24,4	;volatile
  3119                           
  3120                           ;usart.c: 30: RCSTAbits.ADDEN = 0;
  3121  0759  1198               	bcf	24,3	;volatile
  3122                           
  3123                           ;usart.c: 31: RCSTAbits.FERR = 0;
  3124  075A  1118               	bcf	24,2	;volatile
  3125                           
  3126                           ;usart.c: 32: RCSTAbits.OERR = 0;
  3127  075B  1098               	bcf	24,1	;volatile
  3128                           
  3129                           ;usart.c: 33: RCSTAbits.RX9D = 0;
  3130  075C  1018               	bcf	24,0	;volatile
  3131                           
  3132                           ;usart.c: 36: PIE1bits.TXIE = 0;
  3133  075D  1683               	bsf	3,5	;RP0=1, select bank1
  3134  075E  1303               	bcf	3,6	;RP1=0, select bank1
  3135  075F  120C               	bcf	12,4	;volatile
  3136                           
  3137                           ;usart.c: 37: PIR1bits.TXIF = 0;
  3138  0760  1283               	bcf	3,5	;RP0=0, select bank0
  3139  0761  1303               	bcf	3,6	;RP1=0, select bank0
  3140  0762  120C               	bcf	12,4	;volatile
  3141                           
  3142                           ;usart.c: 38: PIE1bits.RCIE = 1;
  3143  0763  1683               	bsf	3,5	;RP0=1, select bank1
  3144  0764  1303               	bcf	3,6	;RP1=0, select bank1
  3145  0765  168C               	bsf	12,5	;volatile
  3146                           
  3147                           ;usart.c: 39: PIR1bits.RCIF = 0;
  3148  0766  1283               	bcf	3,5	;RP0=0, select bank0
  3149  0767  1303               	bcf	3,6	;RP1=0, select bank0
  3150  0768  128C               	bcf	12,5	;volatile
  3151  0769  0008               	return
  3152  076A                     __end_of_USART_Init:	
  3153                           
  3154                           	psect	text9
  3155  0623                     __ptext9:	
  3156 ;; *************** function ___aldiv *****************
  3157 ;; Defined at:
  3158 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
  3159 ;; Parameters:    Size  Location     Type
  3160 ;;  divisor         4    4[BANK0 ] long 
  3161 ;;  dividend        4    8[BANK0 ] long 
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;  quotient        4   15[BANK0 ] long 
  3164 ;;  sign            1   14[BANK0 ] unsigned char 
  3165 ;;  counter         1   13[BANK0 ] unsigned char 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  4    4[BANK0 ] long 
  3168 ;; Registers used:
  3169 ;;		wreg, status,2, status,0
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3175 ;;      Params:         0       8       0       0       0
  3176 ;;      Locals:         0       6       0       0       0
  3177 ;;      Temps:          0       1       0       0       0
  3178 ;;      Totals:         0      15       0       0       0
  3179 ;;Total ram usage:       15 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    4
  3182 ;; This function calls:
  3183 ;;		Nothing
  3184 ;; This function is called by:
  3185 ;;		_USART_Init
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           
  3190                           ;psect for function ___aldiv
  3191  0623                     ___aldiv:	
  3192                           
  3193                           ;incstack = 0
  3194                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3195  0623  1283               	bcf	3,5	;RP0=0, select bank0
  3196  0624  1303               	bcf	3,6	;RP1=0, select bank0
  3197  0625  01D4               	clrf	___aldiv@sign
  3198  0626  1FCD               	btfss	___aldiv@divisor+3,7
  3199  0627  2E35               	goto	l660
  3200  0628  09CA               	comf	___aldiv@divisor,f
  3201  0629  09CB               	comf	___aldiv@divisor+1,f
  3202  062A  09CC               	comf	___aldiv@divisor+2,f
  3203  062B  09CD               	comf	___aldiv@divisor+3,f
  3204  062C  0ACA               	incf	___aldiv@divisor,f
  3205  062D  1903               	skipnz
  3206  062E  0ACB               	incf	___aldiv@divisor+1,f
  3207  062F  1903               	skipnz
  3208  0630  0ACC               	incf	___aldiv@divisor+2,f
  3209  0631  1903               	skipnz
  3210  0632  0ACD               	incf	___aldiv@divisor+3,f
  3211  0633  01D4               	clrf	___aldiv@sign
  3212  0634  0AD4               	incf	___aldiv@sign,f
  3213  0635                     l660:	
  3214  0635  1FD1               	btfss	___aldiv@dividend+3,7
  3215  0636  2E46               	goto	l1987
  3216  0637  09CE               	comf	___aldiv@dividend,f
  3217  0638  09CF               	comf	___aldiv@dividend+1,f
  3218  0639  09D0               	comf	___aldiv@dividend+2,f
  3219  063A  09D1               	comf	___aldiv@dividend+3,f
  3220  063B  0ACE               	incf	___aldiv@dividend,f
  3221  063C  1903               	skipnz
  3222  063D  0ACF               	incf	___aldiv@dividend+1,f
  3223  063E  1903               	skipnz
  3224  063F  0AD0               	incf	___aldiv@dividend+2,f
  3225  0640  1903               	skipnz
  3226  0641  0AD1               	incf	___aldiv@dividend+3,f
  3227  0642  3001               	movlw	1
  3228  0643  00D2               	movwf	??___aldiv
  3229  0644  0852               	movf	??___aldiv,w
  3230  0645  06D4               	xorwf	___aldiv@sign,f
  3231  0646                     l1987:	
  3232  0646  3000               	movlw	0
  3233  0647  00D8               	movwf	___aldiv@quotient+3
  3234  0648  3000               	movlw	0
  3235  0649  00D7               	movwf	___aldiv@quotient+2
  3236  064A  3000               	movlw	0
  3237  064B  00D6               	movwf	___aldiv@quotient+1
  3238  064C  3000               	movlw	0
  3239  064D  00D5               	movwf	___aldiv@quotient
  3240  064E  084D               	movf	___aldiv@divisor+3,w
  3241  064F  044C               	iorwf	___aldiv@divisor+2,w
  3242  0650  044B               	iorwf	___aldiv@divisor+1,w
  3243  0651  044A               	iorwf	___aldiv@divisor,w
  3244  0652  1903               	skipnz
  3245  0653  2E9B               	goto	l2009
  3246  0654  01D3               	clrf	___aldiv@counter
  3247  0655  0AD3               	incf	___aldiv@counter,f
  3248  0656                     l1995:	
  3249  0656  1BCD               	btfsc	___aldiv@divisor+3,7
  3250  0657  2E66               	goto	l1997
  3251  0658  3001               	movlw	1
  3252  0659  00D2               	movwf	??___aldiv
  3253  065A                     u1455:	
  3254  065A  1003               	clrc
  3255  065B  0DCA               	rlf	___aldiv@divisor,f
  3256  065C  0DCB               	rlf	___aldiv@divisor+1,f
  3257  065D  0DCC               	rlf	___aldiv@divisor+2,f
  3258  065E  0DCD               	rlf	___aldiv@divisor+3,f
  3259  065F  0BD2               	decfsz	??___aldiv,f
  3260  0660  2E5A               	goto	u1455
  3261  0661  3001               	movlw	1
  3262  0662  00D2               	movwf	??___aldiv
  3263  0663  0852               	movf	??___aldiv,w
  3264  0664  07D3               	addwf	___aldiv@counter,f
  3265  0665  2E56               	goto	l1995
  3266  0666                     l1997:	
  3267  0666  3001               	movlw	1
  3268  0667  00D2               	movwf	??___aldiv
  3269  0668                     u1475:	
  3270  0668  1003               	clrc
  3271  0669  0DD5               	rlf	___aldiv@quotient,f
  3272  066A  0DD6               	rlf	___aldiv@quotient+1,f
  3273  066B  0DD7               	rlf	___aldiv@quotient+2,f
  3274  066C  0DD8               	rlf	___aldiv@quotient+3,f
  3275  066D  0BD2               	decfsz	??___aldiv,f
  3276  066E  2E68               	goto	u1475
  3277  066F  084D               	movf	___aldiv@divisor+3,w
  3278  0670  0251               	subwf	___aldiv@dividend+3,w
  3279  0671  1D03               	skipz
  3280  0672  2E7D               	goto	u1485
  3281  0673  084C               	movf	___aldiv@divisor+2,w
  3282  0674  0250               	subwf	___aldiv@dividend+2,w
  3283  0675  1D03               	skipz
  3284  0676  2E7D               	goto	u1485
  3285  0677  084B               	movf	___aldiv@divisor+1,w
  3286  0678  024F               	subwf	___aldiv@dividend+1,w
  3287  0679  1D03               	skipz
  3288  067A  2E7D               	goto	u1485
  3289  067B  084A               	movf	___aldiv@divisor,w
  3290  067C  024E               	subwf	___aldiv@dividend,w
  3291  067D                     u1485:	
  3292  067D  1C03               	skipc
  3293  067E  2E8E               	goto	l2005
  3294  067F  084A               	movf	___aldiv@divisor,w
  3295  0680  02CE               	subwf	___aldiv@dividend,f
  3296  0681  084B               	movf	___aldiv@divisor+1,w
  3297  0682  1C03               	skipc
  3298  0683  0F4B               	incfsz	___aldiv@divisor+1,w
  3299  0684  02CF               	subwf	___aldiv@dividend+1,f
  3300  0685  084C               	movf	___aldiv@divisor+2,w
  3301  0686  1C03               	skipc
  3302  0687  0F4C               	incfsz	___aldiv@divisor+2,w
  3303  0688  02D0               	subwf	___aldiv@dividend+2,f
  3304  0689  084D               	movf	___aldiv@divisor+3,w
  3305  068A  1C03               	skipc
  3306  068B  0F4D               	incfsz	___aldiv@divisor+3,w
  3307  068C  02D1               	subwf	___aldiv@dividend+3,f
  3308  068D  1455               	bsf	___aldiv@quotient,0
  3309  068E                     l2005:	
  3310  068E  3001               	movlw	1
  3311  068F                     u1495:	
  3312  068F  1003               	clrc
  3313  0690  0CCD               	rrf	___aldiv@divisor+3,f
  3314  0691  0CCC               	rrf	___aldiv@divisor+2,f
  3315  0692  0CCB               	rrf	___aldiv@divisor+1,f
  3316  0693  0CCA               	rrf	___aldiv@divisor,f
  3317  0694  3EFF               	addlw	-1
  3318  0695  1D03               	skipz
  3319  0696  2E8F               	goto	u1495
  3320  0697  3001               	movlw	1
  3321  0698  02D3               	subwf	___aldiv@counter,f
  3322  0699  1D03               	btfss	3,2
  3323  069A  2E66               	goto	l1997
  3324  069B                     l2009:	
  3325  069B  0854               	movf	___aldiv@sign,w
  3326  069C  1903               	btfsc	3,2
  3327  069D  2EA9               	goto	l2013
  3328  069E  09D5               	comf	___aldiv@quotient,f
  3329  069F  09D6               	comf	___aldiv@quotient+1,f
  3330  06A0  09D7               	comf	___aldiv@quotient+2,f
  3331  06A1  09D8               	comf	___aldiv@quotient+3,f
  3332  06A2  0AD5               	incf	___aldiv@quotient,f
  3333  06A3  1903               	skipnz
  3334  06A4  0AD6               	incf	___aldiv@quotient+1,f
  3335  06A5  1903               	skipnz
  3336  06A6  0AD7               	incf	___aldiv@quotient+2,f
  3337  06A7  1903               	skipnz
  3338  06A8  0AD8               	incf	___aldiv@quotient+3,f
  3339  06A9                     l2013:	
  3340  06A9  0858               	movf	___aldiv@quotient+3,w
  3341  06AA  00CD               	movwf	?___aldiv+3
  3342  06AB  0857               	movf	___aldiv@quotient+2,w
  3343  06AC  00CC               	movwf	?___aldiv+2
  3344  06AD  0856               	movf	___aldiv@quotient+1,w
  3345  06AE  00CB               	movwf	?___aldiv+1
  3346  06AF  0855               	movf	___aldiv@quotient,w
  3347  06B0  00CA               	movwf	?___aldiv
  3348  06B1  0008               	return
  3349  06B2                     __end_of___aldiv:	
  3350                           
  3351                           	psect	text10
  3352  04FA                     __ptext10:	
  3353 ;; *************** function _TIMER0_Set *****************
  3354 ;; Defined at:
  3355 ;;		line 20 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\timers.c"
  3356 ;; Parameters:    Size  Location     Type
  3357 ;;  contagens       1    wreg     unsigned char 
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;  contagens       1    4[BANK0 ] unsigned char 
  3360 ;; Return value:  Size  Location     Type
  3361 ;;		None               void
  3362 ;; Registers used:
  3363 ;;		wreg
  3364 ;; Tracked objects:
  3365 ;;		On entry : 0/0
  3366 ;;		On exit  : 0/0
  3367 ;;		Unchanged: 0/0
  3368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3369 ;;      Params:         0       0       0       0       0
  3370 ;;      Locals:         0       1       0       0       0
  3371 ;;      Temps:          0       0       0       0       0
  3372 ;;      Totals:         0       1       0       0       0
  3373 ;;Total ram usage:        1 bytes
  3374 ;; Hardware stack levels used:    1
  3375 ;; Hardware stack levels required when called:    4
  3376 ;; This function calls:
  3377 ;;		Nothing
  3378 ;; This function is called by:
  3379 ;;		_main
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           
  3384                           ;psect for function _TIMER0_Set
  3385  04FA                     _TIMER0_Set:	
  3386                           
  3387                           ;incstack = 0
  3388                           ; Regs used in _TIMER0_Set: [wreg]
  3389                           ;TIMER0_Set@contagens stored from wreg
  3390  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  3391  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  3392  04FC  00CA               	movwf	TIMER0_Set@contagens
  3393                           
  3394                           ;timers.c: 22: TMR0 = contagens;
  3395  04FD  084A               	movf	TIMER0_Set@contagens,w
  3396  04FE  0081               	movwf	1	;volatile
  3397  04FF  0008               	return
  3398  0500                     __end_of_TIMER0_Set:	
  3399                           
  3400                           	psect	text11
  3401  0E47                     __ptext11:	
  3402 ;; *************** function _TIMER0_Init *****************
  3403 ;; Defined at:
  3404 ;;		line 6 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\timers.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;		None
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;		None
  3409 ;; Return value:  Size  Location     Type
  3410 ;;		None               void
  3411 ;; Registers used:
  3412 ;;		None
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3418 ;;      Params:         0       0       0       0       0
  3419 ;;      Locals:         0       0       0       0       0
  3420 ;;      Temps:          0       0       0       0       0
  3421 ;;      Totals:         0       0       0       0       0
  3422 ;;Total ram usage:        0 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    4
  3425 ;; This function calls:
  3426 ;;		Nothing
  3427 ;; This function is called by:
  3428 ;;		_main
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           
  3433                           ;psect for function _TIMER0_Init
  3434  0E47                     _TIMER0_Init:	
  3435                           
  3436                           ;timers.c: 8: OPTION_REGbits.T0CS = 0;
  3437                           
  3438                           ;incstack = 0
  3439                           ; Regs used in _TIMER0_Init: []
  3440  0E47  1683               	bsf	3,5	;RP0=1, select bank1
  3441  0E48  1303               	bcf	3,6	;RP1=0, select bank1
  3442  0E49  1281               	bcf	1,5	;volatile
  3443                           
  3444                           ;timers.c: 9: OPTION_REGbits.T0SE = 0;
  3445  0E4A  1201               	bcf	1,4	;volatile
  3446                           
  3447                           ;timers.c: 10: OPTION_REGbits.PSA = 0;
  3448  0E4B  1181               	bcf	1,3	;volatile
  3449                           
  3450                           ;timers.c: 11: OPTION_REGbits.PS2 = 1;
  3451  0E4C  1501               	bsf	1,2	;volatile
  3452                           
  3453                           ;timers.c: 12: OPTION_REGbits.PS1 = 1;
  3454  0E4D  1481               	bsf	1,1	;volatile
  3455                           
  3456                           ;timers.c: 13: OPTION_REGbits.PS0 = 1;
  3457  0E4E  1401               	bsf	1,0	;volatile
  3458                           
  3459                           ;timers.c: 14: INTCONbits.TMR0IF = 0;
  3460  0E4F  110B               	bcf	11,2	;volatile
  3461                           
  3462                           ;timers.c: 15: INTCONbits.TMR0IE = 1;
  3463  0E50  168B               	bsf	11,5	;volatile
  3464  0E51  0008               	return
  3465  0E52                     __end_of_TIMER0_Init:	
  3466                           
  3467                           	psect	text12
  3468  0F44                     __ptext12:	
  3469 ;; *************** function _PWM_Init *****************
  3470 ;; Defined at:
  3471 ;;		line 5 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;		None
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;		None
  3476 ;; Return value:  Size  Location     Type
  3477 ;;		None               void
  3478 ;; Registers used:
  3479 ;;		wreg
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3485 ;;      Params:         0       0       0       0       0
  3486 ;;      Locals:         0       0       0       0       0
  3487 ;;      Temps:          0       0       0       0       0
  3488 ;;      Totals:         0       0       0       0       0
  3489 ;;Total ram usage:        0 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    4
  3492 ;; This function calls:
  3493 ;;		Nothing
  3494 ;; This function is called by:
  3495 ;;		_main
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           
  3500                           ;psect for function _PWM_Init
  3501  0F44                     _PWM_Init:	
  3502                           
  3503                           ;pwm.c: 14: T2CONbits.T2CKPS1 = 1;
  3504                           
  3505                           ;incstack = 0
  3506                           ; Regs used in _PWM_Init: [wreg]
  3507  0F44  1283               	bcf	3,5	;RP0=0, select bank0
  3508  0F45  1303               	bcf	3,6	;RP1=0, select bank0
  3509  0F46  1492               	bsf	18,1	;volatile
  3510                           
  3511                           ;pwm.c: 15: T2CONbits.T2CKPS0 = 0;
  3512  0F47  1012               	bcf	18,0	;volatile
  3513                           
  3514                           ;pwm.c: 18: T2CONbits.TOUTPS3 = 0;
  3515  0F48  1312               	bcf	18,6	;volatile
  3516                           
  3517                           ;pwm.c: 19: T2CONbits.TOUTPS2 = 0;
  3518  0F49  1292               	bcf	18,5	;volatile
  3519                           
  3520                           ;pwm.c: 20: T2CONbits.TOUTPS1 = 0;
  3521  0F4A  1212               	bcf	18,4	;volatile
  3522                           
  3523                           ;pwm.c: 21: T2CONbits.TOUTPS0 = 0;
  3524  0F4B  1192               	bcf	18,3	;volatile
  3525                           
  3526                           ;pwm.c: 24: T2CONbits.TMR2ON = 1;
  3527  0F4C  1512               	bsf	18,2	;volatile
  3528                           
  3529                           ;pwm.c: 27: PR2 = 255;
  3530  0F4D  30FF               	movlw	255
  3531  0F4E  1683               	bsf	3,5	;RP0=1, select bank1
  3532  0F4F  1303               	bcf	3,6	;RP1=0, select bank1
  3533  0F50  0092               	movwf	18	;volatile
  3534                           
  3535                           ;pwm.c: 43: CCP1CONbits.CCP1M3 = 1;
  3536  0F51  1283               	bcf	3,5	;RP0=0, select bank0
  3537  0F52  1303               	bcf	3,6	;RP1=0, select bank0
  3538  0F53  1597               	bsf	23,3	;volatile
  3539                           
  3540                           ;pwm.c: 44: CCP1CONbits.CCP1M2 = 1;
  3541  0F54  1517               	bsf	23,2	;volatile
  3542                           
  3543                           ;pwm.c: 45: CCP1CONbits.CCP1M1 = 1;
  3544  0F55  1497               	bsf	23,1	;volatile
  3545                           
  3546                           ;pwm.c: 46: CCP1CONbits.CCP1M0 = 1;
  3547  0F56  1417               	bsf	23,0	;volatile
  3548                           
  3549                           ;pwm.c: 49: PIE1bits.CCP1IE = 1;
  3550  0F57  1683               	bsf	3,5	;RP0=1, select bank1
  3551  0F58  1303               	bcf	3,6	;RP1=0, select bank1
  3552  0F59  150C               	bsf	12,2	;volatile
  3553                           
  3554                           ;pwm.c: 50: PIR1bits.CCP1IF = 0;
  3555  0F5A  1283               	bcf	3,5	;RP0=0, select bank0
  3556  0F5B  1303               	bcf	3,6	;RP1=0, select bank0
  3557  0F5C  110C               	bcf	12,2	;volatile
  3558                           
  3559                           ;pwm.c: 53: CCP2CONbits.CCP2M3 = 1;
  3560  0F5D  159D               	bsf	29,3	;volatile
  3561                           
  3562                           ;pwm.c: 54: CCP2CONbits.CCP2M2 = 1;
  3563  0F5E  151D               	bsf	29,2	;volatile
  3564                           
  3565                           ;pwm.c: 55: CCP2CONbits.CCP2M1 = 1;
  3566  0F5F  149D               	bsf	29,1	;volatile
  3567                           
  3568                           ;pwm.c: 56: CCP2CONbits.CCP2M0 = 1;
  3569  0F60  141D               	bsf	29,0	;volatile
  3570                           
  3571                           ;pwm.c: 59: PIE2bits.CCP2IE = 1;
  3572  0F61  1683               	bsf	3,5	;RP0=1, select bank1
  3573  0F62  1303               	bcf	3,6	;RP1=0, select bank1
  3574  0F63  140D               	bsf	13,0	;volatile
  3575                           
  3576                           ;pwm.c: 60: PIR2bits.CCP2IF = 0;
  3577  0F64  1283               	bcf	3,5	;RP0=0, select bank0
  3578  0F65  1303               	bcf	3,6	;RP1=0, select bank0
  3579  0F66  100D               	bcf	13,0	;volatile
  3580  0F67  0008               	return
  3581  0F68                     __end_of_PWM_Init:	
  3582                           
  3583                           	psect	text13
  3584  0EE3                     __ptext13:	
  3585 ;; *************** function _PWM_DutyCycle2 *****************
  3586 ;; Defined at:
  3587 ;;		line 96 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  valor           2    4[BANK0 ] int 
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;		None
  3592 ;; Return value:  Size  Location     Type
  3593 ;;		None               void
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, status,0
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3601 ;;      Params:         0       2       0       0       0
  3602 ;;      Locals:         0       0       0       0       0
  3603 ;;      Temps:          0       2       0       0       0
  3604 ;;      Totals:         0       4       0       0       0
  3605 ;;Total ram usage:        4 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    4
  3608 ;; This function calls:
  3609 ;;		Nothing
  3610 ;; This function is called by:
  3611 ;;		_main
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           
  3616                           ;psect for function _PWM_DutyCycle2
  3617  0EE3                     _PWM_DutyCycle2:	
  3618                           
  3619                           ;pwm.c: 98: CCPR2L = valor >> 2;
  3620                           
  3621                           ;incstack = 0
  3622                           ; Regs used in _PWM_DutyCycle2: [wreg+status,2+status,0]
  3623  0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  3624  0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  3625  0EE5  084B               	movf	PWM_DutyCycle2@valor+1,w
  3626  0EE6  00CD               	movwf	??_PWM_DutyCycle2+1
  3627  0EE7  084A               	movf	PWM_DutyCycle2@valor,w
  3628  0EE8  00CC               	movwf	??_PWM_DutyCycle2
  3629  0EE9  0D4D               	rlf	??_PWM_DutyCycle2+1,w
  3630  0EEA  0CCD               	rrf	??_PWM_DutyCycle2+1,f
  3631  0EEB  0CCC               	rrf	??_PWM_DutyCycle2,f
  3632  0EEC  0D4D               	rlf	??_PWM_DutyCycle2+1,w
  3633  0EED  0CCD               	rrf	??_PWM_DutyCycle2+1,f
  3634  0EEE  0CCC               	rrf	??_PWM_DutyCycle2,f
  3635  0EEF  084C               	movf	??_PWM_DutyCycle2,w
  3636  0EF0  009B               	movwf	27	;volatile
  3637                           
  3638                           ;pwm.c: 99: CCP2CON = (valor << 4)|0X0C;
  3639  0EF1  084A               	movf	PWM_DutyCycle2@valor,w
  3640  0EF2  00CC               	movwf	??_PWM_DutyCycle2
  3641  0EF3  3003               	movlw	3
  3642  0EF4                     u1835:	
  3643  0EF4  1003               	clrc
  3644  0EF5  0DCC               	rlf	??_PWM_DutyCycle2,f
  3645  0EF6  3EFF               	addlw	-1
  3646  0EF7  1D03               	skipz
  3647  0EF8  2EF4               	goto	u1835
  3648  0EF9  1003               	clrc
  3649  0EFA  0D4C               	rlf	??_PWM_DutyCycle2,w
  3650  0EFB  380C               	iorlw	12
  3651  0EFC  009D               	movwf	29	;volatile
  3652  0EFD  0008               	return
  3653  0EFE                     __end_of_PWM_DutyCycle2:	
  3654                           
  3655                           	psect	text14
  3656  0EC8                     __ptext14:	
  3657 ;; *************** function _PWM_DutyCycle1 *****************
  3658 ;; Defined at:
  3659 ;;		line 64 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  3660 ;; Parameters:    Size  Location     Type
  3661 ;;  valor           2    4[BANK0 ] int 
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;		None
  3664 ;; Return value:  Size  Location     Type
  3665 ;;		None               void
  3666 ;; Registers used:
  3667 ;;		wreg, status,2, status,0
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3673 ;;      Params:         0       2       0       0       0
  3674 ;;      Locals:         0       0       0       0       0
  3675 ;;      Temps:          0       2       0       0       0
  3676 ;;      Totals:         0       4       0       0       0
  3677 ;;Total ram usage:        4 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:    4
  3680 ;; This function calls:
  3681 ;;		Nothing
  3682 ;; This function is called by:
  3683 ;;		_main
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           
  3688                           ;psect for function _PWM_DutyCycle1
  3689  0EC8                     _PWM_DutyCycle1:	
  3690                           
  3691                           ;pwm.c: 91: CCPR1L = valor >> 2;
  3692                           
  3693                           ;incstack = 0
  3694                           ; Regs used in _PWM_DutyCycle1: [wreg+status,2+status,0]
  3695  0EC8  1283               	bcf	3,5	;RP0=0, select bank0
  3696  0EC9  1303               	bcf	3,6	;RP1=0, select bank0
  3697  0ECA  084B               	movf	PWM_DutyCycle1@valor+1,w
  3698  0ECB  00CD               	movwf	??_PWM_DutyCycle1+1
  3699  0ECC  084A               	movf	PWM_DutyCycle1@valor,w
  3700  0ECD  00CC               	movwf	??_PWM_DutyCycle1
  3701  0ECE  0D4D               	rlf	??_PWM_DutyCycle1+1,w
  3702  0ECF  0CCD               	rrf	??_PWM_DutyCycle1+1,f
  3703  0ED0  0CCC               	rrf	??_PWM_DutyCycle1,f
  3704  0ED1  0D4D               	rlf	??_PWM_DutyCycle1+1,w
  3705  0ED2  0CCD               	rrf	??_PWM_DutyCycle1+1,f
  3706  0ED3  0CCC               	rrf	??_PWM_DutyCycle1,f
  3707  0ED4  084C               	movf	??_PWM_DutyCycle1,w
  3708  0ED5  0095               	movwf	21	;volatile
  3709                           
  3710                           ;pwm.c: 92: CCP1CON = (valor << 4)|0X0C;
  3711  0ED6  084A               	movf	PWM_DutyCycle1@valor,w
  3712  0ED7  00CC               	movwf	??_PWM_DutyCycle1
  3713  0ED8  3003               	movlw	3
  3714  0ED9                     u1875:	
  3715  0ED9  1003               	clrc
  3716  0EDA  0DCC               	rlf	??_PWM_DutyCycle1,f
  3717  0EDB  3EFF               	addlw	-1
  3718  0EDC  1D03               	skipz
  3719  0EDD  2ED9               	goto	u1875
  3720  0EDE  1003               	clrc
  3721  0EDF  0D4C               	rlf	??_PWM_DutyCycle1,w
  3722  0EE0  380C               	iorlw	12
  3723  0EE1  0097               	movwf	23	;volatile
  3724  0EE2  0008               	return
  3725  0EE3                     __end_of_PWM_DutyCycle1:	
  3726                           
  3727                           	psect	text15
  3728  0F68                     __ptext15:	
  3729 ;; *************** function _LCD_WriteString *****************
  3730 ;; Defined at:
  3731 ;;		line 61 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;  Str             2    6[BANK0 ] PTR const unsigned char 
  3734 ;;		 -> STR_18(6), STR_17(6), display_pwm(10), display_rpm(10), 
  3735 ;;		 -> STR_13(17), 
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;		None
  3738 ;; Return value:  Size  Location     Type
  3739 ;;		None               void
  3740 ;; Registers used:
  3741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3747 ;;      Params:         0       2       0       0       0
  3748 ;;      Locals:         0       0       0       0       0
  3749 ;;      Temps:          0       0       0       0       0
  3750 ;;      Totals:         0       2       0       0       0
  3751 ;;Total ram usage:        2 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    5
  3754 ;; This function calls:
  3755 ;;		_LCD_WriteData
  3756 ;; This function is called by:
  3757 ;;		_main
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           
  3762                           ;psect for function _LCD_WriteString
  3763  0F68                     _LCD_WriteString:	
  3764  0F68                     l2291:	
  3765                           ;lcd.c: 63: while(*Str != '\0')
  3766                           
  3767                           ;incstack = 0
  3768                           ; Regs used in _LCD_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3769                           
  3770  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  3771  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  3772  0F6A  084D               	movf	LCD_WriteString@Str+1,w
  3773  0F6B  00FF               	movwf	127
  3774  0F6C  084C               	movf	LCD_WriteString@Str,w
  3775  0F6D  0084               	movwf	4
  3776  0F6E  120A  118A  2500  120A  158A  	fcall	stringtab
  3777  0F73  3800               	iorlw	0
  3778  0F74  1903               	btfsc	3,2
  3779  0F75  0008               	return
  3780                           
  3781                           ;lcd.c: 64: {
  3782                           ;lcd.c: 65: LCD_WriteData(*Str);
  3783  0F76  1283               	bcf	3,5	;RP0=0, select bank0
  3784  0F77  1303               	bcf	3,6	;RP1=0, select bank0
  3785  0F78  084D               	movf	LCD_WriteString@Str+1,w
  3786  0F79  00FF               	movwf	127
  3787  0F7A  084C               	movf	LCD_WriteString@Str,w
  3788  0F7B  0084               	movwf	4
  3789  0F7C  120A  118A  2500  120A  158A  	fcall	stringtab
  3790  0F81  120A  158A  2661  120A  158A  	fcall	_LCD_WriteData
  3791                           
  3792                           ;lcd.c: 66: Str++;
  3793  0F86  3001               	movlw	1
  3794  0F87  1283               	bcf	3,5	;RP0=0, select bank0
  3795  0F88  1303               	bcf	3,6	;RP1=0, select bank0
  3796  0F89  07CC               	addwf	LCD_WriteString@Str,f
  3797  0F8A  1803               	skipnc
  3798  0F8B  0ACD               	incf	LCD_WriteString@Str+1,f
  3799  0F8C  2F68               	goto	l2291
  3800  0F8D                     __end_of_LCD_WriteString:	
  3801                           
  3802                           	psect	text16
  3803  0E61                     __ptext16:	
  3804 ;; *************** function _LCD_WriteData *****************
  3805 ;; Defined at:
  3806 ;;		line 47 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;  Byte            1    wreg     unsigned char 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  Byte            1    5[BANK0 ] unsigned char 
  3811 ;; Return value:  Size  Location     Type
  3812 ;;		None               void
  3813 ;; Registers used:
  3814 ;;		wreg
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3820 ;;      Params:         0       0       0       0       0
  3821 ;;      Locals:         0       1       0       0       0
  3822 ;;      Temps:          0       1       0       0       0
  3823 ;;      Totals:         0       2       0       0       0
  3824 ;;Total ram usage:        2 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    4
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_LCD_WriteString
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           
  3835                           ;psect for function _LCD_WriteData
  3836  0E61                     _LCD_WriteData:	
  3837                           
  3838                           ;incstack = 0
  3839                           ; Regs used in _LCD_WriteData: [wreg]
  3840                           ;LCD_WriteData@Byte stored from wreg
  3841  0E61  1283               	bcf	3,5	;RP0=0, select bank0
  3842  0E62  1303               	bcf	3,6	;RP1=0, select bank0
  3843  0E63  00CB               	movwf	LCD_WriteData@Byte
  3844                           
  3845                           ;lcd.c: 49: PORTEbits.RE0 = 1;
  3846  0E64  1409               	bsf	9,0	;volatile
  3847                           
  3848                           ;lcd.c: 51: PORTD = Byte;
  3849  0E65  084B               	movf	LCD_WriteData@Byte,w
  3850  0E66  0088               	movwf	8	;volatile
  3851                           
  3852                           ;lcd.c: 53: PORTEbits.RE1 = 1;
  3853  0E67  1489               	bsf	9,1	;volatile
  3854                           
  3855                           ;lcd.c: 55: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3856  0E68  303D               	movlw	61
  3857  0E69  00CA               	movwf	??_LCD_WriteData
  3858  0E6A                     u2727:	
  3859  0E6A  0BCA               	decfsz	??_LCD_WriteData,f
  3860  0E6B  2E6A               	goto	u2727
  3861                           
  3862                           ;lcd.c: 57: PORTEbits.RE1 = 0;
  3863  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  3864  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  3865  0E6E  1089               	bcf	9,1	;volatile
  3866  0E6F  0008               	return
  3867  0E70                     __end_of_LCD_WriteData:	
  3868                           
  3869                           	psect	text17
  3870  06B2                     __ptext17:	
  3871 ;; *************** function _LCD_Init *****************
  3872 ;; Defined at:
  3873 ;;		line 87 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  3874 ;; Parameters:    Size  Location     Type
  3875 ;;		None
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;		None
  3878 ;; Return value:  Size  Location     Type
  3879 ;;		None               void
  3880 ;; Registers used:
  3881 ;;		wreg, status,2, status,0, pclath, cstack
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3887 ;;      Params:         0       0       0       0       0
  3888 ;;      Locals:         0       0       0       0       0
  3889 ;;      Temps:          0       2       0       0       0
  3890 ;;      Totals:         0       2       0       0       0
  3891 ;;Total ram usage:        2 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; Hardware stack levels required when called:    5
  3894 ;; This function calls:
  3895 ;;		_LCD_WriteCmd
  3896 ;; This function is called by:
  3897 ;;		_main
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           
  3902                           ;psect for function _LCD_Init
  3903  06B2                     _LCD_Init:	
  3904                           
  3905                           ;lcd.c: 90: ADCON1bits.PCFG3 = 0;
  3906                           
  3907                           ;incstack = 0
  3908                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  3909  06B2  1683               	bsf	3,5	;RP0=1, select bank1
  3910  06B3  1303               	bcf	3,6	;RP1=0, select bank1
  3911  06B4  119F               	bcf	31,3	;volatile
  3912                           
  3913                           ;lcd.c: 91: ADCON1bits.PCFG2 = 1;
  3914  06B5  151F               	bsf	31,2	;volatile
  3915                           
  3916                           ;lcd.c: 92: ADCON1bits.PCFG1 = 0;
  3917  06B6  109F               	bcf	31,1	;volatile
  3918                           
  3919                           ;lcd.c: 93: ADCON1bits.PCFG0 = 0;
  3920  06B7  101F               	bcf	31,0	;volatile
  3921                           
  3922                           ;lcd.c: 95: _delay((unsigned long)((15)*(18432000/4000.0)));
  3923  06B8  305A               	movlw	90
  3924  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  3925  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  3926  06BB  00CD               	movwf	??_LCD_Init+1
  3927  06BC  30C3               	movlw	195
  3928  06BD  00CC               	movwf	??_LCD_Init
  3929  06BE                     u2737:	
  3930  06BE  0BCC               	decfsz	??_LCD_Init,f
  3931  06BF  2EBE               	goto	u2737
  3932  06C0  0BCD               	decfsz	??_LCD_Init+1,f
  3933  06C1  2EBE               	goto	u2737
  3934                           
  3935                           ;lcd.c: 97: LCD_WriteCmd(0x30);
  3936  06C2  3030               	movlw	48
  3937  06C3  120A  158A  2652  120A  118A  	fcall	_LCD_WriteCmd
  3938                           
  3939                           ;lcd.c: 98: _delay((unsigned long)((4)*(18432000/4000.0)));
  3940  06C8  3018               	movlw	24
  3941  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  3942  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  3943  06CB  00CD               	movwf	??_LCD_Init+1
  3944  06CC  30EF               	movlw	239
  3945  06CD  00CC               	movwf	??_LCD_Init
  3946  06CE                     u2747:	
  3947  06CE  0BCC               	decfsz	??_LCD_Init,f
  3948  06CF  2ECE               	goto	u2747
  3949  06D0  0BCD               	decfsz	??_LCD_Init+1,f
  3950  06D1  2ECE               	goto	u2747
  3951                           
  3952                           ;lcd.c: 100: LCD_WriteCmd(0x30);
  3953  06D2  3030               	movlw	48
  3954  06D3  120A  158A  2652  120A  118A  	fcall	_LCD_WriteCmd
  3955                           
  3956                           ;lcd.c: 101: _delay((unsigned long)((100)*(18432000/4000000.0)));
  3957  06D8  3099               	movlw	153
  3958  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  3959  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  3960  06DB  00CC               	movwf	??_LCD_Init
  3961  06DC                     u2757:	
  3962  06DC  0BCC               	decfsz	??_LCD_Init,f
  3963  06DD  2EDC               	goto	u2757
  3964                           
  3965                           ;lcd.c: 103: LCD_WriteCmd(0x30);
  3966  06DE  3030               	movlw	48
  3967  06DF  120A  158A  2652  120A  118A  	fcall	_LCD_WriteCmd
  3968                           
  3969                           ;lcd.c: 104: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3970  06E4  303D               	movlw	61
  3971  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  3972  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  3973  06E7  00CC               	movwf	??_LCD_Init
  3974  06E8                     u2767:	
  3975  06E8  0BCC               	decfsz	??_LCD_Init,f
  3976  06E9  2EE8               	goto	u2767
  3977                           
  3978                           ;lcd.c: 106: LCD_WriteCmd(0x38);
  3979  06EA  3038               	movlw	56
  3980  06EB  120A  158A  2652  120A  118A  	fcall	_LCD_WriteCmd
  3981                           
  3982                           ;lcd.c: 107: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3983  06F0  303D               	movlw	61
  3984  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  3985  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  3986  06F3  00CC               	movwf	??_LCD_Init
  3987  06F4                     u2777:	
  3988  06F4  0BCC               	decfsz	??_LCD_Init,f
  3989  06F5  2EF4               	goto	u2777
  3990                           
  3991                           ;lcd.c: 109: LCD_WriteCmd(0x01);
  3992  06F6  3001               	movlw	1
  3993  06F7  120A  158A  2652  120A  118A  	fcall	_LCD_WriteCmd
  3994                           
  3995                           ;lcd.c: 110: _delay((unsigned long)((2)*(18432000/4000.0)));
  3996  06FC  300C               	movlw	12
  3997  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  3998  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  3999  06FF  00CD               	movwf	??_LCD_Init+1
  4000  0700  30F7               	movlw	247
  4001  0701  00CC               	movwf	??_LCD_Init
  4002  0702                     u2787:	
  4003  0702  0BCC               	decfsz	??_LCD_Init,f
  4004  0703  2F02               	goto	u2787
  4005  0704  0BCD               	decfsz	??_LCD_Init+1,f
  4006  0705  2F02               	goto	u2787
  4007                           
  4008                           ;lcd.c: 112: LCD_WriteCmd(0x0C);
  4009  0706  300C               	movlw	12
  4010  0707  120A  158A  2652  120A  118A  	fcall	_LCD_WriteCmd
  4011                           
  4012                           ;lcd.c: 113: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4013  070C  303D               	movlw	61
  4014  070D  1283               	bcf	3,5	;RP0=0, select bank0
  4015  070E  1303               	bcf	3,6	;RP1=0, select bank0
  4016  070F  00CC               	movwf	??_LCD_Init
  4017  0710                     u2797:	
  4018  0710  0BCC               	decfsz	??_LCD_Init,f
  4019  0711  2F10               	goto	u2797
  4020                           
  4021                           ;lcd.c: 115: LCD_WriteCmd(0x06);
  4022  0712  3006               	movlw	6
  4023  0713  120A  158A  2652  120A  118A  	fcall	_LCD_WriteCmd
  4024                           
  4025                           ;lcd.c: 116: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4026  0718  303D               	movlw	61
  4027  0719  1283               	bcf	3,5	;RP0=0, select bank0
  4028  071A  1303               	bcf	3,6	;RP1=0, select bank0
  4029  071B  00CC               	movwf	??_LCD_Init
  4030  071C                     u2807:	
  4031  071C  0BCC               	decfsz	??_LCD_Init,f
  4032  071D  2F1C               	goto	u2807
  4033  071E  0008               	return
  4034  071F                     __end_of_LCD_Init:	
  4035                           
  4036                           	psect	text18
  4037  07E8                     __ptext18:	
  4038 ;; *************** function _LCD_Cursor *****************
  4039 ;; Defined at:
  4040 ;;		line 10 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;  Row             1    wreg     unsigned char 
  4043 ;;  Col             1    4[BANK0 ] unsigned char 
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;  Row             1    6[BANK0 ] unsigned char 
  4046 ;; Return value:  Size  Location     Type
  4047 ;;		None               void
  4048 ;; Registers used:
  4049 ;;		wreg, status,2, status,0
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4055 ;;      Params:         0       1       0       0       0
  4056 ;;      Locals:         0       1       0       0       0
  4057 ;;      Temps:          0       1       0       0       0
  4058 ;;      Totals:         0       3       0       0       0
  4059 ;;Total ram usage:        3 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    4
  4062 ;; This function calls:
  4063 ;;		Nothing
  4064 ;; This function is called by:
  4065 ;;		_main
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           
  4070                           ;psect for function _LCD_Cursor
  4071  07E8                     _LCD_Cursor:	
  4072                           
  4073                           ;incstack = 0
  4074                           ; Regs used in _LCD_Cursor: [wreg+status,2+status,0]
  4075                           ;LCD_Cursor@Row stored from wreg
  4076  07E8  1283               	bcf	3,5	;RP0=0, select bank0
  4077  07E9  1303               	bcf	3,6	;RP1=0, select bank0
  4078  07EA  00CC               	movwf	LCD_Cursor@Row
  4079                           
  4080                           ;lcd.c: 12: PORTEbits.RE0 = 0;
  4081  07EB  1009               	bcf	9,0	;volatile
  4082                           
  4083                           ;lcd.c: 14: if (Row == 0)
  4084  07EC  08CC               	movf	LCD_Cursor@Row,f
  4085  07ED  1D03               	skipz
  4086  07EE  2FF2               	goto	l2277
  4087                           
  4088                           ;lcd.c: 15: {
  4089                           ;lcd.c: 16: PORTD = 0x80 + Col;
  4090  07EF  084A               	movf	LCD_Cursor@Col,w
  4091  07F0  3E80               	addlw	128
  4092  07F1  2FF4               	goto	L2
  4093  07F2                     l2277:	
  4094                           ;lcd.c: 17: }
  4095                           
  4096                           
  4097                           ;lcd.c: 18: else
  4098                           ;lcd.c: 19: {
  4099                           ;lcd.c: 20: PORTD = 0xC0 + Col;
  4100  07F2  084A               	movf	LCD_Cursor@Col,w
  4101  07F3  3EC0               	addlw	192
  4102  07F4                     L2:	
  4103  07F4  0088               	movwf	8	;volatile
  4104                           
  4105                           ;lcd.c: 21: }
  4106                           ;lcd.c: 24: PORTEbits.RE1 = 1;
  4107  07F5  1489               	bsf	9,1	;volatile
  4108                           
  4109                           ;lcd.c: 26: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4110  07F6  303D               	movlw	61
  4111  07F7  00CB               	movwf	??_LCD_Cursor
  4112  07F8                     u2817:	
  4113  07F8  0BCB               	decfsz	??_LCD_Cursor,f
  4114  07F9  2FF8               	goto	u2817
  4115                           
  4116                           ;lcd.c: 28: PORTEbits.RE1 = 0;
  4117  07FA  1283               	bcf	3,5	;RP0=0, select bank0
  4118  07FB  1303               	bcf	3,6	;RP1=0, select bank0
  4119  07FC  1089               	bcf	9,1	;volatile
  4120  07FD  0008               	return
  4121  07FE                     __end_of_LCD_Cursor:	
  4122                           
  4123                           	psect	text19
  4124  0FD7                     __ptext19:	
  4125 ;; *************** function _LCD_Clear *****************
  4126 ;; Defined at:
  4127 ;;		line 71 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;		None
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;		None
  4132 ;; Return value:  Size  Location     Type
  4133 ;;		None               void
  4134 ;; Registers used:
  4135 ;;		wreg, status,2, status,0, pclath, cstack
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4141 ;;      Params:         0       0       0       0       0
  4142 ;;      Locals:         0       0       0       0       0
  4143 ;;      Temps:          0       2       0       0       0
  4144 ;;      Totals:         0       2       0       0       0
  4145 ;;Total ram usage:        2 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    5
  4148 ;; This function calls:
  4149 ;;		_LCD_WriteCmd
  4150 ;; This function is called by:
  4151 ;;		_main
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           
  4156                           ;psect for function _LCD_Clear
  4157  0FD7                     _LCD_Clear:	
  4158                           
  4159                           ;lcd.c: 73: LCD_WriteCmd(0x01);
  4160                           
  4161                           ;incstack = 0
  4162                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  4163  0FD7  3001               	movlw	1
  4164  0FD8  120A  158A  2652  120A  158A  	fcall	_LCD_WriteCmd
  4165                           
  4166                           ;lcd.c: 75: _delay((unsigned long)((2)*(18432000/4000.0)));
  4167  0FDD  300C               	movlw	12
  4168  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  4169  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  4170  0FE0  00CD               	movwf	??_LCD_Clear+1
  4171  0FE1  30F7               	movlw	247
  4172  0FE2  00CC               	movwf	??_LCD_Clear
  4173  0FE3                     u2827:	
  4174  0FE3  0BCC               	decfsz	??_LCD_Clear,f
  4175  0FE4  2FE3               	goto	u2827
  4176  0FE5  0BCD               	decfsz	??_LCD_Clear+1,f
  4177  0FE6  2FE3               	goto	u2827
  4178                           
  4179                           ;lcd.c: 77: LCD_WriteCmd(0x0C);
  4180  0FE7  300C               	movlw	12
  4181  0FE8  120A  158A  2652  120A  158A  	fcall	_LCD_WriteCmd
  4182                           
  4183                           ;lcd.c: 79: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4184  0FED  303D               	movlw	61
  4185  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  4186  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  4187  0FF0  00CC               	movwf	??_LCD_Clear
  4188  0FF1                     u2837:	
  4189  0FF1  0BCC               	decfsz	??_LCD_Clear,f
  4190  0FF2  2FF1               	goto	u2837
  4191                           
  4192                           ;lcd.c: 81: LCD_WriteCmd(0x06);
  4193  0FF3  3006               	movlw	6
  4194  0FF4  120A  158A  2652  120A  158A  	fcall	_LCD_WriteCmd
  4195                           
  4196                           ;lcd.c: 83: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4197  0FF9  303D               	movlw	61
  4198  0FFA  1283               	bcf	3,5	;RP0=0, select bank0
  4199  0FFB  1303               	bcf	3,6	;RP1=0, select bank0
  4200  0FFC  00CC               	movwf	??_LCD_Clear
  4201  0FFD                     u2847:	
  4202  0FFD  0BCC               	decfsz	??_LCD_Clear,f
  4203  0FFE  2FFD               	goto	u2847
  4204  0FFF  0008               	return
  4205  1000                     __end_of_LCD_Clear:	
  4206                           
  4207                           	psect	text20
  4208  0E52                     __ptext20:	
  4209 ;; *************** function _LCD_WriteCmd *****************
  4210 ;; Defined at:
  4211 ;;		line 32 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  Byte            1    wreg     unsigned char 
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;  Byte            1    5[BANK0 ] unsigned char 
  4216 ;; Return value:  Size  Location     Type
  4217 ;;		None               void
  4218 ;; Registers used:
  4219 ;;		wreg
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4225 ;;      Params:         0       0       0       0       0
  4226 ;;      Locals:         0       1       0       0       0
  4227 ;;      Temps:          0       1       0       0       0
  4228 ;;      Totals:         0       2       0       0       0
  4229 ;;Total ram usage:        2 bytes
  4230 ;; Hardware stack levels used:    1
  4231 ;; Hardware stack levels required when called:    4
  4232 ;; This function calls:
  4233 ;;		Nothing
  4234 ;; This function is called by:
  4235 ;;		_LCD_Clear
  4236 ;;		_LCD_Init
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           
  4241                           ;psect for function _LCD_WriteCmd
  4242  0E52                     _LCD_WriteCmd:	
  4243                           
  4244                           ;incstack = 0
  4245                           ; Regs used in _LCD_WriteCmd: [wreg]
  4246                           ;LCD_WriteCmd@Byte stored from wreg
  4247  0E52  1283               	bcf	3,5	;RP0=0, select bank0
  4248  0E53  1303               	bcf	3,6	;RP1=0, select bank0
  4249  0E54  00CB               	movwf	LCD_WriteCmd@Byte
  4250                           
  4251                           ;lcd.c: 34: PORTEbits.RE0 = 0;
  4252  0E55  1009               	bcf	9,0	;volatile
  4253                           
  4254                           ;lcd.c: 36: PORTD = Byte;
  4255  0E56  084B               	movf	LCD_WriteCmd@Byte,w
  4256  0E57  0088               	movwf	8	;volatile
  4257                           
  4258                           ;lcd.c: 39: PORTEbits.RE1 = 1;
  4259  0E58  1489               	bsf	9,1	;volatile
  4260                           
  4261                           ;lcd.c: 41: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4262  0E59  303D               	movlw	61
  4263  0E5A  00CA               	movwf	??_LCD_WriteCmd
  4264  0E5B                     u2857:	
  4265  0E5B  0BCA               	decfsz	??_LCD_WriteCmd,f
  4266  0E5C  2E5B               	goto	u2857
  4267                           
  4268                           ;lcd.c: 43: PORTEbits.RE1 = 0;
  4269  0E5D  1283               	bcf	3,5	;RP0=0, select bank0
  4270  0E5E  1303               	bcf	3,6	;RP1=0, select bank0
  4271  0E5F  1089               	bcf	9,1	;volatile
  4272  0E60  0008               	return
  4273  0E61                     __end_of_LCD_WriteCmd:	
  4274                           
  4275                           	psect	text21
  4276  0E80                     __ptext21:	
  4277 ;; *************** function _ADC_Init *****************
  4278 ;; Defined at:
  4279 ;;		line 6 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\adc.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;		None
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;		None
  4284 ;; Return value:  Size  Location     Type
  4285 ;;		None               void
  4286 ;; Registers used:
  4287 ;;		None
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4293 ;;      Params:         0       0       0       0       0
  4294 ;;      Locals:         0       0       0       0       0
  4295 ;;      Temps:          0       0       0       0       0
  4296 ;;      Totals:         0       0       0       0       0
  4297 ;;Total ram usage:        0 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    4
  4300 ;; This function calls:
  4301 ;;		Nothing
  4302 ;; This function is called by:
  4303 ;;		_main
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           
  4308                           ;psect for function _ADC_Init
  4309  0E80                     _ADC_Init:	
  4310                           
  4311                           ;adc.c: 9: ADCON1bits.ADFM = 1;
  4312                           
  4313                           ;incstack = 0
  4314                           ; Regs used in _ADC_Init: []
  4315  0E80  1683               	bsf	3,5	;RP0=1, select bank1
  4316  0E81  1303               	bcf	3,6	;RP1=0, select bank1
  4317  0E82  179F               	bsf	31,7	;volatile
  4318                           
  4319                           ;adc.c: 32: ADCON1bits.PCFG3 = 1;
  4320  0E83  159F               	bsf	31,3	;volatile
  4321                           
  4322                           ;adc.c: 33: ADCON1bits.PCFG2 = 1;
  4323  0E84  151F               	bsf	31,2	;volatile
  4324                           
  4325                           ;adc.c: 34: ADCON1bits.PCFG1 = 1;
  4326  0E85  149F               	bsf	31,1	;volatile
  4327                           
  4328                           ;adc.c: 35: ADCON1bits.PCFG0 = 0;
  4329  0E86  101F               	bcf	31,0	;volatile
  4330                           
  4331                           ;adc.c: 38: ADCON0bits.ADCS1 = 1;
  4332  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  4333  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  4334  0E89  179F               	bsf	31,7	;volatile
  4335                           
  4336                           ;adc.c: 39: ADCON0bits.ADCS0 = 0;
  4337  0E8A  131F               	bcf	31,6	;volatile
  4338                           
  4339                           ;adc.c: 42: PIE1bits.ADIE = 0;
  4340  0E8B  1683               	bsf	3,5	;RP0=1, select bank1
  4341  0E8C  1303               	bcf	3,6	;RP1=0, select bank1
  4342  0E8D  130C               	bcf	12,6	;volatile
  4343                           
  4344                           ;adc.c: 43: PIR1bits.ADIF = 0;
  4345  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  4346  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  4347  0E90  130C               	bcf	12,6	;volatile
  4348  0E91  0008               	return
  4349  0E92                     __end_of_ADC_Init:	
  4350                           
  4351                           	psect	text22
  4352  0217                     __ptext22:	
  4353 ;; *************** function _ISR *****************
  4354 ;; Defined at:
  4355 ;;		line 319 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;		None               void
  4362 ;; Registers used:
  4363 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4369 ;;      Params:         0       0       0       0       0
  4370 ;;      Locals:         0       0       0       0       0
  4371 ;;      Temps:          0       4       0       0       0
  4372 ;;      Totals:         0       4       0       0       0
  4373 ;;Total ram usage:        4 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    3
  4376 ;; This function calls:
  4377 ;;		_USART_ReceiveChar
  4378 ;;		i1_PWM_DutyCycle2
  4379 ;;		i1_TIMER0_Set
  4380 ;;		i1_USART_WriteString
  4381 ;;		i1___lwdiv
  4382 ;;		i1___wmul
  4383 ;; This function is called by:
  4384 ;;		Interrupt level 1
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           
  4389                           ;psect for function _ISR
  4390  0217                     _ISR:	
  4391                           
  4392                           ;main.c: 322: if (PIR1bits.RCIF)
  4393  0217  1E8C               	btfss	12,5	;volatile
  4394  0218  2B1B               	goto	i1l2653
  4395                           
  4396                           ;main.c: 323: {
  4397                           ;main.c: 324: pwmAnt = pwm;
  4398  0219  0833               	movf	_pwm+1,w
  4399  021A  01B5               	clrf	_pwmAnt+1
  4400  021B  07B5               	addwf	_pwmAnt+1,f
  4401  021C  0832               	movf	_pwm,w
  4402  021D  01B4               	clrf	_pwmAnt
  4403  021E  07B4               	addwf	_pwmAnt,f
  4404                           
  4405                           ;main.c: 325: if (USART_ReceiveChar() == '0')
  4406  021F  120A  158A  2692  120A  118A  	fcall	_USART_ReceiveChar
  4407  0224  3A30               	xorlw	48
  4408  0225  1D03               	skipz
  4409  0226  2A3F               	goto	i1l2589
  4410                           
  4411                           ;main.c: 326: {
  4412                           ;main.c: 327: USART_WriteString("\n\rdesligado\n\r");
  4413  0227  30EA               	movlw	low (STR_1| (0+32768))
  4414  0228  00F1               	movwf	i1USART_WriteString@str
  4415  0229  3085               	movlw	high (STR_1| (0+32768))
  4416  022A  00F2               	movwf	i1USART_WriteString@str+1
  4417  022B  120A  158A  26FE  120A  118A  	fcall	i1_USART_WriteString
  4418                           
  4419                           ;main.c: 328: pwm = 0;
  4420  0230  1283               	bcf	3,5	;RP0=0, select bank0
  4421  0231  1303               	bcf	3,6	;RP1=0, select bank0
  4422  0232  01B2               	clrf	_pwm
  4423  0233  01B3               	clrf	_pwm+1
  4424                           
  4425                           ;main.c: 329: PWM_DutyCycle2(pwm);
  4426  0234  0833               	movf	_pwm+1,w
  4427  0235  01F1               	clrf	i1PWM_DutyCycle2@valor+1
  4428  0236  07F1               	addwf	i1PWM_DutyCycle2@valor+1,f
  4429  0237  0832               	movf	_pwm,w
  4430  0238  01F0               	clrf	i1PWM_DutyCycle2@valor
  4431  0239  07F0               	addwf	i1PWM_DutyCycle2@valor,f
  4432  023A  120A  158A  26AD  120A  118A  	fcall	i1_PWM_DutyCycle2
  4433  023F                     i1l2589:	
  4434                           
  4435                           ;main.c: 331: }
  4436                           ;main.c: 333: if (USART_ReceiveChar() == '1')
  4437  023F  120A  158A  2692  120A  118A  	fcall	_USART_ReceiveChar
  4438  0244  3A31               	xorlw	49
  4439  0245  1D03               	skipz
  4440  0246  2A56               	goto	i1l2595
  4441                           
  4442                           ;main.c: 334: {
  4443                           ;main.c: 335: USART_WriteString("\n\rpwm = 32\n\r");
  4444  0247  30F8               	movlw	low (STR_2| (0+32768))
  4445  0248  00F1               	movwf	i1USART_WriteString@str
  4446  0249  3085               	movlw	high (STR_2| (0+32768))
  4447  024A  00F2               	movwf	i1USART_WriteString@str+1
  4448  024B  120A  158A  26FE  120A  118A  	fcall	i1_USART_WriteString
  4449                           
  4450                           ;main.c: 336: pwm = 32;
  4451  0250  3020               	movlw	32
  4452  0251  1283               	bcf	3,5	;RP0=0, select bank0
  4453  0252  1303               	bcf	3,6	;RP1=0, select bank0
  4454  0253  00B2               	movwf	_pwm
  4455  0254  3000               	movlw	0
  4456  0255  00B3               	movwf	_pwm+1
  4457  0256                     i1l2595:	
  4458                           
  4459                           ;main.c: 338: }
  4460                           ;main.c: 340: if (USART_ReceiveChar() == '2')
  4461  0256  120A  158A  2692  120A  118A  	fcall	_USART_ReceiveChar
  4462  025B  3A32               	xorlw	50
  4463  025C  1D03               	skipz
  4464  025D  2A6D               	goto	i1l2601
  4465                           
  4466                           ;main.c: 341: {
  4467                           ;main.c: 342: USART_WriteString("\n\rpwm = 64\n\r");
  4468  025E  3005               	movlw	low (STR_3| (0+32768))
  4469  025F  00F1               	movwf	i1USART_WriteString@str
  4470  0260  3086               	movlw	high (STR_3| (0+32768))
  4471  0261  00F2               	movwf	i1USART_WriteString@str+1
  4472  0262  120A  158A  26FE  120A  118A  	fcall	i1_USART_WriteString
  4473                           
  4474                           ;main.c: 343: pwm = 64;
  4475  0267  3040               	movlw	64
  4476  0268  1283               	bcf	3,5	;RP0=0, select bank0
  4477  0269  1303               	bcf	3,6	;RP1=0, select bank0
  4478  026A  00B2               	movwf	_pwm
  4479  026B  3000               	movlw	0
  4480  026C  00B3               	movwf	_pwm+1
  4481  026D                     i1l2601:	
  4482                           
  4483                           ;main.c: 345: }
  4484                           ;main.c: 347: if (USART_ReceiveChar() == '3')
  4485  026D  120A  158A  2692  120A  118A  	fcall	_USART_ReceiveChar
  4486  0272  3A33               	xorlw	51
  4487  0273  1D03               	skipz
  4488  0274  2A89               	goto	i1l2611
  4489                           
  4490                           ;main.c: 348: {
  4491                           ;main.c: 349: USART_WriteString("\n\rpwm = 128\n\r");
  4492  0275  30CE               	movlw	low (STR_4| (0+32768))
  4493  0276  00F1               	movwf	i1USART_WriteString@str
  4494  0277  3085               	movlw	high (STR_4| (0+32768))
  4495  0278  00F2               	movwf	i1USART_WriteString@str+1
  4496  0279  120A  158A  26FE  120A  118A  	fcall	i1_USART_WriteString
  4497                           
  4498                           ;main.c: 350: pwm = 128;
  4499  027E  3080               	movlw	128
  4500  027F  1283               	bcf	3,5	;RP0=0, select bank0
  4501  0280  1303               	bcf	3,6	;RP1=0, select bank0
  4502  0281  00B2               	movwf	_pwm
  4503  0282  3000               	movlw	0
  4504  0283  00B3               	movwf	_pwm+1
  4505                           
  4506                           ;main.c: 352: if(PORTBbits.RB0 == 0)
  4507  0284  1806               	btfsc	6,0	;volatile
  4508  0285  2A88               	goto	i1l190
  4509                           
  4510                           ;main.c: 353: {
  4511                           ;main.c: 354: PORTBbits.RB0 = 1;
  4512  0286  1406               	bsf	6,0	;volatile
  4513                           
  4514                           ;main.c: 355: }else{
  4515  0287  2A89               	goto	i1l2611
  4516  0288                     i1l190:	
  4517                           
  4518                           ;main.c: 356: PORTBbits.RB0 = 0;
  4519  0288  1006               	bcf	6,0	;volatile
  4520  0289                     i1l2611:	
  4521                           
  4522                           ;main.c: 357: }
  4523                           ;main.c: 358: }
  4524                           ;main.c: 360: if (USART_ReceiveChar() == '4')
  4525  0289  120A  158A  2692  120A  118A  	fcall	_USART_ReceiveChar
  4526  028E  3A34               	xorlw	52
  4527  028F  1D03               	skipz
  4528  0290  2AA5               	goto	i1l2621
  4529                           
  4530                           ;main.c: 361: {
  4531                           ;main.c: 362: USART_WriteString("\n\rpwm = 256\n\r");
  4532  0291  30B2               	movlw	low (STR_5| (0+32768))
  4533  0292  00F1               	movwf	i1USART_WriteString@str
  4534  0293  3085               	movlw	high (STR_5| (0+32768))
  4535  0294  00F2               	movwf	i1USART_WriteString@str+1
  4536  0295  120A  158A  26FE  120A  118A  	fcall	i1_USART_WriteString
  4537                           
  4538                           ;main.c: 363: pwm = 256;
  4539  029A  3000               	movlw	0
  4540  029B  1283               	bcf	3,5	;RP0=0, select bank0
  4541  029C  1303               	bcf	3,6	;RP1=0, select bank0
  4542  029D  00B2               	movwf	_pwm
  4543  029E  3001               	movlw	1
  4544  029F  00B3               	movwf	_pwm+1
  4545                           
  4546                           ;main.c: 365: if(PORTBbits.RB1 == 0)
  4547  02A0  1886               	btfsc	6,1	;volatile
  4548  02A1  2AA4               	goto	i1l193
  4549                           
  4550                           ;main.c: 366: {
  4551                           ;main.c: 367: PORTBbits.RB1 = 1;
  4552  02A2  1486               	bsf	6,1	;volatile
  4553                           
  4554                           ;main.c: 368: }else{
  4555  02A3  2AA5               	goto	i1l2621
  4556  02A4                     i1l193:	
  4557                           
  4558                           ;main.c: 369: PORTBbits.RB1 = 0;
  4559  02A4  1086               	bcf	6,1	;volatile
  4560  02A5                     i1l2621:	
  4561                           
  4562                           ;main.c: 370: }
  4563                           ;main.c: 371: }
  4564                           ;main.c: 373: if (USART_ReceiveChar() == '5')
  4565  02A5  120A  158A  2692  120A  118A  	fcall	_USART_ReceiveChar
  4566  02AA  3A35               	xorlw	53
  4567  02AB  1D03               	skipz
  4568  02AC  2ABC               	goto	i1l2627
  4569                           
  4570                           ;main.c: 374: {
  4571                           ;main.c: 375: USART_WriteString("\n\rpwm = 512\n\r");
  4572  02AD  30A4               	movlw	low (STR_6| (0+32768))
  4573  02AE  00F1               	movwf	i1USART_WriteString@str
  4574  02AF  3085               	movlw	high (STR_6| (0+32768))
  4575  02B0  00F2               	movwf	i1USART_WriteString@str+1
  4576  02B1  120A  158A  26FE  120A  118A  	fcall	i1_USART_WriteString
  4577                           
  4578                           ;main.c: 376: pwm = 512;
  4579  02B6  3000               	movlw	0
  4580  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  4581  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  4582  02B9  00B2               	movwf	_pwm
  4583  02BA  3002               	movlw	2
  4584  02BB  00B3               	movwf	_pwm+1
  4585  02BC                     i1l2627:	
  4586                           
  4587                           ;main.c: 378: }
  4588                           ;main.c: 380: if (USART_ReceiveChar() == '6')
  4589  02BC  120A  158A  2692  120A  118A  	fcall	_USART_ReceiveChar
  4590  02C1  3A36               	xorlw	54
  4591  02C2  1D03               	skipz
  4592  02C3  2AD3               	goto	i1l2633
  4593                           
  4594                           ;main.c: 381: {
  4595                           ;main.c: 382: USART_WriteString("\n\rpwm = 768\n\r");
  4596  02C4  30DC               	movlw	low (STR_7| (0+32768))
  4597  02C5  00F1               	movwf	i1USART_WriteString@str
  4598  02C6  3085               	movlw	high (STR_7| (0+32768))
  4599  02C7  00F2               	movwf	i1USART_WriteString@str+1
  4600  02C8  120A  158A  26FE  120A  118A  	fcall	i1_USART_WriteString
  4601                           
  4602                           ;main.c: 383: pwm = 768;
  4603  02CD  3000               	movlw	0
  4604  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  4605  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  4606  02D0  00B2               	movwf	_pwm
  4607  02D1  3003               	movlw	3
  4608  02D2  00B3               	movwf	_pwm+1
  4609  02D3                     i1l2633:	
  4610                           
  4611                           ;main.c: 385: }
  4612                           ;main.c: 387: if (USART_ReceiveChar() == '7')
  4613  02D3  120A  158A  2692  120A  118A  	fcall	_USART_ReceiveChar
  4614  02D8  3A37               	xorlw	55
  4615  02D9  1D03               	skipz
  4616  02DA  2AEA               	goto	i1l2639
  4617                           
  4618                           ;main.c: 388: {
  4619                           ;main.c: 389: USART_WriteString("\n\rpwm = 896\n\r");
  4620  02DB  30C0               	movlw	low (STR_8| (0+32768))
  4621  02DC  00F1               	movwf	i1USART_WriteString@str
  4622  02DD  3085               	movlw	high (STR_8| (0+32768))
  4623  02DE  00F2               	movwf	i1USART_WriteString@str+1
  4624  02DF  120A  158A  26FE  120A  118A  	fcall	i1_USART_WriteString
  4625                           
  4626                           ;main.c: 390: pwm = 896;
  4627  02E4  3080               	movlw	128
  4628  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  4629  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  4630  02E7  00B2               	movwf	_pwm
  4631  02E8  3003               	movlw	3
  4632  02E9  00B3               	movwf	_pwm+1
  4633  02EA                     i1l2639:	
  4634                           
  4635                           ;main.c: 392: }
  4636                           ;main.c: 394: if (USART_ReceiveChar() == '8')
  4637  02EA  120A  158A  2692  120A  118A  	fcall	_USART_ReceiveChar
  4638  02EF  3A38               	xorlw	56
  4639  02F0  1D03               	skipz
  4640  02F1  2B01               	goto	i1l2645
  4641                           
  4642                           ;main.c: 395: {
  4643                           ;main.c: 396: USART_WriteString("\n\rpwm = 1000\n\r");
  4644  02F2  3086               	movlw	low (STR_9| (0+32768))
  4645  02F3  00F1               	movwf	i1USART_WriteString@str
  4646  02F4  3085               	movlw	high (STR_9| (0+32768))
  4647  02F5  00F2               	movwf	i1USART_WriteString@str+1
  4648  02F6  120A  158A  26FE  120A  118A  	fcall	i1_USART_WriteString
  4649                           
  4650                           ;main.c: 397: pwm = 1000;
  4651  02FB  30E8               	movlw	232
  4652  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  4653  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  4654  02FE  00B2               	movwf	_pwm
  4655  02FF  3003               	movlw	3
  4656  0300  00B3               	movwf	_pwm+1
  4657  0301                     i1l2645:	
  4658                           
  4659                           ;main.c: 399: }
  4660                           ;main.c: 401: if (USART_ReceiveChar() == '9')
  4661  0301  120A  158A  2692  120A  118A  	fcall	_USART_ReceiveChar
  4662  0306  3A39               	xorlw	57
  4663  0307  1D03               	skipz
  4664  0308  2B18               	goto	i1l2651
  4665                           
  4666                           ;main.c: 402: {
  4667                           ;main.c: 403: USART_WriteString("\n\rpwm = 1023\n\r");
  4668  0309  3095               	movlw	low (STR_10| (0+32768))
  4669  030A  00F1               	movwf	i1USART_WriteString@str
  4670  030B  3085               	movlw	high (STR_10| (0+32768))
  4671  030C  00F2               	movwf	i1USART_WriteString@str+1
  4672  030D  120A  158A  26FE  120A  118A  	fcall	i1_USART_WriteString
  4673                           
  4674                           ;main.c: 404: pwm = 1023;
  4675  0312  30FF               	movlw	255
  4676  0313  1283               	bcf	3,5	;RP0=0, select bank0
  4677  0314  1303               	bcf	3,6	;RP1=0, select bank0
  4678  0315  00B2               	movwf	_pwm
  4679  0316  3003               	movlw	3
  4680  0317  00B3               	movwf	_pwm+1
  4681  0318                     i1l2651:	
  4682                           
  4683                           ;main.c: 406: }
  4684                           ;main.c: 413: PIR1bits.RCIF = 0;
  4685  0318  1283               	bcf	3,5	;RP0=0, select bank0
  4686  0319  1303               	bcf	3,6	;RP1=0, select bank0
  4687  031A  128C               	bcf	12,5	;volatile
  4688  031B                     i1l2653:	
  4689                           
  4690                           ;main.c: 414: }
  4691                           ;main.c: 417: if (PIR1bits.ADIF)
  4692  031B  1B0C               	btfsc	12,6	;volatile
  4693                           
  4694                           ;main.c: 418: {
  4695                           ;main.c: 422: PIR1bits.ADIF = 0;
  4696  031C  130C               	bcf	12,6	;volatile
  4697                           
  4698                           ;main.c: 423: }
  4699                           ;main.c: 427: if (INTCONbits.T0IF)
  4700  031D  1D0B               	btfss	11,2	;volatile
  4701  031E  2B6A               	goto	i1l2679
  4702                           
  4703                           ;main.c: 428: {
  4704                           ;main.c: 430: TIMER0_Set(238);
  4705  031F  30EE               	movlw	238
  4706  0320  120A  158A  2629  120A  118A  	fcall	i1_TIMER0_Set
  4707                           
  4708                           ;main.c: 433: if (contagens_tm0 < 499)
  4709  0325  3001               	movlw	1
  4710  0326  1283               	bcf	3,5	;RP0=0, select bank0
  4711  0327  1303               	bcf	3,6	;RP1=0, select bank0
  4712  0328  0225               	subwf	_contagens_tm0+1,w
  4713  0329  30F3               	movlw	243
  4714  032A  1903               	skipnz
  4715  032B  0224               	subwf	_contagens_tm0,w
  4716  032C  1803               	skipnc
  4717  032D  2B36               	goto	i1l2665
  4718                           
  4719                           ;main.c: 434: {
  4720                           ;main.c: 436: contagens_tm0++;
  4721  032E  3001               	movlw	1
  4722  032F  07A4               	addwf	_contagens_tm0,f
  4723  0330  1803               	skipnc
  4724  0331  0AA5               	incf	_contagens_tm0+1,f
  4725  0332  3000               	movlw	0
  4726  0333  07A5               	addwf	_contagens_tm0+1,f
  4727                           
  4728                           ;main.c: 439: PORTBbits.RB6 = 1;
  4729  0334  1706               	bsf	6,6	;volatile
  4730                           
  4731                           ;main.c: 440: }
  4732  0335  2B69               	goto	i1l2677
  4733  0336                     i1l2665:	
  4734                           
  4735                           ;main.c: 441: else
  4736                           ;main.c: 442: {
  4737                           ;main.c: 444: contagens_tm0 = 0;
  4738  0336  01A4               	clrf	_contagens_tm0
  4739  0337  01A5               	clrf	_contagens_tm0+1
  4740                           
  4741                           ;main.c: 447: pulsos = (TMR1H << 8) + TMR1L;
  4742  0338  080F               	movf	15,w	;volatile
  4743  0339  01B1               	clrf	_pulsos+1
  4744  033A  07B1               	addwf	_pulsos+1,f
  4745  033B  080E               	movf	14,w	;volatile
  4746  033C  01B0               	clrf	_pulsos
  4747  033D  07B0               	addwf	_pulsos,f
  4748                           
  4749                           ;main.c: 448: rpm = ((pulsos / pas_cooler) * 120);
  4750  033E  086B               	movf	_pas_cooler+1,w
  4751  033F  01F1               	clrf	i1___lwdiv@divisor+1
  4752  0340  07F1               	addwf	i1___lwdiv@divisor+1,f
  4753  0341  086A               	movf	_pas_cooler,w
  4754  0342  01F0               	clrf	i1___lwdiv@divisor
  4755  0343  07F0               	addwf	i1___lwdiv@divisor,f
  4756  0344  0831               	movf	_pulsos+1,w
  4757  0345  01F3               	clrf	i1___lwdiv@dividend+1
  4758  0346  07F3               	addwf	i1___lwdiv@dividend+1,f
  4759  0347  0830               	movf	_pulsos,w
  4760  0348  01F2               	clrf	i1___lwdiv@dividend
  4761  0349  07F2               	addwf	i1___lwdiv@dividend,f
  4762  034A  120A  118A  27AA  120A  118A  	fcall	i1___lwdiv
  4763  034F  0871               	movf	?i1___lwdiv+1,w
  4764  0350  01F9               	clrf	i1___wmul@multiplier+1
  4765  0351  07F9               	addwf	i1___wmul@multiplier+1,f
  4766  0352  0870               	movf	?i1___lwdiv,w
  4767  0353  01F8               	clrf	i1___wmul@multiplier
  4768  0354  07F8               	addwf	i1___wmul@multiplier,f
  4769  0355  3078               	movlw	120
  4770  0356  00FA               	movwf	i1___wmul@multiplicand
  4771  0357  3000               	movlw	0
  4772  0358  00FB               	movwf	i1___wmul@multiplicand+1
  4773  0359  120A  158A  2721  120A  118A  	fcall	i1___wmul
  4774  035E  0879               	movf	?i1___wmul+1,w
  4775  035F  1283               	bcf	3,5	;RP0=0, select bank0
  4776  0360  1303               	bcf	3,6	;RP1=0, select bank0
  4777  0361  01B7               	clrf	_rpm+1
  4778  0362  07B7               	addwf	_rpm+1,f
  4779  0363  0878               	movf	?i1___wmul,w
  4780  0364  01B6               	clrf	_rpm
  4781  0365  07B6               	addwf	_rpm,f
  4782                           
  4783                           ;main.c: 451: TMR1L = 0x00;
  4784  0366  018E               	clrf	14	;volatile
  4785                           
  4786                           ;main.c: 452: TMR1H = 0x00;
  4787  0367  018F               	clrf	15	;volatile
  4788                           
  4789                           ;main.c: 455: PORTBbits.RB6 = 0;
  4790  0368  1306               	bcf	6,6	;volatile
  4791  0369                     i1l2677:	
  4792                           
  4793                           ;main.c: 456: }
  4794                           ;main.c: 459: INTCONbits.T0IF = 0;
  4795  0369  110B               	bcf	11,2	;volatile
  4796  036A                     i1l2679:	
  4797                           
  4798                           ;main.c: 460: }
  4799                           ;main.c: 463: if (PIR1bits.TMR1IF)
  4800  036A  180C               	btfsc	12,0	;volatile
  4801                           
  4802                           ;main.c: 464: {
  4803                           ;main.c: 468: PIR1bits.TMR1IF = 0;
  4804  036B  100C               	bcf	12,0	;volatile
  4805                           
  4806                           ;main.c: 469: }
  4807                           ;main.c: 472: if (PIR1bits.SSPIF)
  4808  036C  198C               	btfsc	12,3	;volatile
  4809                           
  4810                           ;main.c: 473: {
  4811                           ;main.c: 477: PIR1bits.SSPIF = 0;
  4812  036D  118C               	bcf	12,3	;volatile
  4813  036E  0849               	movf	??_ISR+3,w
  4814  036F  00FF               	movwf	127
  4815  0370  0848               	movf	??_ISR+2,w
  4816  0371  008A               	movwf	10
  4817  0372  0847               	movf	??_ISR+1,w
  4818  0373  0084               	movwf	4
  4819  0374  0E46               	swapf	??_ISR^0,w
  4820  0375  0083               	movwf	3
  4821  0376  0EFE               	swapf	126,f
  4822  0377  0E7E               	swapf	126,w
  4823  0378  0009               	retfie
  4824  0379                     __end_of_ISR:	
  4825                           
  4826                           	psect	intentry
  4827  0004                     __pintentry:	
  4828                           ;incstack = 0
  4829                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4830                           
  4831  0004                     interrupt_function:	
  4832  007E                     saved_w	set	btemp
  4833  0004  00FE               	movwf	btemp
  4834  0005  0E03               	swapf	3,w
  4835  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4836  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4837  0008  00C6               	movwf	??_ISR
  4838  0009  0804               	movf	4,w
  4839  000A  00C7               	movwf	??_ISR+1
  4840  000B  080A               	movf	10,w
  4841  000C  00C8               	movwf	??_ISR+2
  4842  000D  087F               	movf	btemp+1,w
  4843  000E  00C9               	movwf	??_ISR+3
  4844  000F  120A  118A  2A17   	ljmp	_ISR
  4845                           
  4846                           	psect	text23
  4847  0F21                     __ptext23:	
  4848 ;; *************** function i1___wmul *****************
  4849 ;; Defined at:
  4850 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  4851 ;; Parameters:    Size  Location     Type
  4852 ;;  multiplier      2    8[COMMON] unsigned int 
  4853 ;;  multiplicand    2   10[COMMON] unsigned int 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  __wmul          2   12[COMMON] unsigned int 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  2    8[COMMON] unsigned int 
  4858 ;; Registers used:
  4859 ;;		wreg, status,2, status,0
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4865 ;;      Params:         4       0       0       0       0
  4866 ;;      Locals:         2       0       0       0       0
  4867 ;;      Temps:          0       0       0       0       0
  4868 ;;      Totals:         6       0       0       0       0
  4869 ;;Total ram usage:        6 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; This function calls:
  4872 ;;		Nothing
  4873 ;; This function is called by:
  4874 ;;		_ISR
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           
  4879                           ;psect for function i1___wmul
  4880  0F21                     i1___wmul:	
  4881                           
  4882                           ;incstack = 0
  4883                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  4884  0F21  01FC               	clrf	i1___wmul@product
  4885  0F22  01FD               	clrf	i1___wmul@product+1
  4886  0F23                     i1l2453:	
  4887  0F23  1C78               	btfss	i1___wmul@multiplier,0
  4888  0F24  2F2B               	goto	i1l605
  4889  0F25  087A               	movf	i1___wmul@multiplicand,w
  4890  0F26  07FC               	addwf	i1___wmul@product,f
  4891  0F27  1803               	skipnc
  4892  0F28  0AFD               	incf	i1___wmul@product+1,f
  4893  0F29  087B               	movf	i1___wmul@multiplicand+1,w
  4894  0F2A  07FD               	addwf	i1___wmul@product+1,f
  4895  0F2B                     i1l605:	
  4896  0F2B  3001               	movlw	1
  4897  0F2C                     u220_25:	
  4898  0F2C  1003               	clrc
  4899  0F2D  0DFA               	rlf	i1___wmul@multiplicand,f
  4900  0F2E  0DFB               	rlf	i1___wmul@multiplicand+1,f
  4901  0F2F  3EFF               	addlw	-1
  4902  0F30  1D03               	skipz
  4903  0F31  2F2C               	goto	u220_25
  4904  0F32  3001               	movlw	1
  4905  0F33                     u221_25:	
  4906  0F33  1003               	clrc
  4907  0F34  0CF9               	rrf	i1___wmul@multiplier+1,f
  4908  0F35  0CF8               	rrf	i1___wmul@multiplier,f
  4909  0F36  3EFF               	addlw	-1
  4910  0F37  1D03               	skipz
  4911  0F38  2F33               	goto	u221_25
  4912  0F39  0879               	movf	i1___wmul@multiplier+1,w
  4913  0F3A  0478               	iorwf	i1___wmul@multiplier,w
  4914  0F3B  1D03               	skipz
  4915  0F3C  2F23               	goto	i1l2453
  4916  0F3D  087D               	movf	i1___wmul@product+1,w
  4917  0F3E  01F9               	clrf	?i1___wmul+1
  4918  0F3F  07F9               	addwf	?i1___wmul+1,f
  4919  0F40  087C               	movf	i1___wmul@product,w
  4920  0F41  01F8               	clrf	?i1___wmul
  4921  0F42  07F8               	addwf	?i1___wmul,f
  4922  0F43  0008               	return
  4923  0F44                     __end_ofi1___wmul:	
  4924                           
  4925                           	psect	text24
  4926  07AA                     __ptext24:	
  4927 ;; *************** function i1___lwdiv *****************
  4928 ;; Defined at:
  4929 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;  divisor         2    0[COMMON] unsigned int 
  4932 ;;  dividend        2    2[COMMON] unsigned int 
  4933 ;; Auto vars:     Size  Location     Type
  4934 ;;  __lwdiv         2    5[COMMON] unsigned int 
  4935 ;;  __lwdiv         1    7[COMMON] unsigned char 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  2    0[COMMON] unsigned int 
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, status,0
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4945 ;;      Params:         4       0       0       0       0
  4946 ;;      Locals:         3       0       0       0       0
  4947 ;;      Temps:          1       0       0       0       0
  4948 ;;      Totals:         8       0       0       0       0
  4949 ;;Total ram usage:        8 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; This function calls:
  4952 ;;		Nothing
  4953 ;; This function is called by:
  4954 ;;		_ISR
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           
  4959                           ;psect for function i1___lwdiv
  4960  07AA                     i1___lwdiv:	
  4961                           
  4962                           ;incstack = 0
  4963                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  4964  07AA  01F5               	clrf	i1___lwdiv@quotient
  4965  07AB  01F6               	clrf	i1___lwdiv@quotient+1
  4966  07AC  0871               	movf	i1___lwdiv@divisor+1,w
  4967  07AD  0470               	iorwf	i1___lwdiv@divisor,w
  4968  07AE  1903               	skipnz
  4969  07AF  2FE1               	goto	i1l2485
  4970  07B0  01F7               	clrf	i1___lwdiv@counter
  4971  07B1  0AF7               	incf	i1___lwdiv@counter,f
  4972  07B2                     i1l2473:	
  4973  07B2  1BF1               	btfsc	i1___lwdiv@divisor+1,7
  4974  07B3  2FC0               	goto	i1l2475
  4975  07B4  3001               	movlw	1
  4976  07B5                     u224_25:	
  4977  07B5  1003               	clrc
  4978  07B6  0DF0               	rlf	i1___lwdiv@divisor,f
  4979  07B7  0DF1               	rlf	i1___lwdiv@divisor+1,f
  4980  07B8  3EFF               	addlw	-1
  4981  07B9  1D03               	skipz
  4982  07BA  2FB5               	goto	u224_25
  4983  07BB  3001               	movlw	1
  4984  07BC  00F4               	movwf	??i1___lwdiv
  4985  07BD  0874               	movf	??i1___lwdiv,w
  4986  07BE  07F7               	addwf	i1___lwdiv@counter,f
  4987  07BF  2FB2               	goto	i1l2473
  4988  07C0                     i1l2475:	
  4989  07C0  3001               	movlw	1
  4990  07C1                     u226_25:	
  4991  07C1  1003               	clrc
  4992  07C2  0DF5               	rlf	i1___lwdiv@quotient,f
  4993  07C3  0DF6               	rlf	i1___lwdiv@quotient+1,f
  4994  07C4  3EFF               	addlw	-1
  4995  07C5  1D03               	skipz
  4996  07C6  2FC1               	goto	u226_25
  4997  07C7  0871               	movf	i1___lwdiv@divisor+1,w
  4998  07C8  0273               	subwf	i1___lwdiv@dividend+1,w
  4999  07C9  1D03               	skipz
  5000  07CA  2FCD               	goto	u227_25
  5001  07CB  0870               	movf	i1___lwdiv@divisor,w
  5002  07CC  0272               	subwf	i1___lwdiv@dividend,w
  5003  07CD                     u227_25:	
  5004  07CD  1C03               	skipc
  5005  07CE  2FD6               	goto	i1l2481
  5006  07CF  0870               	movf	i1___lwdiv@divisor,w
  5007  07D0  02F2               	subwf	i1___lwdiv@dividend,f
  5008  07D1  0871               	movf	i1___lwdiv@divisor+1,w
  5009  07D2  1C03               	skipc
  5010  07D3  03F3               	decf	i1___lwdiv@dividend+1,f
  5011  07D4  02F3               	subwf	i1___lwdiv@dividend+1,f
  5012  07D5  1475               	bsf	i1___lwdiv@quotient,0
  5013  07D6                     i1l2481:	
  5014  07D6  3001               	movlw	1
  5015  07D7                     u228_25:	
  5016  07D7  1003               	clrc
  5017  07D8  0CF1               	rrf	i1___lwdiv@divisor+1,f
  5018  07D9  0CF0               	rrf	i1___lwdiv@divisor,f
  5019  07DA  3EFF               	addlw	-1
  5020  07DB  1D03               	skipz
  5021  07DC  2FD7               	goto	u228_25
  5022  07DD  3001               	movlw	1
  5023  07DE  02F7               	subwf	i1___lwdiv@counter,f
  5024  07DF  1D03               	btfss	3,2
  5025  07E0  2FC0               	goto	i1l2475
  5026  07E1                     i1l2485:	
  5027  07E1  0876               	movf	i1___lwdiv@quotient+1,w
  5028  07E2  01F1               	clrf	?i1___lwdiv+1
  5029  07E3  07F1               	addwf	?i1___lwdiv+1,f
  5030  07E4  0875               	movf	i1___lwdiv@quotient,w
  5031  07E5  01F0               	clrf	?i1___lwdiv
  5032  07E6  07F0               	addwf	?i1___lwdiv,f
  5033  07E7  0008               	return
  5034  07E8                     __end_ofi1___lwdiv:	
  5035                           
  5036                           	psect	text25
  5037  0E29                     __ptext25:	
  5038 ;; *************** function i1_TIMER0_Set *****************
  5039 ;; Defined at:
  5040 ;;		line 20 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\timers.c"
  5041 ;; Parameters:    Size  Location     Type
  5042 ;;  contagens       1    wreg     unsigned char 
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;  contagens       1    0[COMMON] unsigned char 
  5045 ;; Return value:  Size  Location     Type
  5046 ;;		None               void
  5047 ;; Registers used:
  5048 ;;		wreg
  5049 ;; Tracked objects:
  5050 ;;		On entry : 0/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5054 ;;      Params:         0       0       0       0       0
  5055 ;;      Locals:         1       0       0       0       0
  5056 ;;      Temps:          0       0       0       0       0
  5057 ;;      Totals:         1       0       0       0       0
  5058 ;;Total ram usage:        1 bytes
  5059 ;; Hardware stack levels used:    1
  5060 ;; This function calls:
  5061 ;;		Nothing
  5062 ;; This function is called by:
  5063 ;;		_ISR
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           
  5068                           ;psect for function i1_TIMER0_Set
  5069  0E29                     i1_TIMER0_Set:	
  5070                           
  5071                           ;incstack = 0
  5072                           ; Regs used in i1_TIMER0_Set: [wreg]
  5073                           ;i1TIMER0_Set@contagens stored from wreg
  5074  0E29  00F0               	movwf	i1TIMER0_Set@contagens
  5075                           
  5076                           ;timers.c: 22: TMR0 = contagens;
  5077  0E2A  0870               	movf	i1TIMER0_Set@contagens,w
  5078  0E2B  1283               	bcf	3,5	;RP0=0, select bank0
  5079  0E2C  1303               	bcf	3,6	;RP1=0, select bank0
  5080  0E2D  0081               	movwf	1	;volatile
  5081  0E2E  0008               	return
  5082  0E2F                     __end_ofi1_TIMER0_Set:	
  5083                           
  5084                           	psect	text26
  5085  0EAD                     __ptext26:	
  5086 ;; *************** function i1_PWM_DutyCycle2 *****************
  5087 ;; Defined at:
  5088 ;;		line 96 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  5089 ;; Parameters:    Size  Location     Type
  5090 ;;  valor           2    0[COMMON] int 
  5091 ;; Auto vars:     Size  Location     Type
  5092 ;;		None
  5093 ;; Return value:  Size  Location     Type
  5094 ;;		None               void
  5095 ;; Registers used:
  5096 ;;		wreg, status,2, status,0
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5102 ;;      Params:         2       0       0       0       0
  5103 ;;      Locals:         0       0       0       0       0
  5104 ;;      Temps:          2       0       0       0       0
  5105 ;;      Totals:         4       0       0       0       0
  5106 ;;Total ram usage:        4 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; This function calls:
  5109 ;;		Nothing
  5110 ;; This function is called by:
  5111 ;;		_ISR
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           
  5116                           ;psect for function i1_PWM_DutyCycle2
  5117  0EAD                     i1_PWM_DutyCycle2:	
  5118                           
  5119                           ;pwm.c: 98: CCPR2L = valor >> 2;
  5120                           
  5121                           ;incstack = 0
  5122                           ; Regs used in i1_PWM_DutyCycle2: [wreg+status,2+status,0]
  5123  0EAD  0871               	movf	i1PWM_DutyCycle2@valor+1,w
  5124  0EAE  00F3               	movwf	??i1_PWM_DutyCycle2+1
  5125  0EAF  0870               	movf	i1PWM_DutyCycle2@valor,w
  5126  0EB0  00F2               	movwf	??i1_PWM_DutyCycle2
  5127  0EB1  0D73               	rlf	??i1_PWM_DutyCycle2+1,w
  5128  0EB2  0CF3               	rrf	??i1_PWM_DutyCycle2+1,f
  5129  0EB3  0CF2               	rrf	??i1_PWM_DutyCycle2,f
  5130  0EB4  0D73               	rlf	??i1_PWM_DutyCycle2+1,w
  5131  0EB5  0CF3               	rrf	??i1_PWM_DutyCycle2+1,f
  5132  0EB6  0CF2               	rrf	??i1_PWM_DutyCycle2,f
  5133  0EB7  0872               	movf	??i1_PWM_DutyCycle2,w
  5134  0EB8  1283               	bcf	3,5	;RP0=0, select bank0
  5135  0EB9  1303               	bcf	3,6	;RP1=0, select bank0
  5136  0EBA  009B               	movwf	27	;volatile
  5137                           
  5138                           ;pwm.c: 99: CCP2CON = (valor << 4)|0X0C;
  5139  0EBB  0870               	movf	i1PWM_DutyCycle2@valor,w
  5140  0EBC  00F2               	movwf	??i1_PWM_DutyCycle2
  5141  0EBD  3003               	movlw	3
  5142  0EBE                     u218_25:	
  5143  0EBE  1003               	clrc
  5144  0EBF  0DF2               	rlf	??i1_PWM_DutyCycle2,f
  5145  0EC0  3EFF               	addlw	-1
  5146  0EC1  1D03               	skipz
  5147  0EC2  2EBE               	goto	u218_25
  5148  0EC3  1003               	clrc
  5149  0EC4  0D72               	rlf	??i1_PWM_DutyCycle2,w
  5150  0EC5  380C               	iorlw	12
  5151  0EC6  009D               	movwf	29	;volatile
  5152  0EC7  0008               	return
  5153  0EC8                     __end_ofi1_PWM_DutyCycle2:	
  5154                           
  5155                           	psect	text27
  5156  0E92                     __ptext27:	
  5157 ;; *************** function _USART_ReceiveChar *****************
  5158 ;; Defined at:
  5159 ;;		line 63 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;		None
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  byte            1    4[COMMON] unsigned char 
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  1    wreg      unsigned char 
  5166 ;; Registers used:
  5167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5173 ;;      Params:         0       0       0       0       0
  5174 ;;      Locals:         1       0       0       0       0
  5175 ;;      Temps:          1       0       0       0       0
  5176 ;;      Totals:         2       0       0       0       0
  5177 ;;Total ram usage:        2 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:    2
  5180 ;; This function calls:
  5181 ;;		i1_USART_WriteString
  5182 ;; This function is called by:
  5183 ;;		_ISR
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           
  5188                           ;psect for function _USART_ReceiveChar
  5189  0E92                     _USART_ReceiveChar:	
  5190                           
  5191                           ;usart.c: 65: unsigned char byte;
  5192                           ;usart.c: 67: if (!OERR)
  5193                           
  5194                           ;incstack = 0
  5195                           ; Regs used in _USART_ReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5196  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  5197  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  5198  0E94  1898               	btfsc	24,1	;volatile
  5199  0E95  2E9B               	goto	i1l2147
  5200                           
  5201                           ;usart.c: 68: {
  5202                           ;usart.c: 69: byte = RCREG;
  5203  0E96  081A               	movf	26,w	;volatile
  5204  0E97  00F3               	movwf	??_USART_ReceiveChar
  5205  0E98  0873               	movf	??_USART_ReceiveChar,w
  5206  0E99  00F4               	movwf	USART_ReceiveChar@byte
  5207  0E9A  2EAA               	goto	i1l2155
  5208  0E9B                     i1l2147:	
  5209                           ;usart.c: 71: }
  5210                           
  5211                           ;usart.c: 70: PIR1bits.RCIF = 0;
  5212                           
  5213                           
  5214                           ;usart.c: 72: else
  5215                           ;usart.c: 73: {
  5216                           ;usart.c: 74: USART_WriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  5217  0E9B  301C               	movlw	low (STR_19| (0+32768))
  5218  0E9C  00F1               	movwf	i1USART_WriteString@str
  5219  0E9D  3085               	movlw	high (STR_19| (0+32768))
  5220  0E9E  00F2               	movwf	i1USART_WriteString@str+1
  5221  0E9F  120A  158A  26FE   	fcall	i1_USART_WriteString
  5222                           
  5223                           ;usart.c: 76: RCSTAbits.CREN = 0;
  5224  0EA2  1283               	bcf	3,5	;RP0=0, select bank0
  5225  0EA3  1303               	bcf	3,6	;RP1=0, select bank0
  5226  0EA4  1218               	bcf	24,4	;volatile
  5227                           
  5228                           ;usart.c: 77: byte = RCREG;
  5229  0EA5  081A               	movf	26,w	;volatile
  5230  0EA6  00F3               	movwf	??_USART_ReceiveChar
  5231  0EA7  0873               	movf	??_USART_ReceiveChar,w
  5232  0EA8  00F4               	movwf	USART_ReceiveChar@byte
  5233                           
  5234                           ;usart.c: 78: RCSTAbits.CREN = 1;
  5235  0EA9  1618               	bsf	24,4	;volatile
  5236  0EAA                     i1l2155:	
  5237                           
  5238                           ;usart.c: 79: PIR1bits.RCIF = 0;
  5239  0EAA  128C               	bcf	12,5	;volatile
  5240                           
  5241                           ;usart.c: 80: }
  5242                           ;usart.c: 82: return(byte);
  5243  0EAB  0874               	movf	USART_ReceiveChar@byte,w
  5244  0EAC  0008               	return
  5245  0EAD                     __end_of_USART_ReceiveChar:	
  5246                           
  5247                           	psect	text28
  5248  0EFE                     __ptext28:	
  5249 ;; *************** function i1_USART_WriteString *****************
  5250 ;; Defined at:
  5251 ;;		line 52 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;  str             2    1[COMMON] PTR const unsigned char 
  5254 ;;		 -> STR_19(40), STR_16(3), display_rpm(10), STR_12(20), 
  5255 ;;		 -> STR_11(29), STR_10(15), STR_9(15), STR_8(14), 
  5256 ;;		 -> STR_7(14), STR_6(14), STR_5(14), STR_4(14), 
  5257 ;;		 -> STR_3(13), STR_2(13), STR_1(14), 
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;		None
  5260 ;; Return value:  Size  Location     Type
  5261 ;;		None               void
  5262 ;; Registers used:
  5263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5264 ;; Tracked objects:
  5265 ;;		On entry : 0/0
  5266 ;;		On exit  : 0/0
  5267 ;;		Unchanged: 0/0
  5268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5269 ;;      Params:         2       0       0       0       0
  5270 ;;      Locals:         0       0       0       0       0
  5271 ;;      Temps:          0       0       0       0       0
  5272 ;;      Totals:         2       0       0       0       0
  5273 ;;Total ram usage:        2 bytes
  5274 ;; Hardware stack levels used:    1
  5275 ;; Hardware stack levels required when called:    1
  5276 ;; This function calls:
  5277 ;;		i1_USART_WriteChar
  5278 ;; This function is called by:
  5279 ;;		_ISR
  5280 ;;		_USART_ReceiveChar
  5281 ;; This function uses a non-reentrant model
  5282 ;;
  5283                           
  5284                           
  5285                           ;psect for function i1_USART_WriteString
  5286  0EFE                     i1_USART_WriteString:	
  5287  0EFE                     i1l2071:	
  5288                           ;usart.c: 54: while(*str != '\0')
  5289                           
  5290                           ;incstack = 0
  5291                           ; Regs used in i1_USART_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  5292                           
  5293  0EFE  0872               	movf	i1USART_WriteString@str+1,w
  5294  0EFF  1283               	bcf	3,5	;RP0=0, select bank0
  5295  0F00  1303               	bcf	3,6	;RP1=0, select bank0
  5296  0F01  00FF               	movwf	127
  5297  0F02  0871               	movf	i1USART_WriteString@str,w
  5298  0F03  0084               	movwf	4
  5299  0F04  120A  118A  2500  120A  158A  	fcall	stringtab
  5300  0F09  3800               	iorlw	0
  5301  0F0A  1903               	btfsc	3,2
  5302  0F0B  0008               	return
  5303                           
  5304                           ;usart.c: 55: {
  5305                           ;usart.c: 56: USART_WriteChar(*str);
  5306  0F0C  0872               	movf	i1USART_WriteString@str+1,w
  5307  0F0D  1283               	bcf	3,5	;RP0=0, select bank0
  5308  0F0E  1303               	bcf	3,6	;RP1=0, select bank0
  5309  0F0F  00FF               	movwf	127
  5310  0F10  0871               	movf	i1USART_WriteString@str,w
  5311  0F11  0084               	movwf	4
  5312  0F12  120A  118A  2500  120A  158A  	fcall	stringtab
  5313  0F17  120A  158A  262F  120A  158A  	fcall	i1_USART_WriteChar
  5314                           
  5315                           ;usart.c: 57: str++;
  5316  0F1C  3001               	movlw	1
  5317  0F1D  07F1               	addwf	i1USART_WriteString@str,f
  5318  0F1E  1803               	skipnc
  5319  0F1F  0AF2               	incf	i1USART_WriteString@str+1,f
  5320  0F20  2EFE               	goto	i1l2071
  5321  0F21                     __end_ofi1_USART_WriteString:	
  5322                           
  5323                           	psect	text29
  5324  0E2F                     __ptext29:	
  5325 ;; *************** function i1_USART_WriteChar *****************
  5326 ;; Defined at:
  5327 ;;		line 44 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;  byte            1    wreg     unsigned char 
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;  byte            1    0[COMMON] unsigned char 
  5332 ;; Return value:  Size  Location     Type
  5333 ;;		None               void
  5334 ;; Registers used:
  5335 ;;		wreg
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5341 ;;      Params:         0       0       0       0       0
  5342 ;;      Locals:         1       0       0       0       0
  5343 ;;      Temps:          0       0       0       0       0
  5344 ;;      Totals:         1       0       0       0       0
  5345 ;;Total ram usage:        1 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; This function calls:
  5348 ;;		Nothing
  5349 ;; This function is called by:
  5350 ;;		i1_USART_WriteString
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           
  5355                           ;psect for function i1_USART_WriteChar
  5356  0E2F                     i1_USART_WriteChar:	
  5357                           
  5358                           ;incstack = 0
  5359                           ; Regs used in i1_USART_WriteChar: [wreg]
  5360                           ;i1USART_WriteChar@byte stored from wreg
  5361  0E2F  00F0               	movwf	i1USART_WriteChar@byte
  5362  0E30                     i1l234:	
  5363                           ;usart.c: 46: while(!PIR1bits.TXIF);
  5364                           
  5365  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  5366  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  5367  0E32  1E0C               	btfss	12,4	;volatile
  5368  0E33  2E30               	goto	i1l234
  5369                           
  5370                           ;usart.c: 47: TXREG = byte;
  5371  0E34  0870               	movf	i1USART_WriteChar@byte,w
  5372  0E35  0099               	movwf	25	;volatile
  5373  0E36  0008               	return
  5374  0E37                     __end_ofi1_USART_WriteChar:	
  5375  007E                     btemp	set	126	;btemp
  5376  007E                     wtemp	set	126
  5377  007E                     wtemp0	set	126
  5378  0080                     wtemp1	set	128
  5379  0082                     wtemp2	set	130
  5380  0084                     wtemp3	set	132
  5381  0086                     wtemp4	set	134
  5382  0088                     wtemp5	set	136
  5383  007F                     wtemp6	set	127
  5384  007E                     ttemp	set	126
  5385  007E                     ttemp0	set	126
  5386  0081                     ttemp1	set	129
  5387  0084                     ttemp2	set	132
  5388  0087                     ttemp3	set	135
  5389  007F                     ttemp4	set	127
  5390  007E                     ltemp	set	126
  5391  007E                     ltemp0	set	126
  5392  0082                     ltemp1	set	130
  5393  0086                     ltemp2	set	134
  5394  0080                     ltemp3	set	128


Data Sizes:
    Strings     263
    Constant    10
    Data        4
    BSS         80
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     36      76
    BANK1            80      3      47
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_15(CODE[5]), STR_14(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> display_pwm(BANK1[10]), display_rpm(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1253$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    LCD_WriteString@Str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_18(CODE[6]), STR_17(CODE[6]), display_pwm(BANK1[10]), display_rpm(BANK1[10]), 
		 -> STR_13(CODE[17]), 

    USART_WriteString@str	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_19(CODE[40]), STR_16(CODE[3]), display_rpm(BANK1[10]), STR_12(CODE[20]), 
		 -> STR_11(CODE[29]), STR_10(CODE[15]), STR_9(CODE[15]), STR_8(CODE[14]), 
		 -> STR_7(CODE[14]), STR_6(CODE[14]), STR_5(CODE[14]), STR_4(CODE[14]), 
		 -> STR_3(CODE[13]), STR_2(CODE[13]), STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1___wmul
    i1___wmul->i1___lwdiv
    _USART_ReceiveChar->i1_USART_WriteString
    i1_USART_WriteString->i1_USART_WriteChar

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USART_WriteString->_USART_WriteChar
    _USART_Init->___aldiv
    _LCD_WriteString->_LCD_WriteData
    _LCD_Init->_LCD_WriteCmd
    _LCD_Clear->_LCD_WriteCmd

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4989
                                              0 BANK1      3     3      0
                           _ADC_Init
                          _LCD_Clear
                         _LCD_Cursor
                           _LCD_Init
                    _LCD_WriteString
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                           _PWM_Init
                        _TIMER0_Init
                         _TIMER0_Set
                         _USART_Init
                  _USART_WriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    14      4    2641
                                             18 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     296
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                             12 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     878
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _USART_WriteString                                    2     0      2     741
                                              5 BANK0      2     0      2
                    _USART_WriteChar
 ---------------------------------------------------------------------------------
 (2) _USART_WriteChar                                      1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           8     4      4     514
                                             19 BANK0      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     428
                                              4 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _TIMER0_Set                                           1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle2                                       4     2      2     146
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle1                                       4     2      2     108
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteString                                      2     0      2     387
                                              6 BANK0      2     0      2
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        2     2      0      22
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      22
                                              6 BANK0      2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Cursor                                           3     2      1     386
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0      22
                                              6 BANK0      2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteCmd                                         2     2      0      22
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0    1180
                                              0 BANK0      4     4      0
                  _USART_ReceiveChar
                   i1_PWM_DutyCycle2
                       i1_TIMER0_Set
                i1_USART_WriteString
                          i1___lwdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (4) i1___wmul                                             6     2      4     144
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) i1___lwdiv                                            8     4      4     214
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) i1_TIMER0_Set                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) i1_PWM_DutyCycle2                                     4     2      2      70
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _USART_ReceiveChar                                    2     2      0     377
                                              3 COMMON     2     2      0
                i1_USART_WriteString
 ---------------------------------------------------------------------------------
 (4) i1_USART_WriteString                                  2     0      2     353
                                              1 COMMON     2     0      2
                  i1_USART_WriteChar
 ---------------------------------------------------------------------------------
 (5) i1_USART_WriteChar                                    1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _LCD_Clear
     _LCD_WriteCmd
   _LCD_Cursor
   _LCD_Init
     _LCD_WriteCmd
   _LCD_WriteString
     _LCD_WriteData
   _PWM_DutyCycle1
   _PWM_DutyCycle2
   _PWM_Init
   _TIMER0_Init
   _TIMER0_Set
   _USART_Init
     ___aldiv
   _USART_WriteString
     _USART_WriteChar
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _ISR (ROOT)
   _USART_ReceiveChar
     i1_USART_WriteString
       i1_USART_WriteChar
   i1_PWM_DutyCycle2
   i1_TIMER0_Set
   i1_USART_WriteString
     i1_USART_WriteChar
   i1___lwdiv
   i1___wmul
     i1___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      3      2F       7       58.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      89      12        0.0%
ABS                  0      0      89       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue May 24 15:34:29 2022

           ?i1_PWM_DutyCycle2 0070                             _x 0042                             _y 0044  
                           pc 0002                   ?_LCD_Cursor 004A       __size_of_PWM_DutyCycle1 001B  
     __size_of_PWM_DutyCycle2 001B                   __CFG_CP$OFF 0000                   _SSPSTATbits 0094  
                          _tf 00CD                            fsr 0004           ___wmul@multiplicand 004C  
          ??i1_PWM_DutyCycle2 0072              i1___wmul@product 007C                 _contagens_tm0 0024  
                         l209 041C                           l234 0E3A                           l504 014E  
                         l605 0FBE                           l660 0635                           l486 0077  
                         _PR2 0092                  __CFG_CPD$OFF 0000                           _ISR 0217  
                         _tip 00B2                           _rpm 0036                           fsr0 0004  
                         _pwm 0032                           _sum 00AE    __size_of_USART_WriteString 0025  
                         indf 0000                  __CFG_FOSC$HS 0000             ??_LCD_WriteString 004E  
                __CFG_LVP$OFF 0000                          ?_ISR 0070                          l2013 06A9  
                        l2005 068E                          l2009 069B                          l2035 0798  
                        l2027 0774                          l2051 04CC                          l2029 0782  
                        l2053 04DA                          l2061 04F3            LCD_WriteString@Str 004C  
                        l2039 07A3                          l2311 0089                          l2057 04E8  
                        l2401 0210                          l2305 0073                          l2315 009D  
                        l2341 011B                          l2325 00DF                          l2309 007C  
                        l2167 0F8D                          l2327 00FC                          l2337 0115  
                        l2291 0F68                          l2277 07F2                          l2357 016D  
                        l2349 0140                          l2383 01B1                          l2367 0182  
                        l2375 0198                          l2359 0171                          l2377 019C  
                        l2397 01C4                          l2389 01C0                          l2399 004B  
                        l1961 0E7E                          l1967 0FB6                          l1995 0656  
                        l1987 0646                          l1997 0666                          STR_1 05EA  
                        STR_2 05F8                          STR_3 0605                          STR_4 05CE  
                        STR_5 05B2                          STR_6 05A4                          STR_7 05DC  
                        STR_8 05C0                          STR_9 0586                          u1405 0FC6  
                        u1605 04CF                          u1455 065A                          u1535 0777  
                        u1625 04E0                          u1475 0668                          u1555 0783  
                        u1635 04E9                          u1395 0FBF                          u1485 067D  
                        u1565 078F                          u1495 068F                          u1575 0799  
                        u1835 0EF4                          u2707 0415                          u1845 072A  
                        u2717 04BD                          u2807 071C                          u2727 0E6A  
                        u1935 0136                          u2817 07F8                          u2737 06BE  
                        u2827 0FE3                          u2747 06CE                          u1875 0ED9  
                        u2837 0FF1                          u2757 06DC                          u2847 0FFD  
                        u2767 06E8                          u1975 015D                          u2857 0E5B  
                        u2777 06F4                          u2787 0702                          u2797 0710  
                        _OERR 00C1                          _TMR0 0001                          _TMR1 000E  
                        _main 0379            __size_of_LCD_Clear 0029                          _temp 003A  
                        btemp 007E              __end_of_ADC_Init 0E92                          ltemp 007E  
                        start 0012                          ttemp 007E                          wtemp 007E  
               ?_LCD_WriteCmd 0070                 _LCD_WriteData 0E61       __end_of_USART_WriteChar 0E3F  
                       ??_ISR 0046                   ?_TIMER0_Set 0070              __end_of_LCD_Init 071F  
             __end_of___aldiv 06B2                         ?_main 0070                         _EEADR 010D  
                       STR_10 0595                         STR_11 0544                         STR_12 0561  
                       STR_13 0575                         STR_14 061E                         STR_15 061E  
                       STR_16 0592                         STR_17 0612                 __CFG_WDTE$OFF 0000  
                       STR_18 0618                         STR_19 051C                         _T1CON 0010  
             __end_of___lwdiv 07AA                         i1l234 0E30                         i1l190 0288  
                       i1l193 02A4               __end_of___lwmod 04FA                         i1l605 0F2B  
                       _RCREG 001A                         _TMR1H 000F                         _TMR1L 000E  
                       _SPBRG 0099                         _PORTA 0005                         _PORTB 0006  
                       _PORTC 0007                         _PORTD 0008                         _PORTE 0009  
                       _TRISA 0085                         _TRISB 0086                         _TRISC 0087  
                       _TRISD 0088                         _TRISE 0089                         _TXREG 0019  
               __CFG_PWRTE$ON 0000                         _foTip 00A6                         _ideal 002E  
                       _derro 00A2               __end_of_dpowers 051C               __end_of_isdigit 0E80  
              __CFG_BOREN$OFF 0000           __size_of_LCD_Cursor 0016                         pclath 000A  
            __end_of_PWM_Init 0F68              __end_ofi1___wmul 0F44                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
         i1___wmul@multiplier 0078                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F               __end_of_sprintf 0217  
          __size_ofi1___lwdiv 003E                ??_LCD_WriteCmd 004A                ?_LCD_WriteData 0070  
                 ?_USART_Init 0059         i1TIMER0_Set@contagens 0070               __initialization 0015  
                __end_of_main 04C4                        ??_main 00CA                  ?_TIMER0_Init 0070  
           __end_of_LCD_Clear 1000                        _ADRESH 001E                        _ADRESL 009E  
                      _EEDATA 010C                        _CCPR1L 0015                        _CCPR2L 001B  
                      _EECON2 018D                        i1l2071 0EFE                        i1l2155 0EAA  
                      i1l2147 0E9B                        i1l2601 026D                        i1l2611 0289  
                      i1l2453 0F23                        i1l2621 02A5                        i1l2481 07D6  
                      i1l2473 07B2                        i1l2633 02D3                        i1l2475 07C0  
                      i1l2651 0318                        i1l2627 02BC                        i1l2485 07E1  
                      i1l2645 0301                        i1l2653 031B                        i1l2639 02EA  
                      i1l2665 0336                        i1l2595 0256                        i1l2677 0369  
                      i1l2589 023F                        i1l2679 036A                        u220_25 0F2C  
                      u221_25 0F33                        u224_25 07B5                        u218_25 0EBE  
                      u226_25 07C1                        u227_25 07CD                        u228_25 07D7  
         __size_of_TIMER0_Set 0006                        _SSPADD 0093                        _SSPBUF 0013  
            LCD_WriteCmd@Byte 004B           i1_USART_WriteString 0EFE                     ??___aldiv 0052  
                      ___wmul 0FB2                _PWM_DutyCycle1 0EC8                _PWM_DutyCycle2 0EE3  
            ?_USART_WriteChar 0070                     ??___lwdiv 004E                     ??___lwmod 0056  
                      _fitemp 0026         USART_ReceiveChar@byte 0074                        _pwmAnt 0034  
                      _pulsos 0030                        _status 0038             __end_ofi1___lwdiv 07E8  
                   ??_isdigit 004A                     ?_ADC_Init 0070                        saved_w 007E  
        ?i1_USART_WriteString 0071           __size_of_USART_Init 004B                     ??_sprintf 005C  
               ?i1_TIMER0_Set 0070       __end_of__initialization 0040                     ?_LCD_Init 0070  
             ??_LCD_WriteData 004A        __end_of_PWM_DutyCycle1 0EE3        __end_of_PWM_DutyCycle2 0EFE  
              __pcstackCOMMON 0070                  __pidataBANK0 07FE                  __pidataBANK1 0E27  
               LCD_Cursor@Col 004A                 LCD_Cursor@Row 004C                  ??_LCD_Cursor 004B  
             _LCD_WriteString 0F68                     ?_PWM_Init 0070                     ?i1___wmul 0078  
              _OPTION_REGbits 0081                    ??_ADC_Init 004A          __end_of_LCD_WriteCmd 0E61  
       ??i1_USART_WriteString 0073     __size_ofi1_PWM_DutyCycle2 001B                ??i1_TIMER0_Set 0070  
                sprintf@width 0066                    __pbssBANK0 0020                    __pbssBANK1 00A0  
          __end_of_LCD_Cursor 07FE                    ??_LCD_Init 004C         i1USART_WriteChar@byte 0070  
             ?_PWM_DutyCycle1 004A               ?_PWM_DutyCycle2 004A                    __pmaintext 0379  
                     ?___wmul 004A                    __pintentry 0004                  ??_TIMER0_Set 004A  
                     _CCP1CON 0017                       _CCP2CON 001D                    ??_PWM_Init 004A  
                  ??i1___wmul 007C          __size_of_TIMER0_Init 000B       _posicao_do_grafico_food 00AA  
                     _SSPCON2 0091                    __stringtab 0500                    _fisetpoint 00A4  
          __end_of_TIMER0_Set 0500       __end_of_LCD_WriteString 0F8D                     _ADCResult 0020  
                ??_USART_Init 005D             LCD_WriteData@Byte 004B                       ___aldiv 0623  
             __size_of___wmul 0025                       ___lwdiv 076A                       ___lwmod 04C4  
          _posicao_do_grafico 00A8                       __ptext1 0044                       __ptext2 0E70  
                     __ptext3 0FB2                       __ptext4 04C4                       __ptext5 076A  
                     __ptext6 0F8D                       __ptext7 0E37                       __ptext8 071F  
                     __ptext9 0623                    _pas_cooler 006A                  __size_of_ISR 0162  
                   _T1CONbits 0010                       _dpowers 0512             i1___lwdiv@divisor 0070  
                   _T2CONbits 0012                       _isdigit 0E70             i1___lwdiv@counter 0077  
            ___aldiv@dividend 004E                     _LCD_Clear 0FD7            __end_of_USART_Init 076A  
                     _sprintf 0044                       clrloop0 0E40          end_of_initialization 0040  
                   _RCSTAbits 0018              ___aldiv@quotient 0055                  __pstringtext 0500  
        __end_ofi1_TIMER0_Set 0E2F         i1___wmul@multiplicand 007A         __size_of_LCD_WriteCmd 000F  
                   _PORTBbits 0006                     _PORTEbits 0009                    ?_LCD_Clear 0070  
            i1_PWM_DutyCycle2 0EAD             __size_of_ADC_Init 0012                     i1___lwdiv 07AA  
                _contador_rb6 00A0           PWM_DutyCycle1@valor 004A                    _total_area 00B4  
         PWM_DutyCycle2@valor 004A                   _CCP1CONbits 0017                   _CCP2CONbits 001D  
                   _TXSTAbits 0098              ?_LCD_WriteString 004C             __size_of_LCD_Init 006D  
                _LCD_WriteCmd 0E52                __end_of___wmul 0FD7             i1_USART_WriteChar 0E2F  
          ?i1_USART_WriteChar 0070      __size_of_USART_WriteChar 0008             __size_of_PWM_Init 0024  
         start_initialization 0015             __size_ofi1___wmul 0023                   __end_of_ISR 0379  
         ??i1_USART_WriteChar 0070                    ?i1___lwdiv 0070              ??_PWM_DutyCycle1 004C  
            ??_PWM_DutyCycle2 004C         __end_of_LCD_WriteData 0E70             _USART_ReceiveChar 0E92  
          ?_USART_ReceiveChar 0070     __end_ofi1_USART_WriteChar 0E37                      ??___wmul 004E  
                 __pdataBANK0 006A                   __pdataBANK1 00CD   __end_ofi1_USART_WriteString 0F21  
         ??_USART_ReceiveChar 0073                     ___latbits 0002                 __pcstackBANK0 0046  
               __pcstackBANK1 00CA                   ??_LCD_Clear 004C           __end_of__stringdata 0623  
                _isdigit$1449 004A                   sprintf@_val 0061                   sprintf@flag 0065  
                 sprintf@prec 0060     __end_of_USART_ReceiveChar 0EAD         __size_ofi1_TIMER0_Set 0006  
            ___lwdiv@dividend 004C           TIMER0_Set@contagens 004A                      ?___aldiv 004A  
                    ?___lwdiv 004A                      ?___lwmod 0052                     _ativa_fan 0022  
               ??_TIMER0_Init 004A            USART_Init@BaudRate 0059                      ?_isdigit 0070  
                    _ADC_Init 0E80                     _fop_rule1 0028                     _fop_rule2 002A  
                   _fop_rule3 002C    _posicao_do_grafico_service 00AC              ___lwdiv@quotient 004F  
                 ??i1___lwdiv 0074                      ?_sprintf 0058             ??_USART_WriteChar 004A  
                i1_TIMER0_Set 0E29               ___aldiv@divisor 004A             interrupt_function 0004  
             ___aldiv@counter 0053                      _LCD_Init 06B2                ___wmul@product 004E  
                   clear_ram0 0E3F                      _PIE1bits 008C                      _PIE2bits 008D  
                    _PIR1bits 000C                      _PIR2bits 000D                     _temp_lida 003C  
    __end_ofi1_PWM_DutyCycle2 0EC8                     _tempo_rb6 00B0    __size_ofi1_USART_WriteChar 0008  
                 _display_rpm 00C0                   _display_pwm 00B6                    _ADCON0bits 001F  
                 __stringbase 0512                    _ADCON1bits 009F                   __stringdata 051C  
                    _PWM_Init 0F44             ___wmul@multiplier 004A                      i1___wmul 0F21  
         __end_of_TIMER0_Init 0E52    __size_of_USART_ReceiveChar 001B                    _EECON1bits 018C  
            __size_of___aldiv 008F              __size_of___lwdiv 0040              __size_of___lwmod 0036  
          __end_of__stringtab 0512              __size_of_isdigit 0010               ___lwdiv@divisor 004A  
             ___lwdiv@counter 0051             _USART_WriteString 0F8D                      __ptext10 04FA  
                    __ptext11 0E47                      __ptext20 0E52                      __ptext12 0F44  
                    __ptext21 0E80                      __ptext13 0EE3                      __ptext22 0217  
                    __ptext14 0EC8                      __ptext23 0F21                      __ptext15 0F68  
                    __ptext24 07AA                      __ptext16 0E61                      __ptext25 0E29  
                    __ptext17 06B2                      __ptext26 0EAD                      __ptext18 07E8  
                    __ptext27 0E92                      __ptext19 0FD7                      __ptext28 0EFE  
                    __ptext29 0E2F            ?_USART_WriteString 004B              __size_of_sprintf 01D3  
          i1___lwdiv@dividend 0072                 __size_of_main 014B           USART_WriteChar@byte 004A  
         ??_USART_WriteString 004D        i1USART_WriteString@str 0071                    _LCD_Cursor 07E8  
    __size_of_LCD_WriteString 0025            i1___lwdiv@quotient 0075                   _TIMER0_Init 0E47  
                  _INTCONbits 000B     __end_of_USART_WriteString 0FB2                      isdigit@c 004B  
                    intlevel1 0000                     sprintf@ap 005F                     sprintf@sp 0068  
            ___lwmod@dividend 0054                     stringcode 050A                  _tip_gorgeous 0040  
        USART_WriteString@str 004B                    _TIMER0_Set 04FA               _USART_WriteChar 0E37  
                    sprintf@c 0069                      sprintf@f 0058               ___lwmod@divisor 0052  
             ___lwmod@counter 0057                   _tip_average 003E                      stringtab 0500  
                ___aldiv@sign 0054        __size_of_LCD_WriteData 000F  __size_ofi1_USART_WriteString 0023  
                 _SSPCON2bits 0091         i1PWM_DutyCycle2@valor 0070                    _SSPCONbits 0014  
                  _USART_Init 071F  
