

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue May 24 16:38:31 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000D                     	;# 
   130  000E                     	;# 
   131  000E                     	;# 
   132  000F                     	;# 
   133  0010                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0013                     	;# 
   137  0014                     	;# 
   138  0015                     	;# 
   139  0015                     	;# 
   140  0016                     	;# 
   141  0017                     	;# 
   142  0018                     	;# 
   143  0019                     	;# 
   144  001A                     	;# 
   145  001B                     	;# 
   146  001B                     	;# 
   147  001C                     	;# 
   148  001D                     	;# 
   149  001E                     	;# 
   150  001F                     	;# 
   151  0081                     	;# 
   152  0085                     	;# 
   153  0086                     	;# 
   154  0087                     	;# 
   155  0088                     	;# 
   156  0089                     	;# 
   157  008C                     	;# 
   158  008D                     	;# 
   159  008E                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000D                     	;# 
   190  000E                     	;# 
   191  000E                     	;# 
   192  000F                     	;# 
   193  0010                     	;# 
   194  0011                     	;# 
   195  0012                     	;# 
   196  0013                     	;# 
   197  0014                     	;# 
   198  0015                     	;# 
   199  0015                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001B                     	;# 
   207  001C                     	;# 
   208  001D                     	;# 
   209  001E                     	;# 
   210  001F                     	;# 
   211  0081                     	;# 
   212  0085                     	;# 
   213  0086                     	;# 
   214  0087                     	;# 
   215  0088                     	;# 
   216  0089                     	;# 
   217  008C                     	;# 
   218  008D                     	;# 
   219  008E                     	;# 
   220  0091                     	;# 
   221  0092                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0098                     	;# 
   225  0099                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  010C                     	;# 
   231  010D                     	;# 
   232  010E                     	;# 
   233  010F                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236  0000                     	;# 
   237  0001                     	;# 
   238  0002                     	;# 
   239  0003                     	;# 
   240  0004                     	;# 
   241  0005                     	;# 
   242  0006                     	;# 
   243  0007                     	;# 
   244  0008                     	;# 
   245  0009                     	;# 
   246  000A                     	;# 
   247  000B                     	;# 
   248  000C                     	;# 
   249  000D                     	;# 
   250  000E                     	;# 
   251  000E                     	;# 
   252  000F                     	;# 
   253  0010                     	;# 
   254  0011                     	;# 
   255  0012                     	;# 
   256  0013                     	;# 
   257  0014                     	;# 
   258  0015                     	;# 
   259  0015                     	;# 
   260  0016                     	;# 
   261  0017                     	;# 
   262  0018                     	;# 
   263  0019                     	;# 
   264  001A                     	;# 
   265  001B                     	;# 
   266  001B                     	;# 
   267  001C                     	;# 
   268  001D                     	;# 
   269  001E                     	;# 
   270  001F                     	;# 
   271  0081                     	;# 
   272  0085                     	;# 
   273  0086                     	;# 
   274  0087                     	;# 
   275  0088                     	;# 
   276  0089                     	;# 
   277  008C                     	;# 
   278  008D                     	;# 
   279  008E                     	;# 
   280  0091                     	;# 
   281  0092                     	;# 
   282  0093                     	;# 
   283  0094                     	;# 
   284  0098                     	;# 
   285  0099                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010E                     	;# 
   293  010F                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  000E                     	;# 
   312  000F                     	;# 
   313  0010                     	;# 
   314  0011                     	;# 
   315  0012                     	;# 
   316  0013                     	;# 
   317  0014                     	;# 
   318  0015                     	;# 
   319  0015                     	;# 
   320  0016                     	;# 
   321  0017                     	;# 
   322  0018                     	;# 
   323  0019                     	;# 
   324  001A                     	;# 
   325  001B                     	;# 
   326  001B                     	;# 
   327  001C                     	;# 
   328  001D                     	;# 
   329  001E                     	;# 
   330  001F                     	;# 
   331  0081                     	;# 
   332  0085                     	;# 
   333  0086                     	;# 
   334  0087                     	;# 
   335  0088                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  0091                     	;# 
   341  0092                     	;# 
   342  0093                     	;# 
   343  0094                     	;# 
   344  0098                     	;# 
   345  0099                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  010C                     	;# 
   351  010D                     	;# 
   352  010E                     	;# 
   353  010F                     	;# 
   354  018C                     	;# 
   355  018D                     	;# 
   356  0000                     	;# 
   357  0001                     	;# 
   358  0002                     	;# 
   359  0003                     	;# 
   360  0004                     	;# 
   361  0005                     	;# 
   362  0006                     	;# 
   363  0007                     	;# 
   364  0008                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  000E                     	;# 
   372  000F                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0013                     	;# 
   377  0014                     	;# 
   378  0015                     	;# 
   379  0015                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001B                     	;# 
   387  001C                     	;# 
   388  001D                     	;# 
   389  001E                     	;# 
   390  001F                     	;# 
   391  0081                     	;# 
   392  0085                     	;# 
   393  0086                     	;# 
   394  0087                     	;# 
   395  0088                     	;# 
   396  0089                     	;# 
   397  008C                     	;# 
   398  008D                     	;# 
   399  008E                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0094                     	;# 
   404  0098                     	;# 
   405  0099                     	;# 
   406  009C                     	;# 
   407  009D                     	;# 
   408  009E                     	;# 
   409  009F                     	;# 
   410  010C                     	;# 
   411  010D                     	;# 
   412  010E                     	;# 
   413  010F                     	;# 
   414  018C                     	;# 
   415  018D                     	;# 
   416  0000                     	;# 
   417  0001                     	;# 
   418  0002                     	;# 
   419  0003                     	;# 
   420  0004                     	;# 
   421  0005                     	;# 
   422  0006                     	;# 
   423  0007                     	;# 
   424  0008                     	;# 
   425  0009                     	;# 
   426  000A                     	;# 
   427  000B                     	;# 
   428  000C                     	;# 
   429  000D                     	;# 
   430  000E                     	;# 
   431  000E                     	;# 
   432  000F                     	;# 
   433  0010                     	;# 
   434  0011                     	;# 
   435  0012                     	;# 
   436  0013                     	;# 
   437  0014                     	;# 
   438  0015                     	;# 
   439  0015                     	;# 
   440  0016                     	;# 
   441  0017                     	;# 
   442  0018                     	;# 
   443  0019                     	;# 
   444  001A                     	;# 
   445  001B                     	;# 
   446  001B                     	;# 
   447  001C                     	;# 
   448  001D                     	;# 
   449  001E                     	;# 
   450  001F                     	;# 
   451  0081                     	;# 
   452  0085                     	;# 
   453  0086                     	;# 
   454  0087                     	;# 
   455  0088                     	;# 
   456  0089                     	;# 
   457  008C                     	;# 
   458  008D                     	;# 
   459  008E                     	;# 
   460  0091                     	;# 
   461  0092                     	;# 
   462  0093                     	;# 
   463  0094                     	;# 
   464  0098                     	;# 
   465  0099                     	;# 
   466  009C                     	;# 
   467  009D                     	;# 
   468  009E                     	;# 
   469  009F                     	;# 
   470  010C                     	;# 
   471  010D                     	;# 
   472  010E                     	;# 
   473  010F                     	;# 
   474  018C                     	;# 
   475  018D                     	;# 
   476  0000                     	;# 
   477  0001                     	;# 
   478  0002                     	;# 
   479  0003                     	;# 
   480  0004                     	;# 
   481  0005                     	;# 
   482  0006                     	;# 
   483  0007                     	;# 
   484  0008                     	;# 
   485  0009                     	;# 
   486  000A                     	;# 
   487  000B                     	;# 
   488  000C                     	;# 
   489  000D                     	;# 
   490  000E                     	;# 
   491  000E                     	;# 
   492  000F                     	;# 
   493  0010                     	;# 
   494  0011                     	;# 
   495  0012                     	;# 
   496  0013                     	;# 
   497  0014                     	;# 
   498  0015                     	;# 
   499  0015                     	;# 
   500  0016                     	;# 
   501  0017                     	;# 
   502  0018                     	;# 
   503  0019                     	;# 
   504  001A                     	;# 
   505  001B                     	;# 
   506  001B                     	;# 
   507  001C                     	;# 
   508  001D                     	;# 
   509  001E                     	;# 
   510  001F                     	;# 
   511  0081                     	;# 
   512  0085                     	;# 
   513  0086                     	;# 
   514  0087                     	;# 
   515  0088                     	;# 
   516  0089                     	;# 
   517  008C                     	;# 
   518  008D                     	;# 
   519  008E                     	;# 
   520  0091                     	;# 
   521  0092                     	;# 
   522  0093                     	;# 
   523  0094                     	;# 
   524  0098                     	;# 
   525  0099                     	;# 
   526  009C                     	;# 
   527  009D                     	;# 
   528  009E                     	;# 
   529  009F                     	;# 
   530  010C                     	;# 
   531  010D                     	;# 
   532  010E                     	;# 
   533  010F                     	;# 
   534  018C                     	;# 
   535  018D                     	;# 
   536  0000                     	;# 
   537  0001                     	;# 
   538  0002                     	;# 
   539  0003                     	;# 
   540  0004                     	;# 
   541  0005                     	;# 
   542  0006                     	;# 
   543  0007                     	;# 
   544  0008                     	;# 
   545  0009                     	;# 
   546  000A                     	;# 
   547  000B                     	;# 
   548  000C                     	;# 
   549  000D                     	;# 
   550  000E                     	;# 
   551  000E                     	;# 
   552  000F                     	;# 
   553  0010                     	;# 
   554  0011                     	;# 
   555  0012                     	;# 
   556  0013                     	;# 
   557  0014                     	;# 
   558  0015                     	;# 
   559  0015                     	;# 
   560  0016                     	;# 
   561  0017                     	;# 
   562  0018                     	;# 
   563  0019                     	;# 
   564  001A                     	;# 
   565  001B                     	;# 
   566  001B                     	;# 
   567  001C                     	;# 
   568  001D                     	;# 
   569  001E                     	;# 
   570  001F                     	;# 
   571  0081                     	;# 
   572  0085                     	;# 
   573  0086                     	;# 
   574  0087                     	;# 
   575  0088                     	;# 
   576  0089                     	;# 
   577  008C                     	;# 
   578  008D                     	;# 
   579  008E                     	;# 
   580  0091                     	;# 
   581  0092                     	;# 
   582  0093                     	;# 
   583  0094                     	;# 
   584  0098                     	;# 
   585  0099                     	;# 
   586  009C                     	;# 
   587  009D                     	;# 
   588  009E                     	;# 
   589  009F                     	;# 
   590  010C                     	;# 
   591  010D                     	;# 
   592  010E                     	;# 
   593  010F                     	;# 
   594  018C                     	;# 
   595  018D                     	;# 
   596                           
   597                           	psect	idataBANK0
   598  08B9                     __pidataBANK0:	
   599                           
   600                           ;initializer for _pas_cooler
   601  08B9  3407               	retlw	7
   602  08BA  3400               	retlw	0
   603                           
   604                           	psect	idataBANK1
   605  08B7                     __pidataBANK1:	
   606                           
   607                           ;initializer for _tf
   608  08B7  3414               	retlw	20
   609  08B8  3400               	retlw	0
   610                           
   611                           	psect	stringtext
   612  1000                     __pstringtext:	
   613  1000                     stringtab:	
   614  1000                     __stringtab:	
   615                           
   616                           ;	String table - string pointers are 2 bytes each
   617  1000  1BFF               	btfsc	btemp+1,7
   618  1001  280A               	ljmp	stringcode
   619  1002  1383               	bcf	3,7
   620  1003  187F               	btfsc	btemp+1,0
   621  1004  1783               	bsf	3,7
   622  1005  0800               	movf	0,w
   623  1006  0A84               	incf	4,f
   624  1007  1903               	skipnz
   625  1008  0AFF               	incf	btemp+1,f
   626  1009  0008               	return
   627  100A                     stringcode:	
   628  100A  087F               	movf	btemp+1,w
   629  100B  397F               	andlw	127
   630  100C  008A               	movwf	10
   631  100D  0804               	movf	4,w
   632  100E  0A84               	incf	4,f
   633  100F  1903               	skipnz
   634  1010  0AFF               	incf	btemp+1,f
   635  1011  0082               	movwf	2
   636  1012                     __stringbase:	
   637  1012                     __end_of__stringtab:	
   638  1012                     _dpowers:	
   639  1012  3401               	retlw	1
   640  1013  3400               	retlw	0
   641  1014  340A               	retlw	10
   642  1015  3400               	retlw	0
   643  1016  3464               	retlw	100
   644  1017  3400               	retlw	0
   645  1018  34E8               	retlw	232
   646  1019  3403               	retlw	3
   647  101A  3410               	retlw	16
   648  101B  3427               	retlw	39
   649  101C                     __end_of_dpowers:	
   650  000E                     _TMR1	set	14
   651  001F                     _ADCON0bits	set	31
   652  001E                     _ADRESH	set	30
   653  0017                     _CCP1CON	set	23
   654  0017                     _CCP1CONbits	set	23
   655  001D                     _CCP2CON	set	29
   656  001D                     _CCP2CONbits	set	29
   657  0015                     _CCPR1L	set	21
   658  001B                     _CCPR2L	set	27
   659  000B                     _INTCONbits	set	11
   660  000C                     _PIR1bits	set	12
   661  000D                     _PIR2bits	set	13
   662  0005                     _PORTA	set	5
   663  0006                     _PORTB	set	6
   664  0006                     _PORTBbits	set	6
   665  0007                     _PORTC	set	7
   666  0008                     _PORTD	set	8
   667  0009                     _PORTE	set	9
   668  0009                     _PORTEbits	set	9
   669  001A                     _RCREG	set	26
   670  0018                     _RCSTAbits	set	24
   671  0013                     _SSPBUF	set	19
   672  0014                     _SSPCONbits	set	20
   673  0010                     _T1CON	set	16
   674  0010                     _T1CONbits	set	16
   675  0012                     _T2CONbits	set	18
   676  0001                     _TMR0	set	1
   677  000F                     _TMR1H	set	15
   678  000E                     _TMR1L	set	14
   679  0019                     _TXREG	set	25
   680  00C1                     _OERR	set	193
   681  009F                     _ADCON1bits	set	159
   682  009E                     _ADRESL	set	158
   683  0081                     _OPTION_REGbits	set	129
   684  008C                     _PIE1bits	set	140
   685  008D                     _PIE2bits	set	141
   686  0092                     _PR2	set	146
   687  0099                     _SPBRG	set	153
   688  0093                     _SSPADD	set	147
   689  0091                     _SSPCON2	set	145
   690  0091                     _SSPCON2bits	set	145
   691  0094                     _SSPSTATbits	set	148
   692  0085                     _TRISA	set	133
   693  0086                     _TRISB	set	134
   694  0087                     _TRISC	set	135
   695  0088                     _TRISD	set	136
   696  0089                     _TRISE	set	137
   697  0098                     _TXSTAbits	set	152
   698  010D                     _EEADR	set	269
   699  010C                     _EEDATA	set	268
   700  018C                     _EECON1bits	set	396
   701  018D                     _EECON2	set	397
   702  101C                     __stringdata:	
   703  101C                     STR_19:	
   704  101C  340A               	retlw	10
   705  101D  340D               	retlw	13
   706  101E  3420               	retlw	32	;' '
   707  101F  342D               	retlw	45	;'-'
   708  1020  342D               	retlw	45	;'-'
   709  1021  342D               	retlw	45	;'-'
   710  1022  342D               	retlw	45	;'-'
   711  1023  342D               	retlw	45	;'-'
   712  1024  342D               	retlw	45	;'-'
   713  1025  342D               	retlw	45	;'-'
   714  1026  3420               	retlw	32	;' '
   715  1027  3445               	retlw	69	;'E'
   716  1028  3453               	retlw	83	;'S'
   717  1029  3454               	retlw	84	;'T'
   718  102A  344F               	retlw	79	;'O'
   719  102B  3455               	retlw	85	;'U'
   720  102C  3452               	retlw	82	;'R'
   721  102D  344F               	retlw	79	;'O'
   722  102E  3420               	retlw	32	;' '
   723  102F  3444               	retlw	68	;'D'
   724  1030  3445               	retlw	69	;'E'
   725  1031  3420               	retlw	32	;' '
   726  1032  3450               	retlw	80	;'P'
   727  1033  3449               	retlw	73	;'I'
   728  1034  344C               	retlw	76	;'L'
   729  1035  3448               	retlw	72	;'H'
   730  1036  3441               	retlw	65	;'A'
   731  1037  3420               	retlw	32	;' '
   732  1038  342D               	retlw	45	;'-'
   733  1039  342D               	retlw	45	;'-'
   734  103A  342D               	retlw	45	;'-'
   735  103B  342D               	retlw	45	;'-'
   736  103C  342D               	retlw	45	;'-'
   737  103D  342D               	retlw	45	;'-'
   738  103E  342D               	retlw	45	;'-'
   739  103F  3420               	retlw	32	;' '
   740  1040  340A               	retlw	10
   741  1041  340D               	retlw	13
   742  1042  3420               	retlw	32	;' '
   743  1043  3400               	retlw	0
   744  1044                     STR_11:	
   745  1044  3449               	retlw	73	;'I'
   746  1045  346E               	retlw	110	;'n'
   747  1046  3469               	retlw	105	;'i'
   748  1047  3463               	retlw	99	;'c'
   749  1048  3469               	retlw	105	;'i'
   750  1049  3461               	retlw	97	;'a'
   751  104A  346C               	retlw	108	;'l'
   752  104B  3469               	retlw	105	;'i'
   753  104C  347A               	retlw	122	;'z'
   754  104D  3461               	retlw	97	;'a'
   755  104E  346E               	retlw	110	;'n'
   756  104F  3464               	retlw	100	;'d'
   757  1050  346F               	retlw	111	;'o'
   758  1051  3420               	retlw	32	;' '
   759  1052  346F               	retlw	111	;'o'
   760  1053  3420               	retlw	32	;' '
   761  1054  3450               	retlw	80	;'P'
   762  1055  3449               	retlw	73	;'I'
   763  1056  3443               	retlw	67	;'C'
   764  1057  3431               	retlw	49	;'1'
   765  1058  3436               	retlw	54	;'6'
   766  1059  3446               	retlw	70	;'F'
   767  105A  3438               	retlw	56	;'8'
   768  105B  3437               	retlw	55	;'7'
   769  105C  3437               	retlw	55	;'7'
   770  105D  3441               	retlw	65	;'A'
   771  105E  340A               	retlw	10
   772  105F  340D               	retlw	13
   773  1060  3400               	retlw	0
   774  1061                     STR_12:	
   775  1061  3455               	retlw	85	;'U'
   776  1062  3453               	retlw	83	;'S'
   777  1063  3441               	retlw	65	;'A'
   778  1064  3452               	retlw	82	;'R'
   779  1065  3454               	retlw	84	;'T'
   780  1066  343A               	retlw	58	;':'
   781  1067  3420               	retlw	32	;' '
   782  1068  3431               	retlw	49	;'1'
   783  1069  3431               	retlw	49	;'1'
   784  106A  3435               	retlw	53	;'5'
   785  106B  342E               	retlw	46	;'.'
   786  106C  3432               	retlw	50	;'2'
   787  106D  3430               	retlw	48	;'0'
   788  106E  3430               	retlw	48	;'0'
   789  106F  3462               	retlw	98	;'b'
   790  1070  3470               	retlw	112	;'p'
   791  1071  3473               	retlw	115	;'s'
   792  1072  340A               	retlw	10
   793  1073  340D               	retlw	13
   794  1074  3400               	retlw	0
   795  1075                     STR_13:	
   796  1075  3449               	retlw	73	;'I'
   797  1076  346E               	retlw	110	;'n'
   798  1077  3469               	retlw	105	;'i'
   799  1078  3463               	retlw	99	;'c'
   800  1079  3469               	retlw	105	;'i'
   801  107A  3461               	retlw	97	;'a'
   802  107B  346C               	retlw	108	;'l'
   803  107C  3469               	retlw	105	;'i'
   804  107D  347A               	retlw	122	;'z'
   805  107E  3461               	retlw	97	;'a'
   806  107F  346E               	retlw	110	;'n'
   807  1080  3464               	retlw	100	;'d'
   808  1081  346F               	retlw	111	;'o'
   809  1082  342E               	retlw	46	;'.'
   810  1083  342E               	retlw	46	;'.'
   811  1084  342E               	retlw	46	;'.'
   812  1085  3400               	retlw	0
   813  1086                     STR_9:	
   814  1086  340A               	retlw	10
   815  1087  340D               	retlw	13
   816  1088  3470               	retlw	112	;'p'
   817  1089  3477               	retlw	119	;'w'
   818  108A  346D               	retlw	109	;'m'
   819  108B  3420               	retlw	32	;' '
   820  108C  343D               	retlw	61	;'='
   821  108D  3420               	retlw	32	;' '
   822  108E  3431               	retlw	49	;'1'
   823  108F  3430               	retlw	48	;'0'
   824  1090  3430               	retlw	48	;'0'
   825  1091  3430               	retlw	48	;'0'
   826  1092  340A               	retlw	10
   827  1093  340D               	retlw	13
   828  1094  3400               	retlw	0
   829  1095                     STR_10:	
   830  1095  340A               	retlw	10
   831  1096  340D               	retlw	13
   832  1097  3470               	retlw	112	;'p'
   833  1098  3477               	retlw	119	;'w'
   834  1099  346D               	retlw	109	;'m'
   835  109A  3420               	retlw	32	;' '
   836  109B  343D               	retlw	61	;'='
   837  109C  3420               	retlw	32	;' '
   838  109D  3431               	retlw	49	;'1'
   839  109E  3430               	retlw	48	;'0'
   840  109F  3432               	retlw	50	;'2'
   841  10A0  3433               	retlw	51	;'3'
   842  10A1  340A               	retlw	10
   843  10A2  340D               	retlw	13
   844  10A3  3400               	retlw	0
   845  10A4                     STR_6:	
   846  10A4  340A               	retlw	10
   847  10A5  340D               	retlw	13
   848  10A6  3470               	retlw	112	;'p'
   849  10A7  3477               	retlw	119	;'w'
   850  10A8  346D               	retlw	109	;'m'
   851  10A9  3420               	retlw	32	;' '
   852  10AA  343D               	retlw	61	;'='
   853  10AB  3420               	retlw	32	;' '
   854  10AC  3435               	retlw	53	;'5'
   855  10AD  3431               	retlw	49	;'1'
   856  10AE  3432               	retlw	50	;'2'
   857  10AF  340A               	retlw	10
   858  10B0  340D               	retlw	13
   859  10B1  3400               	retlw	0
   860  10B2                     STR_5:	
   861  10B2  340A               	retlw	10
   862  10B3  340D               	retlw	13
   863  10B4  3470               	retlw	112	;'p'
   864  10B5  3477               	retlw	119	;'w'
   865  10B6  346D               	retlw	109	;'m'
   866  10B7  3420               	retlw	32	;' '
   867  10B8  343D               	retlw	61	;'='
   868  10B9  3420               	retlw	32	;' '
   869  10BA  3432               	retlw	50	;'2'
   870  10BB  3435               	retlw	53	;'5'
   871  10BC  3436               	retlw	54	;'6'
   872  10BD  340A               	retlw	10
   873  10BE  340D               	retlw	13
   874  10BF  3400               	retlw	0
   875  10C0                     STR_8:	
   876  10C0  340A               	retlw	10
   877  10C1  340D               	retlw	13
   878  10C2  3470               	retlw	112	;'p'
   879  10C3  3477               	retlw	119	;'w'
   880  10C4  346D               	retlw	109	;'m'
   881  10C5  3420               	retlw	32	;' '
   882  10C6  343D               	retlw	61	;'='
   883  10C7  3420               	retlw	32	;' '
   884  10C8  3438               	retlw	56	;'8'
   885  10C9  3439               	retlw	57	;'9'
   886  10CA  3436               	retlw	54	;'6'
   887  10CB  340A               	retlw	10
   888  10CC  340D               	retlw	13
   889  10CD  3400               	retlw	0
   890  10CE                     STR_4:	
   891  10CE  340A               	retlw	10
   892  10CF  340D               	retlw	13
   893  10D0  3470               	retlw	112	;'p'
   894  10D1  3477               	retlw	119	;'w'
   895  10D2  346D               	retlw	109	;'m'
   896  10D3  3420               	retlw	32	;' '
   897  10D4  343D               	retlw	61	;'='
   898  10D5  3420               	retlw	32	;' '
   899  10D6  3431               	retlw	49	;'1'
   900  10D7  3432               	retlw	50	;'2'
   901  10D8  3438               	retlw	56	;'8'
   902  10D9  340A               	retlw	10
   903  10DA  340D               	retlw	13
   904  10DB  3400               	retlw	0
   905  10DC                     STR_7:	
   906  10DC  340A               	retlw	10
   907  10DD  340D               	retlw	13
   908  10DE  3470               	retlw	112	;'p'
   909  10DF  3477               	retlw	119	;'w'
   910  10E0  346D               	retlw	109	;'m'
   911  10E1  3420               	retlw	32	;' '
   912  10E2  343D               	retlw	61	;'='
   913  10E3  3420               	retlw	32	;' '
   914  10E4  3437               	retlw	55	;'7'
   915  10E5  3436               	retlw	54	;'6'
   916  10E6  3438               	retlw	56	;'8'
   917  10E7  340A               	retlw	10
   918  10E8  340D               	retlw	13
   919  10E9  3400               	retlw	0
   920  10EA                     STR_1:	
   921  10EA  340A               	retlw	10
   922  10EB  340D               	retlw	13
   923  10EC  3464               	retlw	100	;'d'
   924  10ED  3465               	retlw	101	;'e'
   925  10EE  3473               	retlw	115	;'s'
   926  10EF  346C               	retlw	108	;'l'
   927  10F0  3469               	retlw	105	;'i'
   928  10F1  3467               	retlw	103	;'g'
   929  10F2  3461               	retlw	97	;'a'
   930  10F3  3464               	retlw	100	;'d'
   931  10F4  346F               	retlw	111	;'o'
   932  10F5  340A               	retlw	10
   933  10F6  340D               	retlw	13
   934  10F7  3400               	retlw	0
   935  10F8                     STR_2:	
   936  10F8  340A               	retlw	10
   937  10F9  340D               	retlw	13
   938  10FA  3470               	retlw	112	;'p'
   939  10FB  3477               	retlw	119	;'w'
   940  10FC  346D               	retlw	109	;'m'
   941  10FD  3420               	retlw	32	;' '
   942  10FE  343D               	retlw	61	;'='
   943  10FF  3420               	retlw	32	;' '
   944  1100  3433               	retlw	51	;'3'
   945  1101  3432               	retlw	50	;'2'
   946  1102  340A               	retlw	10
   947  1103  340D               	retlw	13
   948  1104  3400               	retlw	0
   949  1105                     STR_3:	
   950  1105  340A               	retlw	10
   951  1106  340D               	retlw	13
   952  1107  3470               	retlw	112	;'p'
   953  1108  3477               	retlw	119	;'w'
   954  1109  346D               	retlw	109	;'m'
   955  110A  3420               	retlw	32	;' '
   956  110B  343D               	retlw	61	;'='
   957  110C  3420               	retlw	32	;' '
   958  110D  3436               	retlw	54	;'6'
   959  110E  3434               	retlw	52	;'4'
   960  110F  340A               	retlw	10
   961  1110  340D               	retlw	13
   962  1111  3400               	retlw	0
   963  1112                     STR_18:	
   964  1112  3450               	retlw	80	;'P'
   965  1113  3457               	retlw	87	;'W'
   966  1114  344D               	retlw	77	;'M'
   967  1115  343A               	retlw	58	;':'
   968  1116  3420               	retlw	32	;' '
   969  1117  3400               	retlw	0
   970  1118                     STR_17:	
   971  1118  3444               	retlw	68	;'D'
   972  1119  346C               	retlw	108	;'l'
   973  111A  3456               	retlw	86	;'V'
   974  111B  343A               	retlw	58	;':'
   975  111C  3420               	retlw	32	;' '
   976  111D  3400               	retlw	0
   977  111E                     STR_14:	
   978  111E  3425               	retlw	37	;'%'
   979  111F  3430               	retlw	48	;'0'
   980  1120  3434               	retlw	52	;'4'
   981  1121  3464               	retlw	100	;'d'
   982  1122  3400               	retlw	0
   983  1123                     __end_of__stringdata:	
   984                           
   985                           ; #config settings
   986  0000                     
   987                           	psect	cinit
   988  0015                     start_initialization:	
   989  0015                     __initialization:	
   990                           
   991                           ; Clear objects allocated to BANK0
   992  0015  1383               	bcf	3,7	;select IRP bank0
   993  0016  3041               	movlw	low __pbssBANK0
   994  0017  0084               	movwf	4
   995  0018  3057               	movlw	low (__pbssBANK0+22)
   996  0019  120A  158A  20D7  120A  118A  	fcall	clear_ram0
   997                           
   998                           ; Clear objects allocated to BANK1
   999  001E  30A0               	movlw	low __pbssBANK1
  1000  001F  0084               	movwf	4
  1001  0020  30D8               	movlw	low (__pbssBANK1+56)
  1002  0021  120A  158A  20D7  120A  118A  	fcall	clear_ram0
  1003                           
  1004                           ; Initialize objects allocated to BANK1
  1005  0026  1683               	bsf	3,5	;RP0=1, select bank1
  1006  0027  1303               	bcf	3,6	;RP1=0, select bank1
  1007  0028  120A  158A  20B7  120A  118A  	fcall	__pidataBANK1	;fetch initializer
  1008  002D  00EE               	movwf	__pdataBANK1& (0+127)
  1009  002E  120A  158A  20B8  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
  1010  0033  00EF               	movwf	(__pdataBANK1+1)& (0+127)
  1011                           
  1012                           ; Initialize objects allocated to BANK0
  1013  0034  1283               	bcf	3,5	;RP0=0, select bank0
  1014  0035  1303               	bcf	3,6	;RP1=0, select bank0
  1015  0036  120A  158A  20B9  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1016  003B  00D7               	movwf	__pdataBANK0& (0+127)
  1017  003C  120A  158A  20BA   	fcall	__pidataBANK0+1	;fetch initializer
  1018  003F  00D8               	movwf	(__pdataBANK0+1)& (0+127)
  1019  0040                     end_of_initialization:	
  1020                           ;End of C runtime variable initialization code
  1021                           
  1022  0040                     __end_of__initialization:	
  1023  0040  0183               	clrf	3
  1024  0041  120A  158A  2EAB   	ljmp	_main	;jump to C main() function
  1025                           
  1026                           	psect	bssBANK0
  1027  0041                     __pbssBANK0:	
  1028  0041                     _fitemp:	
  1029  0041                     	ds	2
  1030  0043                     _fop_rule1:	
  1031  0043                     	ds	2
  1032  0045                     _pulsos:	
  1033  0045                     	ds	2
  1034  0047                     _pwm:	
  1035  0047                     	ds	2
  1036  0049                     _pwmAnt:	
  1037  0049                     	ds	2
  1038  004B                     _temp:	
  1039  004B                     	ds	2
  1040  004D                     _tip:	
  1041  004D                     	ds	2
  1042  004F                     _total_area:	
  1043  004F                     	ds	2
  1044  0051                     _x:	
  1045  0051                     	ds	2
  1046  0053                     _y:	
  1047  0053                     	ds	2
  1048  0055                     _ativa_fan:	
  1049  0055                     	ds	2
  1050                           
  1051                           	psect	dataBANK0
  1052  0057                     __pdataBANK0:	
  1053  0057                     _pas_cooler:	
  1054  0057                     	ds	2
  1055                           
  1056                           	psect	bssBANK1
  1057  00A0                     __pbssBANK1:	
  1058  00A0                     _ADCResult:	
  1059  00A0                     	ds	2
  1060  00A2                     _contador_rb6:	
  1061  00A2                     	ds	2
  1062  00A4                     _contagens_tm0:	
  1063  00A4                     	ds	2
  1064  00A6                     _deltaV:	
  1065  00A6                     	ds	2
  1066  00A8                     _derro:	
  1067  00A8                     	ds	2
  1068  00AA                     _fisetpoint:	
  1069  00AA                     	ds	2
  1070  00AC                     _foTip:	
  1071  00AC                     	ds	2
  1072  00AE                     _ideal:	
  1073  00AE                     	ds	2
  1074  00B0                     _posicao_do_grafico:	
  1075  00B0                     	ds	2
  1076  00B2                     _posicao_do_grafico_food:	
  1077  00B2                     	ds	2
  1078  00B4                     _posicao_do_grafico_service:	
  1079  00B4                     	ds	2
  1080  00B6                     _rpm:	
  1081  00B6                     	ds	2
  1082  00B8                     _status:	
  1083  00B8                     	ds	2
  1084  00BA                     _sum:	
  1085  00BA                     	ds	2
  1086  00BC                     _temp_lida:	
  1087  00BC                     	ds	2
  1088  00BE                     _tempo_rb6:	
  1089  00BE                     	ds	2
  1090  00C0                     _tip_average:	
  1091  00C0                     	ds	2
  1092  00C2                     _tip_gorgeous:	
  1093  00C2                     	ds	2
  1094  00C4                     _display_pwm:	
  1095  00C4                     	ds	10
  1096  00CE                     _display_rpm:	
  1097  00CE                     	ds	10
  1098                           
  1099                           	psect	dataBANK1
  1100  00EE                     __pdataBANK1:	
  1101  00EE                     _tf:	
  1102  00EE                     	ds	2
  1103                           
  1104                           	psect	clrtext
  1105  08D7                     clear_ram0:	
  1106                           ;	Called with FSR containing the base address, and
  1107                           ;	W with the last address+1
  1108                           
  1109  08D7  0064               	clrwdt	;clear the watchdog before getting into this loop
  1110  08D8                     clrloop0:	
  1111  08D8  0180               	clrf	0	;clear RAM location pointed to by FSR
  1112  08D9  0A84               	incf	4,f	;increment pointer
  1113  08DA  0604               	xorwf	4,w	;XOR with final address
  1114  08DB  1903               	btfsc	3,2	;have we reached the end yet?
  1115  08DC  3400               	retlw	0	;all done for this memory range, return
  1116  08DD  0604               	xorwf	4,w	;XOR again to restore value
  1117  08DE  28D8               	goto	clrloop0	;do the next byte
  1118                           
  1119                           	psect	cstackBANK3
  1120  0190                     __pcstackBANK3:	
  1121  0190                     ??_main:	
  1122                           
  1123                           ; 0 bytes @ 0x0
  1124  0190                     	ds	3
  1125                           
  1126                           	psect	cstackBANK1
  1127  00D8                     __pcstackBANK1:	
  1128  00D8                     ?___lwmod:	
  1129  00D8                     ___aldiv@counter:	
  1130                           ; 2 bytes @ 0x0
  1131                           
  1132  00D8                     ___lwmod@divisor:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135                           
  1136                           ; 2 bytes @ 0x0
  1137  00D8                     	ds	1
  1138  00D9                     ___aldiv@sign:	
  1139                           
  1140                           ; 1 bytes @ 0x1
  1141  00D9                     	ds	1
  1142  00DA                     ___lwmod@dividend:	
  1143  00DA                     ___aldiv@quotient:	
  1144                           ; 2 bytes @ 0x2
  1145                           
  1146                           
  1147                           ; 4 bytes @ 0x2
  1148  00DA                     	ds	2
  1149  00DC                     ?_sprintf:	
  1150  00DC                     sprintf@f:	
  1151                           ; 2 bytes @ 0x4
  1152                           
  1153                           
  1154                           ; 2 bytes @ 0x4
  1155  00DC                     	ds	2
  1156  00DE                     ?_USART_Init:	
  1157  00DE                     USART_Init@BaudRate:	
  1158                           ; 0 bytes @ 0x6
  1159                           
  1160                           
  1161                           ; 4 bytes @ 0x6
  1162  00DE                     	ds	2
  1163  00E0                     ??_sprintf:	
  1164                           
  1165                           ; 0 bytes @ 0x8
  1166  00E0                     	ds	2
  1167  00E2                     ??_USART_Init:	
  1168                           
  1169                           ; 0 bytes @ 0xA
  1170  00E2                     	ds	1
  1171  00E3                     sprintf@ap:	
  1172                           
  1173                           ; 1 bytes @ 0xB
  1174  00E3                     	ds	1
  1175  00E4                     sprintf@prec:	
  1176                           
  1177                           ; 1 bytes @ 0xC
  1178  00E4                     	ds	1
  1179  00E5                     sprintf@_val:	
  1180                           
  1181                           ; 4 bytes @ 0xD
  1182  00E5                     	ds	4
  1183  00E9                     sprintf@flag:	
  1184                           
  1185                           ; 1 bytes @ 0x11
  1186  00E9                     	ds	1
  1187  00EA                     sprintf@width:	
  1188                           
  1189                           ; 2 bytes @ 0x12
  1190  00EA                     	ds	2
  1191  00EC                     sprintf@sp:	
  1192                           
  1193                           ; 1 bytes @ 0x14
  1194  00EC                     	ds	1
  1195  00ED                     sprintf@c:	
  1196                           
  1197                           ; 1 bytes @ 0x15
  1198  00ED                     	ds	1
  1199                           
  1200                           	psect	cstackCOMMON
  1201  0070                     __pcstackCOMMON:	
  1202  0070                     ?_TIMER0_Set:	
  1203  0070                     ?_TIMER0_Init:	
  1204                           ; 0 bytes @ 0x0
  1205                           
  1206  0070                     ?_ADC_Init:	
  1207                           ; 0 bytes @ 0x0
  1208                           
  1209  0070                     ?_PWM_Init:	
  1210                           ; 0 bytes @ 0x0
  1211                           
  1212  0070                     ?_LCD_Init:	
  1213                           ; 0 bytes @ 0x0
  1214                           
  1215  0070                     ?_LCD_Clear:	
  1216                           ; 0 bytes @ 0x0
  1217                           
  1218  0070                     ?_isdigit:	
  1219                           ; 0 bytes @ 0x0
  1220                           
  1221  0070                     ?_ISR:	
  1222                           ; 1 bit 
  1223                           
  1224  0070                     ?_main:	
  1225                           ; 0 bytes @ 0x0
  1226                           
  1227  0070                     ?_USART_WriteChar:	
  1228                           ; 0 bytes @ 0x0
  1229                           
  1230  0070                     ?_LCD_WriteCmd:	
  1231                           ; 0 bytes @ 0x0
  1232                           
  1233  0070                     ?_LCD_WriteData:	
  1234                           ; 0 bytes @ 0x0
  1235                           
  1236  0070                     ?i1_USART_WriteChar:	
  1237                           ; 0 bytes @ 0x0
  1238                           
  1239  0070                     ??i1_USART_WriteChar:	
  1240                           ; 0 bytes @ 0x0
  1241                           
  1242  0070                     ?i1_TIMER0_Set:	
  1243                           ; 0 bytes @ 0x0
  1244                           
  1245  0070                     ??i1_TIMER0_Set:	
  1246                           ; 0 bytes @ 0x0
  1247                           
  1248  0070                     ?_USART_ReceiveChar:	
  1249                           ; 0 bytes @ 0x0
  1250                           
  1251  0070                     ?_max_val:	
  1252                           ; 1 bytes @ 0x0
  1253                           
  1254  0070                     ?i1___lwdiv:	
  1255                           ; 2 bytes @ 0x0
  1256                           
  1257  0070                     ?___ftpack:	
  1258                           ; 2 bytes @ 0x0
  1259                           
  1260  0070                     i1USART_WriteChar@byte:	
  1261                           ; 3 bytes @ 0x0
  1262                           
  1263  0070                     i1TIMER0_Set@contagens:	
  1264                           ; 1 bytes @ 0x0
  1265                           
  1266  0070                     max_val@a:	
  1267                           ; 1 bytes @ 0x0
  1268                           
  1269  0070                     i1___lwdiv@divisor:	
  1270                           ; 2 bytes @ 0x0
  1271                           
  1272  0070                     ___ftpack@arg:	
  1273                           ; 2 bytes @ 0x0
  1274                           
  1275                           
  1276                           ; 3 bytes @ 0x0
  1277  0070                     	ds	1
  1278  0071                     ?i1_USART_WriteString:	
  1279  0071                     i1USART_WriteString@str:	
  1280                           ; 0 bytes @ 0x1
  1281                           
  1282                           
  1283                           ; 2 bytes @ 0x1
  1284  0071                     	ds	1
  1285  0072                     max_val@b:	
  1286  0072                     i1___lwdiv@dividend:	
  1287                           ; 2 bytes @ 0x2
  1288                           
  1289                           
  1290                           ; 2 bytes @ 0x2
  1291  0072                     	ds	1
  1292  0073                     ??_USART_ReceiveChar:	
  1293  0073                     ??i1_USART_WriteString:	
  1294                           ; 0 bytes @ 0x3
  1295                           
  1296  0073                     ___ftpack@exp:	
  1297                           ; 0 bytes @ 0x3
  1298                           
  1299                           
  1300                           ; 1 bytes @ 0x3
  1301  0073                     	ds	1
  1302  0074                     ??_max_val:	
  1303  0074                     ??i1___lwdiv:	
  1304                           ; 0 bytes @ 0x4
  1305                           
  1306  0074                     USART_ReceiveChar@byte:	
  1307                           ; 0 bytes @ 0x4
  1308                           
  1309  0074                     ___ftpack@sign:	
  1310                           ; 1 bytes @ 0x4
  1311                           
  1312                           
  1313                           ; 1 bytes @ 0x4
  1314  0074                     	ds	1
  1315  0075                     ??___ftpack:	
  1316  0075                     i1___lwdiv@quotient:	
  1317                           ; 0 bytes @ 0x5
  1318                           
  1319                           
  1320                           ; 2 bytes @ 0x5
  1321  0075                     	ds	2
  1322  0077                     i1___lwdiv@counter:	
  1323                           
  1324                           ; 1 bytes @ 0x7
  1325  0077                     	ds	1
  1326  0078                     ??_trimf:	
  1327  0078                     ??_trapmf:	
  1328                           ; 0 bytes @ 0x8
  1329                           
  1330  0078                     ?i1___wmul:	
  1331                           ; 0 bytes @ 0x8
  1332                           
  1333  0078                     ?___lwtoft:	
  1334                           ; 2 bytes @ 0x8
  1335                           
  1336  0078                     ___lwtoft@c:	
  1337                           ; 3 bytes @ 0x8
  1338                           
  1339  0078                     i1___wmul@multiplier:	
  1340                           ; 2 bytes @ 0x8
  1341                           
  1342                           
  1343                           ; 2 bytes @ 0x8
  1344  0078                     	ds	2
  1345  007A                     i1___wmul@multiplicand:	
  1346                           
  1347                           ; 2 bytes @ 0xA
  1348  007A                     	ds	1
  1349  007B                     ??___lwtoft:	
  1350                           
  1351                           ; 0 bytes @ 0xB
  1352  007B                     	ds	1
  1353  007C                     ??i1___wmul:	
  1354  007C                     trimf@ua:	
  1355                           ; 0 bytes @ 0xC
  1356                           
  1357  007C                     trapmf@ua:	
  1358                           ; 2 bytes @ 0xC
  1359                           
  1360  007C                     i1___wmul@product:	
  1361                           ; 2 bytes @ 0xC
  1362                           
  1363                           
  1364                           ; 2 bytes @ 0xC
  1365  007C                     	ds	2
  1366                           
  1367                           	psect	cstackBANK0
  1368  0020                     __pcstackBANK0:	
  1369  0020                     ?___ftge:	
  1370  0020                     ?i1_PWM_DutyCycle2:	
  1371                           ; 1 bit 
  1372                           
  1373  0020                     ?_trimf:	
  1374                           ; 0 bytes @ 0x0
  1375                           
  1376  0020                     ?_trapmf:	
  1377                           ; 2 bytes @ 0x0
  1378                           
  1379  0020                     trimf@x:	
  1380                           ; 2 bytes @ 0x0
  1381                           
  1382  0020                     trapmf@x:	
  1383                           ; 2 bytes @ 0x0
  1384                           
  1385  0020                     i1PWM_DutyCycle2@valor:	
  1386                           ; 2 bytes @ 0x0
  1387                           
  1388  0020                     ___ftge@ff1:	
  1389                           ; 2 bytes @ 0x0
  1390                           
  1391                           
  1392                           ; 3 bytes @ 0x0
  1393  0020                     	ds	2
  1394  0022                     ??i1_PWM_DutyCycle2:	
  1395  0022                     trimf@a:	
  1396                           ; 0 bytes @ 0x2
  1397                           
  1398  0022                     trapmf@a:	
  1399                           ; 2 bytes @ 0x2
  1400                           
  1401                           
  1402                           ; 2 bytes @ 0x2
  1403  0022                     	ds	1
  1404  0023                     ___ftge@ff2:	
  1405                           
  1406                           ; 3 bytes @ 0x3
  1407  0023                     	ds	1
  1408  0024                     trimf@b:	
  1409  0024                     trapmf@b:	
  1410                           ; 2 bytes @ 0x4
  1411                           
  1412                           
  1413                           ; 2 bytes @ 0x4
  1414  0024                     	ds	2
  1415  0026                     ??___ftge:	
  1416  0026                     trimf@c:	
  1417                           ; 0 bytes @ 0x6
  1418                           
  1419  0026                     trapmf@c:	
  1420                           ; 2 bytes @ 0x6
  1421                           
  1422                           
  1423                           ; 2 bytes @ 0x6
  1424  0026                     	ds	2
  1425  0028                     trapmf@d:	
  1426                           
  1427                           ; 2 bytes @ 0x8
  1428  0028                     	ds	4
  1429  002C                     ?_Fuzzy:	
  1430  002C                     Fuzzy@setpoint:	
  1431                           ; 0 bytes @ 0xC
  1432                           
  1433                           
  1434                           ; 2 bytes @ 0xC
  1435  002C                     	ds	2
  1436  002E                     ??_Fuzzy:	
  1437                           
  1438                           ; 0 bytes @ 0xE
  1439  002E                     	ds	2
  1440  0030                     Fuzzy@velocidade:	
  1441                           
  1442                           ; 1 bytes @ 0x10
  1443  0030                     	ds	1
  1444  0031                     Fuzzy@sum:	
  1445                           
  1446                           ; 2 bytes @ 0x11
  1447  0031                     	ds	2
  1448  0033                     ??_ISR:	
  1449                           
  1450                           ; 0 bytes @ 0x13
  1451  0033                     	ds	4
  1452  0037                     ?_PWM_DutyCycle2:	
  1453  0037                     ??_TIMER0_Set:	
  1454                           ; 0 bytes @ 0x17
  1455                           
  1456  0037                     ??_TIMER0_Init:	
  1457                           ; 0 bytes @ 0x17
  1458                           
  1459  0037                     ??_ADC_Init:	
  1460                           ; 0 bytes @ 0x17
  1461                           
  1462  0037                     ??_PWM_Init:	
  1463                           ; 0 bytes @ 0x17
  1464                           
  1465  0037                     ?_LCD_Cursor:	
  1466                           ; 0 bytes @ 0x17
  1467                           
  1468  0037                     ?_PWM_DutyCycle1:	
  1469                           ; 0 bytes @ 0x17
  1470                           
  1471  0037                     ??_isdigit:	
  1472                           ; 0 bytes @ 0x17
  1473                           
  1474  0037                     ??_USART_WriteChar:	
  1475                           ; 0 bytes @ 0x17
  1476                           
  1477  0037                     ??_LCD_WriteCmd:	
  1478                           ; 0 bytes @ 0x17
  1479                           
  1480  0037                     ??_LCD_WriteData:	
  1481                           ; 0 bytes @ 0x17
  1482                           
  1483  0037                     ?___wmul:	
  1484                           ; 0 bytes @ 0x17
  1485                           
  1486  0037                     ?___lwdiv:	
  1487                           ; 2 bytes @ 0x17
  1488                           
  1489  0037                     ?___aldiv:	
  1490                           ; 2 bytes @ 0x17
  1491                           
  1492  0037                     USART_WriteChar@byte:	
  1493                           ; 4 bytes @ 0x17
  1494                           
  1495  0037                     TIMER0_Set@contagens:	
  1496                           ; 1 bytes @ 0x17
  1497                           
  1498  0037                     LCD_Cursor@Col:	
  1499                           ; 1 bytes @ 0x17
  1500                           
  1501  0037                     _isdigit$1450:	
  1502                           ; 1 bytes @ 0x17
  1503                           
  1504  0037                     PWM_DutyCycle1@valor:	
  1505                           ; 1 bytes @ 0x17
  1506                           
  1507  0037                     PWM_DutyCycle2@valor:	
  1508                           ; 2 bytes @ 0x17
  1509                           
  1510  0037                     ___wmul@multiplier:	
  1511                           ; 2 bytes @ 0x17
  1512                           
  1513  0037                     ___lwdiv@divisor:	
  1514                           ; 2 bytes @ 0x17
  1515                           
  1516  0037                     ___aldiv@divisor:	
  1517                           ; 2 bytes @ 0x17
  1518                           
  1519                           
  1520                           ; 4 bytes @ 0x17
  1521  0037                     	ds	1
  1522  0038                     ?_USART_WriteString:	
  1523  0038                     ??_LCD_Cursor:	
  1524                           ; 0 bytes @ 0x18
  1525                           
  1526  0038                     LCD_WriteCmd@Byte:	
  1527                           ; 0 bytes @ 0x18
  1528                           
  1529  0038                     LCD_WriteData@Byte:	
  1530                           ; 1 bytes @ 0x18
  1531                           
  1532  0038                     isdigit@c:	
  1533                           ; 1 bytes @ 0x18
  1534                           
  1535  0038                     USART_WriteString@str:	
  1536                           ; 1 bytes @ 0x18
  1537                           
  1538                           
  1539                           ; 2 bytes @ 0x18
  1540  0038                     	ds	1
  1541  0039                     ??_PWM_DutyCycle2:	
  1542  0039                     ??_LCD_Init:	
  1543                           ; 0 bytes @ 0x19
  1544                           
  1545  0039                     ?_LCD_WriteString:	
  1546                           ; 0 bytes @ 0x19
  1547                           
  1548  0039                     ??_PWM_DutyCycle1:	
  1549                           ; 0 bytes @ 0x19
  1550                           
  1551  0039                     ??_LCD_Clear:	
  1552                           ; 0 bytes @ 0x19
  1553                           
  1554  0039                     LCD_Cursor@Row:	
  1555                           ; 0 bytes @ 0x19
  1556                           
  1557  0039                     LCD_WriteString@Str:	
  1558                           ; 1 bytes @ 0x19
  1559                           
  1560  0039                     ___wmul@multiplicand:	
  1561                           ; 2 bytes @ 0x19
  1562                           
  1563  0039                     ___lwdiv@dividend:	
  1564                           ; 2 bytes @ 0x19
  1565                           
  1566                           
  1567                           ; 2 bytes @ 0x19
  1568  0039                     	ds	1
  1569  003A                     ??_USART_WriteString:	
  1570                           
  1571                           ; 0 bytes @ 0x1A
  1572  003A                     	ds	1
  1573  003B                     ??_LCD_WriteString:	
  1574  003B                     ??___wmul:	
  1575                           ; 0 bytes @ 0x1B
  1576                           
  1577  003B                     ??___lwdiv:	
  1578                           ; 0 bytes @ 0x1B
  1579                           
  1580  003B                     ___wmul@product:	
  1581                           ; 0 bytes @ 0x1B
  1582                           
  1583  003B                     ___aldiv@dividend:	
  1584                           ; 2 bytes @ 0x1B
  1585                           
  1586                           
  1587                           ; 4 bytes @ 0x1B
  1588  003B                     	ds	1
  1589  003C                     ___lwdiv@counter:	
  1590                           
  1591                           ; 1 bytes @ 0x1C
  1592  003C                     	ds	1
  1593  003D                     ___lwdiv@quotient:	
  1594                           
  1595                           ; 2 bytes @ 0x1D
  1596  003D                     	ds	2
  1597  003F                     ??___aldiv:	
  1598  003F                     ??___lwmod:	
  1599                           ; 0 bytes @ 0x1F
  1600                           
  1601                           
  1602                           ; 0 bytes @ 0x1F
  1603  003F                     	ds	1
  1604  0040                     ___lwmod@counter:	
  1605                           
  1606                           ; 1 bytes @ 0x20
  1607  0040                     	ds	1
  1608                           
  1609                           	psect	maintext
  1610  0EAB                     __pmaintext:	
  1611 ;;
  1612 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1613 ;;
  1614 ;; *************** function _main *****************
  1615 ;; Defined at:
  1616 ;;		line 484 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;		None
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;		None
  1621 ;; Return value:  Size  Location     Type
  1622 ;;		None               void
  1623 ;; Registers used:
  1624 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1625 ;; Tracked objects:
  1626 ;;		On entry : 17F/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1630 ;;      Params:         0       0       0       0       0
  1631 ;;      Locals:         0       0       0       0       0
  1632 ;;      Temps:          0       0       0       3       0
  1633 ;;      Totals:         0       0       0       3       0
  1634 ;;Total ram usage:        3 bytes
  1635 ;; Hardware stack levels required when called:    6
  1636 ;; This function calls:
  1637 ;;		_ADC_Init
  1638 ;;		_LCD_Clear
  1639 ;;		_LCD_Cursor
  1640 ;;		_LCD_Init
  1641 ;;		_LCD_WriteString
  1642 ;;		_PWM_DutyCycle1
  1643 ;;		_PWM_DutyCycle2
  1644 ;;		_PWM_Init
  1645 ;;		_TIMER0_Init
  1646 ;;		_TIMER0_Set
  1647 ;;		_USART_Init
  1648 ;;		_USART_WriteString
  1649 ;;		_sprintf
  1650 ;; This function is called by:
  1651 ;;		Startup code after reset
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           
  1656                           ;psect for function _main
  1657  0EAB                     _main:	
  1658                           
  1659                           ;main.c: 486: TRISA = 0b00000001;
  1660                           
  1661                           ;incstack = 0
  1662                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1663  0EAB  3001               	movlw	1
  1664  0EAC  1683               	bsf	3,5	;RP0=1, select bank1
  1665  0EAD  1303               	bcf	3,6	;RP1=0, select bank1
  1666  0EAE  0085               	movwf	5	;volatile
  1667                           
  1668                           ;main.c: 487: PORTA = 0b00000001;
  1669  0EAF  3001               	movlw	1
  1670  0EB0  1283               	bcf	3,5	;RP0=0, select bank0
  1671  0EB1  1303               	bcf	3,6	;RP1=0, select bank0
  1672  0EB2  0085               	movwf	5	;volatile
  1673                           
  1674                           ;main.c: 488: TRISB = 0b00000000;
  1675  0EB3  1683               	bsf	3,5	;RP0=1, select bank1
  1676  0EB4  1303               	bcf	3,6	;RP1=0, select bank1
  1677  0EB5  0186               	clrf	6	;volatile
  1678                           
  1679                           ;main.c: 489: PORTB = 0b00000000;
  1680  0EB6  1283               	bcf	3,5	;RP0=0, select bank0
  1681  0EB7  1303               	bcf	3,6	;RP1=0, select bank0
  1682  0EB8  0186               	clrf	6	;volatile
  1683                           
  1684                           ;main.c: 490: TRISC = 0b10000001;
  1685  0EB9  3081               	movlw	129
  1686  0EBA  1683               	bsf	3,5	;RP0=1, select bank1
  1687  0EBB  1303               	bcf	3,6	;RP1=0, select bank1
  1688  0EBC  0087               	movwf	7	;volatile
  1689                           
  1690                           ;main.c: 491: PORTC = 0b11000000;
  1691  0EBD  30C0               	movlw	192
  1692  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  1693  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  1694  0EC0  0087               	movwf	7	;volatile
  1695                           
  1696                           ;main.c: 492: TRISD = 0b00000000;
  1697  0EC1  1683               	bsf	3,5	;RP0=1, select bank1
  1698  0EC2  1303               	bcf	3,6	;RP1=0, select bank1
  1699  0EC3  0188               	clrf	8	;volatile
  1700                           
  1701                           ;main.c: 493: PORTD = 0b00000000;
  1702  0EC4  1283               	bcf	3,5	;RP0=0, select bank0
  1703  0EC5  1303               	bcf	3,6	;RP1=0, select bank0
  1704  0EC6  0188               	clrf	8	;volatile
  1705                           
  1706                           ;main.c: 494: TRISE = 0b00000000;
  1707  0EC7  1683               	bsf	3,5	;RP0=1, select bank1
  1708  0EC8  1303               	bcf	3,6	;RP1=0, select bank1
  1709  0EC9  0189               	clrf	9	;volatile
  1710                           
  1711                           ;main.c: 495: PORTE = 0b00000000;
  1712  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  1713  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  1714  0ECC  0189               	clrf	9	;volatile
  1715                           
  1716                           ;main.c: 498: T1CON = 0x03;
  1717  0ECD  3003               	movlw	3
  1718  0ECE  0090               	movwf	16	;volatile
  1719                           
  1720                           ;main.c: 499: TMR1L = 0x00;
  1721  0ECF  018E               	clrf	14	;volatile
  1722                           
  1723                           ;main.c: 500: TMR1H = 0x00;
  1724  0ED0  018F               	clrf	15	;volatile
  1725                           
  1726                           ;main.c: 503: USART_Init(115200);
  1727  0ED1  3000               	movlw	0
  1728  0ED2  1683               	bsf	3,5	;RP0=1, select bank1
  1729  0ED3  1303               	bcf	3,6	;RP1=0, select bank1
  1730  0ED4  00E1               	movwf	(USART_Init@BaudRate+3)^(0+128)
  1731  0ED5  3001               	movlw	1
  1732  0ED6  00E0               	movwf	(USART_Init@BaudRate+2)^(0+128)
  1733  0ED7  30C2               	movlw	194
  1734  0ED8  00DF               	movwf	(USART_Init@BaudRate+1)^(0+128)
  1735  0ED9  3000               	movlw	0
  1736  0EDA  00DE               	movwf	USART_Init@BaudRate^(0+128)
  1737  0EDB  120A  158A  2344  120A  158A  	fcall	_USART_Init
  1738                           
  1739                           ;main.c: 504: TIMER0_Init();
  1740  0EE0  120A  118A  27F5  120A  158A  	fcall	_TIMER0_Init
  1741                           
  1742                           ;main.c: 505: ADC_Init();
  1743  0EE5  120A  158A  211C  120A  158A  	fcall	_ADC_Init
  1744                           
  1745                           ;main.c: 506: PWM_Init();
  1746  0EEA  120A  158A  220A  120A  158A  	fcall	_PWM_Init
  1747                           
  1748                           ;main.c: 507: LCD_Init();
  1749  0EEF  120A  158A  2464  120A  158A  	fcall	_LCD_Init
  1750                           
  1751                           ;main.c: 510: INTCONbits.PEIE = 1;
  1752  0EF4  170B               	bsf	11,6	;volatile
  1753                           
  1754                           ;main.c: 511: INTCONbits.GIE = 1;
  1755  0EF5  178B               	bsf	11,7	;volatile
  1756                           
  1757                           ;main.c: 514: USART_WriteString("Inicializando o PIC16F877A\n\r");
  1758  0EF6  3044               	movlw	low (STR_11| (0+32768))
  1759  0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  1760  0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  1761  0EF9  00B8               	movwf	USART_WriteString@str
  1762  0EFA  3090               	movlw	high (STR_11| (0+32768))
  1763  0EFB  00B9               	movwf	USART_WriteString@str+1
  1764  0EFC  120A  158A  2253  120A  158A  	fcall	_USART_WriteString
  1765                           
  1766                           ;main.c: 515: USART_WriteString("USART: 115.200bps\n\r");
  1767  0F01  3061               	movlw	low (STR_12| (0+32768))
  1768  0F02  1283               	bcf	3,5	;RP0=0, select bank0
  1769  0F03  1303               	bcf	3,6	;RP1=0, select bank0
  1770  0F04  00B8               	movwf	USART_WriteString@str
  1771  0F05  3090               	movlw	high (STR_12| (0+32768))
  1772  0F06  00B9               	movwf	USART_WriteString@str+1
  1773  0F07  120A  158A  2253  120A  158A  	fcall	_USART_WriteString
  1774                           
  1775                           ;main.c: 518: LCD_Init();
  1776  0F0C  120A  158A  2464  120A  158A  	fcall	_LCD_Init
  1777                           
  1778                           ;main.c: 519: LCD_Cursor(0,0);
  1779  0F11  1283               	bcf	3,5	;RP0=0, select bank0
  1780  0F12  1303               	bcf	3,6	;RP1=0, select bank0
  1781  0F13  01B7               	clrf	LCD_Cursor@Col
  1782  0F14  3000               	movlw	0
  1783  0F15  120A  158A  2142  120A  158A  	fcall	_LCD_Cursor
  1784                           
  1785                           ;main.c: 520: LCD_WriteString("Inicializando...");
  1786  0F1A  3075               	movlw	low (STR_13| (0+32768))
  1787  0F1B  1283               	bcf	3,5	;RP0=0, select bank0
  1788  0F1C  1303               	bcf	3,6	;RP1=0, select bank0
  1789  0F1D  00B9               	movwf	LCD_WriteString@Str
  1790  0F1E  3090               	movlw	high (STR_13| (0+32768))
  1791  0F1F  00BA               	movwf	LCD_WriteString@Str+1
  1792  0F20  120A  158A  222E  120A  158A  	fcall	_LCD_WriteString
  1793                           
  1794                           ;main.c: 523: PWM_DutyCycle1(0);
  1795  0F25  3000               	movlw	0
  1796  0F26  1283               	bcf	3,5	;RP0=0, select bank0
  1797  0F27  1303               	bcf	3,6	;RP1=0, select bank0
  1798  0F28  00B7               	movwf	PWM_DutyCycle1@valor
  1799  0F29  3000               	movlw	0
  1800  0F2A  00B8               	movwf	PWM_DutyCycle1@valor+1
  1801  0F2B  120A  158A  218E  120A  158A  	fcall	_PWM_DutyCycle1
  1802                           
  1803                           ;main.c: 524: PWM_DutyCycle2(0);
  1804  0F30  3000               	movlw	0
  1805  0F31  1283               	bcf	3,5	;RP0=0, select bank0
  1806  0F32  1303               	bcf	3,6	;RP1=0, select bank0
  1807  0F33  00B7               	movwf	PWM_DutyCycle2@valor
  1808  0F34  3000               	movlw	0
  1809  0F35  00B8               	movwf	PWM_DutyCycle2@valor+1
  1810  0F36  120A  158A  21A9  120A  158A  	fcall	_PWM_DutyCycle2
  1811                           
  1812                           ;main.c: 527: TIMER0_Set(238);
  1813  0F3B  30EE               	movlw	238
  1814  0F3C  120A  158A  20C1  120A  158A  	fcall	_TIMER0_Set
  1815                           
  1816                           ;main.c: 530: _delay((unsigned long)((1000)*(18432000/4000.0)));
  1817  0F41  3018               	movlw	24
  1818  0F42  1683               	bsf	3,5	;RP0=1, select bank3
  1819  0F43  1703               	bsf	3,6	;RP1=1, select bank3
  1820  0F44  0092               	movwf	(??_main^(0+384)+2)
  1821  0F45  3061               	movlw	97
  1822  0F46  0091               	movwf	(??_main^(0+384)+1)
  1823  0F47  306E               	movlw	110
  1824  0F48  0090               	movwf	??_main^(0+384)
  1825  0F49                     u3397:	
  1826  0F49  0B90               	decfsz	??_main^(0+384),f
  1827  0F4A  2F49               	goto	u3397
  1828  0F4B  0B91               	decfsz	(??_main^(0+384)+1),f
  1829  0F4C  2F49               	goto	u3397
  1830  0F4D  0B92               	decfsz	(??_main^(0+384)+2),f
  1831  0F4E  2F49               	goto	u3397
  1832  0F4F  0000               	nop
  1833  0F50                     l211:	
  1834                           ;main.c: 533: while(1)
  1835                           
  1836                           
  1837                           ;main.c: 534: {
  1838                           ;main.c: 536: sprintf(display_rpm,"%04d", deltaV);
  1839  0F50  301E               	movlw	low (STR_14| (0+32768))
  1840  0F51  1683               	bsf	3,5	;RP0=1, select bank1
  1841  0F52  1303               	bcf	3,6	;RP1=0, select bank1
  1842  0F53  00DC               	movwf	sprintf@f^(0+128)
  1843  0F54  3091               	movlw	high (STR_14| (0+32768))
  1844  0F55  00DD               	movwf	(sprintf@f^(0+128)+1)
  1845  0F56  0827               	movf	(_deltaV+1)^(0+128),w
  1846  0F57  01DF               	clrf	((?_sprintf+1)^(0+128)+2)
  1847  0F58  07DF               	addwf	((?_sprintf+1)^(0+128)+2),f
  1848  0F59  0826               	movf	_deltaV^(0+128),w
  1849  0F5A  01DE               	clrf	(?_sprintf^(0+128)+2)
  1850  0F5B  07DE               	addwf	(?_sprintf^(0+128)+2),f
  1851  0F5C  30CE               	movlw	_display_rpm& (0+255)
  1852  0F5D  120A  118A  2411  120A  158A  	fcall	_sprintf
  1853                           
  1854                           ;main.c: 537: sprintf(display_pwm,"%04d", pwm);
  1855  0F62  301E               	movlw	low (STR_14| (0+32768))
  1856  0F63  1683               	bsf	3,5	;RP0=1, select bank1
  1857  0F64  1303               	bcf	3,6	;RP1=0, select bank1
  1858  0F65  00DC               	movwf	sprintf@f^(0+128)
  1859  0F66  3091               	movlw	high (STR_14| (0+32768))
  1860  0F67  00DD               	movwf	(sprintf@f^(0+128)+1)
  1861  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  1862  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  1863  0F6A  0848               	movf	_pwm+1,w
  1864  0F6B  1683               	bsf	3,5	;RP0=1, select bank1
  1865  0F6C  1303               	bcf	3,6	;RP1=0, select bank1
  1866  0F6D  01DF               	clrf	((?_sprintf+1)^(0+128)+2)
  1867  0F6E  07DF               	addwf	((?_sprintf+1)^(0+128)+2),f
  1868  0F6F  1283               	bcf	3,5	;RP0=0, select bank0
  1869  0F70  1303               	bcf	3,6	;RP1=0, select bank0
  1870  0F71  0847               	movf	_pwm,w
  1871  0F72  1683               	bsf	3,5	;RP0=1, select bank1
  1872  0F73  1303               	bcf	3,6	;RP1=0, select bank1
  1873  0F74  01DE               	clrf	(?_sprintf^(0+128)+2)
  1874  0F75  07DE               	addwf	(?_sprintf^(0+128)+2),f
  1875  0F76  30C4               	movlw	_display_pwm& (0+255)
  1876  0F77  120A  118A  2411  120A  158A  	fcall	_sprintf
  1877                           
  1878                           ;main.c: 541: USART_WriteString(display_rpm);
  1879  0F7C  30CE               	movlw	_display_rpm& (0+255)
  1880  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  1881  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  1882  0F7F  00B8               	movwf	USART_WriteString@str
  1883  0F80  3000               	movlw	0
  1884  0F81  00B9               	movwf	USART_WriteString@str+1
  1885  0F82  120A  158A  2253  120A  158A  	fcall	_USART_WriteString
  1886                           
  1887                           ;main.c: 542: USART_WriteString("\n\r");
  1888  0F87  3092               	movlw	low ((STR_9+12)| (0+32768))
  1889  0F88  1283               	bcf	3,5	;RP0=0, select bank0
  1890  0F89  1303               	bcf	3,6	;RP1=0, select bank0
  1891  0F8A  00B8               	movwf	USART_WriteString@str
  1892  0F8B  3090               	movlw	high ((STR_9+12)| (0+32768))
  1893  0F8C  00B9               	movwf	USART_WriteString@str+1
  1894  0F8D  120A  158A  2253  120A  158A  	fcall	_USART_WriteString
  1895                           
  1896                           ;main.c: 545: LCD_Clear();
  1897  0F92  120A  158A  229D  120A  158A  	fcall	_LCD_Clear
  1898                           
  1899                           ;main.c: 546: LCD_Cursor(0,0);
  1900  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  1901  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  1902  0F99  01B7               	clrf	LCD_Cursor@Col
  1903  0F9A  3000               	movlw	0
  1904  0F9B  120A  158A  2142  120A  158A  	fcall	_LCD_Cursor
  1905                           
  1906                           ;main.c: 547: LCD_WriteString("DlV: ");
  1907  0FA0  3018               	movlw	low (STR_17| (0+32768))
  1908  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  1909  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  1910  0FA3  00B9               	movwf	LCD_WriteString@Str
  1911  0FA4  3091               	movlw	high (STR_17| (0+32768))
  1912  0FA5  00BA               	movwf	LCD_WriteString@Str+1
  1913  0FA6  120A  158A  222E  120A  158A  	fcall	_LCD_WriteString
  1914                           
  1915                           ;main.c: 548: LCD_Cursor(0,6);
  1916  0FAB  3006               	movlw	6
  1917  0FAC  1683               	bsf	3,5	;RP0=1, select bank3
  1918  0FAD  1703               	bsf	3,6	;RP1=1, select bank3
  1919  0FAE  0090               	movwf	??_main^(0+384)
  1920  0FAF  0810               	movf	??_main^(0+384),w
  1921  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  1922  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  1923  0FB2  00B7               	movwf	LCD_Cursor@Col
  1924  0FB3  3000               	movlw	0
  1925  0FB4  120A  158A  2142  120A  158A  	fcall	_LCD_Cursor
  1926                           
  1927                           ;main.c: 549: LCD_WriteString(display_rpm);
  1928  0FB9  30CE               	movlw	_display_rpm& (0+255)
  1929  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  1930  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  1931  0FBC  00B9               	movwf	LCD_WriteString@Str
  1932  0FBD  3000               	movlw	0
  1933  0FBE  00BA               	movwf	LCD_WriteString@Str+1
  1934  0FBF  120A  158A  222E  120A  158A  	fcall	_LCD_WriteString
  1935                           
  1936                           ;main.c: 550: LCD_Cursor(1,0);
  1937  0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  1938  0FC5  1303               	bcf	3,6	;RP1=0, select bank0
  1939  0FC6  01B7               	clrf	LCD_Cursor@Col
  1940  0FC7  3001               	movlw	1
  1941  0FC8  120A  158A  2142  120A  158A  	fcall	_LCD_Cursor
  1942                           
  1943                           ;main.c: 551: LCD_WriteString("PWM: ");
  1944  0FCD  3012               	movlw	low (STR_18| (0+32768))
  1945  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  1946  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  1947  0FD0  00B9               	movwf	LCD_WriteString@Str
  1948  0FD1  3091               	movlw	high (STR_18| (0+32768))
  1949  0FD2  00BA               	movwf	LCD_WriteString@Str+1
  1950  0FD3  120A  158A  222E  120A  158A  	fcall	_LCD_WriteString
  1951                           
  1952                           ;main.c: 552: LCD_Cursor(1,6);
  1953  0FD8  3006               	movlw	6
  1954  0FD9  1683               	bsf	3,5	;RP0=1, select bank3
  1955  0FDA  1703               	bsf	3,6	;RP1=1, select bank3
  1956  0FDB  0090               	movwf	??_main^(0+384)
  1957  0FDC  0810               	movf	??_main^(0+384),w
  1958  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  1959  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  1960  0FDF  00B7               	movwf	LCD_Cursor@Col
  1961  0FE0  3001               	movlw	1
  1962  0FE1  120A  158A  2142  120A  158A  	fcall	_LCD_Cursor
  1963                           
  1964                           ;main.c: 553: LCD_WriteString(display_pwm);
  1965  0FE6  30C4               	movlw	_display_pwm& (0+255)
  1966  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  1967  0FE8  1303               	bcf	3,6	;RP1=0, select bank0
  1968  0FE9  00B9               	movwf	LCD_WriteString@Str
  1969  0FEA  3000               	movlw	0
  1970  0FEB  00BA               	movwf	LCD_WriteString@Str+1
  1971  0FEC  120A  158A  222E  120A  158A  	fcall	_LCD_WriteString
  1972                           
  1973                           ;main.c: 555: _delay((unsigned long)((200)*(18432000/4000.0)));
  1974  0FF1  3005               	movlw	5
  1975  0FF2  1683               	bsf	3,5	;RP0=1, select bank3
  1976  0FF3  1703               	bsf	3,6	;RP1=1, select bank3
  1977  0FF4  0092               	movwf	(??_main^(0+384)+2)
  1978  0FF5  30AD               	movlw	173
  1979  0FF6  0091               	movwf	(??_main^(0+384)+1)
  1980  0FF7  30E0               	movlw	224
  1981  0FF8  0090               	movwf	??_main^(0+384)
  1982  0FF9                     u3407:	
  1983  0FF9  0B90               	decfsz	??_main^(0+384),f
  1984  0FFA  2FF9               	goto	u3407
  1985  0FFB  0B91               	decfsz	(??_main^(0+384)+1),f
  1986  0FFC  2FF9               	goto	u3407
  1987  0FFD  0B92               	decfsz	(??_main^(0+384)+2),f
  1988  0FFE  2FF9               	goto	u3407
  1989  0FFF  2F50               	goto	l211
  1990  1000                     __end_of_main:	
  1991                           
  1992                           	psect	text1
  1993  0411                     __ptext1:	
  1994 ;; *************** function _sprintf *****************
  1995 ;; Defined at:
  1996 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;  sp              1    wreg     PTR unsigned char 
  1999 ;;		 -> display_pwm(10), display_rpm(10), 
  2000 ;;  f               2    4[BANK1 ] PTR const unsigned char 
  2001 ;;		 -> STR_15(5), STR_14(5), 
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;  sp              1   20[BANK1 ] PTR unsigned char 
  2004 ;;		 -> display_pwm(10), display_rpm(10), 
  2005 ;;  _val            4   13[BANK1 ] struct .
  2006 ;;  width           2   18[BANK1 ] int 
  2007 ;;  c               1   21[BANK1 ] char 
  2008 ;;  flag            1   17[BANK1 ] unsigned char 
  2009 ;;  prec            1   12[BANK1 ] char 
  2010 ;;  ap              1   11[BANK1 ] PTR void [1]
  2011 ;;		 -> ?_sprintf(2), 
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  2    4[BANK1 ] int 
  2014 ;; Registers used:
  2015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2021 ;;      Params:         0       0       4       0       0
  2022 ;;      Locals:         0       0      11       0       0
  2023 ;;      Temps:          0       0       3       0       0
  2024 ;;      Totals:         0       0      18       0       0
  2025 ;;Total ram usage:       18 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    5
  2028 ;; This function calls:
  2029 ;;		___lwdiv
  2030 ;;		___lwmod
  2031 ;;		___wmul
  2032 ;;		_isdigit
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           
  2039                           ;psect for function _sprintf
  2040  0411                     _sprintf:	
  2041                           
  2042                           ;incstack = 0
  2043                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2044                           ;sprintf@sp stored from wreg
  2045  0411  1683               	bsf	3,5	;RP0=1, select bank1
  2046  0412  1303               	bcf	3,6	;RP1=0, select bank1
  2047  0413  00EC               	movwf	sprintf@sp^(0+128)
  2048                           
  2049                           ;doprnt.c: 494: va_list ap;
  2050                           ;doprnt.c: 499: signed char c;
  2051                           ;doprnt.c: 501: int width;
  2052                           ;doprnt.c: 506: signed char prec;
  2053                           ;doprnt.c: 508: unsigned char flag;
  2054                           ;doprnt.c: 527: union {
  2055                           ;doprnt.c: 528: unsigned int _val;
  2056                           ;doprnt.c: 529: struct {
  2057                           ;doprnt.c: 530: const char * _cp;
  2058                           ;doprnt.c: 531: unsigned _len;
  2059                           ;doprnt.c: 532: } _str;
  2060                           ;doprnt.c: 533: } _val;
  2061                           ;doprnt.c: 542: *ap = __va_start();
  2062  0414  30DE               	movlw	(?_sprintf+2)& (0+255)
  2063  0415  00E0               	movwf	??_sprintf^(0+128)
  2064  0416  0860               	movf	??_sprintf^(0+128),w
  2065  0417  00E3               	movwf	sprintf@ap^(0+128)
  2066  0418                     l3139:	
  2067                           ;doprnt.c: 545: while(c = *f++) {
  2068                           
  2069  0418  1683               	bsf	3,5	;RP0=1, select bank1
  2070  0419  1303               	bcf	3,6	;RP1=0, select bank1
  2071  041A  085D               	movf	(sprintf@f+1)^(0+128),w
  2072  041B  00E1               	movwf	(??_sprintf^(0+128)+1)
  2073  041C  085C               	movf	sprintf@f^(0+128),w
  2074  041D  00E0               	movwf	??_sprintf^(0+128)
  2075  041E  0ADC               	incf	sprintf@f^(0+128),f
  2076  041F  1903               	skipnz
  2077  0420  0ADD               	incf	(sprintf@f+1)^(0+128),f
  2078  0421  0861               	movf	(??_sprintf+1)^(0+128),w
  2079  0422  1283               	bcf	3,5	;RP0=0, select bank0
  2080  0423  1303               	bcf	3,6	;RP1=0, select bank0
  2081  0424  00FF               	movwf	127
  2082  0425  1683               	bsf	3,5	;RP0=1, select bank1
  2083  0426  1303               	bcf	3,6	;RP1=0, select bank1
  2084  0427  0860               	movf	??_sprintf^(0+128),w
  2085  0428  0084               	movwf	4
  2086  0429  1283               	bcf	3,5	;RP0=0, select bank0
  2087  042A  1303               	bcf	3,6	;RP1=0, select bank0
  2088  042B  160A  118A  2000  120A  118A  	fcall	stringtab
  2089  0430  1683               	bsf	3,5	;RP0=1, select bank1
  2090  0431  1303               	bcf	3,6	;RP1=0, select bank1
  2091  0432  00E2               	movwf	(??_sprintf+2)^(0+128)
  2092  0433  0862               	movf	(??_sprintf+2)^(0+128),w
  2093  0434  00ED               	movwf	sprintf@c^(0+128)
  2094  0435  08ED               	movf	sprintf@c^(0+128),f
  2095  0436  1903               	btfsc	3,2
  2096  0437  2E33               	goto	l3141
  2097                           
  2098                           ;doprnt.c: 547: if(c != '%')
  2099  0438  086D               	movf	sprintf@c^(0+128),w
  2100  0439  3A25               	xorlw	37
  2101  043A  1903               	skipnz
  2102  043B  2C48               	goto	l3045
  2103                           
  2104                           ;doprnt.c: 549: {
  2105                           ;doprnt.c: 550: ((*sp++ = (c)));
  2106  043C  086D               	movf	sprintf@c^(0+128),w
  2107  043D  00E0               	movwf	??_sprintf^(0+128)
  2108  043E  086C               	movf	sprintf@sp^(0+128),w
  2109  043F  0084               	movwf	4
  2110  0440  0860               	movf	??_sprintf^(0+128),w
  2111  0441  1383               	bcf	3,7	;select IRP bank0
  2112  0442  0080               	movwf	0
  2113  0443  3001               	movlw	1
  2114  0444  00E0               	movwf	??_sprintf^(0+128)
  2115  0445  0860               	movf	??_sprintf^(0+128),w
  2116  0446  07EC               	addwf	sprintf@sp^(0+128),f
  2117                           
  2118                           ;doprnt.c: 551: continue;
  2119  0447  2C18               	goto	l3139
  2120  0448                     l3045:	
  2121                           
  2122                           ;doprnt.c: 552: }
  2123                           ;doprnt.c: 555: width = 0;
  2124  0448  01EA               	clrf	sprintf@width^(0+128)
  2125  0449  01EB               	clrf	(sprintf@width+1)^(0+128)
  2126                           
  2127                           ;doprnt.c: 557: flag = 0;
  2128  044A  01E9               	clrf	sprintf@flag^(0+128)
  2129                           
  2130                           ;doprnt.c: 560: switch(*f) {
  2131                           
  2132                           ;doprnt.c: 559: for(;;) {
  2133  044B  2C53               	goto	l3049
  2134  044C                     l488:	
  2135                           ;doprnt.c: 588: case '0':
  2136                           
  2137                           
  2138                           ;doprnt.c: 589: flag |= 0x04;
  2139  044C  1683               	bsf	3,5	;RP0=1, select bank1
  2140  044D  1303               	bcf	3,6	;RP1=0, select bank1
  2141  044E  1569               	bsf	sprintf@flag^(0+128),2
  2142                           
  2143                           ;doprnt.c: 590: f++;
  2144  044F  3001               	movlw	1
  2145  0450  07DC               	addwf	sprintf@f^(0+128),f
  2146  0451  1803               	skipnc
  2147  0452  0ADD               	incf	(sprintf@f+1)^(0+128),f
  2148  0453                     l3049:	
  2149                           ;doprnt.c: 593: }
  2150                           
  2151                           ;doprnt.c: 591: continue;
  2152                           
  2153  0453  1683               	bsf	3,5	;RP0=1, select bank1
  2154  0454  1303               	bcf	3,6	;RP1=0, select bank1
  2155  0455  085D               	movf	(sprintf@f+1)^(0+128),w
  2156  0456  1283               	bcf	3,5	;RP0=0, select bank0
  2157  0457  1303               	bcf	3,6	;RP1=0, select bank0
  2158  0458  00FF               	movwf	127
  2159  0459  1683               	bsf	3,5	;RP0=1, select bank1
  2160  045A  1303               	bcf	3,6	;RP1=0, select bank1
  2161  045B  085C               	movf	sprintf@f^(0+128),w
  2162  045C  0084               	movwf	4
  2163  045D  1283               	bcf	3,5	;RP0=0, select bank0
  2164  045E  1303               	bcf	3,6	;RP1=0, select bank0
  2165  045F  160A  118A  2000  120A  118A  	fcall	stringtab
  2166                           
  2167                           ; Switch size 1, requested type "space"
  2168                           ; Number of cases is 1, Range of values is 48 to 48
  2169                           ; switch strategies available:
  2170                           ; Name         Instructions Cycles
  2171                           ; simple_byte            4     3 (average)
  2172                           ; direct_byte           14    11 (fixed)
  2173                           ; jumptable            263     9 (fixed)
  2174                           ;	Chosen strategy is simple_byte
  2175  0464  3A30               	xorlw	48	; case 48
  2176  0465  1903               	skipnz
  2177  0466  2C4C               	goto	l488
  2178  0467  2C68               	goto	l3051
  2179  0468                     l3051:	
  2180                           ;doprnt.c: 595: }
  2181                           
  2182                           ;doprnt.c: 594: break;
  2183                           
  2184                           
  2185                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2186  0468  1683               	bsf	3,5	;RP0=1, select bank1
  2187  0469  1303               	bcf	3,6	;RP1=0, select bank1
  2188  046A  085D               	movf	(sprintf@f+1)^(0+128),w
  2189  046B  1283               	bcf	3,5	;RP0=0, select bank0
  2190  046C  1303               	bcf	3,6	;RP1=0, select bank0
  2191  046D  00FF               	movwf	127
  2192  046E  1683               	bsf	3,5	;RP0=1, select bank1
  2193  046F  1303               	bcf	3,6	;RP1=0, select bank1
  2194  0470  085C               	movf	sprintf@f^(0+128),w
  2195  0471  0084               	movwf	4
  2196  0472  1283               	bcf	3,5	;RP0=0, select bank0
  2197  0473  1303               	bcf	3,6	;RP1=0, select bank0
  2198  0474  160A  118A  2000  120A  118A  	fcall	stringtab
  2199  0479  120A  158A  210C  120A  118A  	fcall	_isdigit
  2200  047E  1C03               	btfss	3,0
  2201  047F  2CE2               	goto	l3065
  2202                           
  2203                           ;doprnt.c: 607: width = 0;
  2204  0480  1683               	bsf	3,5	;RP0=1, select bank1
  2205  0481  1303               	bcf	3,6	;RP1=0, select bank1
  2206  0482  01EA               	clrf	sprintf@width^(0+128)
  2207  0483  01EB               	clrf	(sprintf@width+1)^(0+128)
  2208  0484                     l3055:	
  2209                           ;doprnt.c: 608: do {
  2210                           
  2211                           
  2212                           ;doprnt.c: 609: width *= 10;
  2213  0484  300A               	movlw	10
  2214  0485  1283               	bcf	3,5	;RP0=0, select bank0
  2215  0486  1303               	bcf	3,6	;RP1=0, select bank0
  2216  0487  00B7               	movwf	___wmul@multiplier
  2217  0488  3000               	movlw	0
  2218  0489  00B8               	movwf	___wmul@multiplier+1
  2219  048A  1683               	bsf	3,5	;RP0=1, select bank1
  2220  048B  1303               	bcf	3,6	;RP1=0, select bank1
  2221  048C  086B               	movf	(sprintf@width+1)^(0+128),w
  2222  048D  1283               	bcf	3,5	;RP0=0, select bank0
  2223  048E  1303               	bcf	3,6	;RP1=0, select bank0
  2224  048F  01BA               	clrf	___wmul@multiplicand+1
  2225  0490  07BA               	addwf	___wmul@multiplicand+1,f
  2226  0491  1683               	bsf	3,5	;RP0=1, select bank1
  2227  0492  1303               	bcf	3,6	;RP1=0, select bank1
  2228  0493  086A               	movf	sprintf@width^(0+128),w
  2229  0494  1283               	bcf	3,5	;RP0=0, select bank0
  2230  0495  1303               	bcf	3,6	;RP1=0, select bank0
  2231  0496  01B9               	clrf	___wmul@multiplicand
  2232  0497  07B9               	addwf	___wmul@multiplicand,f
  2233  0498  120A  158A  2278  120A  118A  	fcall	___wmul
  2234  049D  1283               	bcf	3,5	;RP0=0, select bank0
  2235  049E  1303               	bcf	3,6	;RP1=0, select bank0
  2236  049F  0838               	movf	?___wmul+1,w
  2237  04A0  1683               	bsf	3,5	;RP0=1, select bank1
  2238  04A1  1303               	bcf	3,6	;RP1=0, select bank1
  2239  04A2  01EB               	clrf	(sprintf@width+1)^(0+128)
  2240  04A3  07EB               	addwf	(sprintf@width+1)^(0+128),f
  2241  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  2242  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  2243  04A6  0837               	movf	?___wmul,w
  2244  04A7  1683               	bsf	3,5	;RP0=1, select bank1
  2245  04A8  1303               	bcf	3,6	;RP1=0, select bank1
  2246  04A9  01EA               	clrf	sprintf@width^(0+128)
  2247  04AA  07EA               	addwf	sprintf@width^(0+128),f
  2248                           
  2249                           ;doprnt.c: 610: width += *f++ - '0';
  2250  04AB  085D               	movf	(sprintf@f+1)^(0+128),w
  2251  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  2252  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  2253  04AE  00FF               	movwf	127
  2254  04AF  1683               	bsf	3,5	;RP0=1, select bank1
  2255  04B0  1303               	bcf	3,6	;RP1=0, select bank1
  2256  04B1  085C               	movf	sprintf@f^(0+128),w
  2257  04B2  0084               	movwf	4
  2258  04B3  1283               	bcf	3,5	;RP0=0, select bank0
  2259  04B4  1303               	bcf	3,6	;RP1=0, select bank0
  2260  04B5  160A  118A  2000  120A  118A  	fcall	stringtab
  2261  04BA  3ED0               	addlw	208
  2262  04BB  1683               	bsf	3,5	;RP0=1, select bank1
  2263  04BC  1303               	bcf	3,6	;RP1=0, select bank1
  2264  04BD  00E0               	movwf	??_sprintf^(0+128)
  2265  04BE  30FF               	movlw	255
  2266  04BF  1803               	skipnc
  2267  04C0  3000               	movlw	0
  2268  04C1  00E1               	movwf	(??_sprintf^(0+128)+1)
  2269  04C2  0860               	movf	??_sprintf^(0+128),w
  2270  04C3  07EA               	addwf	sprintf@width^(0+128),f
  2271  04C4  1803               	skipnc
  2272  04C5  0AEB               	incf	(sprintf@width+1)^(0+128),f
  2273  04C6  0861               	movf	(??_sprintf+1)^(0+128),w
  2274  04C7  07EB               	addwf	(sprintf@width+1)^(0+128),f
  2275  04C8  3001               	movlw	1
  2276  04C9  07DC               	addwf	sprintf@f^(0+128),f
  2277  04CA  1803               	skipnc
  2278  04CB  0ADD               	incf	(sprintf@f+1)^(0+128),f
  2279                           
  2280                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2281  04CC  085D               	movf	(sprintf@f+1)^(0+128),w
  2282  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  2283  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  2284  04CF  00FF               	movwf	127
  2285  04D0  1683               	bsf	3,5	;RP0=1, select bank1
  2286  04D1  1303               	bcf	3,6	;RP1=0, select bank1
  2287  04D2  085C               	movf	sprintf@f^(0+128),w
  2288  04D3  0084               	movwf	4
  2289  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  2290  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  2291  04D6  160A  118A  2000  120A  118A  	fcall	stringtab
  2292  04DB  120A  158A  210C  120A  118A  	fcall	_isdigit
  2293  04E0  1803               	btfsc	3,0
  2294  04E1  2C84               	goto	l3055
  2295  04E2                     l3065:	
  2296                           ;doprnt.c: 831: }
  2297                           
  2298                           ;doprnt.c: 822: continue;
  2299                           
  2300                           ;doprnt.c: 811: default:
  2301                           
  2302                           ;doprnt.c: 707: case 'i':
  2303                           ;doprnt.c: 708: break;
  2304                           
  2305                           ;doprnt.c: 706: case 'd':
  2306                           
  2307                           ;doprnt.c: 647: goto alldone;
  2308                           
  2309                           ;doprnt.c: 646: case 0:
  2310                           
  2311                           ;doprnt.c: 617: }
  2312                           ;doprnt.c: 644: switch(c = *f++) {
  2313                           
  2314  04E2  1683               	bsf	3,5	;RP0=1, select bank1
  2315  04E3  1303               	bcf	3,6	;RP1=0, select bank1
  2316  04E4  085D               	movf	(sprintf@f+1)^(0+128),w
  2317  04E5  00E1               	movwf	(??_sprintf^(0+128)+1)
  2318  04E6  085C               	movf	sprintf@f^(0+128),w
  2319  04E7  00E0               	movwf	??_sprintf^(0+128)
  2320  04E8  0ADC               	incf	sprintf@f^(0+128),f
  2321  04E9  1903               	skipnz
  2322  04EA  0ADD               	incf	(sprintf@f+1)^(0+128),f
  2323  04EB  0861               	movf	(??_sprintf+1)^(0+128),w
  2324  04EC  1283               	bcf	3,5	;RP0=0, select bank0
  2325  04ED  1303               	bcf	3,6	;RP1=0, select bank0
  2326  04EE  00FF               	movwf	127
  2327  04EF  1683               	bsf	3,5	;RP0=1, select bank1
  2328  04F0  1303               	bcf	3,6	;RP1=0, select bank1
  2329  04F1  0860               	movf	??_sprintf^(0+128),w
  2330  04F2  0084               	movwf	4
  2331  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  2332  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  2333  04F5  160A  118A  2000  120A  118A  	fcall	stringtab
  2334  04FA  1683               	bsf	3,5	;RP0=1, select bank1
  2335  04FB  1303               	bcf	3,6	;RP1=0, select bank1
  2336  04FC  00ED               	movwf	sprintf@c^(0+128)
  2337                           
  2338                           ; Switch size 1, requested type "space"
  2339                           ; Number of cases is 3, Range of values is 0 to 105
  2340                           ; switch strategies available:
  2341                           ; Name         Instructions Cycles
  2342                           ; simple_byte           10     6 (average)
  2343                           ; jumptable            260     6 (fixed)
  2344                           ;	Chosen strategy is simple_byte
  2345  04FD  3A00               	xorlw	0	; case 0
  2346  04FE  1903               	skipnz
  2347  04FF  2E33               	goto	l3141
  2348  0500  3A64               	xorlw	100	; case 100
  2349  0501  1903               	skipnz
  2350  0502  2D07               	goto	l3067
  2351  0503  3A0D               	xorlw	13	; case 105
  2352  0504  1903               	skipnz
  2353  0505  2D07               	goto	l3067
  2354  0506  2C18               	goto	l3139
  2355  0507                     l3067:	
  2356                           
  2357                           ;doprnt.c: 1262: {
  2358                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2359  0507  1683               	bsf	3,5	;RP0=1, select bank1
  2360  0508  1303               	bcf	3,6	;RP1=0, select bank1
  2361  0509  0863               	movf	sprintf@ap^(0+128),w
  2362  050A  0084               	movwf	4
  2363  050B  1383               	bcf	3,7	;select IRP bank0
  2364  050C  0800               	movf	0,w
  2365  050D  00E5               	movwf	sprintf@_val^(0+128)
  2366  050E  0A84               	incf	4,f
  2367  050F  0800               	movf	0,w
  2368  0510  00E6               	movwf	(sprintf@_val+1)^(0+128)
  2369  0511  3002               	movlw	2
  2370  0512  00E0               	movwf	??_sprintf^(0+128)
  2371  0513  0860               	movf	??_sprintf^(0+128),w
  2372  0514  07E3               	addwf	sprintf@ap^(0+128),f
  2373                           
  2374                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  2375  0515  1FE6               	btfss	(sprintf@_val+1)^(0+128),7
  2376  0516  2D20               	goto	l3077
  2377                           
  2378                           ;doprnt.c: 1271: flag |= 0x03;
  2379  0517  3003               	movlw	3
  2380  0518  00E0               	movwf	??_sprintf^(0+128)
  2381  0519  0860               	movf	??_sprintf^(0+128),w
  2382  051A  04E9               	iorwf	sprintf@flag^(0+128),f
  2383                           
  2384                           ;doprnt.c: 1272: _val._val = -_val._val;
  2385  051B  09E5               	comf	sprintf@_val^(0+128),f
  2386  051C  09E6               	comf	(sprintf@_val+1)^(0+128),f
  2387  051D  0AE5               	incf	sprintf@_val^(0+128),f
  2388  051E  1903               	skipnz
  2389  051F  0AE6               	incf	(sprintf@_val+1)^(0+128),f
  2390  0520                     l3077:	
  2391                           
  2392                           ;doprnt.c: 1273: }
  2393                           ;doprnt.c: 1275: }
  2394                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2395  0520  01ED               	clrf	sprintf@c^(0+128)
  2396  0521  0AED               	incf	sprintf@c^(0+128),f
  2397  0522  086D               	movf	sprintf@c^(0+128),w
  2398  0523  3A05               	xorlw	5
  2399  0524  1903               	btfsc	3,2
  2400  0525  2D53               	goto	l3089
  2401  0526                     l3081:	
  2402                           
  2403                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2404  0526  086D               	movf	sprintf@c^(0+128),w
  2405  0527  00E0               	movwf	??_sprintf^(0+128)
  2406  0528  0760               	addwf	??_sprintf^(0+128),w
  2407  0529  3E12               	addlw	low (_dpowers| (0+32768))
  2408  052A  0084               	movwf	4
  2409  052B  3090               	movlw	high (_dpowers| (0+32768))
  2410  052C  1803               	skipnc
  2411  052D  3E01               	addlw	1
  2412  052E  1283               	bcf	3,5	;RP0=0, select bank0
  2413  052F  1303               	bcf	3,6	;RP1=0, select bank0
  2414  0530  00FF               	movwf	127
  2415  0531  160A  118A  2000  120A  118A  	fcall	stringtab
  2416  0536  1683               	bsf	3,5	;RP0=1, select bank1
  2417  0537  1303               	bcf	3,6	;RP1=0, select bank1
  2418  0538  00E1               	movwf	(??_sprintf+1)^(0+128)
  2419  0539  1283               	bcf	3,5	;RP0=0, select bank0
  2420  053A  1303               	bcf	3,6	;RP1=0, select bank0
  2421  053B  160A  118A  2000  120A  118A  	fcall	stringtab
  2422  0540  1683               	bsf	3,5	;RP0=1, select bank1
  2423  0541  1303               	bcf	3,6	;RP1=0, select bank1
  2424  0542  00E2               	movwf	((??_sprintf+1)^(0+128)+1)
  2425  0543  0862               	movf	(??_sprintf+2)^(0+128),w
  2426  0544  0266               	subwf	(sprintf@_val+1)^(0+128),w
  2427  0545  1D03               	skipz
  2428  0546  2D49               	goto	u3255
  2429  0547  0861               	movf	(??_sprintf+1)^(0+128),w
  2430  0548  0265               	subwf	sprintf@_val^(0+128),w
  2431  0549                     u3255:	
  2432  0549  1C03               	btfss	3,0
  2433  054A  2D53               	goto	l3089
  2434                           
  2435                           ;doprnt.c: 1316: break;
  2436  054B  3001               	movlw	1
  2437  054C  00E0               	movwf	??_sprintf^(0+128)
  2438  054D  0860               	movf	??_sprintf^(0+128),w
  2439  054E  07ED               	addwf	sprintf@c^(0+128),f
  2440  054F  086D               	movf	sprintf@c^(0+128),w
  2441  0550  3A05               	xorlw	5
  2442  0551  1D03               	skipz
  2443  0552  2D26               	goto	l3081
  2444  0553                     l3089:	
  2445                           
  2446                           ;doprnt.c: 1354: if(width && flag & 0x03)
  2447  0553  086B               	movf	(sprintf@width+1)^(0+128),w
  2448  0554  046A               	iorwf	sprintf@width^(0+128),w
  2449  0555  1903               	skipnz
  2450  0556  2D61               	goto	l506
  2451  0557  0869               	movf	sprintf@flag^(0+128),w
  2452  0558  3903               	andlw	3
  2453  0559  1903               	btfsc	3,2
  2454  055A  2D61               	goto	l506
  2455                           
  2456                           ;doprnt.c: 1355: width--;
  2457  055B  30FF               	movlw	255
  2458  055C  07EA               	addwf	sprintf@width^(0+128),f
  2459  055D  1803               	skipnc
  2460  055E  0AEB               	incf	(sprintf@width+1)^(0+128),f
  2461  055F  30FF               	movlw	255
  2462  0560  07EB               	addwf	(sprintf@width+1)^(0+128),f
  2463  0561                     l506:	
  2464                           
  2465                           ;doprnt.c: 1390: if(width > c)
  2466  0561  086D               	movf	sprintf@c^(0+128),w
  2467  0562  00E0               	movwf	??_sprintf^(0+128)
  2468  0563  01E1               	clrf	(??_sprintf^(0+128)+1)
  2469  0564  1BE0               	btfsc	??_sprintf^(0+128),7
  2470  0565  03E1               	decf	(??_sprintf^(0+128)+1),f
  2471  0566  0861               	movf	(??_sprintf+1)^(0+128),w
  2472  0567  3A80               	xorlw	128
  2473  0568  00E2               	movwf	(??_sprintf+2)^(0+128)
  2474  0569  086B               	movf	(sprintf@width+1)^(0+128),w
  2475  056A  3A80               	xorlw	128
  2476  056B  0262               	subwf	(??_sprintf+2)^(0+128),w
  2477  056C  1D03               	skipz
  2478  056D  2D70               	goto	u3295
  2479  056E  086A               	movf	sprintf@width^(0+128),w
  2480  056F  0260               	subwf	??_sprintf^(0+128),w
  2481  0570                     u3295:	
  2482  0570  1803               	skipnc
  2483  0571  2D80               	goto	l3097
  2484                           
  2485                           ;doprnt.c: 1391: width -= c;
  2486  0572  1683               	bsf	3,5	;RP0=1, select bank1
  2487  0573  1303               	bcf	3,6	;RP1=0, select bank1
  2488  0574  086D               	movf	sprintf@c^(0+128),w
  2489  0575  00E0               	movwf	??_sprintf^(0+128)
  2490  0576  01E1               	clrf	(??_sprintf^(0+128)+1)
  2491  0577  1BE0               	btfsc	??_sprintf^(0+128),7
  2492  0578  03E1               	decf	(??_sprintf^(0+128)+1),f
  2493  0579  0860               	movf	??_sprintf^(0+128),w
  2494  057A  02EA               	subwf	sprintf@width^(0+128),f
  2495  057B  0861               	movf	(??_sprintf+1)^(0+128),w
  2496  057C  1C03               	skipc
  2497  057D  03EB               	decf	(sprintf@width+1)^(0+128),f
  2498  057E  02EB               	subwf	(sprintf@width+1)^(0+128),f
  2499  057F  2D84               	goto	l3099
  2500  0580                     l3097:	
  2501                           
  2502                           ;doprnt.c: 1392: else
  2503                           ;doprnt.c: 1393: width = 0;
  2504  0580  1683               	bsf	3,5	;RP0=1, select bank1
  2505  0581  1303               	bcf	3,6	;RP1=0, select bank1
  2506  0582  01EA               	clrf	sprintf@width^(0+128)
  2507  0583  01EB               	clrf	(sprintf@width+1)^(0+128)
  2508  0584                     l3099:	
  2509                           
  2510                           ;doprnt.c: 1396: if(flag & 0x04) {
  2511  0584  1D69               	btfss	sprintf@flag^(0+128),2
  2512  0585  2DAB               	goto	l3115
  2513                           
  2514                           ;doprnt.c: 1401: if(flag & 0x03)
  2515  0586  0869               	movf	sprintf@flag^(0+128),w
  2516  0587  3903               	andlw	3
  2517  0588  1903               	btfsc	3,2
  2518  0589  2D95               	goto	l3107
  2519                           
  2520                           ;doprnt.c: 1402: ((*sp++ = ('-')));
  2521  058A  302D               	movlw	45
  2522  058B  00E0               	movwf	??_sprintf^(0+128)
  2523  058C  086C               	movf	sprintf@sp^(0+128),w
  2524  058D  0084               	movwf	4
  2525  058E  0860               	movf	??_sprintf^(0+128),w
  2526  058F  1383               	bcf	3,7	;select IRP bank0
  2527  0590  0080               	movwf	0
  2528  0591  3001               	movlw	1
  2529  0592  00E0               	movwf	??_sprintf^(0+128)
  2530  0593  0860               	movf	??_sprintf^(0+128),w
  2531  0594  07EC               	addwf	sprintf@sp^(0+128),f
  2532  0595                     l3107:	
  2533                           
  2534                           ;doprnt.c: 1424: if(width)
  2535  0595  086B               	movf	(sprintf@width+1)^(0+128),w
  2536  0596  046A               	iorwf	sprintf@width^(0+128),w
  2537  0597  1903               	skipnz
  2538  0598  2DD3               	goto	l3129
  2539                           
  2540                           ;doprnt.c: 1426: ((*sp++ = ('0')));
  2541                           
  2542                           ;doprnt.c: 1425: do
  2543  0599  3030               	movlw	48
  2544  059A  00E0               	movwf	??_sprintf^(0+128)
  2545  059B  086C               	movf	sprintf@sp^(0+128),w
  2546  059C  0084               	movwf	4
  2547  059D  0860               	movf	??_sprintf^(0+128),w
  2548  059E  1383               	bcf	3,7	;select IRP bank0
  2549  059F  0080               	movwf	0
  2550  05A0  3001               	movlw	1
  2551  05A1  00E0               	movwf	??_sprintf^(0+128)
  2552  05A2  0860               	movf	??_sprintf^(0+128),w
  2553  05A3  07EC               	addwf	sprintf@sp^(0+128),f
  2554                           
  2555                           ;doprnt.c: 1427: while(--width);
  2556  05A4  30FF               	movlw	255
  2557  05A5  07EA               	addwf	sprintf@width^(0+128),f
  2558  05A6  1803               	skipnc
  2559  05A7  0AEB               	incf	(sprintf@width+1)^(0+128),f
  2560  05A8  30FF               	movlw	255
  2561  05A9  07EB               	addwf	(sprintf@width+1)^(0+128),f
  2562  05AA  2D95               	goto	l3107
  2563  05AB                     l3115:	
  2564                           ;doprnt.c: 1429: } else
  2565                           
  2566                           
  2567                           ;doprnt.c: 1431: {
  2568                           ;doprnt.c: 1433: if(width
  2569                           ;doprnt.c: 1437: )
  2570  05AB  086B               	movf	(sprintf@width+1)^(0+128),w
  2571  05AC  046A               	iorwf	sprintf@width^(0+128),w
  2572  05AD  1903               	skipnz
  2573  05AE  2DC4               	goto	l3123
  2574  05AF                     l3117:	
  2575                           ;doprnt.c: 1438: do
  2576                           
  2577                           
  2578                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  2579  05AF  3020               	movlw	32
  2580  05B0  00E0               	movwf	??_sprintf^(0+128)
  2581  05B1  086C               	movf	sprintf@sp^(0+128),w
  2582  05B2  0084               	movwf	4
  2583  05B3  0860               	movf	??_sprintf^(0+128),w
  2584  05B4  1383               	bcf	3,7	;select IRP bank0
  2585  05B5  0080               	movwf	0
  2586  05B6  3001               	movlw	1
  2587  05B7  00E0               	movwf	??_sprintf^(0+128)
  2588  05B8  0860               	movf	??_sprintf^(0+128),w
  2589  05B9  07EC               	addwf	sprintf@sp^(0+128),f
  2590                           
  2591                           ;doprnt.c: 1440: while(--width);
  2592  05BA  30FF               	movlw	255
  2593  05BB  07EA               	addwf	sprintf@width^(0+128),f
  2594  05BC  1803               	skipnc
  2595  05BD  0AEB               	incf	(sprintf@width+1)^(0+128),f
  2596  05BE  30FF               	movlw	255
  2597  05BF  07EB               	addwf	(sprintf@width+1)^(0+128),f
  2598  05C0  086B               	movf	(sprintf@width+1)^(0+128),w
  2599  05C1  046A               	iorwf	sprintf@width^(0+128),w
  2600  05C2  1D03               	skipz
  2601  05C3  2DAF               	goto	l3117
  2602  05C4                     l3123:	
  2603                           
  2604                           ;doprnt.c: 1447: if(flag & 0x03)
  2605  05C4  0869               	movf	sprintf@flag^(0+128),w
  2606  05C5  3903               	andlw	3
  2607  05C6  1903               	btfsc	3,2
  2608  05C7  2DD3               	goto	l3129
  2609                           
  2610                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2611  05C8  302D               	movlw	45
  2612  05C9  00E0               	movwf	??_sprintf^(0+128)
  2613  05CA  086C               	movf	sprintf@sp^(0+128),w
  2614  05CB  0084               	movwf	4
  2615  05CC  0860               	movf	??_sprintf^(0+128),w
  2616  05CD  1383               	bcf	3,7	;select IRP bank0
  2617  05CE  0080               	movwf	0
  2618  05CF  3001               	movlw	1
  2619  05D0  00E0               	movwf	??_sprintf^(0+128)
  2620  05D1  0860               	movf	??_sprintf^(0+128),w
  2621  05D2  07EC               	addwf	sprintf@sp^(0+128),f
  2622  05D3                     l3129:	
  2623                           
  2624                           ;doprnt.c: 1478: }
  2625                           ;doprnt.c: 1481: prec = c;
  2626  05D3  086D               	movf	sprintf@c^(0+128),w
  2627  05D4  00E0               	movwf	??_sprintf^(0+128)
  2628  05D5  0860               	movf	??_sprintf^(0+128),w
  2629  05D6  00E4               	movwf	sprintf@prec^(0+128)
  2630  05D7                     l3137:	
  2631                           ;doprnt.c: 1483: while(prec--) {
  2632                           
  2633  05D7  30FF               	movlw	-1
  2634  05D8  00E0               	movwf	??_sprintf^(0+128)
  2635  05D9  0860               	movf	??_sprintf^(0+128),w
  2636  05DA  07E4               	addwf	sprintf@prec^(0+128),f
  2637  05DB  0864               	movf	sprintf@prec^(0+128),w
  2638  05DC  3AFF               	xorlw	-1
  2639  05DD  1903               	btfsc	3,2
  2640  05DE  2C18               	goto	l3139
  2641                           
  2642                           ;doprnt.c: 1487: {
  2643                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2644  05DF  300A               	movlw	10
  2645  05E0  00D8               	movwf	___lwmod@divisor^(0+128)
  2646  05E1  3000               	movlw	0
  2647  05E2  00D9               	movwf	(___lwmod@divisor^(0+128)+1)
  2648  05E3  0864               	movf	sprintf@prec^(0+128),w
  2649  05E4  00E0               	movwf	??_sprintf^(0+128)
  2650  05E5  0760               	addwf	??_sprintf^(0+128),w
  2651  05E6  3E12               	addlw	low (_dpowers| (0+32768))
  2652  05E7  0084               	movwf	4
  2653  05E8  3090               	movlw	high (_dpowers| (0+32768))
  2654  05E9  1803               	skipnc
  2655  05EA  3E01               	addlw	1
  2656  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  2657  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  2658  05ED  00FF               	movwf	127
  2659  05EE  160A  118A  2000  120A  118A  	fcall	stringtab
  2660  05F3  00B7               	movwf	___lwdiv@divisor
  2661  05F4  160A  118A  2000  120A  118A  	fcall	stringtab
  2662  05F9  00B8               	movwf	___lwdiv@divisor+1
  2663  05FA  1683               	bsf	3,5	;RP0=1, select bank1
  2664  05FB  1303               	bcf	3,6	;RP1=0, select bank1
  2665  05FC  0866               	movf	(sprintf@_val+1)^(0+128),w
  2666  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  2667  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  2668  05FF  01BA               	clrf	___lwdiv@dividend+1
  2669  0600  07BA               	addwf	___lwdiv@dividend+1,f
  2670  0601  1683               	bsf	3,5	;RP0=1, select bank1
  2671  0602  1303               	bcf	3,6	;RP1=0, select bank1
  2672  0603  0865               	movf	sprintf@_val^(0+128),w
  2673  0604  1283               	bcf	3,5	;RP0=0, select bank0
  2674  0605  1303               	bcf	3,6	;RP1=0, select bank0
  2675  0606  01B9               	clrf	___lwdiv@dividend
  2676  0607  07B9               	addwf	___lwdiv@dividend,f
  2677  0608  120A  158A  2304  120A  118A  	fcall	___lwdiv
  2678  060D  1283               	bcf	3,5	;RP0=0, select bank0
  2679  060E  1303               	bcf	3,6	;RP1=0, select bank0
  2680  060F  0838               	movf	?___lwdiv+1,w
  2681  0610  1683               	bsf	3,5	;RP0=1, select bank1
  2682  0611  1303               	bcf	3,6	;RP1=0, select bank1
  2683  0612  01DB               	clrf	(___lwmod@dividend+1)^(0+128)
  2684  0613  07DB               	addwf	(___lwmod@dividend+1)^(0+128),f
  2685  0614  1283               	bcf	3,5	;RP0=0, select bank0
  2686  0615  1303               	bcf	3,6	;RP1=0, select bank0
  2687  0616  0837               	movf	?___lwdiv,w
  2688  0617  1683               	bsf	3,5	;RP0=1, select bank1
  2689  0618  1303               	bcf	3,6	;RP1=0, select bank1
  2690  0619  01DA               	clrf	___lwmod@dividend^(0+128)
  2691  061A  07DA               	addwf	___lwmod@dividend^(0+128),f
  2692  061B  120A  118A  27B1  120A  118A  	fcall	___lwmod
  2693  0620  1683               	bsf	3,5	;RP0=1, select bank1
  2694  0621  1303               	bcf	3,6	;RP1=0, select bank1
  2695  0622  0858               	movf	?___lwmod^(0+128),w
  2696  0623  3E30               	addlw	48
  2697  0624  00E1               	movwf	(??_sprintf+1)^(0+128)
  2698  0625  0861               	movf	(??_sprintf+1)^(0+128),w
  2699  0626  00ED               	movwf	sprintf@c^(0+128)
  2700                           
  2701                           ;doprnt.c: 1532: }
  2702                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2703  0627  086D               	movf	sprintf@c^(0+128),w
  2704  0628  00E0               	movwf	??_sprintf^(0+128)
  2705  0629  086C               	movf	sprintf@sp^(0+128),w
  2706  062A  0084               	movwf	4
  2707  062B  0860               	movf	??_sprintf^(0+128),w
  2708  062C  1383               	bcf	3,7	;select IRP bank0
  2709  062D  0080               	movwf	0
  2710  062E  3001               	movlw	1
  2711  062F  00E0               	movwf	??_sprintf^(0+128)
  2712  0630  0860               	movf	??_sprintf^(0+128),w
  2713  0631  07EC               	addwf	sprintf@sp^(0+128),f
  2714  0632  2DD7               	goto	l3137
  2715  0633                     l3141:	
  2716                           ;doprnt.c: 1534: }
  2717                           ;doprnt.c: 1542: }
  2718                           ;doprnt.c: 1544: alldone:
  2719                           
  2720                           
  2721                           ;doprnt.c: 1547: *sp = 0;
  2722  0633  1683               	bsf	3,5	;RP0=1, select bank1
  2723  0634  1303               	bcf	3,6	;RP1=0, select bank1
  2724  0635  086C               	movf	sprintf@sp^(0+128),w
  2725  0636  0084               	movwf	4
  2726  0637  1383               	bcf	3,7	;select IRP bank0
  2727  0638  0180               	clrf	0
  2728  0639  0008               	return
  2729  063A                     __end_of_sprintf:	
  2730                           ;doprnt.c: 1549: return 0;
  2731                           ;	Return value of _sprintf is never used
  2732                           
  2733                           
  2734                           	psect	text2
  2735  090C                     __ptext2:	
  2736 ;; *************** function _isdigit *****************
  2737 ;; Defined at:
  2738 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;  c               1    wreg     unsigned char 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;  c               1   24[BANK0 ] unsigned char 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;		None               void
  2745 ;; Registers used:
  2746 ;;		wreg, status,2, status,0
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2752 ;;      Params:         0       0       0       0       0
  2753 ;;      Locals:         0       2       0       0       0
  2754 ;;      Temps:          0       0       0       0       0
  2755 ;;      Totals:         0       2       0       0       0
  2756 ;;Total ram usage:        2 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    4
  2759 ;; This function calls:
  2760 ;;		Nothing
  2761 ;; This function is called by:
  2762 ;;		_sprintf
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           
  2767                           ;psect for function _isdigit
  2768  090C                     _isdigit:	
  2769                           
  2770                           ;incstack = 0
  2771                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2772                           ;isdigit@c stored from wreg
  2773  090C  1283               	bcf	3,5	;RP0=0, select bank0
  2774  090D  1303               	bcf	3,6	;RP1=0, select bank0
  2775  090E  00B8               	movwf	isdigit@c
  2776  090F  01B7               	clrf	_isdigit$1450
  2777  0910  303A               	movlw	58
  2778  0911  0238               	subwf	isdigit@c,w
  2779  0912  1803               	skipnc
  2780  0913  291A               	goto	l2893
  2781  0914  3030               	movlw	48
  2782  0915  0238               	subwf	isdigit@c,w
  2783  0916  1C03               	skipc
  2784  0917  291A               	goto	l2893
  2785  0918  01B7               	clrf	_isdigit$1450
  2786  0919  0AB7               	incf	_isdigit$1450,f
  2787  091A                     l2893:	
  2788  091A  0C37               	rrf	_isdigit$1450,w
  2789  091B  0008               	return
  2790  091C                     __end_of_isdigit:	
  2791                           
  2792                           	psect	text3
  2793  0A78                     __ptext3:	
  2794 ;; *************** function ___wmul *****************
  2795 ;; Defined at:
  2796 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;  multiplier      2   23[BANK0 ] unsigned int 
  2799 ;;  multiplicand    2   25[BANK0 ] unsigned int 
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;  product         2   27[BANK0 ] unsigned int 
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  2   23[BANK0 ] unsigned int 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, status,0
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2811 ;;      Params:         0       4       0       0       0
  2812 ;;      Locals:         0       2       0       0       0
  2813 ;;      Temps:          0       0       0       0       0
  2814 ;;      Totals:         0       6       0       0       0
  2815 ;;Total ram usage:        6 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    4
  2818 ;; This function calls:
  2819 ;;		Nothing
  2820 ;; This function is called by:
  2821 ;;		_sprintf
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           
  2826                           ;psect for function ___wmul
  2827  0A78                     ___wmul:	
  2828                           
  2829                           ;incstack = 0
  2830                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2831  0A78  1283               	bcf	3,5	;RP0=0, select bank0
  2832  0A79  1303               	bcf	3,6	;RP1=0, select bank0
  2833  0A7A  01BB               	clrf	___wmul@product
  2834  0A7B  01BC               	clrf	___wmul@product+1
  2835  0A7C                     l2899:	
  2836  0A7C  1C37               	btfss	___wmul@multiplier,0
  2837  0A7D  2A84               	goto	l607
  2838  0A7E  0839               	movf	___wmul@multiplicand,w
  2839  0A7F  07BB               	addwf	___wmul@product,f
  2840  0A80  1803               	skipnc
  2841  0A81  0ABC               	incf	___wmul@product+1,f
  2842  0A82  083A               	movf	___wmul@multiplicand+1,w
  2843  0A83  07BC               	addwf	___wmul@product+1,f
  2844  0A84                     l607:	
  2845  0A84  3001               	movlw	1
  2846  0A85                     u2935:	
  2847  0A85  1003               	clrc
  2848  0A86  0DB9               	rlf	___wmul@multiplicand,f
  2849  0A87  0DBA               	rlf	___wmul@multiplicand+1,f
  2850  0A88  3EFF               	addlw	-1
  2851  0A89  1D03               	skipz
  2852  0A8A  2A85               	goto	u2935
  2853  0A8B  3001               	movlw	1
  2854  0A8C                     u2945:	
  2855  0A8C  1003               	clrc
  2856  0A8D  0CB8               	rrf	___wmul@multiplier+1,f
  2857  0A8E  0CB7               	rrf	___wmul@multiplier,f
  2858  0A8F  3EFF               	addlw	-1
  2859  0A90  1D03               	skipz
  2860  0A91  2A8C               	goto	u2945
  2861  0A92  0838               	movf	___wmul@multiplier+1,w
  2862  0A93  0437               	iorwf	___wmul@multiplier,w
  2863  0A94  1D03               	skipz
  2864  0A95  2A7C               	goto	l2899
  2865  0A96  083C               	movf	___wmul@product+1,w
  2866  0A97  01B8               	clrf	?___wmul+1
  2867  0A98  07B8               	addwf	?___wmul+1,f
  2868  0A99  083B               	movf	___wmul@product,w
  2869  0A9A  01B7               	clrf	?___wmul
  2870  0A9B  07B7               	addwf	?___wmul,f
  2871  0A9C  0008               	return
  2872  0A9D                     __end_of___wmul:	
  2873                           
  2874                           	psect	text4
  2875  07B1                     __ptext4:	
  2876 ;; *************** function ___lwmod *****************
  2877 ;; Defined at:
  2878 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;  divisor         2    0[BANK1 ] unsigned int 
  2881 ;;  dividend        2    2[BANK1 ] unsigned int 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  counter         1   32[BANK0 ] unsigned char 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  2    0[BANK1 ] unsigned int 
  2886 ;; Registers used:
  2887 ;;		wreg, status,2, status,0
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2893 ;;      Params:         0       0       4       0       0
  2894 ;;      Locals:         0       1       0       0       0
  2895 ;;      Temps:          0       1       0       0       0
  2896 ;;      Totals:         0       2       4       0       0
  2897 ;;Total ram usage:        6 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:    4
  2900 ;; This function calls:
  2901 ;;		Nothing
  2902 ;; This function is called by:
  2903 ;;		_sprintf
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           
  2908                           ;psect for function ___lwmod
  2909  07B1                     ___lwmod:	
  2910                           
  2911                           ;incstack = 0
  2912                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2913  07B1  1683               	bsf	3,5	;RP0=1, select bank1
  2914  07B2  1303               	bcf	3,6	;RP1=0, select bank1
  2915  07B3  0859               	movf	(___lwmod@divisor+1)^(0+128),w
  2916  07B4  0458               	iorwf	___lwmod@divisor^(0+128),w
  2917  07B5  1903               	skipnz
  2918  07B6  2FEC               	goto	l2993
  2919  07B7  1283               	bcf	3,5	;RP0=0, select bank0
  2920  07B8  1303               	bcf	3,6	;RP1=0, select bank0
  2921  07B9  01C0               	clrf	___lwmod@counter
  2922  07BA  0AC0               	incf	___lwmod@counter,f
  2923  07BB                     l2983:	
  2924  07BB  1683               	bsf	3,5	;RP0=1, select bank1
  2925  07BC  1303               	bcf	3,6	;RP1=0, select bank1
  2926  07BD  1BD9               	btfsc	(___lwmod@divisor+1)^(0+128),7
  2927  07BE  2FCF               	goto	l2985
  2928  07BF  3001               	movlw	1
  2929  07C0  1683               	bsf	3,5	;RP0=1, select bank1
  2930  07C1  1303               	bcf	3,6	;RP1=0, select bank1
  2931  07C2                     u3145:	
  2932  07C2  1003               	clrc
  2933  07C3  0DD8               	rlf	___lwmod@divisor^(0+128),f
  2934  07C4  0DD9               	rlf	(___lwmod@divisor+1)^(0+128),f
  2935  07C5  3EFF               	addlw	-1
  2936  07C6  1D03               	skipz
  2937  07C7  2FC2               	goto	u3145
  2938  07C8  3001               	movlw	1
  2939  07C9  1283               	bcf	3,5	;RP0=0, select bank0
  2940  07CA  1303               	bcf	3,6	;RP1=0, select bank0
  2941  07CB  00BF               	movwf	??___lwmod
  2942  07CC  083F               	movf	??___lwmod,w
  2943  07CD  07C0               	addwf	___lwmod@counter,f
  2944  07CE  2FBB               	goto	l2983
  2945  07CF                     l2985:	
  2946  07CF  1683               	bsf	3,5	;RP0=1, select bank1
  2947  07D0  1303               	bcf	3,6	;RP1=0, select bank1
  2948  07D1  0859               	movf	(___lwmod@divisor+1)^(0+128),w
  2949  07D2  025B               	subwf	(___lwmod@dividend+1)^(0+128),w
  2950  07D3  1D03               	skipz
  2951  07D4  2FD7               	goto	u3165
  2952  07D5  0858               	movf	___lwmod@divisor^(0+128),w
  2953  07D6  025A               	subwf	___lwmod@dividend^(0+128),w
  2954  07D7                     u3165:	
  2955  07D7  1C03               	skipc
  2956  07D8  2FDF               	goto	l2989
  2957  07D9  0858               	movf	___lwmod@divisor^(0+128),w
  2958  07DA  02DA               	subwf	___lwmod@dividend^(0+128),f
  2959  07DB  0859               	movf	(___lwmod@divisor+1)^(0+128),w
  2960  07DC  1C03               	skipc
  2961  07DD  03DB               	decf	(___lwmod@dividend+1)^(0+128),f
  2962  07DE  02DB               	subwf	(___lwmod@dividend+1)^(0+128),f
  2963  07DF                     l2989:	
  2964  07DF  3001               	movlw	1
  2965  07E0                     u3175:	
  2966  07E0  1003               	clrc
  2967  07E1  0CD9               	rrf	(___lwmod@divisor+1)^(0+128),f
  2968  07E2  0CD8               	rrf	___lwmod@divisor^(0+128),f
  2969  07E3  3EFF               	addlw	-1
  2970  07E4  1D03               	skipz
  2971  07E5  2FE0               	goto	u3175
  2972  07E6  3001               	movlw	1
  2973  07E7  1283               	bcf	3,5	;RP0=0, select bank0
  2974  07E8  1303               	bcf	3,6	;RP1=0, select bank0
  2975  07E9  02C0               	subwf	___lwmod@counter,f
  2976  07EA  1D03               	btfss	3,2
  2977  07EB  2FCF               	goto	l2985
  2978  07EC                     l2993:	
  2979  07EC  1683               	bsf	3,5	;RP0=1, select bank1
  2980  07ED  1303               	bcf	3,6	;RP1=0, select bank1
  2981  07EE  085B               	movf	(___lwmod@dividend+1)^(0+128),w
  2982  07EF  01D9               	clrf	(?___lwmod+1)^(0+128)
  2983  07F0  07D9               	addwf	(?___lwmod+1)^(0+128),f
  2984  07F1  085A               	movf	___lwmod@dividend^(0+128),w
  2985  07F2  01D8               	clrf	?___lwmod^(0+128)
  2986  07F3  07D8               	addwf	?___lwmod^(0+128),f
  2987  07F4  0008               	return
  2988  07F5                     __end_of___lwmod:	
  2989                           
  2990                           	psect	text5
  2991  0B04                     __ptext5:	
  2992 ;; *************** function ___lwdiv *****************
  2993 ;; Defined at:
  2994 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;  divisor         2   23[BANK0 ] unsigned int 
  2997 ;;  dividend        2   25[BANK0 ] unsigned int 
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;  quotient        2   29[BANK0 ] unsigned int 
  3000 ;;  counter         1   28[BANK0 ] unsigned char 
  3001 ;; Return value:  Size  Location     Type
  3002 ;;                  2   23[BANK0 ] unsigned int 
  3003 ;; Registers used:
  3004 ;;		wreg, status,2, status,0
  3005 ;; Tracked objects:
  3006 ;;		On entry : 0/0
  3007 ;;		On exit  : 0/0
  3008 ;;		Unchanged: 0/0
  3009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3010 ;;      Params:         0       4       0       0       0
  3011 ;;      Locals:         0       3       0       0       0
  3012 ;;      Temps:          0       1       0       0       0
  3013 ;;      Totals:         0       8       0       0       0
  3014 ;;Total ram usage:        8 bytes
  3015 ;; Hardware stack levels used:    1
  3016 ;; Hardware stack levels required when called:    4
  3017 ;; This function calls:
  3018 ;;		Nothing
  3019 ;; This function is called by:
  3020 ;;		_sprintf
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           
  3025                           ;psect for function ___lwdiv
  3026  0B04                     ___lwdiv:	
  3027                           
  3028                           ;incstack = 0
  3029                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3030  0B04  1283               	bcf	3,5	;RP0=0, select bank0
  3031  0B05  1303               	bcf	3,6	;RP1=0, select bank0
  3032  0B06  01BD               	clrf	___lwdiv@quotient
  3033  0B07  01BE               	clrf	___lwdiv@quotient+1
  3034  0B08  0838               	movf	___lwdiv@divisor+1,w
  3035  0B09  0437               	iorwf	___lwdiv@divisor,w
  3036  0B0A  1903               	skipnz
  3037  0B0B  2B3D               	goto	l2971
  3038  0B0C  01BC               	clrf	___lwdiv@counter
  3039  0B0D  0ABC               	incf	___lwdiv@counter,f
  3040  0B0E                     l2959:	
  3041  0B0E  1BB8               	btfsc	___lwdiv@divisor+1,7
  3042  0B0F  2B1C               	goto	l2961
  3043  0B10  3001               	movlw	1
  3044  0B11                     u3075:	
  3045  0B11  1003               	clrc
  3046  0B12  0DB7               	rlf	___lwdiv@divisor,f
  3047  0B13  0DB8               	rlf	___lwdiv@divisor+1,f
  3048  0B14  3EFF               	addlw	-1
  3049  0B15  1D03               	skipz
  3050  0B16  2B11               	goto	u3075
  3051  0B17  3001               	movlw	1
  3052  0B18  00BB               	movwf	??___lwdiv
  3053  0B19  083B               	movf	??___lwdiv,w
  3054  0B1A  07BC               	addwf	___lwdiv@counter,f
  3055  0B1B  2B0E               	goto	l2959
  3056  0B1C                     l2961:	
  3057  0B1C  3001               	movlw	1
  3058  0B1D                     u3095:	
  3059  0B1D  1003               	clrc
  3060  0B1E  0DBD               	rlf	___lwdiv@quotient,f
  3061  0B1F  0DBE               	rlf	___lwdiv@quotient+1,f
  3062  0B20  3EFF               	addlw	-1
  3063  0B21  1D03               	skipz
  3064  0B22  2B1D               	goto	u3095
  3065  0B23  0838               	movf	___lwdiv@divisor+1,w
  3066  0B24  023A               	subwf	___lwdiv@dividend+1,w
  3067  0B25  1D03               	skipz
  3068  0B26  2B29               	goto	u3105
  3069  0B27  0837               	movf	___lwdiv@divisor,w
  3070  0B28  0239               	subwf	___lwdiv@dividend,w
  3071  0B29                     u3105:	
  3072  0B29  1C03               	skipc
  3073  0B2A  2B32               	goto	l2967
  3074  0B2B  0837               	movf	___lwdiv@divisor,w
  3075  0B2C  02B9               	subwf	___lwdiv@dividend,f
  3076  0B2D  0838               	movf	___lwdiv@divisor+1,w
  3077  0B2E  1C03               	skipc
  3078  0B2F  03BA               	decf	___lwdiv@dividend+1,f
  3079  0B30  02BA               	subwf	___lwdiv@dividend+1,f
  3080  0B31  143D               	bsf	___lwdiv@quotient,0
  3081  0B32                     l2967:	
  3082  0B32  3001               	movlw	1
  3083  0B33                     u3115:	
  3084  0B33  1003               	clrc
  3085  0B34  0CB8               	rrf	___lwdiv@divisor+1,f
  3086  0B35  0CB7               	rrf	___lwdiv@divisor,f
  3087  0B36  3EFF               	addlw	-1
  3088  0B37  1D03               	skipz
  3089  0B38  2B33               	goto	u3115
  3090  0B39  3001               	movlw	1
  3091  0B3A  02BC               	subwf	___lwdiv@counter,f
  3092  0B3B  1D03               	btfss	3,2
  3093  0B3C  2B1C               	goto	l2961
  3094  0B3D                     l2971:	
  3095  0B3D  083E               	movf	___lwdiv@quotient+1,w
  3096  0B3E  01B8               	clrf	?___lwdiv+1
  3097  0B3F  07B8               	addwf	?___lwdiv+1,f
  3098  0B40  083D               	movf	___lwdiv@quotient,w
  3099  0B41  01B7               	clrf	?___lwdiv
  3100  0B42  07B7               	addwf	?___lwdiv,f
  3101  0B43  0008               	return
  3102  0B44                     __end_of___lwdiv:	
  3103                           
  3104                           	psect	text6
  3105  0A53                     __ptext6:	
  3106 ;; *************** function _USART_WriteString *****************
  3107 ;; Defined at:
  3108 ;;		line 52 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;  str             2   24[BANK0 ] PTR const unsigned char 
  3111 ;;		 -> STR_19(40), STR_16(3), display_rpm(10), STR_12(20), 
  3112 ;;		 -> STR_11(29), STR_10(15), STR_9(15), STR_8(14), 
  3113 ;;		 -> STR_7(14), STR_6(14), STR_5(14), STR_4(14), 
  3114 ;;		 -> STR_3(13), STR_2(13), STR_1(14), 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;		None
  3117 ;; Return value:  Size  Location     Type
  3118 ;;		None               void
  3119 ;; Registers used:
  3120 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3126 ;;      Params:         0       2       0       0       0
  3127 ;;      Locals:         0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0
  3129 ;;      Totals:         0       2       0       0       0
  3130 ;;Total ram usage:        2 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    5
  3133 ;; This function calls:
  3134 ;;		_USART_WriteChar
  3135 ;; This function is called by:
  3136 ;;		_main
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           
  3141                           ;psect for function _USART_WriteString
  3142  0A53                     _USART_WriteString:	
  3143  0A53                     l2469:	
  3144                           ;usart.c: 54: while(*str != '\0')
  3145                           
  3146                           ;incstack = 0
  3147                           ; Regs used in _USART_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3148                           
  3149  0A53  1283               	bcf	3,5	;RP0=0, select bank0
  3150  0A54  1303               	bcf	3,6	;RP1=0, select bank0
  3151  0A55  0839               	movf	USART_WriteString@str+1,w
  3152  0A56  00FF               	movwf	127
  3153  0A57  0838               	movf	USART_WriteString@str,w
  3154  0A58  0084               	movwf	4
  3155  0A59  160A  118A  2000  120A  158A  	fcall	stringtab
  3156  0A5E  3800               	iorlw	0
  3157  0A5F  1903               	btfsc	3,2
  3158  0A60  0008               	return
  3159                           
  3160                           ;usart.c: 55: {
  3161                           ;usart.c: 56: USART_WriteChar(*str);
  3162  0A61  1283               	bcf	3,5	;RP0=0, select bank0
  3163  0A62  1303               	bcf	3,6	;RP1=0, select bank0
  3164  0A63  0839               	movf	USART_WriteString@str+1,w
  3165  0A64  00FF               	movwf	127
  3166  0A65  0838               	movf	USART_WriteString@str,w
  3167  0A66  0084               	movwf	4
  3168  0A67  160A  118A  2000  120A  158A  	fcall	stringtab
  3169  0A6C  120A  158A  20CF  120A  158A  	fcall	_USART_WriteChar
  3170                           
  3171                           ;usart.c: 57: str++;
  3172  0A71  3001               	movlw	1
  3173  0A72  1283               	bcf	3,5	;RP0=0, select bank0
  3174  0A73  1303               	bcf	3,6	;RP1=0, select bank0
  3175  0A74  07B8               	addwf	USART_WriteString@str,f
  3176  0A75  1803               	skipnc
  3177  0A76  0AB9               	incf	USART_WriteString@str+1,f
  3178  0A77  2A53               	goto	l2469
  3179  0A78                     __end_of_USART_WriteString:	
  3180                           
  3181                           	psect	text7
  3182  08CF                     __ptext7:	
  3183 ;; *************** function _USART_WriteChar *****************
  3184 ;; Defined at:
  3185 ;;		line 44 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  byte            1    wreg     unsigned char 
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;  byte            1   23[BANK0 ] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;		None               void
  3192 ;; Registers used:
  3193 ;;		wreg
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3199 ;;      Params:         0       0       0       0       0
  3200 ;;      Locals:         0       1       0       0       0
  3201 ;;      Temps:          0       0       0       0       0
  3202 ;;      Totals:         0       1       0       0       0
  3203 ;;Total ram usage:        1 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    4
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_USART_WriteString
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           
  3214                           ;psect for function _USART_WriteChar
  3215  08CF                     _USART_WriteChar:	
  3216                           
  3217                           ;incstack = 0
  3218                           ; Regs used in _USART_WriteChar: [wreg]
  3219                           ;USART_WriteChar@byte stored from wreg
  3220  08CF  1283               	bcf	3,5	;RP0=0, select bank0
  3221  08D0  1303               	bcf	3,6	;RP1=0, select bank0
  3222  08D1  00B7               	movwf	USART_WriteChar@byte
  3223  08D2                     l236:	
  3224                           ;usart.c: 46: while(!PIR1bits.TXIF);
  3225                           
  3226  08D2  1E0C               	btfss	12,4	;volatile
  3227  08D3  28D2               	goto	l236
  3228                           
  3229                           ;usart.c: 47: TXREG = byte;
  3230  08D4  0837               	movf	USART_WriteChar@byte,w
  3231  08D5  0099               	movwf	25	;volatile
  3232  08D6  0008               	return
  3233  08D7                     __end_of_USART_WriteChar:	
  3234                           
  3235                           	psect	text8
  3236  0B44                     __ptext8:	
  3237 ;; *************** function _USART_Init *****************
  3238 ;; Defined at:
  3239 ;;		line 6 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  BaudRate        4    6[BANK1 ] long 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;		None
  3244 ;; Return value:  Size  Location     Type
  3245 ;;		None               void
  3246 ;; Registers used:
  3247 ;;		wreg, status,2, status,0, pclath, cstack
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 0/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3253 ;;      Params:         0       0       4       0       0
  3254 ;;      Locals:         0       0       0       0       0
  3255 ;;      Temps:          0       0       4       0       0
  3256 ;;      Totals:         0       0       8       0       0
  3257 ;;Total ram usage:        8 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    5
  3260 ;; This function calls:
  3261 ;;		___aldiv
  3262 ;; This function is called by:
  3263 ;;		_main
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           
  3268                           ;psect for function _USART_Init
  3269  0B44                     _USART_Init:	
  3270                           
  3271                           ;usart.c: 13: SPBRG = (unsigned char)(18432000 / (16 * BaudRate)) - 1;
  3272                           
  3273                           ;incstack = 0
  3274                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
  3275  0B44  1683               	bsf	3,5	;RP0=1, select bank1
  3276  0B45  1303               	bcf	3,6	;RP1=0, select bank1
  3277  0B46  085E               	movf	USART_Init@BaudRate^(0+128),w
  3278  0B47  00E2               	movwf	??_USART_Init^(0+128)
  3279  0B48  085F               	movf	(USART_Init@BaudRate+1)^(0+128),w
  3280  0B49  00E3               	movwf	(??_USART_Init^(0+128)+1)
  3281  0B4A  0860               	movf	(USART_Init@BaudRate+2)^(0+128),w
  3282  0B4B  00E4               	movwf	(??_USART_Init^(0+128)+2)
  3283  0B4C  0861               	movf	(USART_Init@BaudRate+3)^(0+128),w
  3284  0B4D  00E5               	movwf	(??_USART_Init^(0+128)+3)
  3285  0B4E  3004               	movlw	4
  3286  0B4F                     u3195:	
  3287  0B4F  1003               	clrc
  3288  0B50  0DE2               	rlf	??_USART_Init^(0+128),f
  3289  0B51  0DE3               	rlf	(??_USART_Init^(0+128)+1),f
  3290  0B52  0DE4               	rlf	(??_USART_Init^(0+128)+2),f
  3291  0B53  0DE5               	rlf	(??_USART_Init^(0+128)+3),f
  3292  0B54  3EFF               	addlw	-1
  3293  0B55  1D03               	skipz
  3294  0B56  2B4F               	goto	u3195
  3295  0B57  0865               	movf	(??_USART_Init+3)^(0+128),w
  3296  0B58  1283               	bcf	3,5	;RP0=0, select bank0
  3297  0B59  1303               	bcf	3,6	;RP1=0, select bank0
  3298  0B5A  00BA               	movwf	___aldiv@divisor+3
  3299  0B5B  1683               	bsf	3,5	;RP0=1, select bank1
  3300  0B5C  1303               	bcf	3,6	;RP1=0, select bank1
  3301  0B5D  0864               	movf	(??_USART_Init+2)^(0+128),w
  3302  0B5E  1283               	bcf	3,5	;RP0=0, select bank0
  3303  0B5F  1303               	bcf	3,6	;RP1=0, select bank0
  3304  0B60  00B9               	movwf	___aldiv@divisor+2
  3305  0B61  1683               	bsf	3,5	;RP0=1, select bank1
  3306  0B62  1303               	bcf	3,6	;RP1=0, select bank1
  3307  0B63  0863               	movf	(??_USART_Init+1)^(0+128),w
  3308  0B64  1283               	bcf	3,5	;RP0=0, select bank0
  3309  0B65  1303               	bcf	3,6	;RP1=0, select bank0
  3310  0B66  00B8               	movwf	___aldiv@divisor+1
  3311  0B67  1683               	bsf	3,5	;RP0=1, select bank1
  3312  0B68  1303               	bcf	3,6	;RP1=0, select bank1
  3313  0B69  0862               	movf	??_USART_Init^(0+128),w
  3314  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  3315  0B6B  1303               	bcf	3,6	;RP1=0, select bank0
  3316  0B6C  00B7               	movwf	___aldiv@divisor
  3317  0B6D  3001               	movlw	1
  3318  0B6E  00BE               	movwf	___aldiv@dividend+3
  3319  0B6F  3019               	movlw	25
  3320  0B70  00BD               	movwf	___aldiv@dividend+2
  3321  0B71  3040               	movlw	64
  3322  0B72  00BC               	movwf	___aldiv@dividend+1
  3323  0B73  3000               	movlw	0
  3324  0B74  00BB               	movwf	___aldiv@dividend
  3325  0B75  120A  158A  25F0   	fcall	___aldiv
  3326  0B78  1283               	bcf	3,5	;RP0=0, select bank0
  3327  0B79  1303               	bcf	3,6	;RP1=0, select bank0
  3328  0B7A  0837               	movf	?___aldiv,w
  3329  0B7B  3EFF               	addlw	255
  3330  0B7C  1683               	bsf	3,5	;RP0=1, select bank1
  3331  0B7D  1303               	bcf	3,6	;RP1=0, select bank1
  3332  0B7E  0099               	movwf	25	;volatile
  3333                           
  3334                           ;usart.c: 16: TXSTAbits.CSRC = 0;
  3335  0B7F  1398               	bcf	24,7	;volatile
  3336                           
  3337                           ;usart.c: 17: TXSTAbits.TX9 = 0;
  3338  0B80  1318               	bcf	24,6	;volatile
  3339                           
  3340                           ;usart.c: 18: TXSTAbits.TXEN = 1;
  3341  0B81  1698               	bsf	24,5	;volatile
  3342                           
  3343                           ;usart.c: 19: TXSTAbits.SYNC = 0;
  3344  0B82  1218               	bcf	24,4	;volatile
  3345                           
  3346                           ;usart.c: 21: TXSTAbits.BRGH = 1;
  3347  0B83  1518               	bsf	24,2	;volatile
  3348                           
  3349                           ;usart.c: 22: TXSTAbits.TRMT = 1;
  3350  0B84  1498               	bsf	24,1	;volatile
  3351                           
  3352                           ;usart.c: 23: TXSTAbits.TX9D = 0;
  3353  0B85  1018               	bcf	24,0	;volatile
  3354                           
  3355                           ;usart.c: 26: RCSTAbits.SPEN = 1;
  3356  0B86  1283               	bcf	3,5	;RP0=0, select bank0
  3357  0B87  1303               	bcf	3,6	;RP1=0, select bank0
  3358  0B88  1798               	bsf	24,7	;volatile
  3359                           
  3360                           ;usart.c: 27: RCSTAbits.RX9 = 0;
  3361  0B89  1318               	bcf	24,6	;volatile
  3362                           
  3363                           ;usart.c: 28: RCSTAbits.SREN = 0;
  3364  0B8A  1298               	bcf	24,5	;volatile
  3365                           
  3366                           ;usart.c: 29: RCSTAbits.CREN = 1;
  3367  0B8B  1618               	bsf	24,4	;volatile
  3368                           
  3369                           ;usart.c: 30: RCSTAbits.ADDEN = 0;
  3370  0B8C  1198               	bcf	24,3	;volatile
  3371                           
  3372                           ;usart.c: 31: RCSTAbits.FERR = 0;
  3373  0B8D  1118               	bcf	24,2	;volatile
  3374                           
  3375                           ;usart.c: 32: RCSTAbits.OERR = 0;
  3376  0B8E  1098               	bcf	24,1	;volatile
  3377                           
  3378                           ;usart.c: 33: RCSTAbits.RX9D = 0;
  3379  0B8F  1018               	bcf	24,0	;volatile
  3380                           
  3381                           ;usart.c: 36: PIE1bits.TXIE = 0;
  3382  0B90  1683               	bsf	3,5	;RP0=1, select bank1
  3383  0B91  1303               	bcf	3,6	;RP1=0, select bank1
  3384  0B92  120C               	bcf	12,4	;volatile
  3385                           
  3386                           ;usart.c: 37: PIR1bits.TXIF = 0;
  3387  0B93  1283               	bcf	3,5	;RP0=0, select bank0
  3388  0B94  1303               	bcf	3,6	;RP1=0, select bank0
  3389  0B95  120C               	bcf	12,4	;volatile
  3390                           
  3391                           ;usart.c: 38: PIE1bits.RCIE = 1;
  3392  0B96  1683               	bsf	3,5	;RP0=1, select bank1
  3393  0B97  1303               	bcf	3,6	;RP1=0, select bank1
  3394  0B98  168C               	bsf	12,5	;volatile
  3395                           
  3396                           ;usart.c: 39: PIR1bits.RCIF = 0;
  3397  0B99  1283               	bcf	3,5	;RP0=0, select bank0
  3398  0B9A  1303               	bcf	3,6	;RP1=0, select bank0
  3399  0B9B  128C               	bcf	12,5	;volatile
  3400  0B9C  0008               	return
  3401  0B9D                     __end_of_USART_Init:	
  3402                           
  3403                           	psect	text9
  3404  0DF0                     __ptext9:	
  3405 ;; *************** function ___aldiv *****************
  3406 ;; Defined at:
  3407 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;  divisor         4   23[BANK0 ] long 
  3410 ;;  dividend        4   27[BANK0 ] long 
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;  quotient        4    2[BANK1 ] long 
  3413 ;;  sign            1    1[BANK1 ] unsigned char 
  3414 ;;  counter         1    0[BANK1 ] unsigned char 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  4   23[BANK0 ] long 
  3417 ;; Registers used:
  3418 ;;		wreg, status,2, status,0
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3424 ;;      Params:         0       8       0       0       0
  3425 ;;      Locals:         0       0       6       0       0
  3426 ;;      Temps:          0       1       0       0       0
  3427 ;;      Totals:         0       9       6       0       0
  3428 ;;Total ram usage:       15 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    4
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_USART_Init
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           
  3439                           ;psect for function ___aldiv
  3440  0DF0                     ___aldiv:	
  3441                           
  3442                           ;incstack = 0
  3443                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3444  0DF0  1683               	bsf	3,5	;RP0=1, select bank1
  3445  0DF1  1303               	bcf	3,6	;RP1=0, select bank1
  3446  0DF2  01D9               	clrf	___aldiv@sign^(0+128)
  3447  0DF3  1283               	bcf	3,5	;RP0=0, select bank0
  3448  0DF4  1303               	bcf	3,6	;RP1=0, select bank0
  3449  0DF5  1FBA               	btfss	___aldiv@divisor+3,7
  3450  0DF6  2E06               	goto	l662
  3451  0DF7  09B7               	comf	___aldiv@divisor,f
  3452  0DF8  09B8               	comf	___aldiv@divisor+1,f
  3453  0DF9  09B9               	comf	___aldiv@divisor+2,f
  3454  0DFA  09BA               	comf	___aldiv@divisor+3,f
  3455  0DFB  0AB7               	incf	___aldiv@divisor,f
  3456  0DFC  1903               	skipnz
  3457  0DFD  0AB8               	incf	___aldiv@divisor+1,f
  3458  0DFE  1903               	skipnz
  3459  0DFF  0AB9               	incf	___aldiv@divisor+2,f
  3460  0E00  1903               	skipnz
  3461  0E01  0ABA               	incf	___aldiv@divisor+3,f
  3462  0E02  1683               	bsf	3,5	;RP0=1, select bank1
  3463  0E03  1303               	bcf	3,6	;RP1=0, select bank1
  3464  0E04  01D9               	clrf	___aldiv@sign^(0+128)
  3465  0E05  0AD9               	incf	___aldiv@sign^(0+128),f
  3466  0E06                     l662:	
  3467  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  3468  0E07  1FBE               	btfss	___aldiv@dividend+3,7
  3469  0E08  2E1A               	goto	l2919
  3470  0E09  09BB               	comf	___aldiv@dividend,f
  3471  0E0A  09BC               	comf	___aldiv@dividend+1,f
  3472  0E0B  09BD               	comf	___aldiv@dividend+2,f
  3473  0E0C  09BE               	comf	___aldiv@dividend+3,f
  3474  0E0D  0ABB               	incf	___aldiv@dividend,f
  3475  0E0E  1903               	skipnz
  3476  0E0F  0ABC               	incf	___aldiv@dividend+1,f
  3477  0E10  1903               	skipnz
  3478  0E11  0ABD               	incf	___aldiv@dividend+2,f
  3479  0E12  1903               	skipnz
  3480  0E13  0ABE               	incf	___aldiv@dividend+3,f
  3481  0E14  3001               	movlw	1
  3482  0E15  00BF               	movwf	??___aldiv
  3483  0E16  083F               	movf	??___aldiv,w
  3484  0E17  1683               	bsf	3,5	;RP0=1, select bank1
  3485  0E18  1303               	bcf	3,6	;RP1=0, select bank1
  3486  0E19  06D9               	xorwf	___aldiv@sign^(0+128),f
  3487  0E1A                     l2919:	
  3488  0E1A  3000               	movlw	0
  3489  0E1B  1683               	bsf	3,5	;RP0=1, select bank1
  3490  0E1C  1303               	bcf	3,6	;RP1=0, select bank1
  3491  0E1D  00DD               	movwf	(___aldiv@quotient+3)^(0+128)
  3492  0E1E  3000               	movlw	0
  3493  0E1F  00DC               	movwf	(___aldiv@quotient+2)^(0+128)
  3494  0E20  3000               	movlw	0
  3495  0E21  00DB               	movwf	(___aldiv@quotient+1)^(0+128)
  3496  0E22  3000               	movlw	0
  3497  0E23  00DA               	movwf	___aldiv@quotient^(0+128)
  3498  0E24  1283               	bcf	3,5	;RP0=0, select bank0
  3499  0E25  1303               	bcf	3,6	;RP1=0, select bank0
  3500  0E26  083A               	movf	___aldiv@divisor+3,w
  3501  0E27  0439               	iorwf	___aldiv@divisor+2,w
  3502  0E28  0438               	iorwf	___aldiv@divisor+1,w
  3503  0E29  0437               	iorwf	___aldiv@divisor,w
  3504  0E2A  1903               	skipnz
  3505  0E2B  2E84               	goto	l2941
  3506  0E2C  1683               	bsf	3,5	;RP0=1, select bank1
  3507  0E2D  1303               	bcf	3,6	;RP1=0, select bank1
  3508  0E2E  01D8               	clrf	___aldiv@counter^(0+128)
  3509  0E2F  0AD8               	incf	___aldiv@counter^(0+128),f
  3510  0E30                     l2927:	
  3511  0E30  1283               	bcf	3,5	;RP0=0, select bank0
  3512  0E31  1303               	bcf	3,6	;RP1=0, select bank0
  3513  0E32  1BBA               	btfsc	___aldiv@divisor+3,7
  3514  0E33  2E45               	goto	l2929
  3515  0E34  3001               	movlw	1
  3516  0E35  1283               	bcf	3,5	;RP0=0, select bank0
  3517  0E36  00BF               	movwf	??___aldiv
  3518  0E37                     u2995:	
  3519  0E37  1003               	clrc
  3520  0E38  0DB7               	rlf	___aldiv@divisor,f
  3521  0E39  0DB8               	rlf	___aldiv@divisor+1,f
  3522  0E3A  0DB9               	rlf	___aldiv@divisor+2,f
  3523  0E3B  0DBA               	rlf	___aldiv@divisor+3,f
  3524  0E3C  0BBF               	decfsz	??___aldiv,f
  3525  0E3D  2E37               	goto	u2995
  3526  0E3E  3001               	movlw	1
  3527  0E3F  00BF               	movwf	??___aldiv
  3528  0E40  083F               	movf	??___aldiv,w
  3529  0E41  1683               	bsf	3,5	;RP0=1, select bank1
  3530  0E42  1303               	bcf	3,6	;RP1=0, select bank1
  3531  0E43  07D8               	addwf	___aldiv@counter^(0+128),f
  3532  0E44  2E30               	goto	l2927
  3533  0E45                     l2929:	
  3534  0E45  3001               	movlw	1
  3535  0E46  1283               	bcf	3,5	;RP0=0, select bank0
  3536  0E47  00BF               	movwf	??___aldiv
  3537  0E48                     u3015:	
  3538  0E48  1003               	clrc
  3539  0E49  1683               	bsf	3,5	;RP0=1, select bank1
  3540  0E4A  1303               	bcf	3,6	;RP1=0, select bank1
  3541  0E4B  0DDA               	rlf	___aldiv@quotient^(0+128),f
  3542  0E4C  0DDB               	rlf	(___aldiv@quotient+1)^(0+128),f
  3543  0E4D  0DDC               	rlf	(___aldiv@quotient+2)^(0+128),f
  3544  0E4E  0DDD               	rlf	(___aldiv@quotient+3)^(0+128),f
  3545  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
  3546  0E50  1303               	bcf	3,6	;RP1=0, select bank0
  3547  0E51  0BBF               	decfsz	??___aldiv,f
  3548  0E52  2E48               	goto	u3015
  3549  0E53  083A               	movf	___aldiv@divisor+3,w
  3550  0E54  023E               	subwf	___aldiv@dividend+3,w
  3551  0E55  1D03               	skipz
  3552  0E56  2E61               	goto	u3025
  3553  0E57  0839               	movf	___aldiv@divisor+2,w
  3554  0E58  023D               	subwf	___aldiv@dividend+2,w
  3555  0E59  1D03               	skipz
  3556  0E5A  2E61               	goto	u3025
  3557  0E5B  0838               	movf	___aldiv@divisor+1,w
  3558  0E5C  023C               	subwf	___aldiv@dividend+1,w
  3559  0E5D  1D03               	skipz
  3560  0E5E  2E61               	goto	u3025
  3561  0E5F  0837               	movf	___aldiv@divisor,w
  3562  0E60  023B               	subwf	___aldiv@dividend,w
  3563  0E61                     u3025:	
  3564  0E61  1C03               	skipc
  3565  0E62  2E74               	goto	l2937
  3566  0E63  0837               	movf	___aldiv@divisor,w
  3567  0E64  02BB               	subwf	___aldiv@dividend,f
  3568  0E65  0838               	movf	___aldiv@divisor+1,w
  3569  0E66  1C03               	skipc
  3570  0E67  0F38               	incfsz	___aldiv@divisor+1,w
  3571  0E68  02BC               	subwf	___aldiv@dividend+1,f
  3572  0E69  0839               	movf	___aldiv@divisor+2,w
  3573  0E6A  1C03               	skipc
  3574  0E6B  0F39               	incfsz	___aldiv@divisor+2,w
  3575  0E6C  02BD               	subwf	___aldiv@dividend+2,f
  3576  0E6D  083A               	movf	___aldiv@divisor+3,w
  3577  0E6E  1C03               	skipc
  3578  0E6F  0F3A               	incfsz	___aldiv@divisor+3,w
  3579  0E70  02BE               	subwf	___aldiv@dividend+3,f
  3580  0E71  1683               	bsf	3,5	;RP0=1, select bank1
  3581  0E72  1303               	bcf	3,6	;RP1=0, select bank1
  3582  0E73  145A               	bsf	___aldiv@quotient^(0+128),0
  3583  0E74                     l2937:	
  3584  0E74  3001               	movlw	1
  3585  0E75                     u3035:	
  3586  0E75  1003               	clrc
  3587  0E76  1283               	bcf	3,5	;RP0=0, select bank0
  3588  0E77  0CBA               	rrf	___aldiv@divisor+3,f
  3589  0E78  0CB9               	rrf	___aldiv@divisor+2,f
  3590  0E79  0CB8               	rrf	___aldiv@divisor+1,f
  3591  0E7A  0CB7               	rrf	___aldiv@divisor,f
  3592  0E7B  3EFF               	addlw	-1
  3593  0E7C  1D03               	skipz
  3594  0E7D  2E75               	goto	u3035
  3595  0E7E  3001               	movlw	1
  3596  0E7F  1683               	bsf	3,5	;RP0=1, select bank1
  3597  0E80  1303               	bcf	3,6	;RP1=0, select bank1
  3598  0E81  02D8               	subwf	___aldiv@counter^(0+128),f
  3599  0E82  1D03               	btfss	3,2
  3600  0E83  2E45               	goto	l2929
  3601  0E84                     l2941:	
  3602  0E84  1683               	bsf	3,5	;RP0=1, select bank1
  3603  0E85  1303               	bcf	3,6	;RP1=0, select bank1
  3604  0E86  0859               	movf	___aldiv@sign^(0+128),w
  3605  0E87  1903               	btfsc	3,2
  3606  0E88  2E94               	goto	l2945
  3607  0E89  09DA               	comf	___aldiv@quotient^(0+128),f
  3608  0E8A  09DB               	comf	(___aldiv@quotient+1)^(0+128),f
  3609  0E8B  09DC               	comf	(___aldiv@quotient+2)^(0+128),f
  3610  0E8C  09DD               	comf	(___aldiv@quotient+3)^(0+128),f
  3611  0E8D  0ADA               	incf	___aldiv@quotient^(0+128),f
  3612  0E8E  1903               	skipnz
  3613  0E8F  0ADB               	incf	(___aldiv@quotient+1)^(0+128),f
  3614  0E90  1903               	skipnz
  3615  0E91  0ADC               	incf	(___aldiv@quotient+2)^(0+128),f
  3616  0E92  1903               	skipnz
  3617  0E93  0ADD               	incf	(___aldiv@quotient+3)^(0+128),f
  3618  0E94                     l2945:	
  3619  0E94  085D               	movf	(___aldiv@quotient+3)^(0+128),w
  3620  0E95  1283               	bcf	3,5	;RP0=0, select bank0
  3621  0E96  1303               	bcf	3,6	;RP1=0, select bank0
  3622  0E97  00BA               	movwf	?___aldiv+3
  3623  0E98  1683               	bsf	3,5	;RP0=1, select bank1
  3624  0E99  1303               	bcf	3,6	;RP1=0, select bank1
  3625  0E9A  085C               	movf	(___aldiv@quotient+2)^(0+128),w
  3626  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  3627  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  3628  0E9D  00B9               	movwf	?___aldiv+2
  3629  0E9E  1683               	bsf	3,5	;RP0=1, select bank1
  3630  0E9F  1303               	bcf	3,6	;RP1=0, select bank1
  3631  0EA0  085B               	movf	(___aldiv@quotient+1)^(0+128),w
  3632  0EA1  1283               	bcf	3,5	;RP0=0, select bank0
  3633  0EA2  1303               	bcf	3,6	;RP1=0, select bank0
  3634  0EA3  00B8               	movwf	?___aldiv+1
  3635  0EA4  1683               	bsf	3,5	;RP0=1, select bank1
  3636  0EA5  1303               	bcf	3,6	;RP1=0, select bank1
  3637  0EA6  085A               	movf	___aldiv@quotient^(0+128),w
  3638  0EA7  1283               	bcf	3,5	;RP0=0, select bank0
  3639  0EA8  1303               	bcf	3,6	;RP1=0, select bank0
  3640  0EA9  00B7               	movwf	?___aldiv
  3641  0EAA  0008               	return
  3642  0EAB                     __end_of___aldiv:	
  3643                           
  3644                           	psect	text10
  3645  08C1                     __ptext10:	
  3646 ;; *************** function _TIMER0_Set *****************
  3647 ;; Defined at:
  3648 ;;		line 20 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\timers.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;  contagens       1    wreg     unsigned char 
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;  contagens       1   23[BANK0 ] unsigned char 
  3653 ;; Return value:  Size  Location     Type
  3654 ;;		None               void
  3655 ;; Registers used:
  3656 ;;		wreg
  3657 ;; Tracked objects:
  3658 ;;		On entry : 0/0
  3659 ;;		On exit  : 0/0
  3660 ;;		Unchanged: 0/0
  3661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3662 ;;      Params:         0       0       0       0       0
  3663 ;;      Locals:         0       1       0       0       0
  3664 ;;      Temps:          0       0       0       0       0
  3665 ;;      Totals:         0       1       0       0       0
  3666 ;;Total ram usage:        1 bytes
  3667 ;; Hardware stack levels used:    1
  3668 ;; Hardware stack levels required when called:    4
  3669 ;; This function calls:
  3670 ;;		Nothing
  3671 ;; This function is called by:
  3672 ;;		_main
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           
  3677                           ;psect for function _TIMER0_Set
  3678  08C1                     _TIMER0_Set:	
  3679                           
  3680                           ;incstack = 0
  3681                           ; Regs used in _TIMER0_Set: [wreg]
  3682                           ;TIMER0_Set@contagens stored from wreg
  3683  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  3684  08C2  1303               	bcf	3,6	;RP1=0, select bank0
  3685  08C3  00B7               	movwf	TIMER0_Set@contagens
  3686                           
  3687                           ;timers.c: 22: TMR0 = contagens;
  3688  08C4  0837               	movf	TIMER0_Set@contagens,w
  3689  08C5  0081               	movwf	1	;volatile
  3690  08C6  0008               	return
  3691  08C7                     __end_of_TIMER0_Set:	
  3692                           
  3693                           	psect	text11
  3694  07F5                     __ptext11:	
  3695 ;; *************** function _TIMER0_Init *****************
  3696 ;; Defined at:
  3697 ;;		line 6 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\timers.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;		None
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;		None
  3702 ;; Return value:  Size  Location     Type
  3703 ;;		None               void
  3704 ;; Registers used:
  3705 ;;		None
  3706 ;; Tracked objects:
  3707 ;;		On entry : 0/0
  3708 ;;		On exit  : 0/0
  3709 ;;		Unchanged: 0/0
  3710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3711 ;;      Params:         0       0       0       0       0
  3712 ;;      Locals:         0       0       0       0       0
  3713 ;;      Temps:          0       0       0       0       0
  3714 ;;      Totals:         0       0       0       0       0
  3715 ;;Total ram usage:        0 bytes
  3716 ;; Hardware stack levels used:    1
  3717 ;; Hardware stack levels required when called:    4
  3718 ;; This function calls:
  3719 ;;		Nothing
  3720 ;; This function is called by:
  3721 ;;		_main
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           
  3726                           ;psect for function _TIMER0_Init
  3727  07F5                     _TIMER0_Init:	
  3728                           
  3729                           ;timers.c: 8: OPTION_REGbits.T0CS = 0;
  3730                           
  3731                           ;incstack = 0
  3732                           ; Regs used in _TIMER0_Init: []
  3733  07F5  1683               	bsf	3,5	;RP0=1, select bank1
  3734  07F6  1303               	bcf	3,6	;RP1=0, select bank1
  3735  07F7  1281               	bcf	1,5	;volatile
  3736                           
  3737                           ;timers.c: 9: OPTION_REGbits.T0SE = 0;
  3738  07F8  1201               	bcf	1,4	;volatile
  3739                           
  3740                           ;timers.c: 10: OPTION_REGbits.PSA = 0;
  3741  07F9  1181               	bcf	1,3	;volatile
  3742                           
  3743                           ;timers.c: 11: OPTION_REGbits.PS2 = 1;
  3744  07FA  1501               	bsf	1,2	;volatile
  3745                           
  3746                           ;timers.c: 12: OPTION_REGbits.PS1 = 1;
  3747  07FB  1481               	bsf	1,1	;volatile
  3748                           
  3749                           ;timers.c: 13: OPTION_REGbits.PS0 = 1;
  3750  07FC  1401               	bsf	1,0	;volatile
  3751                           
  3752                           ;timers.c: 14: INTCONbits.TMR0IF = 0;
  3753  07FD  110B               	bcf	11,2	;volatile
  3754                           
  3755                           ;timers.c: 15: INTCONbits.TMR0IE = 1;
  3756  07FE  168B               	bsf	11,5	;volatile
  3757  07FF  0008               	return
  3758  0800                     __end_of_TIMER0_Init:	
  3759                           
  3760                           	psect	text12
  3761  0A0A                     __ptext12:	
  3762 ;; *************** function _PWM_Init *****************
  3763 ;; Defined at:
  3764 ;;		line 5 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;		None
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;		None
  3769 ;; Return value:  Size  Location     Type
  3770 ;;		None               void
  3771 ;; Registers used:
  3772 ;;		wreg
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3778 ;;      Params:         0       0       0       0       0
  3779 ;;      Locals:         0       0       0       0       0
  3780 ;;      Temps:          0       0       0       0       0
  3781 ;;      Totals:         0       0       0       0       0
  3782 ;;Total ram usage:        0 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    4
  3785 ;; This function calls:
  3786 ;;		Nothing
  3787 ;; This function is called by:
  3788 ;;		_main
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           
  3793                           ;psect for function _PWM_Init
  3794  0A0A                     _PWM_Init:	
  3795                           
  3796                           ;pwm.c: 14: T2CONbits.T2CKPS1 = 1;
  3797                           
  3798                           ;incstack = 0
  3799                           ; Regs used in _PWM_Init: [wreg]
  3800  0A0A  1283               	bcf	3,5	;RP0=0, select bank0
  3801  0A0B  1303               	bcf	3,6	;RP1=0, select bank0
  3802  0A0C  1492               	bsf	18,1	;volatile
  3803                           
  3804                           ;pwm.c: 15: T2CONbits.T2CKPS0 = 0;
  3805  0A0D  1012               	bcf	18,0	;volatile
  3806                           
  3807                           ;pwm.c: 18: T2CONbits.TOUTPS3 = 0;
  3808  0A0E  1312               	bcf	18,6	;volatile
  3809                           
  3810                           ;pwm.c: 19: T2CONbits.TOUTPS2 = 0;
  3811  0A0F  1292               	bcf	18,5	;volatile
  3812                           
  3813                           ;pwm.c: 20: T2CONbits.TOUTPS1 = 0;
  3814  0A10  1212               	bcf	18,4	;volatile
  3815                           
  3816                           ;pwm.c: 21: T2CONbits.TOUTPS0 = 0;
  3817  0A11  1192               	bcf	18,3	;volatile
  3818                           
  3819                           ;pwm.c: 24: T2CONbits.TMR2ON = 1;
  3820  0A12  1512               	bsf	18,2	;volatile
  3821                           
  3822                           ;pwm.c: 27: PR2 = 255;
  3823  0A13  30FF               	movlw	255
  3824  0A14  1683               	bsf	3,5	;RP0=1, select bank1
  3825  0A15  1303               	bcf	3,6	;RP1=0, select bank1
  3826  0A16  0092               	movwf	18	;volatile
  3827                           
  3828                           ;pwm.c: 43: CCP1CONbits.CCP1M3 = 1;
  3829  0A17  1283               	bcf	3,5	;RP0=0, select bank0
  3830  0A18  1303               	bcf	3,6	;RP1=0, select bank0
  3831  0A19  1597               	bsf	23,3	;volatile
  3832                           
  3833                           ;pwm.c: 44: CCP1CONbits.CCP1M2 = 1;
  3834  0A1A  1517               	bsf	23,2	;volatile
  3835                           
  3836                           ;pwm.c: 45: CCP1CONbits.CCP1M1 = 1;
  3837  0A1B  1497               	bsf	23,1	;volatile
  3838                           
  3839                           ;pwm.c: 46: CCP1CONbits.CCP1M0 = 1;
  3840  0A1C  1417               	bsf	23,0	;volatile
  3841                           
  3842                           ;pwm.c: 49: PIE1bits.CCP1IE = 1;
  3843  0A1D  1683               	bsf	3,5	;RP0=1, select bank1
  3844  0A1E  1303               	bcf	3,6	;RP1=0, select bank1
  3845  0A1F  150C               	bsf	12,2	;volatile
  3846                           
  3847                           ;pwm.c: 50: PIR1bits.CCP1IF = 0;
  3848  0A20  1283               	bcf	3,5	;RP0=0, select bank0
  3849  0A21  1303               	bcf	3,6	;RP1=0, select bank0
  3850  0A22  110C               	bcf	12,2	;volatile
  3851                           
  3852                           ;pwm.c: 53: CCP2CONbits.CCP2M3 = 1;
  3853  0A23  159D               	bsf	29,3	;volatile
  3854                           
  3855                           ;pwm.c: 54: CCP2CONbits.CCP2M2 = 1;
  3856  0A24  151D               	bsf	29,2	;volatile
  3857                           
  3858                           ;pwm.c: 55: CCP2CONbits.CCP2M1 = 1;
  3859  0A25  149D               	bsf	29,1	;volatile
  3860                           
  3861                           ;pwm.c: 56: CCP2CONbits.CCP2M0 = 1;
  3862  0A26  141D               	bsf	29,0	;volatile
  3863                           
  3864                           ;pwm.c: 59: PIE2bits.CCP2IE = 1;
  3865  0A27  1683               	bsf	3,5	;RP0=1, select bank1
  3866  0A28  1303               	bcf	3,6	;RP1=0, select bank1
  3867  0A29  140D               	bsf	13,0	;volatile
  3868                           
  3869                           ;pwm.c: 60: PIR2bits.CCP2IF = 0;
  3870  0A2A  1283               	bcf	3,5	;RP0=0, select bank0
  3871  0A2B  1303               	bcf	3,6	;RP1=0, select bank0
  3872  0A2C  100D               	bcf	13,0	;volatile
  3873  0A2D  0008               	return
  3874  0A2E                     __end_of_PWM_Init:	
  3875                           
  3876                           	psect	text13
  3877  09A9                     __ptext13:	
  3878 ;; *************** function _PWM_DutyCycle2 *****************
  3879 ;; Defined at:
  3880 ;;		line 96 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;  valor           2   23[BANK0 ] int 
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;		None               void
  3887 ;; Registers used:
  3888 ;;		wreg, status,2, status,0
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3894 ;;      Params:         0       2       0       0       0
  3895 ;;      Locals:         0       0       0       0       0
  3896 ;;      Temps:          0       2       0       0       0
  3897 ;;      Totals:         0       4       0       0       0
  3898 ;;Total ram usage:        4 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    4
  3901 ;; This function calls:
  3902 ;;		Nothing
  3903 ;; This function is called by:
  3904 ;;		_main
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           
  3909                           ;psect for function _PWM_DutyCycle2
  3910  09A9                     _PWM_DutyCycle2:	
  3911                           
  3912                           ;pwm.c: 98: CCPR2L = valor >> 2;
  3913                           
  3914                           ;incstack = 0
  3915                           ; Regs used in _PWM_DutyCycle2: [wreg+status,2+status,0]
  3916  09A9  1283               	bcf	3,5	;RP0=0, select bank0
  3917  09AA  1303               	bcf	3,6	;RP1=0, select bank0
  3918  09AB  0838               	movf	PWM_DutyCycle2@valor+1,w
  3919  09AC  00BA               	movwf	??_PWM_DutyCycle2+1
  3920  09AD  0837               	movf	PWM_DutyCycle2@valor,w
  3921  09AE  00B9               	movwf	??_PWM_DutyCycle2
  3922  09AF  0D3A               	rlf	??_PWM_DutyCycle2+1,w
  3923  09B0  0CBA               	rrf	??_PWM_DutyCycle2+1,f
  3924  09B1  0CB9               	rrf	??_PWM_DutyCycle2,f
  3925  09B2  0D3A               	rlf	??_PWM_DutyCycle2+1,w
  3926  09B3  0CBA               	rrf	??_PWM_DutyCycle2+1,f
  3927  09B4  0CB9               	rrf	??_PWM_DutyCycle2,f
  3928  09B5  0839               	movf	??_PWM_DutyCycle2,w
  3929  09B6  009B               	movwf	27	;volatile
  3930                           
  3931                           ;pwm.c: 99: CCP2CON = (valor << 4)|0X0C;
  3932  09B7  0837               	movf	PWM_DutyCycle2@valor,w
  3933  09B8  00B9               	movwf	??_PWM_DutyCycle2
  3934  09B9  3003               	movlw	3
  3935  09BA                     u2465:	
  3936  09BA  1003               	clrc
  3937  09BB  0DB9               	rlf	??_PWM_DutyCycle2,f
  3938  09BC  3EFF               	addlw	-1
  3939  09BD  1D03               	skipz
  3940  09BE  29BA               	goto	u2465
  3941  09BF  1003               	clrc
  3942  09C0  0D39               	rlf	??_PWM_DutyCycle2,w
  3943  09C1  380C               	iorlw	12
  3944  09C2  009D               	movwf	29	;volatile
  3945  09C3  0008               	return
  3946  09C4                     __end_of_PWM_DutyCycle2:	
  3947                           
  3948                           	psect	text14
  3949  098E                     __ptext14:	
  3950 ;; *************** function _PWM_DutyCycle1 *****************
  3951 ;; Defined at:
  3952 ;;		line 64 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;  valor           2   23[BANK0 ] int 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;		None
  3957 ;; Return value:  Size  Location     Type
  3958 ;;		None               void
  3959 ;; Registers used:
  3960 ;;		wreg, status,2, status,0
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3966 ;;      Params:         0       2       0       0       0
  3967 ;;      Locals:         0       0       0       0       0
  3968 ;;      Temps:          0       2       0       0       0
  3969 ;;      Totals:         0       4       0       0       0
  3970 ;;Total ram usage:        4 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    4
  3973 ;; This function calls:
  3974 ;;		Nothing
  3975 ;; This function is called by:
  3976 ;;		_main
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           
  3981                           ;psect for function _PWM_DutyCycle1
  3982  098E                     _PWM_DutyCycle1:	
  3983                           
  3984                           ;pwm.c: 91: CCPR1L = valor >> 2;
  3985                           
  3986                           ;incstack = 0
  3987                           ; Regs used in _PWM_DutyCycle1: [wreg+status,2+status,0]
  3988  098E  1283               	bcf	3,5	;RP0=0, select bank0
  3989  098F  1303               	bcf	3,6	;RP1=0, select bank0
  3990  0990  0838               	movf	PWM_DutyCycle1@valor+1,w
  3991  0991  00BA               	movwf	??_PWM_DutyCycle1+1
  3992  0992  0837               	movf	PWM_DutyCycle1@valor,w
  3993  0993  00B9               	movwf	??_PWM_DutyCycle1
  3994  0994  0D3A               	rlf	??_PWM_DutyCycle1+1,w
  3995  0995  0CBA               	rrf	??_PWM_DutyCycle1+1,f
  3996  0996  0CB9               	rrf	??_PWM_DutyCycle1,f
  3997  0997  0D3A               	rlf	??_PWM_DutyCycle1+1,w
  3998  0998  0CBA               	rrf	??_PWM_DutyCycle1+1,f
  3999  0999  0CB9               	rrf	??_PWM_DutyCycle1,f
  4000  099A  0839               	movf	??_PWM_DutyCycle1,w
  4001  099B  0095               	movwf	21	;volatile
  4002                           
  4003                           ;pwm.c: 92: CCP1CON = (valor << 4)|0X0C;
  4004  099C  0837               	movf	PWM_DutyCycle1@valor,w
  4005  099D  00B9               	movwf	??_PWM_DutyCycle1
  4006  099E  3003               	movlw	3
  4007  099F                     u2525:	
  4008  099F  1003               	clrc
  4009  09A0  0DB9               	rlf	??_PWM_DutyCycle1,f
  4010  09A1  3EFF               	addlw	-1
  4011  09A2  1D03               	skipz
  4012  09A3  299F               	goto	u2525
  4013  09A4  1003               	clrc
  4014  09A5  0D39               	rlf	??_PWM_DutyCycle1,w
  4015  09A6  380C               	iorlw	12
  4016  09A7  0097               	movwf	23	;volatile
  4017  09A8  0008               	return
  4018  09A9                     __end_of_PWM_DutyCycle1:	
  4019                           
  4020                           	psect	text15
  4021  0A2E                     __ptext15:	
  4022 ;; *************** function _LCD_WriteString *****************
  4023 ;; Defined at:
  4024 ;;		line 61 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;  Str             2   25[BANK0 ] PTR const unsigned char 
  4027 ;;		 -> STR_18(6), STR_17(6), display_pwm(10), display_rpm(10), 
  4028 ;;		 -> STR_13(17), 
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;		None               void
  4033 ;; Registers used:
  4034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4040 ;;      Params:         0       2       0       0       0
  4041 ;;      Locals:         0       0       0       0       0
  4042 ;;      Temps:          0       0       0       0       0
  4043 ;;      Totals:         0       2       0       0       0
  4044 ;;Total ram usage:        2 bytes
  4045 ;; Hardware stack levels used:    1
  4046 ;; Hardware stack levels required when called:    5
  4047 ;; This function calls:
  4048 ;;		_LCD_WriteData
  4049 ;; This function is called by:
  4050 ;;		_main
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           
  4055                           ;psect for function _LCD_WriteString
  4056  0A2E                     _LCD_WriteString:	
  4057  0A2E                     l2589:	
  4058                           ;lcd.c: 63: while(*Str != '\0')
  4059                           
  4060                           ;incstack = 0
  4061                           ; Regs used in _LCD_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4062                           
  4063  0A2E  1283               	bcf	3,5	;RP0=0, select bank0
  4064  0A2F  1303               	bcf	3,6	;RP1=0, select bank0
  4065  0A30  083A               	movf	LCD_WriteString@Str+1,w
  4066  0A31  00FF               	movwf	127
  4067  0A32  0839               	movf	LCD_WriteString@Str,w
  4068  0A33  0084               	movwf	4
  4069  0A34  160A  118A  2000  120A  158A  	fcall	stringtab
  4070  0A39  3800               	iorlw	0
  4071  0A3A  1903               	btfsc	3,2
  4072  0A3B  0008               	return
  4073                           
  4074                           ;lcd.c: 64: {
  4075                           ;lcd.c: 65: LCD_WriteData(*Str);
  4076  0A3C  1283               	bcf	3,5	;RP0=0, select bank0
  4077  0A3D  1303               	bcf	3,6	;RP1=0, select bank0
  4078  0A3E  083A               	movf	LCD_WriteString@Str+1,w
  4079  0A3F  00FF               	movwf	127
  4080  0A40  0839               	movf	LCD_WriteString@Str,w
  4081  0A41  0084               	movwf	4
  4082  0A42  160A  118A  2000  120A  158A  	fcall	stringtab
  4083  0A47  120A  158A  20FD  120A  158A  	fcall	_LCD_WriteData
  4084                           
  4085                           ;lcd.c: 66: Str++;
  4086  0A4C  3001               	movlw	1
  4087  0A4D  1283               	bcf	3,5	;RP0=0, select bank0
  4088  0A4E  1303               	bcf	3,6	;RP1=0, select bank0
  4089  0A4F  07B9               	addwf	LCD_WriteString@Str,f
  4090  0A50  1803               	skipnc
  4091  0A51  0ABA               	incf	LCD_WriteString@Str+1,f
  4092  0A52  2A2E               	goto	l2589
  4093  0A53                     __end_of_LCD_WriteString:	
  4094                           
  4095                           	psect	text16
  4096  08FD                     __ptext16:	
  4097 ;; *************** function _LCD_WriteData *****************
  4098 ;; Defined at:
  4099 ;;		line 47 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;  Byte            1    wreg     unsigned char 
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;  Byte            1   24[BANK0 ] unsigned char 
  4104 ;; Return value:  Size  Location     Type
  4105 ;;		None               void
  4106 ;; Registers used:
  4107 ;;		wreg
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4113 ;;      Params:         0       0       0       0       0
  4114 ;;      Locals:         0       1       0       0       0
  4115 ;;      Temps:          0       1       0       0       0
  4116 ;;      Totals:         0       2       0       0       0
  4117 ;;Total ram usage:        2 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; Hardware stack levels required when called:    4
  4120 ;; This function calls:
  4121 ;;		Nothing
  4122 ;; This function is called by:
  4123 ;;		_LCD_WriteString
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           
  4128                           ;psect for function _LCD_WriteData
  4129  08FD                     _LCD_WriteData:	
  4130                           
  4131                           ;incstack = 0
  4132                           ; Regs used in _LCD_WriteData: [wreg]
  4133                           ;LCD_WriteData@Byte stored from wreg
  4134  08FD  1283               	bcf	3,5	;RP0=0, select bank0
  4135  08FE  1303               	bcf	3,6	;RP1=0, select bank0
  4136  08FF  00B8               	movwf	LCD_WriteData@Byte
  4137                           
  4138                           ;lcd.c: 49: PORTEbits.RE0 = 1;
  4139  0900  1409               	bsf	9,0	;volatile
  4140                           
  4141                           ;lcd.c: 51: PORTD = Byte;
  4142  0901  0838               	movf	LCD_WriteData@Byte,w
  4143  0902  0088               	movwf	8	;volatile
  4144                           
  4145                           ;lcd.c: 53: PORTEbits.RE1 = 1;
  4146  0903  1489               	bsf	9,1	;volatile
  4147                           
  4148                           ;lcd.c: 55: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4149  0904  303D               	movlw	61
  4150  0905  00B7               	movwf	??_LCD_WriteData
  4151  0906                     u3417:	
  4152  0906  0BB7               	decfsz	??_LCD_WriteData,f
  4153  0907  2906               	goto	u3417
  4154                           
  4155                           ;lcd.c: 57: PORTEbits.RE1 = 0;
  4156  0908  1283               	bcf	3,5	;RP0=0, select bank0
  4157  0909  1303               	bcf	3,6	;RP1=0, select bank0
  4158  090A  1089               	bcf	9,1	;volatile
  4159  090B  0008               	return
  4160  090C                     __end_of_LCD_WriteData:	
  4161                           
  4162                           	psect	text17
  4163  0C64                     __ptext17:	
  4164 ;; *************** function _LCD_Init *****************
  4165 ;; Defined at:
  4166 ;;		line 87 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;		None
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;		None
  4171 ;; Return value:  Size  Location     Type
  4172 ;;		None               void
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0, pclath, cstack
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4180 ;;      Params:         0       0       0       0       0
  4181 ;;      Locals:         0       0       0       0       0
  4182 ;;      Temps:          0       2       0       0       0
  4183 ;;      Totals:         0       2       0       0       0
  4184 ;;Total ram usage:        2 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    5
  4187 ;; This function calls:
  4188 ;;		_LCD_WriteCmd
  4189 ;; This function is called by:
  4190 ;;		_main
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           
  4195                           ;psect for function _LCD_Init
  4196  0C64                     _LCD_Init:	
  4197                           
  4198                           ;lcd.c: 90: ADCON1bits.PCFG3 = 0;
  4199                           
  4200                           ;incstack = 0
  4201                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  4202  0C64  1683               	bsf	3,5	;RP0=1, select bank1
  4203  0C65  1303               	bcf	3,6	;RP1=0, select bank1
  4204  0C66  119F               	bcf	31,3	;volatile
  4205                           
  4206                           ;lcd.c: 91: ADCON1bits.PCFG2 = 1;
  4207  0C67  151F               	bsf	31,2	;volatile
  4208                           
  4209                           ;lcd.c: 92: ADCON1bits.PCFG1 = 0;
  4210  0C68  109F               	bcf	31,1	;volatile
  4211                           
  4212                           ;lcd.c: 93: ADCON1bits.PCFG0 = 0;
  4213  0C69  101F               	bcf	31,0	;volatile
  4214                           
  4215                           ;lcd.c: 95: _delay((unsigned long)((15)*(18432000/4000.0)));
  4216  0C6A  305A               	movlw	90
  4217  0C6B  1283               	bcf	3,5	;RP0=0, select bank0
  4218  0C6C  1303               	bcf	3,6	;RP1=0, select bank0
  4219  0C6D  00BA               	movwf	??_LCD_Init+1
  4220  0C6E  30C3               	movlw	195
  4221  0C6F  00B9               	movwf	??_LCD_Init
  4222  0C70                     u3427:	
  4223  0C70  0BB9               	decfsz	??_LCD_Init,f
  4224  0C71  2C70               	goto	u3427
  4225  0C72  0BBA               	decfsz	??_LCD_Init+1,f
  4226  0C73  2C70               	goto	u3427
  4227                           
  4228                           ;lcd.c: 97: LCD_WriteCmd(0x30);
  4229  0C74  3030               	movlw	48
  4230  0C75  120A  158A  20EE  120A  158A  	fcall	_LCD_WriteCmd
  4231                           
  4232                           ;lcd.c: 98: _delay((unsigned long)((4)*(18432000/4000.0)));
  4233  0C7A  3018               	movlw	24
  4234  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  4235  0C7C  1303               	bcf	3,6	;RP1=0, select bank0
  4236  0C7D  00BA               	movwf	??_LCD_Init+1
  4237  0C7E  30EF               	movlw	239
  4238  0C7F  00B9               	movwf	??_LCD_Init
  4239  0C80                     u3437:	
  4240  0C80  0BB9               	decfsz	??_LCD_Init,f
  4241  0C81  2C80               	goto	u3437
  4242  0C82  0BBA               	decfsz	??_LCD_Init+1,f
  4243  0C83  2C80               	goto	u3437
  4244                           
  4245                           ;lcd.c: 100: LCD_WriteCmd(0x30);
  4246  0C84  3030               	movlw	48
  4247  0C85  120A  158A  20EE  120A  158A  	fcall	_LCD_WriteCmd
  4248                           
  4249                           ;lcd.c: 101: _delay((unsigned long)((100)*(18432000/4000000.0)));
  4250  0C8A  3099               	movlw	153
  4251  0C8B  1283               	bcf	3,5	;RP0=0, select bank0
  4252  0C8C  1303               	bcf	3,6	;RP1=0, select bank0
  4253  0C8D  00B9               	movwf	??_LCD_Init
  4254  0C8E                     u3447:	
  4255  0C8E  0BB9               	decfsz	??_LCD_Init,f
  4256  0C8F  2C8E               	goto	u3447
  4257                           
  4258                           ;lcd.c: 103: LCD_WriteCmd(0x30);
  4259  0C90  3030               	movlw	48
  4260  0C91  120A  158A  20EE  120A  158A  	fcall	_LCD_WriteCmd
  4261                           
  4262                           ;lcd.c: 104: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4263  0C96  303D               	movlw	61
  4264  0C97  1283               	bcf	3,5	;RP0=0, select bank0
  4265  0C98  1303               	bcf	3,6	;RP1=0, select bank0
  4266  0C99  00B9               	movwf	??_LCD_Init
  4267  0C9A                     u3457:	
  4268  0C9A  0BB9               	decfsz	??_LCD_Init,f
  4269  0C9B  2C9A               	goto	u3457
  4270                           
  4271                           ;lcd.c: 106: LCD_WriteCmd(0x38);
  4272  0C9C  3038               	movlw	56
  4273  0C9D  120A  158A  20EE  120A  158A  	fcall	_LCD_WriteCmd
  4274                           
  4275                           ;lcd.c: 107: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4276  0CA2  303D               	movlw	61
  4277  0CA3  1283               	bcf	3,5	;RP0=0, select bank0
  4278  0CA4  1303               	bcf	3,6	;RP1=0, select bank0
  4279  0CA5  00B9               	movwf	??_LCD_Init
  4280  0CA6                     u3467:	
  4281  0CA6  0BB9               	decfsz	??_LCD_Init,f
  4282  0CA7  2CA6               	goto	u3467
  4283                           
  4284                           ;lcd.c: 109: LCD_WriteCmd(0x01);
  4285  0CA8  3001               	movlw	1
  4286  0CA9  120A  158A  20EE  120A  158A  	fcall	_LCD_WriteCmd
  4287                           
  4288                           ;lcd.c: 110: _delay((unsigned long)((2)*(18432000/4000.0)));
  4289  0CAE  300C               	movlw	12
  4290  0CAF  1283               	bcf	3,5	;RP0=0, select bank0
  4291  0CB0  1303               	bcf	3,6	;RP1=0, select bank0
  4292  0CB1  00BA               	movwf	??_LCD_Init+1
  4293  0CB2  30F7               	movlw	247
  4294  0CB3  00B9               	movwf	??_LCD_Init
  4295  0CB4                     u3477:	
  4296  0CB4  0BB9               	decfsz	??_LCD_Init,f
  4297  0CB5  2CB4               	goto	u3477
  4298  0CB6  0BBA               	decfsz	??_LCD_Init+1,f
  4299  0CB7  2CB4               	goto	u3477
  4300                           
  4301                           ;lcd.c: 112: LCD_WriteCmd(0x0C);
  4302  0CB8  300C               	movlw	12
  4303  0CB9  120A  158A  20EE  120A  158A  	fcall	_LCD_WriteCmd
  4304                           
  4305                           ;lcd.c: 113: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4306  0CBE  303D               	movlw	61
  4307  0CBF  1283               	bcf	3,5	;RP0=0, select bank0
  4308  0CC0  1303               	bcf	3,6	;RP1=0, select bank0
  4309  0CC1  00B9               	movwf	??_LCD_Init
  4310  0CC2                     u3487:	
  4311  0CC2  0BB9               	decfsz	??_LCD_Init,f
  4312  0CC3  2CC2               	goto	u3487
  4313                           
  4314                           ;lcd.c: 115: LCD_WriteCmd(0x06);
  4315  0CC4  3006               	movlw	6
  4316  0CC5  120A  158A  20EE  120A  158A  	fcall	_LCD_WriteCmd
  4317                           
  4318                           ;lcd.c: 116: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4319  0CCA  303D               	movlw	61
  4320  0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  4321  0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  4322  0CCD  00B9               	movwf	??_LCD_Init
  4323  0CCE                     u3497:	
  4324  0CCE  0BB9               	decfsz	??_LCD_Init,f
  4325  0CCF  2CCE               	goto	u3497
  4326  0CD0  0008               	return
  4327  0CD1                     __end_of_LCD_Init:	
  4328                           
  4329                           	psect	text18
  4330  0942                     __ptext18:	
  4331 ;; *************** function _LCD_Cursor *****************
  4332 ;; Defined at:
  4333 ;;		line 10 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  Row             1    wreg     unsigned char 
  4336 ;;  Col             1   23[BANK0 ] unsigned char 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;  Row             1   25[BANK0 ] unsigned char 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;		None               void
  4341 ;; Registers used:
  4342 ;;		wreg, status,2, status,0
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4348 ;;      Params:         0       1       0       0       0
  4349 ;;      Locals:         0       1       0       0       0
  4350 ;;      Temps:          0       1       0       0       0
  4351 ;;      Totals:         0       3       0       0       0
  4352 ;;Total ram usage:        3 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    4
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_main
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           
  4363                           ;psect for function _LCD_Cursor
  4364  0942                     _LCD_Cursor:	
  4365                           
  4366                           ;incstack = 0
  4367                           ; Regs used in _LCD_Cursor: [wreg+status,2+status,0]
  4368                           ;LCD_Cursor@Row stored from wreg
  4369  0942  1283               	bcf	3,5	;RP0=0, select bank0
  4370  0943  1303               	bcf	3,6	;RP1=0, select bank0
  4371  0944  00B9               	movwf	LCD_Cursor@Row
  4372                           
  4373                           ;lcd.c: 12: PORTEbits.RE0 = 0;
  4374  0945  1009               	bcf	9,0	;volatile
  4375                           
  4376                           ;lcd.c: 14: if (Row == 0)
  4377  0946  08B9               	movf	LCD_Cursor@Row,f
  4378  0947  1D03               	skipz
  4379  0948  294C               	goto	l2575
  4380                           
  4381                           ;lcd.c: 15: {
  4382                           ;lcd.c: 16: PORTD = 0x80 + Col;
  4383  0949  0837               	movf	LCD_Cursor@Col,w
  4384  094A  3E80               	addlw	128
  4385  094B  294E               	goto	L2
  4386  094C                     l2575:	
  4387                           ;lcd.c: 17: }
  4388                           
  4389                           
  4390                           ;lcd.c: 18: else
  4391                           ;lcd.c: 19: {
  4392                           ;lcd.c: 20: PORTD = 0xC0 + Col;
  4393  094C  0837               	movf	LCD_Cursor@Col,w
  4394  094D  3EC0               	addlw	192
  4395  094E                     L2:	
  4396  094E  0088               	movwf	8	;volatile
  4397                           
  4398                           ;lcd.c: 21: }
  4399                           ;lcd.c: 24: PORTEbits.RE1 = 1;
  4400  094F  1489               	bsf	9,1	;volatile
  4401                           
  4402                           ;lcd.c: 26: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4403  0950  303D               	movlw	61
  4404  0951  00B8               	movwf	??_LCD_Cursor
  4405  0952                     u3507:	
  4406  0952  0BB8               	decfsz	??_LCD_Cursor,f
  4407  0953  2952               	goto	u3507
  4408                           
  4409                           ;lcd.c: 28: PORTEbits.RE1 = 0;
  4410  0954  1283               	bcf	3,5	;RP0=0, select bank0
  4411  0955  1303               	bcf	3,6	;RP1=0, select bank0
  4412  0956  1089               	bcf	9,1	;volatile
  4413  0957  0008               	return
  4414  0958                     __end_of_LCD_Cursor:	
  4415                           
  4416                           	psect	text19
  4417  0A9D                     __ptext19:	
  4418 ;; *************** function _LCD_Clear *****************
  4419 ;; Defined at:
  4420 ;;		line 71 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;		None
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;		None
  4425 ;; Return value:  Size  Location     Type
  4426 ;;		None               void
  4427 ;; Registers used:
  4428 ;;		wreg, status,2, status,0, pclath, cstack
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4434 ;;      Params:         0       0       0       0       0
  4435 ;;      Locals:         0       0       0       0       0
  4436 ;;      Temps:          0       2       0       0       0
  4437 ;;      Totals:         0       2       0       0       0
  4438 ;;Total ram usage:        2 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; Hardware stack levels required when called:    5
  4441 ;; This function calls:
  4442 ;;		_LCD_WriteCmd
  4443 ;; This function is called by:
  4444 ;;		_main
  4445 ;; This function uses a non-reentrant model
  4446 ;;
  4447                           
  4448                           
  4449                           ;psect for function _LCD_Clear
  4450  0A9D                     _LCD_Clear:	
  4451                           
  4452                           ;lcd.c: 73: LCD_WriteCmd(0x01);
  4453                           
  4454                           ;incstack = 0
  4455                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  4456  0A9D  3001               	movlw	1
  4457  0A9E  120A  158A  20EE  120A  158A  	fcall	_LCD_WriteCmd
  4458                           
  4459                           ;lcd.c: 75: _delay((unsigned long)((2)*(18432000/4000.0)));
  4460  0AA3  300C               	movlw	12
  4461  0AA4  1283               	bcf	3,5	;RP0=0, select bank0
  4462  0AA5  1303               	bcf	3,6	;RP1=0, select bank0
  4463  0AA6  00BA               	movwf	??_LCD_Clear+1
  4464  0AA7  30F7               	movlw	247
  4465  0AA8  00B9               	movwf	??_LCD_Clear
  4466  0AA9                     u3517:	
  4467  0AA9  0BB9               	decfsz	??_LCD_Clear,f
  4468  0AAA  2AA9               	goto	u3517
  4469  0AAB  0BBA               	decfsz	??_LCD_Clear+1,f
  4470  0AAC  2AA9               	goto	u3517
  4471                           
  4472                           ;lcd.c: 77: LCD_WriteCmd(0x0C);
  4473  0AAD  300C               	movlw	12
  4474  0AAE  120A  158A  20EE  120A  158A  	fcall	_LCD_WriteCmd
  4475                           
  4476                           ;lcd.c: 79: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4477  0AB3  303D               	movlw	61
  4478  0AB4  1283               	bcf	3,5	;RP0=0, select bank0
  4479  0AB5  1303               	bcf	3,6	;RP1=0, select bank0
  4480  0AB6  00B9               	movwf	??_LCD_Clear
  4481  0AB7                     u3527:	
  4482  0AB7  0BB9               	decfsz	??_LCD_Clear,f
  4483  0AB8  2AB7               	goto	u3527
  4484                           
  4485                           ;lcd.c: 81: LCD_WriteCmd(0x06);
  4486  0AB9  3006               	movlw	6
  4487  0ABA  120A  158A  20EE  120A  158A  	fcall	_LCD_WriteCmd
  4488                           
  4489                           ;lcd.c: 83: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4490  0ABF  303D               	movlw	61
  4491  0AC0  1283               	bcf	3,5	;RP0=0, select bank0
  4492  0AC1  1303               	bcf	3,6	;RP1=0, select bank0
  4493  0AC2  00B9               	movwf	??_LCD_Clear
  4494  0AC3                     u3537:	
  4495  0AC3  0BB9               	decfsz	??_LCD_Clear,f
  4496  0AC4  2AC3               	goto	u3537
  4497  0AC5  0008               	return
  4498  0AC6                     __end_of_LCD_Clear:	
  4499                           
  4500                           	psect	text20
  4501  08EE                     __ptext20:	
  4502 ;; *************** function _LCD_WriteCmd *****************
  4503 ;; Defined at:
  4504 ;;		line 32 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;  Byte            1    wreg     unsigned char 
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  Byte            1   24[BANK0 ] unsigned char 
  4509 ;; Return value:  Size  Location     Type
  4510 ;;		None               void
  4511 ;; Registers used:
  4512 ;;		wreg
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4518 ;;      Params:         0       0       0       0       0
  4519 ;;      Locals:         0       1       0       0       0
  4520 ;;      Temps:          0       1       0       0       0
  4521 ;;      Totals:         0       2       0       0       0
  4522 ;;Total ram usage:        2 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; Hardware stack levels required when called:    4
  4525 ;; This function calls:
  4526 ;;		Nothing
  4527 ;; This function is called by:
  4528 ;;		_LCD_Clear
  4529 ;;		_LCD_Init
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           
  4534                           ;psect for function _LCD_WriteCmd
  4535  08EE                     _LCD_WriteCmd:	
  4536                           
  4537                           ;incstack = 0
  4538                           ; Regs used in _LCD_WriteCmd: [wreg]
  4539                           ;LCD_WriteCmd@Byte stored from wreg
  4540  08EE  1283               	bcf	3,5	;RP0=0, select bank0
  4541  08EF  1303               	bcf	3,6	;RP1=0, select bank0
  4542  08F0  00B8               	movwf	LCD_WriteCmd@Byte
  4543                           
  4544                           ;lcd.c: 34: PORTEbits.RE0 = 0;
  4545  08F1  1009               	bcf	9,0	;volatile
  4546                           
  4547                           ;lcd.c: 36: PORTD = Byte;
  4548  08F2  0838               	movf	LCD_WriteCmd@Byte,w
  4549  08F3  0088               	movwf	8	;volatile
  4550                           
  4551                           ;lcd.c: 39: PORTEbits.RE1 = 1;
  4552  08F4  1489               	bsf	9,1	;volatile
  4553                           
  4554                           ;lcd.c: 41: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4555  08F5  303D               	movlw	61
  4556  08F6  00B7               	movwf	??_LCD_WriteCmd
  4557  08F7                     u3547:	
  4558  08F7  0BB7               	decfsz	??_LCD_WriteCmd,f
  4559  08F8  28F7               	goto	u3547
  4560                           
  4561                           ;lcd.c: 43: PORTEbits.RE1 = 0;
  4562  08F9  1283               	bcf	3,5	;RP0=0, select bank0
  4563  08FA  1303               	bcf	3,6	;RP1=0, select bank0
  4564  08FB  1089               	bcf	9,1	;volatile
  4565  08FC  0008               	return
  4566  08FD                     __end_of_LCD_WriteCmd:	
  4567                           
  4568                           	psect	text21
  4569  091C                     __ptext21:	
  4570 ;; *************** function _ADC_Init *****************
  4571 ;; Defined at:
  4572 ;;		line 6 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\adc.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;		None
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;		None
  4577 ;; Return value:  Size  Location     Type
  4578 ;;		None               void
  4579 ;; Registers used:
  4580 ;;		None
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4586 ;;      Params:         0       0       0       0       0
  4587 ;;      Locals:         0       0       0       0       0
  4588 ;;      Temps:          0       0       0       0       0
  4589 ;;      Totals:         0       0       0       0       0
  4590 ;;Total ram usage:        0 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    4
  4593 ;; This function calls:
  4594 ;;		Nothing
  4595 ;; This function is called by:
  4596 ;;		_main
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           
  4601                           ;psect for function _ADC_Init
  4602  091C                     _ADC_Init:	
  4603                           
  4604                           ;adc.c: 9: ADCON1bits.ADFM = 1;
  4605                           
  4606                           ;incstack = 0
  4607                           ; Regs used in _ADC_Init: []
  4608  091C  1683               	bsf	3,5	;RP0=1, select bank1
  4609  091D  1303               	bcf	3,6	;RP1=0, select bank1
  4610  091E  179F               	bsf	31,7	;volatile
  4611                           
  4612                           ;adc.c: 32: ADCON1bits.PCFG3 = 1;
  4613  091F  159F               	bsf	31,3	;volatile
  4614                           
  4615                           ;adc.c: 33: ADCON1bits.PCFG2 = 1;
  4616  0920  151F               	bsf	31,2	;volatile
  4617                           
  4618                           ;adc.c: 34: ADCON1bits.PCFG1 = 1;
  4619  0921  149F               	bsf	31,1	;volatile
  4620                           
  4621                           ;adc.c: 35: ADCON1bits.PCFG0 = 0;
  4622  0922  101F               	bcf	31,0	;volatile
  4623                           
  4624                           ;adc.c: 38: ADCON0bits.ADCS1 = 1;
  4625  0923  1283               	bcf	3,5	;RP0=0, select bank0
  4626  0924  1303               	bcf	3,6	;RP1=0, select bank0
  4627  0925  179F               	bsf	31,7	;volatile
  4628                           
  4629                           ;adc.c: 39: ADCON0bits.ADCS0 = 0;
  4630  0926  131F               	bcf	31,6	;volatile
  4631                           
  4632                           ;adc.c: 42: PIE1bits.ADIE = 0;
  4633  0927  1683               	bsf	3,5	;RP0=1, select bank1
  4634  0928  1303               	bcf	3,6	;RP1=0, select bank1
  4635  0929  130C               	bcf	12,6	;volatile
  4636                           
  4637                           ;adc.c: 43: PIR1bits.ADIF = 0;
  4638  092A  1283               	bcf	3,5	;RP0=0, select bank0
  4639  092B  1303               	bcf	3,6	;RP1=0, select bank0
  4640  092C  130C               	bcf	12,6	;volatile
  4641  092D  0008               	return
  4642  092E                     __end_of_ADC_Init:	
  4643                           
  4644                           	psect	text22
  4645  063A                     __ptext22:	
  4646 ;; *************** function _ISR *****************
  4647 ;; Defined at:
  4648 ;;		line 321 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;		None
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;		None
  4653 ;; Return value:  Size  Location     Type
  4654 ;;		None               void
  4655 ;; Registers used:
  4656 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4662 ;;      Params:         0       0       0       0       0
  4663 ;;      Locals:         0       0       0       0       0
  4664 ;;      Temps:          0       4       0       0       0
  4665 ;;      Totals:         0       4       0       0       0
  4666 ;;Total ram usage:        4 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    3
  4669 ;; This function calls:
  4670 ;;		_Fuzzy
  4671 ;;		_USART_ReceiveChar
  4672 ;;		i1_PWM_DutyCycle2
  4673 ;;		i1_TIMER0_Set
  4674 ;;		i1_USART_WriteString
  4675 ;;		i1___lwdiv
  4676 ;;		i1___wmul
  4677 ;; This function is called by:
  4678 ;;		Interrupt level 1
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           
  4683                           ;psect for function _ISR
  4684  063A                     _ISR:	
  4685                           
  4686                           ;main.c: 324: if (PIR1bits.RCIF)
  4687  063A  1E8C               	btfss	12,5	;volatile
  4688  063B  2F4B               	goto	i1l2793
  4689                           
  4690                           ;main.c: 325: {
  4691                           ;main.c: 326: pwmAnt = pwm;
  4692  063C  0848               	movf	_pwm+1,w
  4693  063D  01CA               	clrf	_pwmAnt+1
  4694  063E  07CA               	addwf	_pwmAnt+1,f
  4695  063F  0847               	movf	_pwm,w
  4696  0640  01C9               	clrf	_pwmAnt
  4697  0641  07C9               	addwf	_pwmAnt,f
  4698                           
  4699                           ;main.c: 327: if (USART_ReceiveChar() == '0')
  4700  0642  120A  158A  2173  120A  118A  	fcall	_USART_ReceiveChar
  4701  0647  3A30               	xorlw	48
  4702  0648  1D03               	skipz
  4703  0649  2E62               	goto	i1l2727
  4704                           
  4705                           ;main.c: 328: {
  4706                           ;main.c: 329: USART_WriteString("\n\rdesligado\n\r");
  4707  064A  30EA               	movlw	low (STR_1| (0+32768))
  4708  064B  00F1               	movwf	i1USART_WriteString@str
  4709  064C  3090               	movlw	high (STR_1| (0+32768))
  4710  064D  00F2               	movwf	i1USART_WriteString@str+1
  4711  064E  120A  158A  21E7  120A  118A  	fcall	i1_USART_WriteString
  4712                           
  4713                           ;main.c: 330: pwm = 0;
  4714  0653  1283               	bcf	3,5	;RP0=0, select bank0
  4715  0654  1303               	bcf	3,6	;RP1=0, select bank0
  4716  0655  01C7               	clrf	_pwm
  4717  0656  01C8               	clrf	_pwm+1
  4718                           
  4719                           ;main.c: 331: PWM_DutyCycle2(pwm);
  4720  0657  0848               	movf	_pwm+1,w
  4721  0658  01A1               	clrf	i1PWM_DutyCycle2@valor+1
  4722  0659  07A1               	addwf	i1PWM_DutyCycle2@valor+1,f
  4723  065A  0847               	movf	_pwm,w
  4724  065B  01A0               	clrf	i1PWM_DutyCycle2@valor
  4725  065C  07A0               	addwf	i1PWM_DutyCycle2@valor,f
  4726  065D  120A  158A  2158  120A  118A  	fcall	i1_PWM_DutyCycle2
  4727  0662                     i1l2727:	
  4728                           
  4729                           ;main.c: 333: }
  4730                           ;main.c: 335: if (USART_ReceiveChar() == '1')
  4731  0662  120A  158A  2173  120A  118A  	fcall	_USART_ReceiveChar
  4732  0667  3A31               	xorlw	49
  4733  0668  1D03               	skipz
  4734  0669  2E79               	goto	i1l2733
  4735                           
  4736                           ;main.c: 336: {
  4737                           ;main.c: 337: USART_WriteString("\n\rpwm = 32\n\r");
  4738  066A  30F8               	movlw	low (STR_2| (0+32768))
  4739  066B  00F1               	movwf	i1USART_WriteString@str
  4740  066C  3090               	movlw	high (STR_2| (0+32768))
  4741  066D  00F2               	movwf	i1USART_WriteString@str+1
  4742  066E  120A  158A  21E7  120A  118A  	fcall	i1_USART_WriteString
  4743                           
  4744                           ;main.c: 338: pwm = 32;
  4745  0673  3020               	movlw	32
  4746  0674  1283               	bcf	3,5	;RP0=0, select bank0
  4747  0675  1303               	bcf	3,6	;RP1=0, select bank0
  4748  0676  00C7               	movwf	_pwm
  4749  0677  3000               	movlw	0
  4750  0678  00C8               	movwf	_pwm+1
  4751  0679                     i1l2733:	
  4752                           
  4753                           ;main.c: 340: }
  4754                           ;main.c: 342: if (USART_ReceiveChar() == '2')
  4755  0679  120A  158A  2173  120A  118A  	fcall	_USART_ReceiveChar
  4756  067E  3A32               	xorlw	50
  4757  067F  1D03               	skipz
  4758  0680  2E90               	goto	i1l2739
  4759                           
  4760                           ;main.c: 343: {
  4761                           ;main.c: 344: USART_WriteString("\n\rpwm = 64\n\r");
  4762  0681  3005               	movlw	low (STR_3| (0+32768))
  4763  0682  00F1               	movwf	i1USART_WriteString@str
  4764  0683  3091               	movlw	high (STR_3| (0+32768))
  4765  0684  00F2               	movwf	i1USART_WriteString@str+1
  4766  0685  120A  158A  21E7  120A  118A  	fcall	i1_USART_WriteString
  4767                           
  4768                           ;main.c: 345: pwm = 64;
  4769  068A  3040               	movlw	64
  4770  068B  1283               	bcf	3,5	;RP0=0, select bank0
  4771  068C  1303               	bcf	3,6	;RP1=0, select bank0
  4772  068D  00C7               	movwf	_pwm
  4773  068E  3000               	movlw	0
  4774  068F  00C8               	movwf	_pwm+1
  4775  0690                     i1l2739:	
  4776                           
  4777                           ;main.c: 347: }
  4778                           ;main.c: 349: if (USART_ReceiveChar() == '3')
  4779  0690  120A  158A  2173  120A  118A  	fcall	_USART_ReceiveChar
  4780  0695  3A33               	xorlw	51
  4781  0696  1D03               	skipz
  4782  0697  2EAC               	goto	i1l2749
  4783                           
  4784                           ;main.c: 350: {
  4785                           ;main.c: 351: USART_WriteString("\n\rpwm = 128\n\r");
  4786  0698  30CE               	movlw	low (STR_4| (0+32768))
  4787  0699  00F1               	movwf	i1USART_WriteString@str
  4788  069A  3090               	movlw	high (STR_4| (0+32768))
  4789  069B  00F2               	movwf	i1USART_WriteString@str+1
  4790  069C  120A  158A  21E7  120A  118A  	fcall	i1_USART_WriteString
  4791                           
  4792                           ;main.c: 352: pwm = 128;
  4793  06A1  3080               	movlw	128
  4794  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  4795  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  4796  06A4  00C7               	movwf	_pwm
  4797  06A5  3000               	movlw	0
  4798  06A6  00C8               	movwf	_pwm+1
  4799                           
  4800                           ;main.c: 354: if(PORTBbits.RB0 == 0)
  4801  06A7  1806               	btfsc	6,0	;volatile
  4802  06A8  2EAB               	goto	i1l192
  4803                           
  4804                           ;main.c: 355: {
  4805                           ;main.c: 356: PORTBbits.RB0 = 1;
  4806  06A9  1406               	bsf	6,0	;volatile
  4807                           
  4808                           ;main.c: 357: }else{
  4809  06AA  2EAC               	goto	i1l2749
  4810  06AB                     i1l192:	
  4811                           
  4812                           ;main.c: 358: PORTBbits.RB0 = 0;
  4813  06AB  1006               	bcf	6,0	;volatile
  4814  06AC                     i1l2749:	
  4815                           
  4816                           ;main.c: 359: }
  4817                           ;main.c: 360: }
  4818                           ;main.c: 362: if (USART_ReceiveChar() == '4')
  4819  06AC  120A  158A  2173  120A  118A  	fcall	_USART_ReceiveChar
  4820  06B1  3A34               	xorlw	52
  4821  06B2  1D03               	skipz
  4822  06B3  2EC8               	goto	i1l2759
  4823                           
  4824                           ;main.c: 363: {
  4825                           ;main.c: 364: USART_WriteString("\n\rpwm = 256\n\r");
  4826  06B4  30B2               	movlw	low (STR_5| (0+32768))
  4827  06B5  00F1               	movwf	i1USART_WriteString@str
  4828  06B6  3090               	movlw	high (STR_5| (0+32768))
  4829  06B7  00F2               	movwf	i1USART_WriteString@str+1
  4830  06B8  120A  158A  21E7  120A  118A  	fcall	i1_USART_WriteString
  4831                           
  4832                           ;main.c: 365: pwm = 256;
  4833  06BD  3000               	movlw	0
  4834  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  4835  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  4836  06C0  00C7               	movwf	_pwm
  4837  06C1  3001               	movlw	1
  4838  06C2  00C8               	movwf	_pwm+1
  4839                           
  4840                           ;main.c: 367: if(PORTBbits.RB1 == 0)
  4841  06C3  1886               	btfsc	6,1	;volatile
  4842  06C4  2EC7               	goto	i1l195
  4843                           
  4844                           ;main.c: 368: {
  4845                           ;main.c: 369: PORTBbits.RB1 = 1;
  4846  06C5  1486               	bsf	6,1	;volatile
  4847                           
  4848                           ;main.c: 370: }else{
  4849  06C6  2EC8               	goto	i1l2759
  4850  06C7                     i1l195:	
  4851                           
  4852                           ;main.c: 371: PORTBbits.RB1 = 0;
  4853  06C7  1086               	bcf	6,1	;volatile
  4854  06C8                     i1l2759:	
  4855                           
  4856                           ;main.c: 372: }
  4857                           ;main.c: 373: }
  4858                           ;main.c: 375: if (USART_ReceiveChar() == '5')
  4859  06C8  120A  158A  2173  120A  118A  	fcall	_USART_ReceiveChar
  4860  06CD  3A35               	xorlw	53
  4861  06CE  1D03               	skipz
  4862  06CF  2EDF               	goto	i1l2765
  4863                           
  4864                           ;main.c: 376: {
  4865                           ;main.c: 377: USART_WriteString("\n\rpwm = 512\n\r");
  4866  06D0  30A4               	movlw	low (STR_6| (0+32768))
  4867  06D1  00F1               	movwf	i1USART_WriteString@str
  4868  06D2  3090               	movlw	high (STR_6| (0+32768))
  4869  06D3  00F2               	movwf	i1USART_WriteString@str+1
  4870  06D4  120A  158A  21E7  120A  118A  	fcall	i1_USART_WriteString
  4871                           
  4872                           ;main.c: 378: pwm = 512;
  4873  06D9  3000               	movlw	0
  4874  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  4875  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  4876  06DC  00C7               	movwf	_pwm
  4877  06DD  3002               	movlw	2
  4878  06DE  00C8               	movwf	_pwm+1
  4879  06DF                     i1l2765:	
  4880                           
  4881                           ;main.c: 380: }
  4882                           ;main.c: 382: if (USART_ReceiveChar() == '6')
  4883  06DF  120A  158A  2173  120A  118A  	fcall	_USART_ReceiveChar
  4884  06E4  3A36               	xorlw	54
  4885  06E5  1D03               	skipz
  4886  06E6  2EF6               	goto	i1l2771
  4887                           
  4888                           ;main.c: 383: {
  4889                           ;main.c: 384: USART_WriteString("\n\rpwm = 768\n\r");
  4890  06E7  30DC               	movlw	low (STR_7| (0+32768))
  4891  06E8  00F1               	movwf	i1USART_WriteString@str
  4892  06E9  3090               	movlw	high (STR_7| (0+32768))
  4893  06EA  00F2               	movwf	i1USART_WriteString@str+1
  4894  06EB  120A  158A  21E7  120A  118A  	fcall	i1_USART_WriteString
  4895                           
  4896                           ;main.c: 385: pwm = 768;
  4897  06F0  3000               	movlw	0
  4898  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  4899  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  4900  06F3  00C7               	movwf	_pwm
  4901  06F4  3003               	movlw	3
  4902  06F5  00C8               	movwf	_pwm+1
  4903  06F6                     i1l2771:	
  4904                           
  4905                           ;main.c: 387: }
  4906                           ;main.c: 389: if (USART_ReceiveChar() == '7')
  4907  06F6  120A  158A  2173  120A  118A  	fcall	_USART_ReceiveChar
  4908  06FB  3A37               	xorlw	55
  4909  06FC  1D03               	skipz
  4910  06FD  2F0D               	goto	i1l2777
  4911                           
  4912                           ;main.c: 390: {
  4913                           ;main.c: 391: USART_WriteString("\n\rpwm = 896\n\r");
  4914  06FE  30C0               	movlw	low (STR_8| (0+32768))
  4915  06FF  00F1               	movwf	i1USART_WriteString@str
  4916  0700  3090               	movlw	high (STR_8| (0+32768))
  4917  0701  00F2               	movwf	i1USART_WriteString@str+1
  4918  0702  120A  158A  21E7  120A  118A  	fcall	i1_USART_WriteString
  4919                           
  4920                           ;main.c: 392: pwm = 896;
  4921  0707  3080               	movlw	128
  4922  0708  1283               	bcf	3,5	;RP0=0, select bank0
  4923  0709  1303               	bcf	3,6	;RP1=0, select bank0
  4924  070A  00C7               	movwf	_pwm
  4925  070B  3003               	movlw	3
  4926  070C  00C8               	movwf	_pwm+1
  4927  070D                     i1l2777:	
  4928                           
  4929                           ;main.c: 394: }
  4930                           ;main.c: 396: if (USART_ReceiveChar() == '8')
  4931  070D  120A  158A  2173  120A  118A  	fcall	_USART_ReceiveChar
  4932  0712  3A38               	xorlw	56
  4933  0713  1D03               	skipz
  4934  0714  2F24               	goto	i1l2783
  4935                           
  4936                           ;main.c: 397: {
  4937                           ;main.c: 398: USART_WriteString("\n\rpwm = 1000\n\r");
  4938  0715  3086               	movlw	low (STR_9| (0+32768))
  4939  0716  00F1               	movwf	i1USART_WriteString@str
  4940  0717  3090               	movlw	high (STR_9| (0+32768))
  4941  0718  00F2               	movwf	i1USART_WriteString@str+1
  4942  0719  120A  158A  21E7  120A  118A  	fcall	i1_USART_WriteString
  4943                           
  4944                           ;main.c: 399: pwm = 1000;
  4945  071E  30E8               	movlw	232
  4946  071F  1283               	bcf	3,5	;RP0=0, select bank0
  4947  0720  1303               	bcf	3,6	;RP1=0, select bank0
  4948  0721  00C7               	movwf	_pwm
  4949  0722  3003               	movlw	3
  4950  0723  00C8               	movwf	_pwm+1
  4951  0724                     i1l2783:	
  4952                           
  4953                           ;main.c: 401: }
  4954                           ;main.c: 403: if (USART_ReceiveChar() == '9')
  4955  0724  120A  158A  2173  120A  118A  	fcall	_USART_ReceiveChar
  4956  0729  3A39               	xorlw	57
  4957  072A  1D03               	skipz
  4958  072B  2F3B               	goto	i1l2789
  4959                           
  4960                           ;main.c: 404: {
  4961                           ;main.c: 405: USART_WriteString("\n\rpwm = 1023\n\r");
  4962  072C  3095               	movlw	low (STR_10| (0+32768))
  4963  072D  00F1               	movwf	i1USART_WriteString@str
  4964  072E  3090               	movlw	high (STR_10| (0+32768))
  4965  072F  00F2               	movwf	i1USART_WriteString@str+1
  4966  0730  120A  158A  21E7  120A  118A  	fcall	i1_USART_WriteString
  4967                           
  4968                           ;main.c: 406: pwm = 1023;
  4969  0735  30FF               	movlw	255
  4970  0736  1283               	bcf	3,5	;RP0=0, select bank0
  4971  0737  1303               	bcf	3,6	;RP1=0, select bank0
  4972  0738  00C7               	movwf	_pwm
  4973  0739  3003               	movlw	3
  4974  073A  00C8               	movwf	_pwm+1
  4975  073B                     i1l2789:	
  4976                           
  4977                           ;main.c: 408: }
  4978                           ;main.c: 412: Fuzzy(pwm);
  4979  073B  1283               	bcf	3,5	;RP0=0, select bank0
  4980  073C  1303               	bcf	3,6	;RP1=0, select bank0
  4981  073D  0848               	movf	_pwm+1,w
  4982  073E  01AD               	clrf	Fuzzy@setpoint+1
  4983  073F  07AD               	addwf	Fuzzy@setpoint+1,f
  4984  0740  0847               	movf	_pwm,w
  4985  0741  01AC               	clrf	Fuzzy@setpoint
  4986  0742  07AC               	addwf	Fuzzy@setpoint,f
  4987  0743  120A  118A  2044  120A  118A  	fcall	_Fuzzy
  4988                           
  4989                           ;main.c: 415: PIR1bits.RCIF = 0;
  4990  0748  1283               	bcf	3,5	;RP0=0, select bank0
  4991  0749  1303               	bcf	3,6	;RP1=0, select bank0
  4992  074A  128C               	bcf	12,5	;volatile
  4993  074B                     i1l2793:	
  4994                           
  4995                           ;main.c: 416: }
  4996                           ;main.c: 419: if (PIR1bits.ADIF)
  4997  074B  1B0C               	btfsc	12,6	;volatile
  4998                           
  4999                           ;main.c: 420: {
  5000                           ;main.c: 424: PIR1bits.ADIF = 0;
  5001  074C  130C               	bcf	12,6	;volatile
  5002                           
  5003                           ;main.c: 425: }
  5004                           ;main.c: 429: if (INTCONbits.T0IF)
  5005  074D  1D0B               	btfss	11,2	;volatile
  5006  074E  2FA2               	goto	i1l2819
  5007                           
  5008                           ;main.c: 430: {
  5009                           ;main.c: 432: TIMER0_Set(238);
  5010  074F  30EE               	movlw	238
  5011  0750  120A  158A  20BB  120A  118A  	fcall	i1_TIMER0_Set
  5012                           
  5013                           ;main.c: 435: if (contagens_tm0 < 499)
  5014  0755  3001               	movlw	1
  5015  0756  1683               	bsf	3,5	;RP0=1, select bank1
  5016  0757  1303               	bcf	3,6	;RP1=0, select bank1
  5017  0758  0225               	subwf	(_contagens_tm0+1)^(0+128),w
  5018  0759  30F3               	movlw	243
  5019  075A  1903               	skipnz
  5020  075B  0224               	subwf	_contagens_tm0^(0+128),w
  5021  075C  1803               	skipnc
  5022  075D  2F68               	goto	i1l2805
  5023                           
  5024                           ;main.c: 436: {
  5025                           ;main.c: 438: contagens_tm0++;
  5026  075E  3001               	movlw	1
  5027  075F  07A4               	addwf	_contagens_tm0^(0+128),f
  5028  0760  1803               	skipnc
  5029  0761  0AA5               	incf	(_contagens_tm0+1)^(0+128),f
  5030  0762  3000               	movlw	0
  5031  0763  07A5               	addwf	(_contagens_tm0+1)^(0+128),f
  5032                           
  5033                           ;main.c: 441: PORTBbits.RB6 = 1;
  5034  0764  1283               	bcf	3,5	;RP0=0, select bank0
  5035  0765  1303               	bcf	3,6	;RP1=0, select bank0
  5036  0766  1706               	bsf	6,6	;volatile
  5037                           
  5038                           ;main.c: 442: }
  5039  0767  2FA1               	goto	i1l2817
  5040  0768                     i1l2805:	
  5041                           
  5042                           ;main.c: 443: else
  5043                           ;main.c: 444: {
  5044                           ;main.c: 446: contagens_tm0 = 0;
  5045  0768  1683               	bsf	3,5	;RP0=1, select bank1
  5046  0769  1303               	bcf	3,6	;RP1=0, select bank1
  5047  076A  01A4               	clrf	_contagens_tm0^(0+128)
  5048  076B  01A5               	clrf	(_contagens_tm0+1)^(0+128)
  5049                           
  5050                           ;main.c: 449: pulsos = (TMR1H << 8) + TMR1L;
  5051  076C  1283               	bcf	3,5	;RP0=0, select bank0
  5052  076D  1303               	bcf	3,6	;RP1=0, select bank0
  5053  076E  080F               	movf	15,w	;volatile
  5054  076F  01C6               	clrf	_pulsos+1
  5055  0770  07C6               	addwf	_pulsos+1,f
  5056  0771  080E               	movf	14,w	;volatile
  5057  0772  01C5               	clrf	_pulsos
  5058  0773  07C5               	addwf	_pulsos,f
  5059                           
  5060                           ;main.c: 450: rpm = ((pulsos / pas_cooler) * 120);
  5061  0774  0858               	movf	_pas_cooler+1,w
  5062  0775  01F1               	clrf	i1___lwdiv@divisor+1
  5063  0776  07F1               	addwf	i1___lwdiv@divisor+1,f
  5064  0777  0857               	movf	_pas_cooler,w
  5065  0778  01F0               	clrf	i1___lwdiv@divisor
  5066  0779  07F0               	addwf	i1___lwdiv@divisor,f
  5067  077A  0846               	movf	_pulsos+1,w
  5068  077B  01F3               	clrf	i1___lwdiv@dividend+1
  5069  077C  07F3               	addwf	i1___lwdiv@dividend+1,f
  5070  077D  0845               	movf	_pulsos,w
  5071  077E  01F2               	clrf	i1___lwdiv@dividend
  5072  077F  07F2               	addwf	i1___lwdiv@dividend,f
  5073  0780  120A  158A  22C6  120A  118A  	fcall	i1___lwdiv
  5074  0785  0871               	movf	?i1___lwdiv+1,w
  5075  0786  01F9               	clrf	i1___wmul@multiplier+1
  5076  0787  07F9               	addwf	i1___wmul@multiplier+1,f
  5077  0788  0870               	movf	?i1___lwdiv,w
  5078  0789  01F8               	clrf	i1___wmul@multiplier
  5079  078A  07F8               	addwf	i1___wmul@multiplier,f
  5080  078B  3078               	movlw	120
  5081  078C  00FA               	movwf	i1___wmul@multiplicand
  5082  078D  3000               	movlw	0
  5083  078E  00FB               	movwf	i1___wmul@multiplicand+1
  5084  078F  120A  158A  21C4  120A  118A  	fcall	i1___wmul
  5085  0794  0879               	movf	?i1___wmul+1,w
  5086  0795  1683               	bsf	3,5	;RP0=1, select bank1
  5087  0796  1303               	bcf	3,6	;RP1=0, select bank1
  5088  0797  01B7               	clrf	(_rpm+1)^(0+128)
  5089  0798  07B7               	addwf	(_rpm+1)^(0+128),f
  5090  0799  0878               	movf	?i1___wmul,w
  5091  079A  01B6               	clrf	_rpm^(0+128)
  5092  079B  07B6               	addwf	_rpm^(0+128),f
  5093                           
  5094                           ;main.c: 453: TMR1L = 0x00;
  5095  079C  1283               	bcf	3,5	;RP0=0, select bank0
  5096  079D  1303               	bcf	3,6	;RP1=0, select bank0
  5097  079E  018E               	clrf	14	;volatile
  5098                           
  5099                           ;main.c: 454: TMR1H = 0x00;
  5100  079F  018F               	clrf	15	;volatile
  5101                           
  5102                           ;main.c: 457: PORTBbits.RB6 = 0;
  5103  07A0  1306               	bcf	6,6	;volatile
  5104  07A1                     i1l2817:	
  5105                           
  5106                           ;main.c: 458: }
  5107                           ;main.c: 461: INTCONbits.T0IF = 0;
  5108  07A1  110B               	bcf	11,2	;volatile
  5109  07A2                     i1l2819:	
  5110                           
  5111                           ;main.c: 462: }
  5112                           ;main.c: 465: if (PIR1bits.TMR1IF)
  5113  07A2  180C               	btfsc	12,0	;volatile
  5114                           
  5115                           ;main.c: 466: {
  5116                           ;main.c: 470: PIR1bits.TMR1IF = 0;
  5117  07A3  100C               	bcf	12,0	;volatile
  5118                           
  5119                           ;main.c: 471: }
  5120                           ;main.c: 474: if (PIR1bits.SSPIF)
  5121  07A4  198C               	btfsc	12,3	;volatile
  5122                           
  5123                           ;main.c: 475: {
  5124                           ;main.c: 479: PIR1bits.SSPIF = 0;
  5125  07A5  118C               	bcf	12,3	;volatile
  5126  07A6  0836               	movf	??_ISR+3,w
  5127  07A7  00FF               	movwf	127
  5128  07A8  0835               	movf	??_ISR+2,w
  5129  07A9  008A               	movwf	10
  5130  07AA  0834               	movf	??_ISR+1,w
  5131  07AB  0084               	movwf	4
  5132  07AC  0E33               	swapf	??_ISR^0,w
  5133  07AD  0083               	movwf	3
  5134  07AE  0EFE               	swapf	126,f
  5135  07AF  0E7E               	swapf	126,w
  5136  07B0  0009               	retfie
  5137  07B1                     __end_of_ISR:	
  5138                           
  5139                           	psect	intentry
  5140  0004                     __pintentry:	
  5141                           ;incstack = 0
  5142                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5143                           
  5144  0004                     interrupt_function:	
  5145  007E                     saved_w	set	btemp
  5146  0004  00FE               	movwf	btemp
  5147  0005  0E03               	swapf	3,w
  5148  0006  1283               	bcf	3,5	;RP0=0, select bank0
  5149  0007  1303               	bcf	3,6	;RP1=0, select bank0
  5150  0008  00B3               	movwf	??_ISR
  5151  0009  0804               	movf	4,w
  5152  000A  00B4               	movwf	??_ISR+1
  5153  000B  080A               	movf	10,w
  5154  000C  00B5               	movwf	??_ISR+2
  5155  000D  087F               	movf	btemp+1,w
  5156  000E  00B6               	movwf	??_ISR+3
  5157  000F  120A  118A  2E3A   	ljmp	_ISR
  5158                           
  5159                           	psect	text23
  5160  08BB                     __ptext23:	
  5161 ;; *************** function i1_TIMER0_Set *****************
  5162 ;; Defined at:
  5163 ;;		line 20 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\timers.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;  contagens       1    wreg     unsigned char 
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;  contagens       1    0[COMMON] unsigned char 
  5168 ;; Return value:  Size  Location     Type
  5169 ;;		None               void
  5170 ;; Registers used:
  5171 ;;		wreg
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5177 ;;      Params:         0       0       0       0       0
  5178 ;;      Locals:         1       0       0       0       0
  5179 ;;      Temps:          0       0       0       0       0
  5180 ;;      Totals:         1       0       0       0       0
  5181 ;;Total ram usage:        1 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; This function calls:
  5184 ;;		Nothing
  5185 ;; This function is called by:
  5186 ;;		_ISR
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           
  5191                           ;psect for function i1_TIMER0_Set
  5192  08BB                     i1_TIMER0_Set:	
  5193                           
  5194                           ;incstack = 0
  5195                           ; Regs used in i1_TIMER0_Set: [wreg]
  5196                           ;i1TIMER0_Set@contagens stored from wreg
  5197  08BB  00F0               	movwf	i1TIMER0_Set@contagens
  5198                           
  5199                           ;timers.c: 22: TMR0 = contagens;
  5200  08BC  0870               	movf	i1TIMER0_Set@contagens,w
  5201  08BD  1283               	bcf	3,5	;RP0=0, select bank0
  5202  08BE  1303               	bcf	3,6	;RP1=0, select bank0
  5203  08BF  0081               	movwf	1	;volatile
  5204  08C0  0008               	return
  5205  08C1                     __end_ofi1_TIMER0_Set:	
  5206                           
  5207                           	psect	text24
  5208  0973                     __ptext24:	
  5209 ;; *************** function _USART_ReceiveChar *****************
  5210 ;; Defined at:
  5211 ;;		line 63 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;		None
  5214 ;; Auto vars:     Size  Location     Type
  5215 ;;  byte            1    4[COMMON] unsigned char 
  5216 ;; Return value:  Size  Location     Type
  5217 ;;                  1    wreg      unsigned char 
  5218 ;; Registers used:
  5219 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5220 ;; Tracked objects:
  5221 ;;		On entry : 0/0
  5222 ;;		On exit  : 0/0
  5223 ;;		Unchanged: 0/0
  5224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5225 ;;      Params:         0       0       0       0       0
  5226 ;;      Locals:         1       0       0       0       0
  5227 ;;      Temps:          1       0       0       0       0
  5228 ;;      Totals:         2       0       0       0       0
  5229 ;;Total ram usage:        2 bytes
  5230 ;; Hardware stack levels used:    1
  5231 ;; Hardware stack levels required when called:    2
  5232 ;; This function calls:
  5233 ;;		i1_USART_WriteString
  5234 ;; This function is called by:
  5235 ;;		_ISR
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           
  5240                           ;psect for function _USART_ReceiveChar
  5241  0973                     _USART_ReceiveChar:	
  5242                           
  5243                           ;usart.c: 65: unsigned char byte;
  5244                           ;usart.c: 67: if (!OERR)
  5245                           
  5246                           ;incstack = 0
  5247                           ; Regs used in _USART_ReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5248  0973  1283               	bcf	3,5	;RP0=0, select bank0
  5249  0974  1303               	bcf	3,6	;RP1=0, select bank0
  5250  0975  1898               	btfsc	24,1	;volatile
  5251  0976  297C               	goto	i1l2449
  5252                           
  5253                           ;usart.c: 68: {
  5254                           ;usart.c: 69: byte = RCREG;
  5255  0977  081A               	movf	26,w	;volatile
  5256  0978  00F3               	movwf	??_USART_ReceiveChar
  5257  0979  0873               	movf	??_USART_ReceiveChar,w
  5258  097A  00F4               	movwf	USART_ReceiveChar@byte
  5259  097B  298B               	goto	i1l2457
  5260  097C                     i1l2449:	
  5261                           ;usart.c: 71: }
  5262                           
  5263                           ;usart.c: 70: PIR1bits.RCIF = 0;
  5264                           
  5265                           
  5266                           ;usart.c: 72: else
  5267                           ;usart.c: 73: {
  5268                           ;usart.c: 74: USART_WriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  5269  097C  301C               	movlw	low (STR_19| (0+32768))
  5270  097D  00F1               	movwf	i1USART_WriteString@str
  5271  097E  3090               	movlw	high (STR_19| (0+32768))
  5272  097F  00F2               	movwf	i1USART_WriteString@str+1
  5273  0980  120A  158A  21E7   	fcall	i1_USART_WriteString
  5274                           
  5275                           ;usart.c: 76: RCSTAbits.CREN = 0;
  5276  0983  1283               	bcf	3,5	;RP0=0, select bank0
  5277  0984  1303               	bcf	3,6	;RP1=0, select bank0
  5278  0985  1218               	bcf	24,4	;volatile
  5279                           
  5280                           ;usart.c: 77: byte = RCREG;
  5281  0986  081A               	movf	26,w	;volatile
  5282  0987  00F3               	movwf	??_USART_ReceiveChar
  5283  0988  0873               	movf	??_USART_ReceiveChar,w
  5284  0989  00F4               	movwf	USART_ReceiveChar@byte
  5285                           
  5286                           ;usart.c: 78: RCSTAbits.CREN = 1;
  5287  098A  1618               	bsf	24,4	;volatile
  5288  098B                     i1l2457:	
  5289                           
  5290                           ;usart.c: 79: PIR1bits.RCIF = 0;
  5291  098B  128C               	bcf	12,5	;volatile
  5292                           
  5293                           ;usart.c: 80: }
  5294                           ;usart.c: 82: return(byte);
  5295  098C  0874               	movf	USART_ReceiveChar@byte,w
  5296  098D  0008               	return
  5297  098E                     __end_of_USART_ReceiveChar:	
  5298                           
  5299                           	psect	text25
  5300  09E7                     __ptext25:	
  5301 ;; *************** function i1_USART_WriteString *****************
  5302 ;; Defined at:
  5303 ;;		line 52 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  str             2    1[COMMON] PTR const unsigned char 
  5306 ;;		 -> STR_19(40), STR_16(3), display_rpm(10), STR_12(20), 
  5307 ;;		 -> STR_11(29), STR_10(15), STR_9(15), STR_8(14), 
  5308 ;;		 -> STR_7(14), STR_6(14), STR_5(14), STR_4(14), 
  5309 ;;		 -> STR_3(13), STR_2(13), STR_1(14), 
  5310 ;; Auto vars:     Size  Location     Type
  5311 ;;		None
  5312 ;; Return value:  Size  Location     Type
  5313 ;;		None               void
  5314 ;; Registers used:
  5315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5316 ;; Tracked objects:
  5317 ;;		On entry : 0/0
  5318 ;;		On exit  : 0/0
  5319 ;;		Unchanged: 0/0
  5320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5321 ;;      Params:         2       0       0       0       0
  5322 ;;      Locals:         0       0       0       0       0
  5323 ;;      Temps:          0       0       0       0       0
  5324 ;;      Totals:         2       0       0       0       0
  5325 ;;Total ram usage:        2 bytes
  5326 ;; Hardware stack levels used:    1
  5327 ;; Hardware stack levels required when called:    1
  5328 ;; This function calls:
  5329 ;;		i1_USART_WriteChar
  5330 ;; This function is called by:
  5331 ;;		_ISR
  5332 ;;		_USART_ReceiveChar
  5333 ;; This function uses a non-reentrant model
  5334 ;;
  5335                           
  5336                           
  5337                           ;psect for function i1_USART_WriteString
  5338  09E7                     i1_USART_WriteString:	
  5339  09E7                     i1l2311:	
  5340                           ;usart.c: 54: while(*str != '\0')
  5341                           
  5342                           ;incstack = 0
  5343                           ; Regs used in i1_USART_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  5344                           
  5345  09E7  0872               	movf	i1USART_WriteString@str+1,w
  5346  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  5347  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  5348  09EA  00FF               	movwf	127
  5349  09EB  0871               	movf	i1USART_WriteString@str,w
  5350  09EC  0084               	movwf	4
  5351  09ED  160A  118A  2000  120A  158A  	fcall	stringtab
  5352  09F2  3800               	iorlw	0
  5353  09F3  1903               	btfsc	3,2
  5354  09F4  0008               	return
  5355                           
  5356                           ;usart.c: 55: {
  5357                           ;usart.c: 56: USART_WriteChar(*str);
  5358  09F5  0872               	movf	i1USART_WriteString@str+1,w
  5359  09F6  1283               	bcf	3,5	;RP0=0, select bank0
  5360  09F7  1303               	bcf	3,6	;RP1=0, select bank0
  5361  09F8  00FF               	movwf	127
  5362  09F9  0871               	movf	i1USART_WriteString@str,w
  5363  09FA  0084               	movwf	4
  5364  09FB  160A  118A  2000  120A  158A  	fcall	stringtab
  5365  0A00  120A  158A  20C7  120A  158A  	fcall	i1_USART_WriteChar
  5366                           
  5367                           ;usart.c: 57: str++;
  5368  0A05  3001               	movlw	1
  5369  0A06  07F1               	addwf	i1USART_WriteString@str,f
  5370  0A07  1803               	skipnc
  5371  0A08  0AF2               	incf	i1USART_WriteString@str+1,f
  5372  0A09  29E7               	goto	i1l2311
  5373  0A0A                     __end_ofi1_USART_WriteString:	
  5374                           
  5375                           	psect	text26
  5376  08C7                     __ptext26:	
  5377 ;; *************** function i1_USART_WriteChar *****************
  5378 ;; Defined at:
  5379 ;;		line 44 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;  byte            1    wreg     unsigned char 
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  byte            1    0[COMMON] unsigned char 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;		None               void
  5386 ;; Registers used:
  5387 ;;		wreg
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5393 ;;      Params:         0       0       0       0       0
  5394 ;;      Locals:         1       0       0       0       0
  5395 ;;      Temps:          0       0       0       0       0
  5396 ;;      Totals:         1       0       0       0       0
  5397 ;;Total ram usage:        1 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; This function calls:
  5400 ;;		Nothing
  5401 ;; This function is called by:
  5402 ;;		i1_USART_WriteString
  5403 ;; This function uses a non-reentrant model
  5404 ;;
  5405                           
  5406                           
  5407                           ;psect for function i1_USART_WriteChar
  5408  08C7                     i1_USART_WriteChar:	
  5409                           
  5410                           ;incstack = 0
  5411                           ; Regs used in i1_USART_WriteChar: [wreg]
  5412                           ;i1USART_WriteChar@byte stored from wreg
  5413  08C7  00F0               	movwf	i1USART_WriteChar@byte
  5414  08C8                     i1l236:	
  5415                           ;usart.c: 46: while(!PIR1bits.TXIF);
  5416                           
  5417  08C8  1283               	bcf	3,5	;RP0=0, select bank0
  5418  08C9  1303               	bcf	3,6	;RP1=0, select bank0
  5419  08CA  1E0C               	btfss	12,4	;volatile
  5420  08CB  28C8               	goto	i1l236
  5421                           
  5422                           ;usart.c: 47: TXREG = byte;
  5423  08CC  0870               	movf	i1USART_WriteChar@byte,w
  5424  08CD  0099               	movwf	25	;volatile
  5425  08CE  0008               	return
  5426  08CF                     __end_ofi1_USART_WriteChar:	
  5427                           
  5428                           	psect	text27
  5429  0044                     __ptext27:	
  5430 ;; *************** function _Fuzzy *****************
  5431 ;; Defined at:
  5432 ;;		line 136 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  setpoint        2   12[BANK0 ] unsigned int 
  5435 ;; Auto vars:     Size  Location     Type
  5436 ;;  sum             2   17[BANK0 ] unsigned int 
  5437 ;;  velocidade      1   16[BANK0 ] unsigned char [1]
  5438 ;; Return value:  Size  Location     Type
  5439 ;;		None               void
  5440 ;; Registers used:
  5441 ;;		wreg, status,2, status,0, pclath, cstack
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5447 ;;      Params:         0       2       0       0       0
  5448 ;;      Locals:         0       3       0       0       0
  5449 ;;      Temps:          0       2       0       0       0
  5450 ;;      Totals:         0       7       0       0       0
  5451 ;;Total ram usage:        7 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:    2
  5454 ;; This function calls:
  5455 ;;		___ftge
  5456 ;;		___lwtoft
  5457 ;;		_max_val
  5458 ;;		_trapmf
  5459 ;;		_trimf
  5460 ;;		i1_PWM_DutyCycle2
  5461 ;;		i1___lwdiv
  5462 ;;		i1___wmul
  5463 ;; This function is called by:
  5464 ;;		_ISR
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           
  5469                           ;psect for function _Fuzzy
  5470  0044                     _Fuzzy:	
  5471                           
  5472                           ;main.c: 147: fitemp =0;
  5473                           
  5474                           ;incstack = 0
  5475                           ; Regs used in _Fuzzy: [wreg+status,2+status,0+pclath+cstack]
  5476  0044  1283               	bcf	3,5	;RP0=0, select bank0
  5477  0045  1303               	bcf	3,6	;RP1=0, select bank0
  5478  0046  01C1               	clrf	_fitemp
  5479  0047  01C2               	clrf	_fitemp+1
  5480                           
  5481                           ;main.c: 150: temp = (setpoint - pwmAnt);
  5482  0048  0949               	comf	_pwmAnt,w
  5483  0049  00AE               	movwf	??_Fuzzy
  5484  004A  094A               	comf	_pwmAnt+1,w
  5485  004B  00AF               	movwf	??_Fuzzy+1
  5486  004C  0AAE               	incf	??_Fuzzy,f
  5487  004D  1903               	skipnz
  5488  004E  0AAF               	incf	??_Fuzzy+1,f
  5489  004F  082C               	movf	Fuzzy@setpoint,w
  5490  0050  072E               	addwf	??_Fuzzy,w
  5491  0051  00CB               	movwf	_temp
  5492  0052  082D               	movf	Fuzzy@setpoint+1,w
  5493  0053  1803               	skipnc
  5494  0054  0A2D               	incf	Fuzzy@setpoint+1,w
  5495  0055  072F               	addwf	??_Fuzzy+1,w
  5496  0056  00CC               	movwf	_temp+1
  5497                           
  5498                           ;main.c: 152: if(PORTBbits.RB2 == 0)
  5499  0057  1906               	btfsc	6,2	;volatile
  5500  0058  285B               	goto	i1l163
  5501                           
  5502                           ;main.c: 153: {
  5503                           ;main.c: 154: PORTBbits.RB2 = 1;
  5504  0059  1506               	bsf	6,2	;volatile
  5505                           
  5506                           ;main.c: 155: }else{
  5507  005A  285C               	goto	i1l2337
  5508  005B                     i1l163:	
  5509                           
  5510                           ;main.c: 156: PORTBbits.RB2 = 0;
  5511  005B  1106               	bcf	6,2	;volatile
  5512  005C                     i1l2337:	
  5513                           
  5514                           ;main.c: 157: }
  5515                           ;main.c: 159: deltaV = (setpoint - pwmAnt);
  5516  005C  0949               	comf	_pwmAnt,w
  5517  005D  00AE               	movwf	??_Fuzzy
  5518  005E  094A               	comf	_pwmAnt+1,w
  5519  005F  00AF               	movwf	??_Fuzzy+1
  5520  0060  0AAE               	incf	??_Fuzzy,f
  5521  0061  1903               	skipnz
  5522  0062  0AAF               	incf	??_Fuzzy+1,f
  5523  0063  082C               	movf	Fuzzy@setpoint,w
  5524  0064  072E               	addwf	??_Fuzzy,w
  5525  0065  1683               	bsf	3,5	;RP0=1, select bank1
  5526  0066  1303               	bcf	3,6	;RP1=0, select bank1
  5527  0067  00A6               	movwf	_deltaV^(0+128)
  5528  0068  1283               	bcf	3,5	;RP0=0, select bank0
  5529  0069  1303               	bcf	3,6	;RP1=0, select bank0
  5530  006A  082D               	movf	Fuzzy@setpoint+1,w
  5531  006B  1803               	skipnc
  5532  006C  0A2D               	incf	Fuzzy@setpoint+1,w
  5533  006D  072F               	addwf	??_Fuzzy+1,w
  5534  006E  1683               	bsf	3,5	;RP0=1, select bank1
  5535  006F  1303               	bcf	3,6	;RP1=0, select bank1
  5536  0070  00A7               	movwf	(_deltaV+1)^(0+128)
  5537                           
  5538                           ;main.c: 162: if (temp >10) temp = 10;
  5539  0071  3000               	movlw	0
  5540  0072  1283               	bcf	3,5	;RP0=0, select bank0
  5541  0073  1303               	bcf	3,6	;RP1=0, select bank0
  5542  0074  024C               	subwf	_temp+1,w
  5543  0075  300B               	movlw	11
  5544  0076  1903               	skipnz
  5545  0077  024B               	subwf	_temp,w
  5546  0078  1C03               	skipc
  5547  0079  287E               	goto	i1l2345
  5548  007A  300A               	movlw	10
  5549  007B  00CB               	movwf	_temp
  5550  007C  3000               	movlw	0
  5551  007D  00CC               	movwf	_temp+1
  5552  007E                     i1l2345:	
  5553                           ;main.c: 163: if (temp <0) temp = 0;
  5554                           
  5555                           
  5556                           ;main.c: 166: if (temp < 2.5)
  5557  007E  084C               	movf	_temp+1,w
  5558  007F  01F9               	clrf	___lwtoft@c+1
  5559  0080  07F9               	addwf	___lwtoft@c+1,f
  5560  0081  084B               	movf	_temp,w
  5561  0082  01F8               	clrf	___lwtoft@c
  5562  0083  07F8               	addwf	___lwtoft@c,f
  5563  0084  120A  158A  212E  120A  118A  	fcall	___lwtoft
  5564  0089  0878               	movf	?___lwtoft,w
  5565  008A  1283               	bcf	3,5	;RP0=0, select bank0
  5566  008B  1303               	bcf	3,6	;RP1=0, select bank0
  5567  008C  00A0               	movwf	___ftge@ff1
  5568  008D  0879               	movf	?___lwtoft+1,w
  5569  008E  00A1               	movwf	___ftge@ff1+1
  5570  008F  087A               	movf	?___lwtoft+2,w
  5571  0090  00A2               	movwf	___ftge@ff1+2
  5572  0091  3000               	movlw	0
  5573  0092  00A3               	movwf	___ftge@ff2
  5574  0093  3020               	movlw	32
  5575  0094  00A4               	movwf	___ftge@ff2+1
  5576  0095  3040               	movlw	64
  5577  0096  00A5               	movwf	___ftge@ff2+2
  5578  0097  120A  158A  239D  120A  118A  	fcall	___ftge
  5579  009C  1803               	btfsc	3,0
  5580  009D  291F               	goto	i1l2359
  5581                           
  5582                           ;main.c: 167: {
  5583                           ;main.c: 169: fitemp = trapmf(temp,-1,0,1.5,3);
  5584  009E  1283               	bcf	3,5	;RP0=0, select bank0
  5585  009F  1303               	bcf	3,6	;RP1=0, select bank0
  5586  00A0  084C               	movf	_temp+1,w
  5587  00A1  01A1               	clrf	trapmf@x+1
  5588  00A2  07A1               	addwf	trapmf@x+1,f
  5589  00A3  084B               	movf	_temp,w
  5590  00A4  01A0               	clrf	trapmf@x
  5591  00A5  07A0               	addwf	trapmf@x,f
  5592  00A6  30FF               	movlw	255
  5593  00A7  00A2               	movwf	trapmf@a
  5594  00A8  30FF               	movlw	255
  5595  00A9  00A3               	movwf	trapmf@a+1
  5596  00AA  3000               	movlw	0
  5597  00AB  00A4               	movwf	trapmf@b
  5598  00AC  3000               	movlw	0
  5599  00AD  00A5               	movwf	trapmf@b+1
  5600  00AE  3001               	movlw	1
  5601  00AF  00A6               	movwf	trapmf@c
  5602  00B0  3000               	movlw	0
  5603  00B1  00A7               	movwf	trapmf@c+1
  5604  00B2  3003               	movlw	3
  5605  00B3  00A8               	movwf	trapmf@d
  5606  00B4  3000               	movlw	0
  5607  00B5  00A9               	movwf	trapmf@d+1
  5608  00B6  120A  158A  2551  120A  118A  	fcall	_trapmf
  5609  00BB  1283               	bcf	3,5	;RP0=0, select bank0
  5610  00BC  1303               	bcf	3,6	;RP1=0, select bank0
  5611  00BD  0821               	movf	?_trapmf+1,w
  5612  00BE  01C2               	clrf	_fitemp+1
  5613  00BF  07C2               	addwf	_fitemp+1,f
  5614  00C0  0820               	movf	?_trapmf,w
  5615  00C1  01C1               	clrf	_fitemp
  5616  00C2  07C1               	addwf	_fitemp,f
  5617                           
  5618                           ;main.c: 172: fop_rule1 = max_val(fitemp,0.1);
  5619  00C3  0842               	movf	_fitemp+1,w
  5620  00C4  01F1               	clrf	max_val@a+1
  5621  00C5  07F1               	addwf	max_val@a+1,f
  5622  00C6  0841               	movf	_fitemp,w
  5623  00C7  01F0               	clrf	max_val@a
  5624  00C8  07F0               	addwf	max_val@a,f
  5625  00C9  3000               	movlw	0
  5626  00CA  00F2               	movwf	max_val@b
  5627  00CB  3000               	movlw	0
  5628  00CC  00F3               	movwf	max_val@b+1
  5629  00CD  120A  158A  20DF  120A  118A  	fcall	_max_val
  5630  00D2  0871               	movf	?_max_val+1,w
  5631  00D3  1283               	bcf	3,5	;RP0=0, select bank0
  5632  00D4  1303               	bcf	3,6	;RP1=0, select bank0
  5633  00D5  01C4               	clrf	_fop_rule1+1
  5634  00D6  07C4               	addwf	_fop_rule1+1,f
  5635  00D7  0870               	movf	?_max_val,w
  5636  00D8  01C3               	clrf	_fop_rule1
  5637  00D9  07C3               	addwf	_fop_rule1,f
  5638                           
  5639                           ;main.c: 175: x=0;
  5640  00DA  01D1               	clrf	_x
  5641  00DB  01D2               	clrf	_x+1
  5642                           
  5643                           ;main.c: 176: y=0;
  5644  00DC  01D3               	clrf	_y
  5645  00DD  01D4               	clrf	_y+1
  5646                           
  5647                           ;main.c: 178: y = trapmf(x,-1,0,1.5,3);
  5648  00DE  0852               	movf	_x+1,w
  5649  00DF  01A1               	clrf	trapmf@x+1
  5650  00E0  07A1               	addwf	trapmf@x+1,f
  5651  00E1  0851               	movf	_x,w
  5652  00E2  01A0               	clrf	trapmf@x
  5653  00E3  07A0               	addwf	trapmf@x,f
  5654  00E4  30FF               	movlw	255
  5655  00E5  00A2               	movwf	trapmf@a
  5656  00E6  30FF               	movlw	255
  5657  00E7  00A3               	movwf	trapmf@a+1
  5658  00E8  3000               	movlw	0
  5659  00E9  00A4               	movwf	trapmf@b
  5660  00EA  3000               	movlw	0
  5661  00EB  00A5               	movwf	trapmf@b+1
  5662  00EC  3001               	movlw	1
  5663  00ED  00A6               	movwf	trapmf@c
  5664  00EE  3000               	movlw	0
  5665  00EF  00A7               	movwf	trapmf@c+1
  5666  00F0  3003               	movlw	3
  5667  00F1  00A8               	movwf	trapmf@d
  5668  00F2  3000               	movlw	0
  5669  00F3  00A9               	movwf	trapmf@d+1
  5670  00F4  120A  158A  2551  120A  118A  	fcall	_trapmf
  5671  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  5672  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  5673  00FB  0821               	movf	?_trapmf+1,w
  5674  00FC  01D4               	clrf	_y+1
  5675  00FD  07D4               	addwf	_y+1,f
  5676  00FE  0820               	movf	?_trapmf,w
  5677  00FF  01D3               	clrf	_y
  5678  0100  07D3               	addwf	_y,f
  5679                           
  5680                           ;main.c: 180: if (y > fop_rule1)
  5681  0101  0854               	movf	_y+1,w
  5682  0102  0244               	subwf	_fop_rule1+1,w
  5683  0103  1D03               	skipz
  5684  0104  2907               	goto	u230_25
  5685  0105  0853               	movf	_y,w
  5686  0106  0243               	subwf	_fop_rule1,w
  5687  0107                     u230_25:	
  5688  0107  1803               	skipnc
  5689  0108  2912               	goto	i1l2357
  5690                           
  5691                           ;main.c: 181: {
  5692                           ;main.c: 182: ideal = fop_rule1;
  5693  0109  0844               	movf	_fop_rule1+1,w
  5694  010A  1683               	bsf	3,5	;RP0=1, select bank1
  5695  010B  1303               	bcf	3,6	;RP1=0, select bank1
  5696  010C  01AF               	clrf	(_ideal+1)^(0+128)
  5697  010D  07AF               	addwf	(_ideal+1)^(0+128),f
  5698  010E  1283               	bcf	3,5	;RP0=0, select bank0
  5699  010F  1303               	bcf	3,6	;RP1=0, select bank0
  5700  0110  0843               	movf	_fop_rule1,w
  5701  0111  291B               	goto	L3
  5702  0112                     i1l2357:	
  5703                           ;main.c: 183: }
  5704                           
  5705                           
  5706                           ;main.c: 184: else
  5707                           ;main.c: 185: {
  5708                           ;main.c: 186: ideal = y;
  5709  0112  1283               	bcf	3,5	;RP0=0, select bank0
  5710  0113  0854               	movf	_y+1,w
  5711  0114  1683               	bsf	3,5	;RP0=1, select bank1
  5712  0115  1303               	bcf	3,6	;RP1=0, select bank1
  5713  0116  01AF               	clrf	(_ideal+1)^(0+128)
  5714  0117  07AF               	addwf	(_ideal+1)^(0+128),f
  5715  0118  1283               	bcf	3,5	;RP0=0, select bank0
  5716  0119  1303               	bcf	3,6	;RP1=0, select bank0
  5717  011A  0853               	movf	_y,w
  5718  011B                     L3:	
  5719  011B  1683               	bsf	3,5	;RP0=1, select bank1
  5720  011C  1303               	bcf	3,6	;RP1=0, select bank1
  5721  011D  01AE               	clrf	_ideal^(0+128)
  5722  011E  07AE               	addwf	_ideal^(0+128),f
  5723  011F                     i1l2359:	
  5724                           
  5725                           ;main.c: 187: }
  5726                           ;main.c: 189: }
  5727                           ;main.c: 193: if ((temp > 2) && (temp < 7))
  5728  011F  3000               	movlw	0
  5729  0120  1283               	bcf	3,5	;RP0=0, select bank0
  5730  0121  1303               	bcf	3,6	;RP1=0, select bank0
  5731  0122  024C               	subwf	_temp+1,w
  5732  0123  3003               	movlw	3
  5733  0124  1903               	skipnz
  5734  0125  024B               	subwf	_temp,w
  5735  0126  1C03               	skipc
  5736  0127  29A6               	goto	i1l2375
  5737  0128  3000               	movlw	0
  5738  0129  024C               	subwf	_temp+1,w
  5739  012A  3007               	movlw	7
  5740  012B  1903               	skipnz
  5741  012C  024B               	subwf	_temp,w
  5742  012D  1803               	skipnc
  5743  012E  29A6               	goto	i1l2375
  5744                           
  5745                           ;main.c: 194: {
  5746                           ;main.c: 196: fitemp = trimf(temp,2,5,8);
  5747  012F  084C               	movf	_temp+1,w
  5748  0130  01A1               	clrf	trimf@x+1
  5749  0131  07A1               	addwf	trimf@x+1,f
  5750  0132  084B               	movf	_temp,w
  5751  0133  01A0               	clrf	trimf@x
  5752  0134  07A0               	addwf	trimf@x,f
  5753  0135  3002               	movlw	2
  5754  0136  00A2               	movwf	trimf@a
  5755  0137  3000               	movlw	0
  5756  0138  00A3               	movwf	trimf@a+1
  5757  0139  3005               	movlw	5
  5758  013A  00A4               	movwf	trimf@b
  5759  013B  3000               	movlw	0
  5760  013C  00A5               	movwf	trimf@b+1
  5761  013D  3008               	movlw	8
  5762  013E  00A6               	movwf	trimf@c
  5763  013F  3000               	movlw	0
  5764  0140  00A7               	movwf	trimf@c+1
  5765  0141  120A  158A  24D1  120A  118A  	fcall	_trimf
  5766  0146  1283               	bcf	3,5	;RP0=0, select bank0
  5767  0147  1303               	bcf	3,6	;RP1=0, select bank0
  5768  0148  0821               	movf	?_trimf+1,w
  5769  0149  01C2               	clrf	_fitemp+1
  5770  014A  07C2               	addwf	_fitemp+1,f
  5771  014B  0820               	movf	?_trimf,w
  5772  014C  01C1               	clrf	_fitemp
  5773  014D  07C1               	addwf	_fitemp,f
  5774                           
  5775                           ;main.c: 199: fop_rule1 = max_val(fitemp,0.1);
  5776  014E  0842               	movf	_fitemp+1,w
  5777  014F  01F1               	clrf	max_val@a+1
  5778  0150  07F1               	addwf	max_val@a+1,f
  5779  0151  0841               	movf	_fitemp,w
  5780  0152  01F0               	clrf	max_val@a
  5781  0153  07F0               	addwf	max_val@a,f
  5782  0154  3000               	movlw	0
  5783  0155  00F2               	movwf	max_val@b
  5784  0156  3000               	movlw	0
  5785  0157  00F3               	movwf	max_val@b+1
  5786  0158  120A  158A  20DF  120A  118A  	fcall	_max_val
  5787  015D  0871               	movf	?_max_val+1,w
  5788  015E  1283               	bcf	3,5	;RP0=0, select bank0
  5789  015F  1303               	bcf	3,6	;RP1=0, select bank0
  5790  0160  01C4               	clrf	_fop_rule1+1
  5791  0161  07C4               	addwf	_fop_rule1+1,f
  5792  0162  0870               	movf	?_max_val,w
  5793  0163  01C3               	clrf	_fop_rule1
  5794  0164  07C3               	addwf	_fop_rule1,f
  5795                           
  5796                           ;main.c: 202: x=0;
  5797  0165  01D1               	clrf	_x
  5798  0166  01D2               	clrf	_x+1
  5799                           
  5800                           ;main.c: 203: y=0;
  5801  0167  01D3               	clrf	_y
  5802  0168  01D4               	clrf	_y+1
  5803                           
  5804                           ;main.c: 205: y = trimf(x,2,5,8);
  5805  0169  0852               	movf	_x+1,w
  5806  016A  01A1               	clrf	trimf@x+1
  5807  016B  07A1               	addwf	trimf@x+1,f
  5808  016C  0851               	movf	_x,w
  5809  016D  01A0               	clrf	trimf@x
  5810  016E  07A0               	addwf	trimf@x,f
  5811  016F  3002               	movlw	2
  5812  0170  00A2               	movwf	trimf@a
  5813  0171  3000               	movlw	0
  5814  0172  00A3               	movwf	trimf@a+1
  5815  0173  3005               	movlw	5
  5816  0174  00A4               	movwf	trimf@b
  5817  0175  3000               	movlw	0
  5818  0176  00A5               	movwf	trimf@b+1
  5819  0177  3008               	movlw	8
  5820  0178  00A6               	movwf	trimf@c
  5821  0179  3000               	movlw	0
  5822  017A  00A7               	movwf	trimf@c+1
  5823  017B  120A  158A  24D1  120A  118A  	fcall	_trimf
  5824  0180  1283               	bcf	3,5	;RP0=0, select bank0
  5825  0181  1303               	bcf	3,6	;RP1=0, select bank0
  5826  0182  0821               	movf	?_trimf+1,w
  5827  0183  01D4               	clrf	_y+1
  5828  0184  07D4               	addwf	_y+1,f
  5829  0185  0820               	movf	?_trimf,w
  5830  0186  01D3               	clrf	_y
  5831  0187  07D3               	addwf	_y,f
  5832                           
  5833                           ;main.c: 207: if (y >= fop_rule1)
  5834  0188  0844               	movf	_fop_rule1+1,w
  5835  0189  0254               	subwf	_y+1,w
  5836  018A  1D03               	skipz
  5837  018B  298E               	goto	u233_25
  5838  018C  0843               	movf	_fop_rule1,w
  5839  018D  0253               	subwf	_y,w
  5840  018E                     u233_25:	
  5841  018E  1C03               	skipc
  5842  018F  2999               	goto	i1l2373
  5843                           
  5844                           ;main.c: 208: {
  5845                           ;main.c: 209: tip_average = fop_rule1;
  5846  0190  0844               	movf	_fop_rule1+1,w
  5847  0191  1683               	bsf	3,5	;RP0=1, select bank1
  5848  0192  1303               	bcf	3,6	;RP1=0, select bank1
  5849  0193  01C1               	clrf	(_tip_average+1)^(0+128)
  5850  0194  07C1               	addwf	(_tip_average+1)^(0+128),f
  5851  0195  1283               	bcf	3,5	;RP0=0, select bank0
  5852  0196  1303               	bcf	3,6	;RP1=0, select bank0
  5853  0197  0843               	movf	_fop_rule1,w
  5854  0198  29A2               	goto	L4
  5855  0199                     i1l2373:	
  5856                           ;main.c: 210: }
  5857                           
  5858                           
  5859                           ;main.c: 211: else
  5860                           ;main.c: 212: {
  5861                           ;main.c: 213: tip_average = y;
  5862  0199  1283               	bcf	3,5	;RP0=0, select bank0
  5863  019A  0854               	movf	_y+1,w
  5864  019B  1683               	bsf	3,5	;RP0=1, select bank1
  5865  019C  1303               	bcf	3,6	;RP1=0, select bank1
  5866  019D  01C1               	clrf	(_tip_average+1)^(0+128)
  5867  019E  07C1               	addwf	(_tip_average+1)^(0+128),f
  5868  019F  1283               	bcf	3,5	;RP0=0, select bank0
  5869  01A0  1303               	bcf	3,6	;RP1=0, select bank0
  5870  01A1  0853               	movf	_y,w
  5871  01A2                     L4:	
  5872  01A2  1683               	bsf	3,5	;RP0=1, select bank1
  5873  01A3  1303               	bcf	3,6	;RP1=0, select bank1
  5874  01A4  01C0               	clrf	_tip_average^(0+128)
  5875  01A5  07C0               	addwf	_tip_average^(0+128),f
  5876  01A6                     i1l2375:	
  5877                           
  5878                           ;main.c: 214: }
  5879                           ;main.c: 217: }
  5880                           ;main.c: 221: if (temp > 7 )
  5881  01A6  3000               	movlw	0
  5882  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  5883  01A8  024C               	subwf	_temp+1,w
  5884  01A9  3008               	movlw	8
  5885  01AA  1903               	skipnz
  5886  01AB  024B               	subwf	_temp,w
  5887  01AC  1C03               	skipc
  5888  01AD  2A2D               	goto	i1l2389
  5889                           
  5890                           ;main.c: 222: {
  5891                           ;main.c: 224: fitemp = trapmf(temp,6,8.5,10,11);
  5892  01AE  084C               	movf	_temp+1,w
  5893  01AF  01A1               	clrf	trapmf@x+1
  5894  01B0  07A1               	addwf	trapmf@x+1,f
  5895  01B1  084B               	movf	_temp,w
  5896  01B2  01A0               	clrf	trapmf@x
  5897  01B3  07A0               	addwf	trapmf@x,f
  5898  01B4  3006               	movlw	6
  5899  01B5  00A2               	movwf	trapmf@a
  5900  01B6  3000               	movlw	0
  5901  01B7  00A3               	movwf	trapmf@a+1
  5902  01B8  3008               	movlw	8
  5903  01B9  00A4               	movwf	trapmf@b
  5904  01BA  3000               	movlw	0
  5905  01BB  00A5               	movwf	trapmf@b+1
  5906  01BC  300A               	movlw	10
  5907  01BD  00A6               	movwf	trapmf@c
  5908  01BE  3000               	movlw	0
  5909  01BF  00A7               	movwf	trapmf@c+1
  5910  01C0  300B               	movlw	11
  5911  01C1  00A8               	movwf	trapmf@d
  5912  01C2  3000               	movlw	0
  5913  01C3  00A9               	movwf	trapmf@d+1
  5914  01C4  120A  158A  2551  120A  118A  	fcall	_trapmf
  5915  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  5916  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  5917  01CB  0821               	movf	?_trapmf+1,w
  5918  01CC  01C2               	clrf	_fitemp+1
  5919  01CD  07C2               	addwf	_fitemp+1,f
  5920  01CE  0820               	movf	?_trapmf,w
  5921  01CF  01C1               	clrf	_fitemp
  5922  01D0  07C1               	addwf	_fitemp,f
  5923                           
  5924                           ;main.c: 228: fop_rule1 = max_val(fitemp,0.1);
  5925  01D1  0842               	movf	_fitemp+1,w
  5926  01D2  01F1               	clrf	max_val@a+1
  5927  01D3  07F1               	addwf	max_val@a+1,f
  5928  01D4  0841               	movf	_fitemp,w
  5929  01D5  01F0               	clrf	max_val@a
  5930  01D6  07F0               	addwf	max_val@a,f
  5931  01D7  3000               	movlw	0
  5932  01D8  00F2               	movwf	max_val@b
  5933  01D9  3000               	movlw	0
  5934  01DA  00F3               	movwf	max_val@b+1
  5935  01DB  120A  158A  20DF  120A  118A  	fcall	_max_val
  5936  01E0  0871               	movf	?_max_val+1,w
  5937  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  5938  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  5939  01E3  01C4               	clrf	_fop_rule1+1
  5940  01E4  07C4               	addwf	_fop_rule1+1,f
  5941  01E5  0870               	movf	?_max_val,w
  5942  01E6  01C3               	clrf	_fop_rule1
  5943  01E7  07C3               	addwf	_fop_rule1,f
  5944                           
  5945                           ;main.c: 231: x=0;
  5946  01E8  01D1               	clrf	_x
  5947  01E9  01D2               	clrf	_x+1
  5948                           
  5949                           ;main.c: 232: y=0;
  5950  01EA  01D3               	clrf	_y
  5951  01EB  01D4               	clrf	_y+1
  5952                           
  5953                           ;main.c: 234: y = trapmf(x,7,8.5,10,11);
  5954  01EC  0852               	movf	_x+1,w
  5955  01ED  01A1               	clrf	trapmf@x+1
  5956  01EE  07A1               	addwf	trapmf@x+1,f
  5957  01EF  0851               	movf	_x,w
  5958  01F0  01A0               	clrf	trapmf@x
  5959  01F1  07A0               	addwf	trapmf@x,f
  5960  01F2  3007               	movlw	7
  5961  01F3  00A2               	movwf	trapmf@a
  5962  01F4  3000               	movlw	0
  5963  01F5  00A3               	movwf	trapmf@a+1
  5964  01F6  3008               	movlw	8
  5965  01F7  00A4               	movwf	trapmf@b
  5966  01F8  3000               	movlw	0
  5967  01F9  00A5               	movwf	trapmf@b+1
  5968  01FA  300A               	movlw	10
  5969  01FB  00A6               	movwf	trapmf@c
  5970  01FC  3000               	movlw	0
  5971  01FD  00A7               	movwf	trapmf@c+1
  5972  01FE  300B               	movlw	11
  5973  01FF  00A8               	movwf	trapmf@d
  5974  0200  3000               	movlw	0
  5975  0201  00A9               	movwf	trapmf@d+1
  5976  0202  120A  158A  2551  120A  118A  	fcall	_trapmf
  5977  0207  1283               	bcf	3,5	;RP0=0, select bank0
  5978  0208  1303               	bcf	3,6	;RP1=0, select bank0
  5979  0209  0821               	movf	?_trapmf+1,w
  5980  020A  01D4               	clrf	_y+1
  5981  020B  07D4               	addwf	_y+1,f
  5982  020C  0820               	movf	?_trapmf,w
  5983  020D  01D3               	clrf	_y
  5984  020E  07D3               	addwf	_y,f
  5985                           
  5986                           ;main.c: 236: if (y >= fop_rule1)
  5987  020F  0844               	movf	_fop_rule1+1,w
  5988  0210  0254               	subwf	_y+1,w
  5989  0211  1D03               	skipz
  5990  0212  2A15               	goto	u235_25
  5991  0213  0843               	movf	_fop_rule1,w
  5992  0214  0253               	subwf	_y,w
  5993  0215                     u235_25:	
  5994  0215  1C03               	skipc
  5995  0216  2A20               	goto	i1l2387
  5996                           
  5997                           ;main.c: 237: {
  5998                           ;main.c: 238: tip_gorgeous = fop_rule1;
  5999  0217  0844               	movf	_fop_rule1+1,w
  6000  0218  1683               	bsf	3,5	;RP0=1, select bank1
  6001  0219  1303               	bcf	3,6	;RP1=0, select bank1
  6002  021A  01C3               	clrf	(_tip_gorgeous+1)^(0+128)
  6003  021B  07C3               	addwf	(_tip_gorgeous+1)^(0+128),f
  6004  021C  1283               	bcf	3,5	;RP0=0, select bank0
  6005  021D  1303               	bcf	3,6	;RP1=0, select bank0
  6006  021E  0843               	movf	_fop_rule1,w
  6007  021F  2A29               	goto	L5
  6008  0220                     i1l2387:	
  6009                           ;main.c: 239: }
  6010                           
  6011                           
  6012                           ;main.c: 240: else
  6013                           ;main.c: 241: {
  6014                           ;main.c: 242: tip_gorgeous = y;
  6015  0220  1283               	bcf	3,5	;RP0=0, select bank0
  6016  0221  0854               	movf	_y+1,w
  6017  0222  1683               	bsf	3,5	;RP0=1, select bank1
  6018  0223  1303               	bcf	3,6	;RP1=0, select bank1
  6019  0224  01C3               	clrf	(_tip_gorgeous+1)^(0+128)
  6020  0225  07C3               	addwf	(_tip_gorgeous+1)^(0+128),f
  6021  0226  1283               	bcf	3,5	;RP0=0, select bank0
  6022  0227  1303               	bcf	3,6	;RP1=0, select bank0
  6023  0228  0853               	movf	_y,w
  6024  0229                     L5:	
  6025  0229  1683               	bsf	3,5	;RP0=1, select bank1
  6026  022A  1303               	bcf	3,6	;RP1=0, select bank1
  6027  022B  01C2               	clrf	_tip_gorgeous^(0+128)
  6028  022C  07C2               	addwf	_tip_gorgeous^(0+128),f
  6029  022D                     i1l2389:	
  6030                           
  6031                           ;main.c: 243: }
  6032                           ;main.c: 245: }
  6033                           ;main.c: 249: if (temp < 2.5)
  6034  022D  1283               	bcf	3,5	;RP0=0, select bank0
  6035  022E  084C               	movf	_temp+1,w
  6036  022F  01F9               	clrf	___lwtoft@c+1
  6037  0230  07F9               	addwf	___lwtoft@c+1,f
  6038  0231  084B               	movf	_temp,w
  6039  0232  01F8               	clrf	___lwtoft@c
  6040  0233  07F8               	addwf	___lwtoft@c,f
  6041  0234  120A  158A  212E  120A  118A  	fcall	___lwtoft
  6042  0239  0878               	movf	?___lwtoft,w
  6043  023A  1283               	bcf	3,5	;RP0=0, select bank0
  6044  023B  1303               	bcf	3,6	;RP1=0, select bank0
  6045  023C  00A0               	movwf	___ftge@ff1
  6046  023D  0879               	movf	?___lwtoft+1,w
  6047  023E  00A1               	movwf	___ftge@ff1+1
  6048  023F  087A               	movf	?___lwtoft+2,w
  6049  0240  00A2               	movwf	___ftge@ff1+2
  6050  0241  3000               	movlw	0
  6051  0242  00A3               	movwf	___ftge@ff2
  6052  0243  3020               	movlw	32
  6053  0244  00A4               	movwf	___ftge@ff2+1
  6054  0245  3040               	movlw	64
  6055  0246  00A5               	movwf	___ftge@ff2+2
  6056  0247  120A  158A  239D  120A  118A  	fcall	___ftge
  6057  024C  1803               	btfsc	3,0
  6058  024D  2A5C               	goto	i1l2393
  6059                           
  6060                           ;main.c: 250: {
  6061                           ;main.c: 251: tip = ideal ;
  6062  024E  1683               	bsf	3,5	;RP0=1, select bank1
  6063  024F  1303               	bcf	3,6	;RP1=0, select bank1
  6064  0250  082F               	movf	(_ideal+1)^(0+128),w
  6065  0251  1283               	bcf	3,5	;RP0=0, select bank0
  6066  0252  1303               	bcf	3,6	;RP1=0, select bank0
  6067  0253  01CE               	clrf	_tip+1
  6068  0254  07CE               	addwf	_tip+1,f
  6069  0255  1683               	bsf	3,5	;RP0=1, select bank1
  6070  0256  1303               	bcf	3,6	;RP1=0, select bank1
  6071  0257  082E               	movf	_ideal^(0+128),w
  6072  0258  1283               	bcf	3,5	;RP0=0, select bank0
  6073  0259  1303               	bcf	3,6	;RP1=0, select bank0
  6074  025A  01CD               	clrf	_tip
  6075  025B  07CD               	addwf	_tip,f
  6076  025C                     i1l2393:	
  6077                           
  6078                           ;main.c: 252: }
  6079                           ;main.c: 254: if (temp >= 2.5 && temp < 7.5)
  6080  025C  1283               	bcf	3,5	;RP0=0, select bank0
  6081  025D  1303               	bcf	3,6	;RP1=0, select bank0
  6082  025E  084C               	movf	_temp+1,w
  6083  025F  01F9               	clrf	___lwtoft@c+1
  6084  0260  07F9               	addwf	___lwtoft@c+1,f
  6085  0261  084B               	movf	_temp,w
  6086  0262  01F8               	clrf	___lwtoft@c
  6087  0263  07F8               	addwf	___lwtoft@c,f
  6088  0264  120A  158A  212E  120A  118A  	fcall	___lwtoft
  6089  0269  0878               	movf	?___lwtoft,w
  6090  026A  1283               	bcf	3,5	;RP0=0, select bank0
  6091  026B  1303               	bcf	3,6	;RP1=0, select bank0
  6092  026C  00A0               	movwf	___ftge@ff1
  6093  026D  0879               	movf	?___lwtoft+1,w
  6094  026E  00A1               	movwf	___ftge@ff1+1
  6095  026F  087A               	movf	?___lwtoft+2,w
  6096  0270  00A2               	movwf	___ftge@ff1+2
  6097  0271  3000               	movlw	0
  6098  0272  00A3               	movwf	___ftge@ff2
  6099  0273  3020               	movlw	32
  6100  0274  00A4               	movwf	___ftge@ff2+1
  6101  0275  3040               	movlw	64
  6102  0276  00A5               	movwf	___ftge@ff2+2
  6103  0277  120A  158A  239D  120A  118A  	fcall	___ftge
  6104  027C  1C03               	btfss	3,0
  6105  027D  2AAE               	goto	i1l2399
  6106  027E  1283               	bcf	3,5	;RP0=0, select bank0
  6107  027F  1303               	bcf	3,6	;RP1=0, select bank0
  6108  0280  084C               	movf	_temp+1,w
  6109  0281  01F9               	clrf	___lwtoft@c+1
  6110  0282  07F9               	addwf	___lwtoft@c+1,f
  6111  0283  084B               	movf	_temp,w
  6112  0284  01F8               	clrf	___lwtoft@c
  6113  0285  07F8               	addwf	___lwtoft@c,f
  6114  0286  120A  158A  212E  120A  118A  	fcall	___lwtoft
  6115  028B  0878               	movf	?___lwtoft,w
  6116  028C  1283               	bcf	3,5	;RP0=0, select bank0
  6117  028D  1303               	bcf	3,6	;RP1=0, select bank0
  6118  028E  00A0               	movwf	___ftge@ff1
  6119  028F  0879               	movf	?___lwtoft+1,w
  6120  0290  00A1               	movwf	___ftge@ff1+1
  6121  0291  087A               	movf	?___lwtoft+2,w
  6122  0292  00A2               	movwf	___ftge@ff1+2
  6123  0293  3000               	movlw	0
  6124  0294  00A3               	movwf	___ftge@ff2
  6125  0295  30F0               	movlw	240
  6126  0296  00A4               	movwf	___ftge@ff2+1
  6127  0297  3040               	movlw	64
  6128  0298  00A5               	movwf	___ftge@ff2+2
  6129  0299  120A  158A  239D  120A  118A  	fcall	___ftge
  6130  029E  1803               	btfsc	3,0
  6131  029F  2AAE               	goto	i1l2399
  6132                           
  6133                           ;main.c: 255: {
  6134                           ;main.c: 256: tip = tip_average ;
  6135  02A0  1683               	bsf	3,5	;RP0=1, select bank1
  6136  02A1  1303               	bcf	3,6	;RP1=0, select bank1
  6137  02A2  0841               	movf	(_tip_average+1)^(0+128),w
  6138  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  6139  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  6140  02A5  01CE               	clrf	_tip+1
  6141  02A6  07CE               	addwf	_tip+1,f
  6142  02A7  1683               	bsf	3,5	;RP0=1, select bank1
  6143  02A8  1303               	bcf	3,6	;RP1=0, select bank1
  6144  02A9  0840               	movf	_tip_average^(0+128),w
  6145  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  6146  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  6147  02AC  01CD               	clrf	_tip
  6148  02AD  07CD               	addwf	_tip,f
  6149  02AE                     i1l2399:	
  6150                           
  6151                           ;main.c: 257: }
  6152                           ;main.c: 259: if (temp >= 7.5 && temp <= 10)
  6153  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  6154  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  6155  02B0  084C               	movf	_temp+1,w
  6156  02B1  01F9               	clrf	___lwtoft@c+1
  6157  02B2  07F9               	addwf	___lwtoft@c+1,f
  6158  02B3  084B               	movf	_temp,w
  6159  02B4  01F8               	clrf	___lwtoft@c
  6160  02B5  07F8               	addwf	___lwtoft@c,f
  6161  02B6  120A  158A  212E  120A  118A  	fcall	___lwtoft
  6162  02BB  0878               	movf	?___lwtoft,w
  6163  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  6164  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  6165  02BE  00A0               	movwf	___ftge@ff1
  6166  02BF  0879               	movf	?___lwtoft+1,w
  6167  02C0  00A1               	movwf	___ftge@ff1+1
  6168  02C1  087A               	movf	?___lwtoft+2,w
  6169  02C2  00A2               	movwf	___ftge@ff1+2
  6170  02C3  3000               	movlw	0
  6171  02C4  00A3               	movwf	___ftge@ff2
  6172  02C5  30F0               	movlw	240
  6173  02C6  00A4               	movwf	___ftge@ff2+1
  6174  02C7  3040               	movlw	64
  6175  02C8  00A5               	movwf	___ftge@ff2+2
  6176  02C9  120A  158A  239D  120A  118A  	fcall	___ftge
  6177  02CE  1C03               	btfss	3,0
  6178  02CF  2AE7               	goto	i1l2405
  6179  02D0  3000               	movlw	0
  6180  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  6181  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  6182  02D3  024C               	subwf	_temp+1,w
  6183  02D4  300B               	movlw	11
  6184  02D5  1903               	skipnz
  6185  02D6  024B               	subwf	_temp,w
  6186  02D7  1803               	skipnc
  6187  02D8  2AE7               	goto	i1l2405
  6188                           
  6189                           ;main.c: 260: {
  6190                           ;main.c: 261: tip = tip_gorgeous;
  6191  02D9  1683               	bsf	3,5	;RP0=1, select bank1
  6192  02DA  1303               	bcf	3,6	;RP1=0, select bank1
  6193  02DB  0843               	movf	(_tip_gorgeous+1)^(0+128),w
  6194  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  6195  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  6196  02DE  01CE               	clrf	_tip+1
  6197  02DF  07CE               	addwf	_tip+1,f
  6198  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  6199  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  6200  02E2  0842               	movf	_tip_gorgeous^(0+128),w
  6201  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  6202  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  6203  02E5  01CD               	clrf	_tip
  6204  02E6  07CD               	addwf	_tip,f
  6205  02E7                     i1l2405:	
  6206                           
  6207                           ;main.c: 262: }
  6208                           ;main.c: 267: total_area = 1;
  6209  02E7  3001               	movlw	1
  6210  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  6211  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  6212  02EA  00CF               	movwf	_total_area
  6213  02EB  3000               	movlw	0
  6214  02EC  00D0               	movwf	_total_area+1
  6215                           
  6216                           ;main.c: 268: unsigned int sum = 0;
  6217  02ED  01B1               	clrf	Fuzzy@sum
  6218  02EE  01B2               	clrf	Fuzzy@sum+1
  6219                           
  6220                           ;main.c: 270: total_area = total_area + tip ;
  6221  02EF  084D               	movf	_tip,w
  6222  02F0  074F               	addwf	_total_area,w
  6223  02F1  00CF               	movwf	_total_area
  6224  02F2  084E               	movf	_tip+1,w
  6225  02F3  1803               	skipnc
  6226  02F4  0A4E               	incf	_tip+1,w
  6227  02F5  0750               	addwf	_total_area+1,w
  6228  02F6  00D0               	movwf	_total_area+1
  6229                           
  6230                           ;main.c: 271: sum = tip;
  6231  02F7  084E               	movf	_tip+1,w
  6232  02F8  01B2               	clrf	Fuzzy@sum+1
  6233  02F9  07B2               	addwf	Fuzzy@sum+1,f
  6234  02FA  084D               	movf	_tip,w
  6235  02FB  01B1               	clrf	Fuzzy@sum
  6236  02FC  07B1               	addwf	Fuzzy@sum,f
  6237                           
  6238                           ;main.c: 276: ativa_fan = sum/total_area;
  6239  02FD  0850               	movf	_total_area+1,w
  6240  02FE  01F1               	clrf	i1___lwdiv@divisor+1
  6241  02FF  07F1               	addwf	i1___lwdiv@divisor+1,f
  6242  0300  084F               	movf	_total_area,w
  6243  0301  01F0               	clrf	i1___lwdiv@divisor
  6244  0302  07F0               	addwf	i1___lwdiv@divisor,f
  6245  0303  0832               	movf	Fuzzy@sum+1,w
  6246  0304  01F3               	clrf	i1___lwdiv@dividend+1
  6247  0305  07F3               	addwf	i1___lwdiv@dividend+1,f
  6248  0306  0831               	movf	Fuzzy@sum,w
  6249  0307  01F2               	clrf	i1___lwdiv@dividend
  6250  0308  07F2               	addwf	i1___lwdiv@dividend,f
  6251  0309  120A  158A  22C6  120A  118A  	fcall	i1___lwdiv
  6252  030E  0871               	movf	?i1___lwdiv+1,w
  6253  030F  1283               	bcf	3,5	;RP0=0, select bank0
  6254  0310  1303               	bcf	3,6	;RP1=0, select bank0
  6255  0311  01D6               	clrf	_ativa_fan+1
  6256  0312  07D6               	addwf	_ativa_fan+1,f
  6257  0313  0870               	movf	?i1___lwdiv,w
  6258  0314  01D5               	clrf	_ativa_fan
  6259  0315  07D5               	addwf	_ativa_fan,f
  6260                           
  6261                           ;main.c: 280: char velocidade[1];
  6262                           ;main.c: 282: if(ativa_fan <= 2.5 )
  6263  0316  3000               	movlw	0
  6264  0317  00A0               	movwf	___ftge@ff1
  6265  0318  3020               	movlw	32
  6266  0319  00A1               	movwf	___ftge@ff1+1
  6267  031A  3040               	movlw	64
  6268  031B  00A2               	movwf	___ftge@ff1+2
  6269  031C  0856               	movf	_ativa_fan+1,w
  6270  031D  01F9               	clrf	___lwtoft@c+1
  6271  031E  07F9               	addwf	___lwtoft@c+1,f
  6272  031F  0855               	movf	_ativa_fan,w
  6273  0320  01F8               	clrf	___lwtoft@c
  6274  0321  07F8               	addwf	___lwtoft@c,f
  6275  0322  120A  158A  212E  120A  118A  	fcall	___lwtoft
  6276  0327  0878               	movf	?___lwtoft,w
  6277  0328  1283               	bcf	3,5	;RP0=0, select bank0
  6278  0329  1303               	bcf	3,6	;RP1=0, select bank0
  6279  032A  00A3               	movwf	___ftge@ff2
  6280  032B  0879               	movf	?___lwtoft+1,w
  6281  032C  00A4               	movwf	___ftge@ff2+1
  6282  032D  087A               	movf	?___lwtoft+2,w
  6283  032E  00A5               	movwf	___ftge@ff2+2
  6284  032F  120A  158A  239D  120A  118A  	fcall	___ftge
  6285  0334  1C03               	btfss	3,0
  6286  0335  2B3C               	goto	i1l2419
  6287                           
  6288                           ;main.c: 283: {
  6289                           ;main.c: 285: velocidade[0] = '0';
  6290  0336  3030               	movlw	48
  6291  0337  1283               	bcf	3,5	;RP0=0, select bank0
  6292  0338  1303               	bcf	3,6	;RP1=0, select bank0
  6293  0339  00AE               	movwf	??_Fuzzy
  6294  033A  082E               	movf	??_Fuzzy,w
  6295  033B  00B0               	movwf	Fuzzy@velocidade
  6296  033C                     i1l2419:	
  6297                           
  6298                           ;main.c: 286: }
  6299                           ;main.c: 287: if(ativa_fan > 2.5 && ativa_fan < 7.5)
  6300  033C  3000               	movlw	0
  6301  033D  1283               	bcf	3,5	;RP0=0, select bank0
  6302  033E  1303               	bcf	3,6	;RP1=0, select bank0
  6303  033F  00A0               	movwf	___ftge@ff1
  6304  0340  3020               	movlw	32
  6305  0341  00A1               	movwf	___ftge@ff1+1
  6306  0342  3040               	movlw	64
  6307  0343  00A2               	movwf	___ftge@ff1+2
  6308  0344  0856               	movf	_ativa_fan+1,w
  6309  0345  01F9               	clrf	___lwtoft@c+1
  6310  0346  07F9               	addwf	___lwtoft@c+1,f
  6311  0347  0855               	movf	_ativa_fan,w
  6312  0348  01F8               	clrf	___lwtoft@c
  6313  0349  07F8               	addwf	___lwtoft@c,f
  6314  034A  120A  158A  212E  120A  118A  	fcall	___lwtoft
  6315  034F  0878               	movf	?___lwtoft,w
  6316  0350  1283               	bcf	3,5	;RP0=0, select bank0
  6317  0351  1303               	bcf	3,6	;RP1=0, select bank0
  6318  0352  00A3               	movwf	___ftge@ff2
  6319  0353  0879               	movf	?___lwtoft+1,w
  6320  0354  00A4               	movwf	___ftge@ff2+1
  6321  0355  087A               	movf	?___lwtoft+2,w
  6322  0356  00A5               	movwf	___ftge@ff2+2
  6323  0357  120A  158A  239D  120A  118A  	fcall	___ftge
  6324  035C  1803               	btfsc	3,0
  6325  035D  2B86               	goto	i1l2425
  6326  035E  1283               	bcf	3,5	;RP0=0, select bank0
  6327  035F  1303               	bcf	3,6	;RP1=0, select bank0
  6328  0360  0856               	movf	_ativa_fan+1,w
  6329  0361  01F9               	clrf	___lwtoft@c+1
  6330  0362  07F9               	addwf	___lwtoft@c+1,f
  6331  0363  0855               	movf	_ativa_fan,w
  6332  0364  01F8               	clrf	___lwtoft@c
  6333  0365  07F8               	addwf	___lwtoft@c,f
  6334  0366  120A  158A  212E  120A  118A  	fcall	___lwtoft
  6335  036B  0878               	movf	?___lwtoft,w
  6336  036C  1283               	bcf	3,5	;RP0=0, select bank0
  6337  036D  1303               	bcf	3,6	;RP1=0, select bank0
  6338  036E  00A0               	movwf	___ftge@ff1
  6339  036F  0879               	movf	?___lwtoft+1,w
  6340  0370  00A1               	movwf	___ftge@ff1+1
  6341  0371  087A               	movf	?___lwtoft+2,w
  6342  0372  00A2               	movwf	___ftge@ff1+2
  6343  0373  3000               	movlw	0
  6344  0374  00A3               	movwf	___ftge@ff2
  6345  0375  30F0               	movlw	240
  6346  0376  00A4               	movwf	___ftge@ff2+1
  6347  0377  3040               	movlw	64
  6348  0378  00A5               	movwf	___ftge@ff2+2
  6349  0379  120A  158A  239D  120A  118A  	fcall	___ftge
  6350  037E  1803               	btfsc	3,0
  6351  037F  2B86               	goto	i1l2425
  6352                           
  6353                           ;main.c: 288: {
  6354                           ;main.c: 290: velocidade[0] = '7';
  6355  0380  3037               	movlw	55
  6356  0381  1283               	bcf	3,5	;RP0=0, select bank0
  6357  0382  1303               	bcf	3,6	;RP1=0, select bank0
  6358  0383  00AE               	movwf	??_Fuzzy
  6359  0384  082E               	movf	??_Fuzzy,w
  6360  0385  00B0               	movwf	Fuzzy@velocidade
  6361  0386                     i1l2425:	
  6362                           
  6363                           ;main.c: 291: }
  6364                           ;main.c: 293: if(ativa_fan >= 7.5)
  6365  0386  1283               	bcf	3,5	;RP0=0, select bank0
  6366  0387  1303               	bcf	3,6	;RP1=0, select bank0
  6367  0388  0856               	movf	_ativa_fan+1,w
  6368  0389  01F9               	clrf	___lwtoft@c+1
  6369  038A  07F9               	addwf	___lwtoft@c+1,f
  6370  038B  0855               	movf	_ativa_fan,w
  6371  038C  01F8               	clrf	___lwtoft@c
  6372  038D  07F8               	addwf	___lwtoft@c,f
  6373  038E  120A  158A  212E  120A  118A  	fcall	___lwtoft
  6374  0393  0878               	movf	?___lwtoft,w
  6375  0394  1283               	bcf	3,5	;RP0=0, select bank0
  6376  0395  1303               	bcf	3,6	;RP1=0, select bank0
  6377  0396  00A0               	movwf	___ftge@ff1
  6378  0397  0879               	movf	?___lwtoft+1,w
  6379  0398  00A1               	movwf	___ftge@ff1+1
  6380  0399  087A               	movf	?___lwtoft+2,w
  6381  039A  00A2               	movwf	___ftge@ff1+2
  6382  039B  3000               	movlw	0
  6383  039C  00A3               	movwf	___ftge@ff2
  6384  039D  30F0               	movlw	240
  6385  039E  00A4               	movwf	___ftge@ff2+1
  6386  039F  3040               	movlw	64
  6387  03A0  00A5               	movwf	___ftge@ff2+2
  6388  03A1  120A  158A  239D  120A  118A  	fcall	___ftge
  6389  03A6  1C03               	btfss	3,0
  6390  03A7  2BAE               	goto	i1l2429
  6391                           
  6392                           ;main.c: 294: {
  6393                           ;main.c: 296: velocidade[0] = '9';
  6394  03A8  3039               	movlw	57
  6395  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  6396  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  6397  03AB  00AE               	movwf	??_Fuzzy
  6398  03AC  082E               	movf	??_Fuzzy,w
  6399  03AD  00B0               	movwf	Fuzzy@velocidade
  6400  03AE                     i1l2429:	
  6401                           
  6402                           ;main.c: 297: }
  6403                           ;main.c: 300: deltaV = fop_rule1*100;
  6404  03AE  1283               	bcf	3,5	;RP0=0, select bank0
  6405  03AF  1303               	bcf	3,6	;RP1=0, select bank0
  6406  03B0  0844               	movf	_fop_rule1+1,w
  6407  03B1  01F9               	clrf	i1___wmul@multiplier+1
  6408  03B2  07F9               	addwf	i1___wmul@multiplier+1,f
  6409  03B3  0843               	movf	_fop_rule1,w
  6410  03B4  01F8               	clrf	i1___wmul@multiplier
  6411  03B5  07F8               	addwf	i1___wmul@multiplier,f
  6412  03B6  3064               	movlw	100
  6413  03B7  00FA               	movwf	i1___wmul@multiplicand
  6414  03B8  3000               	movlw	0
  6415  03B9  00FB               	movwf	i1___wmul@multiplicand+1
  6416  03BA  120A  158A  21C4  120A  118A  	fcall	i1___wmul
  6417  03BF  0879               	movf	?i1___wmul+1,w
  6418  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  6419  03C1  1303               	bcf	3,6	;RP1=0, select bank1
  6420  03C2  01A7               	clrf	(_deltaV+1)^(0+128)
  6421  03C3  07A7               	addwf	(_deltaV+1)^(0+128),f
  6422  03C4  0878               	movf	?i1___wmul,w
  6423  03C5  01A6               	clrf	_deltaV^(0+128)
  6424  03C6  07A6               	addwf	_deltaV^(0+128),f
  6425                           
  6426                           ;main.c: 301: if(ativa_fan*100 >= 0 && ativa_fan*100 < 1024 ){
  6427  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  6428  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  6429  03C9  0856               	movf	_ativa_fan+1,w
  6430  03CA  01F9               	clrf	i1___wmul@multiplier+1
  6431  03CB  07F9               	addwf	i1___wmul@multiplier+1,f
  6432  03CC  0855               	movf	_ativa_fan,w
  6433  03CD  01F8               	clrf	i1___wmul@multiplier
  6434  03CE  07F8               	addwf	i1___wmul@multiplier,f
  6435  03CF  3064               	movlw	100
  6436  03D0  00FA               	movwf	i1___wmul@multiplicand
  6437  03D1  3000               	movlw	0
  6438  03D2  00FB               	movwf	i1___wmul@multiplicand+1
  6439  03D3  120A  158A  21C4  120A  118A  	fcall	i1___wmul
  6440  03D8  3004               	movlw	4
  6441  03D9  0279               	subwf	?i1___wmul+1,w
  6442  03DA  3000               	movlw	0
  6443  03DB  1903               	skipnz
  6444  03DC  0278               	subwf	?i1___wmul,w
  6445  03DD  1803               	skipnc
  6446  03DE  2BF9               	goto	i1l2435
  6447                           
  6448                           ;main.c: 302: PWM_DutyCycle2(ativa_fan*100);
  6449  03DF  1283               	bcf	3,5	;RP0=0, select bank0
  6450  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  6451  03E1  0856               	movf	_ativa_fan+1,w
  6452  03E2  01F9               	clrf	i1___wmul@multiplier+1
  6453  03E3  07F9               	addwf	i1___wmul@multiplier+1,f
  6454  03E4  0855               	movf	_ativa_fan,w
  6455  03E5  01F8               	clrf	i1___wmul@multiplier
  6456  03E6  07F8               	addwf	i1___wmul@multiplier,f
  6457  03E7  3064               	movlw	100
  6458  03E8  00FA               	movwf	i1___wmul@multiplicand
  6459  03E9  3000               	movlw	0
  6460  03EA  00FB               	movwf	i1___wmul@multiplicand+1
  6461  03EB  120A  158A  21C4  120A  118A  	fcall	i1___wmul
  6462  03F0  0879               	movf	?i1___wmul+1,w
  6463  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  6464  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  6465  03F3  01A1               	clrf	i1PWM_DutyCycle2@valor+1
  6466  03F4  07A1               	addwf	i1PWM_DutyCycle2@valor+1,f
  6467  03F5  0878               	movf	?i1___wmul,w
  6468  03F6  01A0               	clrf	i1PWM_DutyCycle2@valor
  6469  03F7  07A0               	addwf	i1PWM_DutyCycle2@valor,f
  6470  03F8  2BFF               	goto	L6
  6471  03F9                     i1l2435:	
  6472                           ;main.c: 303: }else
  6473                           
  6474                           
  6475                           ;main.c: 304: {
  6476                           ;main.c: 305: PWM_DutyCycle2(0);
  6477  03F9  3000               	movlw	0
  6478  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  6479  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  6480  03FC  00A0               	movwf	i1PWM_DutyCycle2@valor
  6481  03FD  3000               	movlw	0
  6482  03FE  00A1               	movwf	i1PWM_DutyCycle2@valor+1
  6483  03FF                     L6:	
  6484  03FF  120A  158A  2158   	fcall	i1_PWM_DutyCycle2
  6485                           
  6486                           ;main.c: 306: }
  6487                           ;main.c: 308: rpm = ativa_fan;
  6488  0402  1283               	bcf	3,5	;RP0=0, select bank0
  6489  0403  1303               	bcf	3,6	;RP1=0, select bank0
  6490  0404  0856               	movf	_ativa_fan+1,w
  6491  0405  1683               	bsf	3,5	;RP0=1, select bank1
  6492  0406  1303               	bcf	3,6	;RP1=0, select bank1
  6493  0407  01B7               	clrf	(_rpm+1)^(0+128)
  6494  0408  07B7               	addwf	(_rpm+1)^(0+128),f
  6495  0409  1283               	bcf	3,5	;RP0=0, select bank0
  6496  040A  1303               	bcf	3,6	;RP1=0, select bank0
  6497  040B  0855               	movf	_ativa_fan,w
  6498  040C  1683               	bsf	3,5	;RP0=1, select bank1
  6499  040D  1303               	bcf	3,6	;RP1=0, select bank1
  6500  040E  01B6               	clrf	_rpm^(0+128)
  6501  040F  07B6               	addwf	_rpm^(0+128),f
  6502  0410  0008               	return
  6503  0411                     __end_of_Fuzzy:	
  6504                           
  6505                           	psect	text28
  6506  09C4                     __ptext28:	
  6507 ;; *************** function i1___wmul *****************
  6508 ;; Defined at:
  6509 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6510 ;; Parameters:    Size  Location     Type
  6511 ;;  multiplier      2    8[COMMON] unsigned int 
  6512 ;;  multiplicand    2   10[COMMON] unsigned int 
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;  __wmul          2   12[COMMON] unsigned int 
  6515 ;; Return value:  Size  Location     Type
  6516 ;;                  2    8[COMMON] unsigned int 
  6517 ;; Registers used:
  6518 ;;		wreg, status,2, status,0
  6519 ;; Tracked objects:
  6520 ;;		On entry : 0/0
  6521 ;;		On exit  : 0/0
  6522 ;;		Unchanged: 0/0
  6523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6524 ;;      Params:         4       0       0       0       0
  6525 ;;      Locals:         2       0       0       0       0
  6526 ;;      Temps:          0       0       0       0       0
  6527 ;;      Totals:         6       0       0       0       0
  6528 ;;Total ram usage:        6 bytes
  6529 ;; Hardware stack levels used:    1
  6530 ;; This function calls:
  6531 ;;		Nothing
  6532 ;; This function is called by:
  6533 ;;		_Fuzzy
  6534 ;;		_ISR
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           
  6539                           ;psect for function i1___wmul
  6540  09C4                     i1___wmul:	
  6541                           
  6542                           ;incstack = 0
  6543                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  6544  09C4  01FC               	clrf	i1___wmul@product
  6545  09C5  01FD               	clrf	i1___wmul@product+1
  6546  09C6                     i1l2319:	
  6547  09C6  1C78               	btfss	i1___wmul@multiplier,0
  6548  09C7  29CE               	goto	i1l607
  6549  09C8  087A               	movf	i1___wmul@multiplicand,w
  6550  09C9  07FC               	addwf	i1___wmul@product,f
  6551  09CA  1803               	skipnc
  6552  09CB  0AFD               	incf	i1___wmul@product+1,f
  6553  09CC  087B               	movf	i1___wmul@multiplicand+1,w
  6554  09CD  07FD               	addwf	i1___wmul@product+1,f
  6555  09CE                     i1l607:	
  6556  09CE  3001               	movlw	1
  6557  09CF                     u224_25:	
  6558  09CF  1003               	clrc
  6559  09D0  0DFA               	rlf	i1___wmul@multiplicand,f
  6560  09D1  0DFB               	rlf	i1___wmul@multiplicand+1,f
  6561  09D2  3EFF               	addlw	-1
  6562  09D3  1D03               	skipz
  6563  09D4  29CF               	goto	u224_25
  6564  09D5  3001               	movlw	1
  6565  09D6                     u225_25:	
  6566  09D6  1003               	clrc
  6567  09D7  0CF9               	rrf	i1___wmul@multiplier+1,f
  6568  09D8  0CF8               	rrf	i1___wmul@multiplier,f
  6569  09D9  3EFF               	addlw	-1
  6570  09DA  1D03               	skipz
  6571  09DB  29D6               	goto	u225_25
  6572  09DC  0879               	movf	i1___wmul@multiplier+1,w
  6573  09DD  0478               	iorwf	i1___wmul@multiplier,w
  6574  09DE  1D03               	skipz
  6575  09DF  29C6               	goto	i1l2319
  6576  09E0  087D               	movf	i1___wmul@product+1,w
  6577  09E1  01F9               	clrf	?i1___wmul+1
  6578  09E2  07F9               	addwf	?i1___wmul+1,f
  6579  09E3  087C               	movf	i1___wmul@product,w
  6580  09E4  01F8               	clrf	?i1___wmul
  6581  09E5  07F8               	addwf	?i1___wmul,f
  6582  09E6  0008               	return
  6583  09E7                     __end_ofi1___wmul:	
  6584                           
  6585                           	psect	text29
  6586  0958                     __ptext29:	
  6587 ;; *************** function i1_PWM_DutyCycle2 *****************
  6588 ;; Defined at:
  6589 ;;		line 96 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  6590 ;; Parameters:    Size  Location     Type
  6591 ;;  valor           2    0[BANK0 ] int 
  6592 ;; Auto vars:     Size  Location     Type
  6593 ;;		None
  6594 ;; Return value:  Size  Location     Type
  6595 ;;		None               void
  6596 ;; Registers used:
  6597 ;;		wreg, status,2, status,0
  6598 ;; Tracked objects:
  6599 ;;		On entry : 0/0
  6600 ;;		On exit  : 0/0
  6601 ;;		Unchanged: 0/0
  6602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6603 ;;      Params:         0       2       0       0       0
  6604 ;;      Locals:         0       0       0       0       0
  6605 ;;      Temps:          0       2       0       0       0
  6606 ;;      Totals:         0       4       0       0       0
  6607 ;;Total ram usage:        4 bytes
  6608 ;; Hardware stack levels used:    1
  6609 ;; This function calls:
  6610 ;;		Nothing
  6611 ;; This function is called by:
  6612 ;;		_Fuzzy
  6613 ;;		_ISR
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           
  6618                           ;psect for function i1_PWM_DutyCycle2
  6619  0958                     i1_PWM_DutyCycle2:	
  6620                           
  6621                           ;pwm.c: 98: CCPR2L = valor >> 2;
  6622                           
  6623                           ;incstack = 0
  6624                           ; Regs used in i1_PWM_DutyCycle2: [wreg+status,2+status,0]
  6625  0958  1283               	bcf	3,5	;RP0=0, select bank0
  6626  0959  1303               	bcf	3,6	;RP1=0, select bank0
  6627  095A  0821               	movf	i1PWM_DutyCycle2@valor+1,w
  6628  095B  00A3               	movwf	??i1_PWM_DutyCycle2+1
  6629  095C  0820               	movf	i1PWM_DutyCycle2@valor,w
  6630  095D  00A2               	movwf	??i1_PWM_DutyCycle2
  6631  095E  0D23               	rlf	??i1_PWM_DutyCycle2+1,w
  6632  095F  0CA3               	rrf	??i1_PWM_DutyCycle2+1,f
  6633  0960  0CA2               	rrf	??i1_PWM_DutyCycle2,f
  6634  0961  0D23               	rlf	??i1_PWM_DutyCycle2+1,w
  6635  0962  0CA3               	rrf	??i1_PWM_DutyCycle2+1,f
  6636  0963  0CA2               	rrf	??i1_PWM_DutyCycle2,f
  6637  0964  0822               	movf	??i1_PWM_DutyCycle2,w
  6638  0965  009B               	movwf	27	;volatile
  6639                           
  6640                           ;pwm.c: 99: CCP2CON = (valor << 4)|0X0C;
  6641  0966  0820               	movf	i1PWM_DutyCycle2@valor,w
  6642  0967  00A2               	movwf	??i1_PWM_DutyCycle2
  6643  0968  3003               	movlw	3
  6644  0969                     u222_25:	
  6645  0969  1003               	clrc
  6646  096A  0DA2               	rlf	??i1_PWM_DutyCycle2,f
  6647  096B  3EFF               	addlw	-1
  6648  096C  1D03               	skipz
  6649  096D  2969               	goto	u222_25
  6650  096E  1003               	clrc
  6651  096F  0D22               	rlf	??i1_PWM_DutyCycle2,w
  6652  0970  380C               	iorlw	12
  6653  0971  009D               	movwf	29	;volatile
  6654  0972  0008               	return
  6655  0973                     __end_ofi1_PWM_DutyCycle2:	
  6656                           
  6657                           	psect	text30
  6658  0CD1                     __ptext30:	
  6659 ;; *************** function _trimf *****************
  6660 ;; Defined at:
  6661 ;;		line 78 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  6662 ;; Parameters:    Size  Location     Type
  6663 ;;  x               2    0[BANK0 ] unsigned int 
  6664 ;;  a               2    2[BANK0 ] unsigned int 
  6665 ;;  b               2    4[BANK0 ] unsigned int 
  6666 ;;  c               2    6[BANK0 ] unsigned int 
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;  ua              2   12[COMMON] unsigned int 
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  2    0[BANK0 ] unsigned int 
  6671 ;; Registers used:
  6672 ;;		wreg, status,2, status,0, pclath, cstack
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6678 ;;      Params:         0       8       0       0       0
  6679 ;;      Locals:         2       0       0       0       0
  6680 ;;      Temps:          4       0       0       0       0
  6681 ;;      Totals:         6       8       0       0       0
  6682 ;;Total ram usage:       14 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; Hardware stack levels required when called:    1
  6685 ;; This function calls:
  6686 ;;		i1___lwdiv
  6687 ;; This function is called by:
  6688 ;;		_Fuzzy
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           
  6693                           ;psect for function _trimf
  6694  0CD1                     _trimf:	
  6695                           
  6696                           ;main.c: 80: unsigned int ua = 0;
  6697                           
  6698                           ;incstack = 0
  6699                           ; Regs used in _trimf: [wreg+status,2+status,0+pclath+cstack]
  6700  0CD1  01FC               	clrf	trimf@ua
  6701  0CD2  01FD               	clrf	trimf@ua+1
  6702                           
  6703                           ;main.c: 82: if (x <= a)
  6704  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  6705  0CD4  1303               	bcf	3,6	;RP1=0, select bank0
  6706  0CD5  0821               	movf	trimf@x+1,w
  6707  0CD6  0223               	subwf	trimf@a+1,w
  6708  0CD7  1D03               	skipz
  6709  0CD8  2CDB               	goto	u171_25
  6710  0CD9  0820               	movf	trimf@x,w
  6711  0CDA  0222               	subwf	trimf@a,w
  6712  0CDB                     u171_25:	
  6713  0CDB  1803               	btfsc	3,0
  6714  0CDC  2D46               	goto	i1l2101
  6715                           
  6716                           ;main.c: 84: else if ((a < x) && (x <= b))
  6717                           
  6718                           ;main.c: 83: ua = 0;
  6719  0CDD  0821               	movf	trimf@x+1,w
  6720  0CDE  0223               	subwf	trimf@a+1,w
  6721  0CDF  1D03               	skipz
  6722  0CE0  2CE3               	goto	u172_25
  6723  0CE1  0820               	movf	trimf@x,w
  6724  0CE2  0222               	subwf	trimf@a,w
  6725  0CE3                     u172_25:	
  6726  0CE3  1803               	skipnc
  6727  0CE4  2D00               	goto	i1l2093
  6728  0CE5  0821               	movf	trimf@x+1,w
  6729  0CE6  0225               	subwf	trimf@b+1,w
  6730  0CE7  1D03               	skipz
  6731  0CE8  2CEB               	goto	u173_25
  6732  0CE9  0820               	movf	trimf@x,w
  6733  0CEA  0224               	subwf	trimf@b,w
  6734  0CEB                     u173_25:	
  6735  0CEB  1C03               	skipc
  6736  0CEC  2D00               	goto	i1l2093
  6737                           
  6738                           ;main.c: 85: ua = ((x - a) / (b - a));
  6739  0CED  0922               	comf	trimf@a,w
  6740  0CEE  00F8               	movwf	??_trimf
  6741  0CEF  0923               	comf	trimf@a+1,w
  6742  0CF0  00F9               	movwf	??_trimf+1
  6743  0CF1  0AF8               	incf	??_trimf,f
  6744  0CF2  1903               	skipnz
  6745  0CF3  0AF9               	incf	??_trimf+1,f
  6746  0CF4  0824               	movf	trimf@b,w
  6747  0CF5  0778               	addwf	??_trimf,w
  6748  0CF6  00F0               	movwf	i1___lwdiv@divisor
  6749  0CF7  0825               	movf	trimf@b+1,w
  6750  0CF8  1803               	skipnc
  6751  0CF9  0A25               	incf	trimf@b+1,w
  6752  0CFA  0779               	addwf	??_trimf+1,w
  6753  0CFB  00F1               	movwf	i1___lwdiv@divisor+1
  6754  0CFC  0922               	comf	trimf@a,w
  6755  0CFD  00FA               	movwf	??_trimf+2
  6756  0CFE  0923               	comf	trimf@a+1,w
  6757  0CFF  2D24               	goto	L8
  6758  0D00                     i1l2093:	
  6759                           
  6760                           ;main.c: 86: else if ((b < x) && (x <= c))
  6761  0D00  1283               	bcf	3,5	;RP0=0, select bank0
  6762  0D01  1303               	bcf	3,6	;RP1=0, select bank0
  6763  0D02  0821               	movf	trimf@x+1,w
  6764  0D03  0225               	subwf	trimf@b+1,w
  6765  0D04  1D03               	skipz
  6766  0D05  2D08               	goto	u174_25
  6767  0D06  0820               	movf	trimf@x,w
  6768  0D07  0224               	subwf	trimf@b,w
  6769  0D08                     u174_25:	
  6770  0D08  1803               	skipnc
  6771  0D09  2D3C               	goto	i1l2099
  6772  0D0A  0821               	movf	trimf@x+1,w
  6773  0D0B  0227               	subwf	trimf@c+1,w
  6774  0D0C  1D03               	skipz
  6775  0D0D  2D10               	goto	u175_25
  6776  0D0E  0820               	movf	trimf@x,w
  6777  0D0F  0226               	subwf	trimf@c,w
  6778  0D10                     u175_25:	
  6779  0D10  1C03               	skipc
  6780  0D11  2D3C               	goto	i1l2099
  6781                           
  6782                           ;main.c: 87: ua = ((x - c) / (b - c));
  6783  0D12  0926               	comf	trimf@c,w
  6784  0D13  00F8               	movwf	??_trimf
  6785  0D14  0927               	comf	trimf@c+1,w
  6786  0D15  00F9               	movwf	??_trimf+1
  6787  0D16  0AF8               	incf	??_trimf,f
  6788  0D17  1903               	skipnz
  6789  0D18  0AF9               	incf	??_trimf+1,f
  6790  0D19  0824               	movf	trimf@b,w
  6791  0D1A  0778               	addwf	??_trimf,w
  6792  0D1B  00F0               	movwf	i1___lwdiv@divisor
  6793  0D1C  0825               	movf	trimf@b+1,w
  6794  0D1D  1803               	skipnc
  6795  0D1E  0A25               	incf	trimf@b+1,w
  6796  0D1F  0779               	addwf	??_trimf+1,w
  6797  0D20  00F1               	movwf	i1___lwdiv@divisor+1
  6798  0D21  0926               	comf	trimf@c,w
  6799  0D22  00FA               	movwf	??_trimf+2
  6800  0D23  0927               	comf	trimf@c+1,w
  6801  0D24                     L8:	
  6802  0D24  00FB               	movwf	??_trimf+3
  6803  0D25  0AFA               	incf	??_trimf+2,f
  6804  0D26  1903               	skipnz
  6805  0D27  0AFB               	incf	??_trimf+3,f
  6806  0D28  0820               	movf	trimf@x,w
  6807  0D29  077A               	addwf	??_trimf+2,w
  6808  0D2A  00F2               	movwf	i1___lwdiv@dividend
  6809  0D2B  0821               	movf	trimf@x+1,w
  6810  0D2C  1803               	skipnc
  6811  0D2D  0A21               	incf	trimf@x+1,w
  6812  0D2E  077B               	addwf	??_trimf+3,w
  6813  0D2F  00F3               	movwf	i1___lwdiv@dividend+1
  6814  0D30  120A  158A  22C6  120A  158A  	fcall	i1___lwdiv
  6815  0D35  0871               	movf	?i1___lwdiv+1,w
  6816  0D36  01FD               	clrf	trimf@ua+1
  6817  0D37  07FD               	addwf	trimf@ua+1,f
  6818  0D38  0870               	movf	?i1___lwdiv,w
  6819  0D39  01FC               	clrf	trimf@ua
  6820  0D3A  07FC               	addwf	trimf@ua,f
  6821  0D3B  2D48               	goto	i1l2103
  6822  0D3C                     i1l2099:	
  6823                           
  6824                           ;main.c: 88: else if (x > c)
  6825  0D3C  1283               	bcf	3,5	;RP0=0, select bank0
  6826  0D3D  1303               	bcf	3,6	;RP1=0, select bank0
  6827  0D3E  0821               	movf	trimf@x+1,w
  6828  0D3F  0227               	subwf	trimf@c+1,w
  6829  0D40  1D03               	skipz
  6830  0D41  2D44               	goto	u176_25
  6831  0D42  0820               	movf	trimf@x,w
  6832  0D43  0226               	subwf	trimf@c,w
  6833  0D44                     u176_25:	
  6834  0D44  1803               	skipnc
  6835  0D45  2D48               	goto	i1l2103
  6836  0D46                     i1l2101:	
  6837                           
  6838                           ;main.c: 89: ua = 0;
  6839  0D46  01FC               	clrf	trimf@ua
  6840  0D47  01FD               	clrf	trimf@ua+1
  6841  0D48                     i1l2103:	
  6842                           
  6843                           ;main.c: 91: return(ua);
  6844  0D48  087D               	movf	trimf@ua+1,w
  6845  0D49  1283               	bcf	3,5	;RP0=0, select bank0
  6846  0D4A  1303               	bcf	3,6	;RP1=0, select bank0
  6847  0D4B  01A1               	clrf	?_trimf+1
  6848  0D4C  07A1               	addwf	?_trimf+1,f
  6849  0D4D  087C               	movf	trimf@ua,w
  6850  0D4E  01A0               	clrf	?_trimf
  6851  0D4F  07A0               	addwf	?_trimf,f
  6852  0D50  0008               	return
  6853  0D51                     __end_of_trimf:	
  6854                           
  6855                           	psect	text31
  6856  0D51                     __ptext31:	
  6857 ;; *************** function _trapmf *****************
  6858 ;; Defined at:
  6859 ;;		line 97 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;  x               2    0[BANK0 ] unsigned int 
  6862 ;;  a               2    2[BANK0 ] unsigned int 
  6863 ;;  b               2    4[BANK0 ] unsigned int 
  6864 ;;  c               2    6[BANK0 ] unsigned int 
  6865 ;;  d               2    8[BANK0 ] unsigned int 
  6866 ;; Auto vars:     Size  Location     Type
  6867 ;;  ua              2   12[COMMON] unsigned int 
  6868 ;; Return value:  Size  Location     Type
  6869 ;;                  2    0[BANK0 ] unsigned int 
  6870 ;; Registers used:
  6871 ;;		wreg, status,2, status,0, pclath, cstack
  6872 ;; Tracked objects:
  6873 ;;		On entry : 0/0
  6874 ;;		On exit  : 0/0
  6875 ;;		Unchanged: 0/0
  6876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6877 ;;      Params:         0      10       0       0       0
  6878 ;;      Locals:         2       0       0       0       0
  6879 ;;      Temps:          4       0       0       0       0
  6880 ;;      Totals:         6      10       0       0       0
  6881 ;;Total ram usage:       16 bytes
  6882 ;; Hardware stack levels used:    1
  6883 ;; Hardware stack levels required when called:    1
  6884 ;; This function calls:
  6885 ;;		i1___lwdiv
  6886 ;; This function is called by:
  6887 ;;		_Fuzzy
  6888 ;; This function uses a non-reentrant model
  6889 ;;
  6890                           
  6891                           
  6892                           ;psect for function _trapmf
  6893  0D51                     _trapmf:	
  6894                           
  6895                           ;main.c: 99: unsigned int ua = 0;
  6896                           
  6897                           ;incstack = 0
  6898                           ; Regs used in _trapmf: [wreg+status,2+status,0+pclath+cstack]
  6899  0D51  01FC               	clrf	trapmf@ua
  6900  0D52  01FD               	clrf	trapmf@ua+1
  6901                           
  6902                           ;main.c: 101: if (x <= a)
  6903  0D53  1283               	bcf	3,5	;RP0=0, select bank0
  6904  0D54  1303               	bcf	3,6	;RP1=0, select bank0
  6905  0D55  0821               	movf	trapmf@x+1,w
  6906  0D56  0223               	subwf	trapmf@a+1,w
  6907  0D57  1D03               	skipz
  6908  0D58  2D5B               	goto	u177_25
  6909  0D59  0820               	movf	trapmf@x,w
  6910  0D5A  0222               	subwf	trapmf@a,w
  6911  0D5B                     u177_25:	
  6912  0D5B  1803               	btfsc	3,0
  6913  0D5C  2DE5               	goto	i1l2133
  6914                           
  6915                           ;main.c: 103: else if ((a < x) && (x <= b))
  6916                           
  6917                           ;main.c: 102: ua = 0;
  6918  0D5D  0821               	movf	trapmf@x+1,w
  6919  0D5E  0223               	subwf	trapmf@a+1,w
  6920  0D5F  1D03               	skipz
  6921  0D60  2D63               	goto	u178_25
  6922  0D61  0820               	movf	trapmf@x,w
  6923  0D62  0222               	subwf	trapmf@a,w
  6924  0D63                     u178_25:	
  6925  0D63  1803               	skipnc
  6926  0D64  2D8A               	goto	i1l2119
  6927  0D65  0821               	movf	trapmf@x+1,w
  6928  0D66  0225               	subwf	trapmf@b+1,w
  6929  0D67  1D03               	skipz
  6930  0D68  2D6B               	goto	u179_25
  6931  0D69  0820               	movf	trapmf@x,w
  6932  0D6A  0224               	subwf	trapmf@b,w
  6933  0D6B                     u179_25:	
  6934  0D6B  1C03               	skipc
  6935  0D6C  2D8A               	goto	i1l2119
  6936                           
  6937                           ;main.c: 104: ua = ((x - a) / (b - a));
  6938  0D6D  0922               	comf	trapmf@a,w
  6939  0D6E  00F8               	movwf	??_trapmf
  6940  0D6F  0923               	comf	trapmf@a+1,w
  6941  0D70  00F9               	movwf	??_trapmf+1
  6942  0D71  0AF8               	incf	??_trapmf,f
  6943  0D72  1903               	skipnz
  6944  0D73  0AF9               	incf	??_trapmf+1,f
  6945  0D74  0824               	movf	trapmf@b,w
  6946  0D75  0778               	addwf	??_trapmf,w
  6947  0D76  00F0               	movwf	i1___lwdiv@divisor
  6948  0D77  0825               	movf	trapmf@b+1,w
  6949  0D78  1803               	skipnc
  6950  0D79  0A25               	incf	trapmf@b+1,w
  6951  0D7A  0779               	addwf	??_trapmf+1,w
  6952  0D7B  00F1               	movwf	i1___lwdiv@divisor+1
  6953  0D7C  0922               	comf	trapmf@a,w
  6954  0D7D  00FA               	movwf	??_trapmf+2
  6955  0D7E  0923               	comf	trapmf@a+1,w
  6956  0D7F  00FB               	movwf	??_trapmf+3
  6957  0D80  0AFA               	incf	??_trapmf+2,f
  6958  0D81  1903               	skipnz
  6959  0D82  0AFB               	incf	??_trapmf+3,f
  6960  0D83  0820               	movf	trapmf@x,w
  6961  0D84  077A               	addwf	??_trapmf+2,w
  6962  0D85  00F2               	movwf	i1___lwdiv@dividend
  6963  0D86  0821               	movf	trapmf@x+1,w
  6964  0D87  1803               	skipnc
  6965  0D88  0A21               	incf	trapmf@x+1,w
  6966  0D89  2DCD               	goto	L10
  6967  0D8A                     i1l2119:	
  6968                           
  6969                           ;main.c: 105: else if ((b <= x) && (x <= c))
  6970  0D8A  1283               	bcf	3,5	;RP0=0, select bank0
  6971  0D8B  1303               	bcf	3,6	;RP1=0, select bank0
  6972  0D8C  0825               	movf	trapmf@b+1,w
  6973  0D8D  0221               	subwf	trapmf@x+1,w
  6974  0D8E  1D03               	skipz
  6975  0D8F  2D92               	goto	u180_25
  6976  0D90  0824               	movf	trapmf@b,w
  6977  0D91  0220               	subwf	trapmf@x,w
  6978  0D92                     u180_25:	
  6979  0D92  1C03               	skipc
  6980  0D93  2DA1               	goto	i1l2125
  6981  0D94  0821               	movf	trapmf@x+1,w
  6982  0D95  0227               	subwf	trapmf@c+1,w
  6983  0D96  1D03               	skipz
  6984  0D97  2D9A               	goto	u181_25
  6985  0D98  0820               	movf	trapmf@x,w
  6986  0D99  0226               	subwf	trapmf@c,w
  6987  0D9A                     u181_25:	
  6988  0D9A  1C03               	skipc
  6989  0D9B  2DA1               	goto	i1l2125
  6990                           
  6991                           ;main.c: 106: ua = 1;
  6992  0D9C  3001               	movlw	1
  6993  0D9D  00FC               	movwf	trapmf@ua
  6994  0D9E  3000               	movlw	0
  6995  0D9F  00FD               	movwf	trapmf@ua+1
  6996  0DA0  2DE7               	goto	i1l2135
  6997  0DA1                     i1l2125:	
  6998                           
  6999                           ;main.c: 107: else if ((c < x) && (x <= d))
  7000  0DA1  0821               	movf	trapmf@x+1,w
  7001  0DA2  0227               	subwf	trapmf@c+1,w
  7002  0DA3  1D03               	skipz
  7003  0DA4  2DA7               	goto	u182_25
  7004  0DA5  0820               	movf	trapmf@x,w
  7005  0DA6  0226               	subwf	trapmf@c,w
  7006  0DA7                     u182_25:	
  7007  0DA7  1803               	skipnc
  7008  0DA8  2DDB               	goto	i1l2131
  7009  0DA9  0821               	movf	trapmf@x+1,w
  7010  0DAA  0229               	subwf	trapmf@d+1,w
  7011  0DAB  1D03               	skipz
  7012  0DAC  2DAF               	goto	u183_25
  7013  0DAD  0820               	movf	trapmf@x,w
  7014  0DAE  0228               	subwf	trapmf@d,w
  7015  0DAF                     u183_25:	
  7016  0DAF  1C03               	skipc
  7017  0DB0  2DDB               	goto	i1l2131
  7018                           
  7019                           ;main.c: 108: ua = ((d - x) / (d - c));
  7020  0DB1  0926               	comf	trapmf@c,w
  7021  0DB2  00F8               	movwf	??_trapmf
  7022  0DB3  0927               	comf	trapmf@c+1,w
  7023  0DB4  00F9               	movwf	??_trapmf+1
  7024  0DB5  0AF8               	incf	??_trapmf,f
  7025  0DB6  1903               	skipnz
  7026  0DB7  0AF9               	incf	??_trapmf+1,f
  7027  0DB8  0828               	movf	trapmf@d,w
  7028  0DB9  0778               	addwf	??_trapmf,w
  7029  0DBA  00F0               	movwf	i1___lwdiv@divisor
  7030  0DBB  0829               	movf	trapmf@d+1,w
  7031  0DBC  1803               	skipnc
  7032  0DBD  0A29               	incf	trapmf@d+1,w
  7033  0DBE  0779               	addwf	??_trapmf+1,w
  7034  0DBF  00F1               	movwf	i1___lwdiv@divisor+1
  7035  0DC0  0920               	comf	trapmf@x,w
  7036  0DC1  00FA               	movwf	??_trapmf+2
  7037  0DC2  0921               	comf	trapmf@x+1,w
  7038  0DC3  00FB               	movwf	??_trapmf+3
  7039  0DC4  0AFA               	incf	??_trapmf+2,f
  7040  0DC5  1903               	skipnz
  7041  0DC6  0AFB               	incf	??_trapmf+3,f
  7042  0DC7  0828               	movf	trapmf@d,w
  7043  0DC8  077A               	addwf	??_trapmf+2,w
  7044  0DC9  00F2               	movwf	i1___lwdiv@dividend
  7045  0DCA  0829               	movf	trapmf@d+1,w
  7046  0DCB  1803               	skipnc
  7047  0DCC  0A29               	incf	trapmf@d+1,w
  7048  0DCD                     L10:	
  7049  0DCD  077B               	addwf	??_trapmf+3,w
  7050  0DCE  00F3               	movwf	i1___lwdiv@dividend+1
  7051  0DCF  120A  158A  22C6  120A  158A  	fcall	i1___lwdiv
  7052  0DD4  0871               	movf	?i1___lwdiv+1,w
  7053  0DD5  01FD               	clrf	trapmf@ua+1
  7054  0DD6  07FD               	addwf	trapmf@ua+1,f
  7055  0DD7  0870               	movf	?i1___lwdiv,w
  7056  0DD8  01FC               	clrf	trapmf@ua
  7057  0DD9  07FC               	addwf	trapmf@ua,f
  7058  0DDA  2DE7               	goto	i1l2135
  7059  0DDB                     i1l2131:	
  7060                           
  7061                           ;main.c: 109: else if (x > d)
  7062  0DDB  1283               	bcf	3,5	;RP0=0, select bank0
  7063  0DDC  1303               	bcf	3,6	;RP1=0, select bank0
  7064  0DDD  0821               	movf	trapmf@x+1,w
  7065  0DDE  0229               	subwf	trapmf@d+1,w
  7066  0DDF  1D03               	skipz
  7067  0DE0  2DE3               	goto	u184_25
  7068  0DE1  0820               	movf	trapmf@x,w
  7069  0DE2  0228               	subwf	trapmf@d,w
  7070  0DE3                     u184_25:	
  7071  0DE3  1803               	skipnc
  7072  0DE4  2DE7               	goto	i1l2135
  7073  0DE5                     i1l2133:	
  7074                           
  7075                           ;main.c: 110: ua = 0;
  7076  0DE5  01FC               	clrf	trapmf@ua
  7077  0DE6  01FD               	clrf	trapmf@ua+1
  7078  0DE7                     i1l2135:	
  7079                           
  7080                           ;main.c: 112: return(ua);
  7081  0DE7  087D               	movf	trapmf@ua+1,w
  7082  0DE8  1283               	bcf	3,5	;RP0=0, select bank0
  7083  0DE9  1303               	bcf	3,6	;RP1=0, select bank0
  7084  0DEA  01A1               	clrf	?_trapmf+1
  7085  0DEB  07A1               	addwf	?_trapmf+1,f
  7086  0DEC  087C               	movf	trapmf@ua,w
  7087  0DED  01A0               	clrf	?_trapmf
  7088  0DEE  07A0               	addwf	?_trapmf,f
  7089  0DEF  0008               	return
  7090  0DF0                     __end_of_trapmf:	
  7091                           
  7092                           	psect	text32
  7093  0AC6                     __ptext32:	
  7094 ;; *************** function i1___lwdiv *****************
  7095 ;; Defined at:
  7096 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;  divisor         2    0[COMMON] unsigned int 
  7099 ;;  dividend        2    2[COMMON] unsigned int 
  7100 ;; Auto vars:     Size  Location     Type
  7101 ;;  __lwdiv         2    5[COMMON] unsigned int 
  7102 ;;  __lwdiv         1    7[COMMON] unsigned char 
  7103 ;; Return value:  Size  Location     Type
  7104 ;;                  2    0[COMMON] unsigned int 
  7105 ;; Registers used:
  7106 ;;		wreg, status,2, status,0
  7107 ;; Tracked objects:
  7108 ;;		On entry : 0/0
  7109 ;;		On exit  : 0/0
  7110 ;;		Unchanged: 0/0
  7111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7112 ;;      Params:         4       0       0       0       0
  7113 ;;      Locals:         3       0       0       0       0
  7114 ;;      Temps:          1       0       0       0       0
  7115 ;;      Totals:         8       0       0       0       0
  7116 ;;Total ram usage:        8 bytes
  7117 ;; Hardware stack levels used:    1
  7118 ;; This function calls:
  7119 ;;		Nothing
  7120 ;; This function is called by:
  7121 ;;		_trimf
  7122 ;;		_trapmf
  7123 ;;		_Fuzzy
  7124 ;;		_ISR
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           
  7129                           ;psect for function i1___lwdiv
  7130  0AC6                     i1___lwdiv:	
  7131                           
  7132                           ;incstack = 0
  7133                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  7134  0AC6  01F5               	clrf	i1___lwdiv@quotient
  7135  0AC7  01F6               	clrf	i1___lwdiv@quotient+1
  7136  0AC8  0871               	movf	i1___lwdiv@divisor+1,w
  7137  0AC9  0470               	iorwf	i1___lwdiv@divisor,w
  7138  0ACA  1903               	skipnz
  7139  0ACB  2AFD               	goto	i1l2077
  7140  0ACC  01F7               	clrf	i1___lwdiv@counter
  7141  0ACD  0AF7               	incf	i1___lwdiv@counter,f
  7142  0ACE                     i1l2065:	
  7143  0ACE  1BF1               	btfsc	i1___lwdiv@divisor+1,7
  7144  0ACF  2ADC               	goto	i1l2067
  7145  0AD0  3001               	movlw	1
  7146  0AD1                     u165_25:	
  7147  0AD1  1003               	clrc
  7148  0AD2  0DF0               	rlf	i1___lwdiv@divisor,f
  7149  0AD3  0DF1               	rlf	i1___lwdiv@divisor+1,f
  7150  0AD4  3EFF               	addlw	-1
  7151  0AD5  1D03               	skipz
  7152  0AD6  2AD1               	goto	u165_25
  7153  0AD7  3001               	movlw	1
  7154  0AD8  00F4               	movwf	??i1___lwdiv
  7155  0AD9  0874               	movf	??i1___lwdiv,w
  7156  0ADA  07F7               	addwf	i1___lwdiv@counter,f
  7157  0ADB  2ACE               	goto	i1l2065
  7158  0ADC                     i1l2067:	
  7159  0ADC  3001               	movlw	1
  7160  0ADD                     u167_25:	
  7161  0ADD  1003               	clrc
  7162  0ADE  0DF5               	rlf	i1___lwdiv@quotient,f
  7163  0ADF  0DF6               	rlf	i1___lwdiv@quotient+1,f
  7164  0AE0  3EFF               	addlw	-1
  7165  0AE1  1D03               	skipz
  7166  0AE2  2ADD               	goto	u167_25
  7167  0AE3  0871               	movf	i1___lwdiv@divisor+1,w
  7168  0AE4  0273               	subwf	i1___lwdiv@dividend+1,w
  7169  0AE5  1D03               	skipz
  7170  0AE6  2AE9               	goto	u168_25
  7171  0AE7  0870               	movf	i1___lwdiv@divisor,w
  7172  0AE8  0272               	subwf	i1___lwdiv@dividend,w
  7173  0AE9                     u168_25:	
  7174  0AE9  1C03               	skipc
  7175  0AEA  2AF2               	goto	i1l2073
  7176  0AEB  0870               	movf	i1___lwdiv@divisor,w
  7177  0AEC  02F2               	subwf	i1___lwdiv@dividend,f
  7178  0AED  0871               	movf	i1___lwdiv@divisor+1,w
  7179  0AEE  1C03               	skipc
  7180  0AEF  03F3               	decf	i1___lwdiv@dividend+1,f
  7181  0AF0  02F3               	subwf	i1___lwdiv@dividend+1,f
  7182  0AF1  1475               	bsf	i1___lwdiv@quotient,0
  7183  0AF2                     i1l2073:	
  7184  0AF2  3001               	movlw	1
  7185  0AF3                     u169_25:	
  7186  0AF3  1003               	clrc
  7187  0AF4  0CF1               	rrf	i1___lwdiv@divisor+1,f
  7188  0AF5  0CF0               	rrf	i1___lwdiv@divisor,f
  7189  0AF6  3EFF               	addlw	-1
  7190  0AF7  1D03               	skipz
  7191  0AF8  2AF3               	goto	u169_25
  7192  0AF9  3001               	movlw	1
  7193  0AFA  02F7               	subwf	i1___lwdiv@counter,f
  7194  0AFB  1D03               	btfss	3,2
  7195  0AFC  2ADC               	goto	i1l2067
  7196  0AFD                     i1l2077:	
  7197  0AFD  0876               	movf	i1___lwdiv@quotient+1,w
  7198  0AFE  01F1               	clrf	?i1___lwdiv+1
  7199  0AFF  07F1               	addwf	?i1___lwdiv+1,f
  7200  0B00  0875               	movf	i1___lwdiv@quotient,w
  7201  0B01  01F0               	clrf	?i1___lwdiv
  7202  0B02  07F0               	addwf	?i1___lwdiv,f
  7203  0B03  0008               	return
  7204  0B04                     __end_ofi1___lwdiv:	
  7205                           
  7206                           	psect	text33
  7207  08DF                     __ptext33:	
  7208 ;; *************** function _max_val *****************
  7209 ;; Defined at:
  7210 ;;		line 127 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  a               2    0[COMMON] unsigned int 
  7213 ;;  b               2    2[COMMON] unsigned int 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;		None
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  2    0[COMMON] unsigned int 
  7218 ;; Registers used:
  7219 ;;		wreg, status,2, status,0
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7225 ;;      Params:         4       0       0       0       0
  7226 ;;      Locals:         0       0       0       0       0
  7227 ;;      Temps:          0       0       0       0       0
  7228 ;;      Totals:         4       0       0       0       0
  7229 ;;Total ram usage:        4 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; This function calls:
  7232 ;;		Nothing
  7233 ;; This function is called by:
  7234 ;;		_Fuzzy
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           
  7239                           ;psect for function _max_val
  7240  08DF                     _max_val:	
  7241                           
  7242                           ;main.c: 129: if (a > b)
  7243                           
  7244                           ;incstack = 0
  7245                           ; Regs used in _max_val: [wreg+status,2+status,0]
  7246  08DF  0871               	movf	max_val@a+1,w
  7247  08E0  0273               	subwf	max_val@b+1,w
  7248  08E1  1D03               	skipz
  7249  08E2  28E5               	goto	u185_25
  7250  08E3  0870               	movf	max_val@a,w
  7251  08E4  0272               	subwf	max_val@b,w
  7252  08E5                     u185_25:	
  7253  08E5  1C03               	btfss	3,0
  7254  08E6  0008               	return
  7255                           
  7256                           ;main.c: 131: else
  7257                           ;main.c: 132: return b;
  7258                           
  7259                           ;main.c: 130: return a;
  7260  08E7  0873               	movf	max_val@b+1,w
  7261  08E8  01F1               	clrf	?_max_val+1
  7262  08E9  07F1               	addwf	?_max_val+1,f
  7263  08EA  0872               	movf	max_val@b,w
  7264  08EB  01F0               	clrf	?_max_val
  7265  08EC  07F0               	addwf	?_max_val,f
  7266  08ED  0008               	return
  7267  08EE                     __end_of_max_val:	
  7268                           
  7269                           	psect	text34
  7270  092E                     __ptext34:	
  7271 ;; *************** function ___lwtoft *****************
  7272 ;; Defined at:
  7273 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  c               2    8[COMMON] unsigned int 
  7276 ;; Auto vars:     Size  Location     Type
  7277 ;;		None
  7278 ;; Return value:  Size  Location     Type
  7279 ;;                  3    8[COMMON] float 
  7280 ;; Registers used:
  7281 ;;		wreg, status,2, status,0, pclath, cstack
  7282 ;; Tracked objects:
  7283 ;;		On entry : 0/0
  7284 ;;		On exit  : 0/0
  7285 ;;		Unchanged: 0/0
  7286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7287 ;;      Params:         3       0       0       0       0
  7288 ;;      Locals:         0       0       0       0       0
  7289 ;;      Temps:          1       0       0       0       0
  7290 ;;      Totals:         4       0       0       0       0
  7291 ;;Total ram usage:        4 bytes
  7292 ;; Hardware stack levels used:    1
  7293 ;; Hardware stack levels required when called:    1
  7294 ;; This function calls:
  7295 ;;		___ftpack
  7296 ;; This function is called by:
  7297 ;;		_Fuzzy
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           
  7302                           ;psect for function ___lwtoft
  7303  092E                     ___lwtoft:	
  7304                           
  7305                           ;incstack = 0
  7306                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  7307  092E  0878               	movf	___lwtoft@c,w
  7308  092F  00F0               	movwf	___ftpack@arg
  7309  0930  0879               	movf	___lwtoft@c+1,w
  7310  0931  00F1               	movwf	___ftpack@arg+1
  7311  0932  01F2               	clrf	___ftpack@arg+2
  7312  0933  308E               	movlw	142
  7313  0934  00FB               	movwf	??___lwtoft
  7314  0935  087B               	movf	??___lwtoft,w
  7315  0936  00F3               	movwf	___ftpack@exp
  7316  0937  01F4               	clrf	___ftpack@sign
  7317  0938  120A  158A  23FC   	fcall	___ftpack
  7318  093B  0870               	movf	?___ftpack,w
  7319  093C  00F8               	movwf	?___lwtoft
  7320  093D  0871               	movf	?___ftpack+1,w
  7321  093E  00F9               	movwf	?___lwtoft+1
  7322  093F  0872               	movf	?___ftpack+2,w
  7323  0940  00FA               	movwf	?___lwtoft+2
  7324  0941  0008               	return
  7325  0942                     __end_of___lwtoft:	
  7326                           
  7327                           	psect	text35
  7328  0BFC                     __ptext35:	
  7329 ;; *************** function ___ftpack *****************
  7330 ;; Defined at:
  7331 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  7332 ;; Parameters:    Size  Location     Type
  7333 ;;  arg             3    0[COMMON] unsigned um
  7334 ;;  exp             1    3[COMMON] unsigned char 
  7335 ;;  sign            1    4[COMMON] unsigned char 
  7336 ;; Auto vars:     Size  Location     Type
  7337 ;;		None
  7338 ;; Return value:  Size  Location     Type
  7339 ;;                  3    0[COMMON] float 
  7340 ;; Registers used:
  7341 ;;		wreg, status,2, status,0
  7342 ;; Tracked objects:
  7343 ;;		On entry : 0/0
  7344 ;;		On exit  : 0/0
  7345 ;;		Unchanged: 0/0
  7346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7347 ;;      Params:         5       0       0       0       0
  7348 ;;      Locals:         0       0       0       0       0
  7349 ;;      Temps:          3       0       0       0       0
  7350 ;;      Totals:         8       0       0       0       0
  7351 ;;Total ram usage:        8 bytes
  7352 ;; Hardware stack levels used:    1
  7353 ;; This function calls:
  7354 ;;		Nothing
  7355 ;; This function is called by:
  7356 ;;		___lwtoft
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           
  7361                           ;psect for function ___ftpack
  7362  0BFC                     ___ftpack:	
  7363                           
  7364                           ;incstack = 0
  7365                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7366  0BFC  0873               	movf	___ftpack@exp,w
  7367  0BFD  1903               	btfsc	3,2
  7368  0BFE  2C04               	goto	i1l2025
  7369  0BFF  0872               	movf	___ftpack@arg+2,w
  7370  0C00  0471               	iorwf	___ftpack@arg+1,w
  7371  0C01  0470               	iorwf	___ftpack@arg,w
  7372  0C02  1D03               	skipz
  7373  0C03  2C17               	goto	i1l2031
  7374  0C04                     i1l2025:	
  7375  0C04  3000               	movlw	0
  7376  0C05  00F0               	movwf	?___ftpack
  7377  0C06  3000               	movlw	0
  7378  0C07  00F1               	movwf	?___ftpack+1
  7379  0C08  3000               	movlw	0
  7380  0C09  00F2               	movwf	?___ftpack+2
  7381  0C0A  0008               	return
  7382  0C0B                     i1l2029:	
  7383  0C0B  3001               	movlw	1
  7384  0C0C  00F5               	movwf	??___ftpack
  7385  0C0D  0875               	movf	??___ftpack,w
  7386  0C0E  07F3               	addwf	___ftpack@exp,f
  7387  0C0F  3001               	movlw	1
  7388  0C10                     u154_25:	
  7389  0C10  1003               	clrc
  7390  0C11  0CF2               	rrf	___ftpack@arg+2,f
  7391  0C12  0CF1               	rrf	___ftpack@arg+1,f
  7392  0C13  0CF0               	rrf	___ftpack@arg,f
  7393  0C14  3EFF               	addlw	-1
  7394  0C15  1D03               	skipz
  7395  0C16  2C10               	goto	u154_25
  7396  0C17                     i1l2031:	
  7397  0C17  30FE               	movlw	254
  7398  0C18  0572               	andwf	___ftpack@arg+2,w
  7399  0C19  1903               	btfsc	3,2
  7400  0C1A  2C32               	goto	i1l768
  7401  0C1B  2C0B               	goto	i1l2029
  7402  0C1C                     i1l2033:	
  7403  0C1C  3001               	movlw	1
  7404  0C1D  00F5               	movwf	??___ftpack
  7405  0C1E  0875               	movf	??___ftpack,w
  7406  0C1F  07F3               	addwf	___ftpack@exp,f
  7407  0C20  3001               	movlw	1
  7408  0C21  07F0               	addwf	___ftpack@arg,f
  7409  0C22  3000               	movlw	0
  7410  0C23  1803               	skipnc
  7411  0C24  3001               	movlw	1
  7412  0C25  07F1               	addwf	___ftpack@arg+1,f
  7413  0C26  3000               	movlw	0
  7414  0C27  1803               	skipnc
  7415  0C28  3001               	movlw	1
  7416  0C29  07F2               	addwf	___ftpack@arg+2,f
  7417  0C2A  3001               	movlw	1
  7418  0C2B                     u156_25:	
  7419  0C2B  1003               	clrc
  7420  0C2C  0CF2               	rrf	___ftpack@arg+2,f
  7421  0C2D  0CF1               	rrf	___ftpack@arg+1,f
  7422  0C2E  0CF0               	rrf	___ftpack@arg,f
  7423  0C2F  3EFF               	addlw	-1
  7424  0C30  1D03               	skipz
  7425  0C31  2C2B               	goto	u156_25
  7426  0C32                     i1l768:	
  7427  0C32  30FF               	movlw	255
  7428  0C33  0572               	andwf	___ftpack@arg+2,w
  7429  0C34  1903               	btfsc	3,2
  7430  0C35  2C41               	goto	i1l2041
  7431  0C36  2C1C               	goto	i1l2033
  7432  0C37                     i1l2039:	
  7433  0C37  3001               	movlw	1
  7434  0C38  02F3               	subwf	___ftpack@exp,f
  7435  0C39  3001               	movlw	1
  7436  0C3A                     u158_25:	
  7437  0C3A  1003               	clrc
  7438  0C3B  0DF0               	rlf	___ftpack@arg,f
  7439  0C3C  0DF1               	rlf	___ftpack@arg+1,f
  7440  0C3D  0DF2               	rlf	___ftpack@arg+2,f
  7441  0C3E  3EFF               	addlw	-1
  7442  0C3F  1D03               	skipz
  7443  0C40  2C3A               	goto	u158_25
  7444  0C41                     i1l2041:	
  7445  0C41  1FF1               	btfss	___ftpack@arg+1,7
  7446  0C42  2C37               	goto	i1l2039
  7447  0C43  1873               	btfsc	___ftpack@exp,0
  7448  0C44  2C4B               	goto	i1l774
  7449  0C45  30FF               	movlw	255
  7450  0C46  05F0               	andwf	___ftpack@arg,f
  7451  0C47  307F               	movlw	127
  7452  0C48  05F1               	andwf	___ftpack@arg+1,f
  7453  0C49  30FF               	movlw	255
  7454  0C4A  05F2               	andwf	___ftpack@arg+2,f
  7455  0C4B                     i1l774:	
  7456  0C4B  1003               	clrc
  7457  0C4C  0CF3               	rrf	___ftpack@exp,f
  7458  0C4D  0873               	movf	___ftpack@exp,w
  7459  0C4E  00F5               	movwf	??___ftpack
  7460  0C4F  01F6               	clrf	??___ftpack+1
  7461  0C50  01F7               	clrf	??___ftpack+2
  7462  0C51  3010               	movlw	16
  7463  0C52                     u161_25:	
  7464  0C52  1003               	clrc
  7465  0C53  0DF5               	rlf	??___ftpack,f
  7466  0C54  0DF6               	rlf	??___ftpack+1,f
  7467  0C55  0DF7               	rlf	??___ftpack+2,f
  7468  0C56  3EFF               	addlw	-1
  7469  0C57  1D03               	skipz
  7470  0C58  2C52               	goto	u161_25
  7471  0C59  0875               	movf	??___ftpack,w
  7472  0C5A  04F0               	iorwf	___ftpack@arg,f
  7473  0C5B  0876               	movf	??___ftpack+1,w
  7474  0C5C  04F1               	iorwf	___ftpack@arg+1,f
  7475  0C5D  0877               	movf	??___ftpack+2,w
  7476  0C5E  04F2               	iorwf	___ftpack@arg+2,f
  7477  0C5F  0874               	movf	___ftpack@sign,w
  7478  0C60  1903               	btfsc	3,2
  7479  0C61  0008               	return
  7480  0C62  17F2               	bsf	___ftpack@arg+2,7
  7481  0C63  0008               	return
  7482  0C64                     __end_of___ftpack:	
  7483                           
  7484                           	psect	text36
  7485  0B9D                     __ptext36:	
  7486 ;; *************** function ___ftge *****************
  7487 ;; Defined at:
  7488 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  ff1             3    0[BANK0 ] float 
  7491 ;;  ff2             3    3[BANK0 ] float 
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;		None
  7494 ;; Return value:  Size  Location     Type
  7495 ;;		None               void
  7496 ;; Registers used:
  7497 ;;		wreg, status,2, status,0
  7498 ;; Tracked objects:
  7499 ;;		On entry : 0/0
  7500 ;;		On exit  : 0/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7503 ;;      Params:         0       6       0       0       0
  7504 ;;      Locals:         0       0       0       0       0
  7505 ;;      Temps:          0       6       0       0       0
  7506 ;;      Totals:         0      12       0       0       0
  7507 ;;Total ram usage:       12 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; This function calls:
  7510 ;;		Nothing
  7511 ;; This function is called by:
  7512 ;;		_Fuzzy
  7513 ;; This function uses a non-reentrant model
  7514 ;;
  7515                           
  7516                           
  7517                           ;psect for function ___ftge
  7518  0B9D                     ___ftge:	
  7519                           
  7520                           ;incstack = 0
  7521                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7522  0B9D  1283               	bcf	3,5	;RP0=0, select bank0
  7523  0B9E  1303               	bcf	3,6	;RP1=0, select bank0
  7524  0B9F  1FA2               	btfss	___ftge@ff1+2,7
  7525  0BA0  2BC6               	goto	i1l2237
  7526  0BA1  3000               	movlw	0
  7527  0BA2  00A6               	movwf	??___ftge
  7528  0BA3  3000               	movlw	0
  7529  0BA4  00A7               	movwf	??___ftge+1
  7530  0BA5  3080               	movlw	128
  7531  0BA6  00A8               	movwf	??___ftge+2
  7532  0BA7  0920               	comf	___ftge@ff1,w
  7533  0BA8  00A9               	movwf	??___ftge+3
  7534  0BA9  0921               	comf	___ftge@ff1+1,w
  7535  0BAA  00AA               	movwf	??___ftge+4
  7536  0BAB  0922               	comf	___ftge@ff1+2,w
  7537  0BAC  00AB               	movwf	??___ftge+5
  7538  0BAD  0AA9               	incf	??___ftge+3,f
  7539  0BAE  1903               	skipnz
  7540  0BAF  0AAA               	incf	??___ftge+4,f
  7541  0BB0  1903               	skipnz
  7542  0BB1  0AAB               	incf	??___ftge+5,f
  7543  0BB2  0829               	movf	??___ftge+3,w
  7544  0BB3  07A6               	addwf	??___ftge,f
  7545  0BB4  082A               	movf	??___ftge+4,w
  7546  0BB5  1803               	skipnc
  7547  0BB6  0F2A               	incfsz	??___ftge+4,w
  7548  0BB7  2BB9               	goto	u204_21
  7549  0BB8  2BBA               	goto	u204_22
  7550  0BB9                     u204_21:	
  7551  0BB9  07A7               	addwf	??___ftge+1,f
  7552  0BBA                     u204_22:	
  7553  0BBA  082B               	movf	??___ftge+5,w
  7554  0BBB  1803               	skipnc
  7555  0BBC  0F2B               	incfsz	??___ftge+5,w
  7556  0BBD  2BBF               	goto	u204_23
  7557  0BBE  2BC0               	goto	u204_24
  7558  0BBF                     u204_23:	
  7559  0BBF  07A8               	addwf	??___ftge+2,f
  7560  0BC0                     u204_24:	
  7561  0BC0  0826               	movf	??___ftge,w
  7562  0BC1  00A0               	movwf	___ftge@ff1
  7563  0BC2  0827               	movf	??___ftge+1,w
  7564  0BC3  00A1               	movwf	___ftge@ff1+1
  7565  0BC4  0828               	movf	??___ftge+2,w
  7566  0BC5  00A2               	movwf	___ftge@ff1+2
  7567  0BC6                     i1l2237:	
  7568  0BC6  1FA5               	btfss	___ftge@ff2+2,7
  7569  0BC7  2BED               	goto	i1l2241
  7570  0BC8  3000               	movlw	0
  7571  0BC9  00A6               	movwf	??___ftge
  7572  0BCA  3000               	movlw	0
  7573  0BCB  00A7               	movwf	??___ftge+1
  7574  0BCC  3080               	movlw	128
  7575  0BCD  00A8               	movwf	??___ftge+2
  7576  0BCE  0923               	comf	___ftge@ff2,w
  7577  0BCF  00A9               	movwf	??___ftge+3
  7578  0BD0  0924               	comf	___ftge@ff2+1,w
  7579  0BD1  00AA               	movwf	??___ftge+4
  7580  0BD2  0925               	comf	___ftge@ff2+2,w
  7581  0BD3  00AB               	movwf	??___ftge+5
  7582  0BD4  0AA9               	incf	??___ftge+3,f
  7583  0BD5  1903               	skipnz
  7584  0BD6  0AAA               	incf	??___ftge+4,f
  7585  0BD7  1903               	skipnz
  7586  0BD8  0AAB               	incf	??___ftge+5,f
  7587  0BD9  0829               	movf	??___ftge+3,w
  7588  0BDA  07A6               	addwf	??___ftge,f
  7589  0BDB  082A               	movf	??___ftge+4,w
  7590  0BDC  1803               	skipnc
  7591  0BDD  0F2A               	incfsz	??___ftge+4,w
  7592  0BDE  2BE0               	goto	u206_21
  7593  0BDF  2BE1               	goto	u206_22
  7594  0BE0                     u206_21:	
  7595  0BE0  07A7               	addwf	??___ftge+1,f
  7596  0BE1                     u206_22:	
  7597  0BE1  082B               	movf	??___ftge+5,w
  7598  0BE2  1803               	skipnc
  7599  0BE3  0F2B               	incfsz	??___ftge+5,w
  7600  0BE4  2BE6               	goto	u206_23
  7601  0BE5  2BE7               	goto	u206_24
  7602  0BE6                     u206_23:	
  7603  0BE6  07A8               	addwf	??___ftge+2,f
  7604  0BE7                     u206_24:	
  7605  0BE7  0826               	movf	??___ftge,w
  7606  0BE8  00A3               	movwf	___ftge@ff2
  7607  0BE9  0827               	movf	??___ftge+1,w
  7608  0BEA  00A4               	movwf	___ftge@ff2+1
  7609  0BEB  0828               	movf	??___ftge+2,w
  7610  0BEC  00A5               	movwf	___ftge@ff2+2
  7611  0BED                     i1l2241:	
  7612  0BED  3080               	movlw	128
  7613  0BEE  06A2               	xorwf	___ftge@ff1+2,f
  7614  0BEF  3080               	movlw	128
  7615  0BF0  06A5               	xorwf	___ftge@ff2+2,f
  7616  0BF1  0825               	movf	___ftge@ff2+2,w
  7617  0BF2  0222               	subwf	___ftge@ff1+2,w
  7618  0BF3  1D03               	skipz
  7619  0BF4  0008               	return
  7620  0BF5  0824               	movf	___ftge@ff2+1,w
  7621  0BF6  0221               	subwf	___ftge@ff1+1,w
  7622  0BF7  1D03               	skipz
  7623  0BF8  0008               	return
  7624  0BF9  0823               	movf	___ftge@ff2,w
  7625  0BFA  0220               	subwf	___ftge@ff1,w
  7626  0BFB  0008               	return
  7627  0BFC                     __end_of___ftge:	
  7628  007E                     btemp	set	126	;btemp
  7629  007E                     wtemp	set	126
  7630  007E                     wtemp0	set	126
  7631  0080                     wtemp1	set	128
  7632  0082                     wtemp2	set	130
  7633  0084                     wtemp3	set	132
  7634  0086                     wtemp4	set	134
  7635  0088                     wtemp5	set	136
  7636  007F                     wtemp6	set	127
  7637  007E                     ttemp	set	126
  7638  007E                     ttemp0	set	126
  7639  0081                     ttemp1	set	129
  7640  0084                     ttemp2	set	132
  7641  0087                     ttemp3	set	135
  7642  007F                     ttemp4	set	127
  7643  007E                     ltemp	set	126
  7644  007E                     ltemp0	set	126
  7645  0082                     ltemp1	set	130
  7646  0086                     ltemp2	set	134
  7647  0080                     ltemp3	set	128


Data Sizes:
    Strings     263
    Constant    10
    Data        4
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     33      57
    BANK1            80     22      80
    BANK3            96      3       3
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_15(CODE[5]), STR_14(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> display_pwm(BANK1[10]), display_rpm(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    S1254$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    LCD_WriteString@Str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_18(CODE[6]), STR_17(CODE[6]), display_pwm(BANK1[10]), display_rpm(BANK1[10]), 
		 -> STR_13(CODE[17]), 

    USART_WriteString@str	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_19(CODE[40]), STR_16(CODE[3]), display_rpm(BANK1[10]), STR_12(CODE[20]), 
		 -> STR_11(CODE[29]), STR_10(CODE[15]), STR_9(CODE[15]), STR_8(CODE[14]), 
		 -> STR_7(CODE[14]), STR_6(CODE[14]), STR_5(CODE[14]), STR_4(CODE[14]), 
		 -> STR_3(CODE[13]), STR_2(CODE[13]), STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1___wmul
    _USART_ReceiveChar->i1_USART_WriteString
    i1_USART_WriteString->i1_USART_WriteChar
    _Fuzzy->_trapmf
    _Fuzzy->_trimf
    _Fuzzy->i1___wmul
    i1___wmul->i1___lwdiv
    i1_PWM_DutyCycle2->i1___wmul
    _trimf->i1___lwdiv
    _trapmf->i1___lwdiv
    ___lwtoft->___ftpack
    ___ftge->___lwtoft

Critical Paths under _main in BANK0

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USART_WriteString->_USART_WriteChar
    _USART_Init->___aldiv
    _LCD_WriteString->_LCD_WriteData
    _LCD_Init->_LCD_WriteCmd
    _LCD_Clear->_LCD_WriteCmd

Critical Paths under _ISR in BANK0

    _ISR->_Fuzzy
    _Fuzzy->___ftge

Critical Paths under _main in BANK1

    _main->_sprintf
    _sprintf->___lwmod
    _USART_Init->___aldiv

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    6189
                                              0 BANK3      3     3      0
                           _ADC_Init
                          _LCD_Clear
                         _LCD_Cursor
                           _LCD_Init
                    _LCD_WriteString
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                           _PWM_Init
                        _TIMER0_Init
                         _TIMER0_Set
                         _USART_Init
                  _USART_WriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    14      4    3572
                                              4 BANK1     18    14      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                             23 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     626
                                             23 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     386
                                             31 BANK0      2     2      0
                                              0 BANK1      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     899
                                             23 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _USART_WriteString                                    2     0      2     741
                                             24 BANK0      2     0      2
                    _USART_WriteChar
 ---------------------------------------------------------------------------------
 (2) _USART_WriteChar                                      1     1      0      22
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           8     4      4     707
                                              6 BANK1      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     599
                                             23 BANK0      9     1      8
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_Set                                           1     1      0      22
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle2                                       4     2      2     222
                                             23 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle1                                       4     2      2     108
                                             23 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteString                                      2     0      2     387
                                             25 BANK0      2     0      2
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        2     2      0      22
                                             23 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      22
                                             25 BANK0      2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Cursor                                           3     2      1     386
                                             23 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0      22
                                             25 BANK0      2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteCmd                                         2     2      0      22
                                             23 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0   10731
                                             19 BANK0      4     4      0
                              _Fuzzy
                  _USART_ReceiveChar
                   i1_PWM_DutyCycle2
                       i1_TIMER0_Set
                i1_USART_WriteString
                          i1___lwdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (4) i1_TIMER0_Set                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _USART_ReceiveChar                                    2     2      0     377
                                              3 COMMON     2     2      0
                i1_USART_WriteString
 ---------------------------------------------------------------------------------
 (4) i1_USART_WriteString                                  2     0      2     353
                                              1 COMMON     2     0      2
                  i1_USART_WriteChar
 ---------------------------------------------------------------------------------
 (5) i1_USART_WriteChar                                    1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Fuzzy                                                7     5      2    9083
                                             12 BANK0      7     5      2
                             ___ftge
                           ___lwtoft
                            _max_val
                             _trapmf
                              _trimf
                   i1_PWM_DutyCycle2
                          i1___lwdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (4) i1___wmul                                             6     2      4     300
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) i1_PWM_DutyCycle2                                     4     2      2     122
                                              0 BANK0      4     2      2
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _trimf                                               14     6      8    1453
                                              8 COMMON     6     6      0
                                              0 BANK0      8     0      8
                          i1___lwdiv
 ---------------------------------------------------------------------------------
 (5) _trapmf                                              16     6     10    2310
                                              8 COMMON     6     6      0
                                              0 BANK0     10     0     10
                          i1___lwdiv
 ---------------------------------------------------------------------------------
 (4) i1___lwdiv                                            8     4      4     474
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (5) _max_val                                              4     0      4     472
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             4     1      3    2529
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    1931
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (5) ___ftge                                              12     6      6    1288
                                              0 BANK0     12     6      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _LCD_Clear
     _LCD_WriteCmd
   _LCD_Cursor
   _LCD_Init
     _LCD_WriteCmd
   _LCD_WriteString
     _LCD_WriteData
   _PWM_DutyCycle1
   _PWM_DutyCycle2
   _PWM_Init
   _TIMER0_Init
   _TIMER0_Set
   _USART_Init
     ___aldiv
   _USART_WriteString
     _USART_WriteChar
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _ISR (ROOT)
   _Fuzzy
     ___ftge
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _max_val
     _trapmf
       i1___lwdiv
     _trimf
       i1___lwdiv
     i1_PWM_DutyCycle2
       i1___wmul (ARG)
         i1___lwdiv (ARG)
     i1___lwdiv
     i1___wmul
       i1___lwdiv (ARG)
   _USART_ReceiveChar
     i1_USART_WriteString
       i1_USART_WriteChar
   i1_PWM_DutyCycle2
     i1___wmul (ARG)
       i1___lwdiv (ARG)
   i1_TIMER0_Set
   i1_USART_WriteString
     i1_USART_WriteChar
   i1___lwdiv
   i1___wmul
     i1___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      3       3       9        3.1%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     16      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     21      39       5       71.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9A      12        0.0%
ABS                  0      0      9A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue May 24 16:38:31 2022

           ?i1_PWM_DutyCycle2 0020                             _x 0051                             _y 0053  
                           pc 0002                   ?_LCD_Cursor 0037       __size_of_PWM_DutyCycle1 001B  
     __size_of_PWM_DutyCycle2 001B                   __CFG_CP$OFF 0000                   _SSPSTATbits 0094  
                          _tf 00EE                            fsr 0004           ___wmul@multiplicand 0039  
          ??i1_PWM_DutyCycle2 0022              i1___wmul@product 007C                 _contagens_tm0 00A4  
                         l211 0F50                           l236 08D2                           l506 0561  
                         l607 0A84                           l662 0E06                           l488 044C  
                         _PR2 0092                  __CFG_CPD$OFF 0000                           _ISR 063A  
                         _tip 004D                           _rpm 00B6                           fsr0 0004  
                         _pwm 0047                           _sum 00BA    __size_of_USART_WriteString 0025  
                         indf 0000                  __CFG_FOSC$HS 0000             ??_LCD_WriteString 003B  
                __CFG_LVP$OFF 0000                          ?_ISR 0070            LCD_WriteString@Str 0039  
                        l3123 05C4                          l3107 0595                          l3115 05AB  
                        l3051 0468                          l3117 05AF                          l3141 0633  
                        l3045 0448                          l3055 0484                          l3137 05D7  
                        l3129 05D3                          l3081 0526                          l3065 04E2  
                        l3049 0453                          l3067 0507                          l3139 0418  
                        l3077 0520                          l3097 0580                          l3089 0553  
                        l3099 0584                          l2469 0A53                          l2575 094C  
                        l2589 0A2E                          l2941 0E84                          l2927 0E30  
                        l2919 0E1A                          l2945 0E94                          l2937 0E74  
                        l2929 0E45                          l2961 0B1C                          l2971 0B3D  
                        l2893 091A                          l2967 0B32                          l2959 0B0E  
                        l2983 07BB                          l2985 07CF                          l2993 07EC  
                        l2899 0A7C                          l2989 07DF                          STR_1 10EA  
                        STR_2 10F8                          STR_3 1105                          STR_4 10CE  
                        STR_5 10B2                          STR_6 10A4                          STR_7 10DC  
                        STR_8 10C0                          STR_9 1086                          u3015 0E48  
                        u3025 0E61                          u3105 0B29                          u3035 0E75  
                        u3115 0B33                          u3145 07C2                          u3075 0B11  
                        u2525 099F                          u3165 07D7                          u3095 0B1D  
                        u3175 07E0                          u3255 0549                          u3407 0FF9  
                        u3417 0906                          u2465 09BA                          u3507 0952  
                        u3427 0C70                          u3195 0B4F                          u3517 0AA9  
                        u3437 0C80                          u3527 0AB7                          u3447 0C8E  
                        u3295 0570                          u3537 0AC3                          u3457 0C9A  
                        u3547 08F7                          u3467 0CA6                          u3477 0CB4  
                        u3397 0F49                          u3487 0CC2                          u2935 0A85  
                        u3497 0CCE                          u2945 0A8C                          u2995 0E37  
                        _OERR 00C1                          _TMR0 0001                          _TMR1 000E  
                        _main 0EAB                  ___ftpack@arg 0070            __size_of_LCD_Clear 0029  
                ___ftpack@exp 0073                          _temp 004B                          btemp 007E  
            __end_of_ADC_Init 092E                          ltemp 007E                          start 0012  
                        ttemp 007E                          wtemp 007E                 ?_LCD_WriteCmd 0070  
               _LCD_WriteData 08FD       __end_of_USART_WriteChar 08D7                         ??_ISR 0033  
                 ?_TIMER0_Set 0070              __end_of_LCD_Init 0CD1               __end_of___aldiv 0EAB  
                       ?_main 0070                         _EEADR 010D                         STR_10 1095  
                       STR_11 1044                         STR_12 1061                         STR_13 1075  
                       STR_14 111E                         STR_15 111E                         STR_16 1092  
                       STR_17 1118                 __CFG_WDTE$OFF 0000                         STR_18 1112  
                       STR_19 101C                         _T1CON 0010               __end_of___lwdiv 0B44  
                       i1l163 005B                         i1l236 08C8                         i1l192 06AB  
             __end_of___lwmod 07F5                         i1l195 06C7                         i1l607 09CE  
                       i1l774 0C4B                         i1l768 0C32                         _RCREG 001A  
                       _TMR1H 000F                         _TMR1L 000E                         _SPBRG 0099  
                       _PORTA 0005                         _PORTB 0006                         _PORTC 0007  
                       _PORTD 0008                         _PORTE 0009                         _TRISA 0085  
                       _TRISB 0086                         _TRISC 0087                         _TRISD 0088  
                       _TRISE 0089                         _TXREG 0019                 __CFG_PWRTE$ON 0000  
                       _Fuzzy 0044                         _foTip 00AC                         _ideal 00AE  
                       _derro 00A8               __end_of_dpowers 101C               __end_of_max_val 08EE  
             __end_of_isdigit 091C                 ___ftpack@sign 0074                         _trimf 0CD1  
              __CFG_BOREN$OFF 0000           __size_of_LCD_Cursor 0016                         pclath 000A  
            __end_of_PWM_Init 0A2E              __end_ofi1___wmul 09E7                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
         i1___wmul@multiplier 0078                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F               __end_of_sprintf 063A  
          __size_ofi1___lwdiv 003E                ??_LCD_WriteCmd 0037                ?_LCD_WriteData 0070  
                 ?_USART_Init 00DE         i1TIMER0_Set@contagens 0070               __initialization 0015  
                __end_of_main 1000                        ??_main 0190                  ?_TIMER0_Init 0070  
           __end_of_LCD_Clear 0AC6                        ?_Fuzzy 002C                        _ADRESH 001E  
                      _ADRESL 009E                        _EEDATA 010C                        _CCPR1L 0015  
                      _CCPR2L 001B                        _EECON2 018D              __end_of___ftpack 0C64  
                      ?_trimf 0020                        i1l2101 0D46                        i1l2031 0C17  
                      i1l2103 0D48                        i1l2041 0C41                        i1l2033 0C1C  
                      i1l2025 0C04                        i1l2131 0DDB                        i1l2029 0C0B  
                      i1l2133 0DE5                        i1l2125 0DA1                        i1l2039 0C37  
                      i1l2119 0D8A                        i1l2135 0DE7                        i1l2311 09E7  
                      i1l2241 0BED                        i1l2073 0AF2                        i1l2065 0ACE  
                      i1l2067 0ADC                        i1l2237 0BC6                        i1l2077 0AFD  
                      i1l2093 0D00                        i1l2405 02E7                        i1l2319 09C6  
                      i1l2425 0386                        i1l2345 007E                        i1l2337 005C  
                      i1l2099 0D3C                        i1l2435 03F9                        i1l2419 033C  
                      i1l2429 03AE                        i1l2373 0199                        i1l2357 0112  
                      i1l2375 01A6                        i1l2359 011F                        i1l2393 025C  
                      i1l2457 098B                        i1l2449 097C                        i1l2387 0220  
                      i1l2389 022D                        i1l2805 0768                        i1l2733 0679  
                      i1l2399 02AE                        i1l2727 0662                        i1l2817 07A1  
                      i1l2819 07A2                        i1l2771 06F6                        i1l2739 0690  
                      i1l2765 06DF                        i1l2749 06AC                        i1l2783 0724  
                      i1l2759 06C8                        u204_21 0BB9                        i1l2777 070D  
                      i1l2793 074B                        u204_22 0BBA                        u204_23 0BBF  
                      u204_24 0BC0                        i1l2789 073B                        u206_21 0BE0  
                      u206_22 0BE1                        u206_23 0BE6                        u206_24 0BE7  
                      u222_25 0969                        u230_25 0107                        u224_25 09CF  
                      u161_25 0C52                        u225_25 09D6                        u233_25 018E  
                      u154_25 0C10                        u171_25 0CDB                        u235_25 0215  
                      u156_25 0C2B                        u180_25 0D92                        u172_25 0CE3  
                      u165_25 0AD1                        u181_25 0D9A                        u173_25 0CEB  
                      u158_25 0C3A                        u182_25 0DA7                        u174_25 0D08  
                      u167_25 0ADD                        u183_25 0DAF                        u175_25 0D10  
                      u168_25 0AE9                        u184_25 0DE3                        u176_25 0D44  
                      u185_25 08E5                        u169_25 0AF3                        u177_25 0D5B  
            __end_of___lwtoft 0942                        u178_25 0D63                        u179_25 0D6B  
         __size_of_TIMER0_Set 0006                        _SSPADD 0093                        _SSPBUF 0013  
            LCD_WriteCmd@Byte 0038           i1_USART_WriteString 09E7                        ___ftge 0B9D  
                   ??___aldiv 003F                        ___wmul 0A78                _PWM_DutyCycle1 098E  
              _PWM_DutyCycle2 09A9              ?_USART_WriteChar 0070                        _deltaV 00A6  
                   ??___lwdiv 003B                     ??___lwmod 003F                        _fitemp 0041  
       USART_ReceiveChar@byte 0074                        _pwmAnt 0049                        _trapmf 0D51  
                      _pulsos 0045                        _status 00B8                     ??_max_val 0074  
           __end_ofi1___lwdiv 0B04                     ??_isdigit 0037                     ?_ADC_Init 0070  
                      saved_w 007E          ?i1_USART_WriteString 0071           __size_of_USART_Init 0059  
                      trimf@a 0022                        trimf@b 0024                        trimf@c 0026  
                      trimf@x 0020                     ??_sprintf 00E0                 ?i1_TIMER0_Set 0070  
     __end_of__initialization 0040                     ?_LCD_Init 0070               ??_LCD_WriteData 0037  
                  ___ftge@ff1 0020                    ___ftge@ff2 0023        __end_of_PWM_DutyCycle1 09A9  
      __end_of_PWM_DutyCycle2 09C4                __pcstackCOMMON 0070                 __end_of_Fuzzy 0411  
                __pidataBANK0 08B9                  __pidataBANK1 08B7                 LCD_Cursor@Col 0037  
               LCD_Cursor@Row 0039                  ??_LCD_Cursor 0038               _LCD_WriteString 0A2E  
               __end_of_trimf 0D51                    ___lwtoft@c 0078                     ?_PWM_Init 0070  
                   ?i1___wmul 0078                _OPTION_REGbits 0081                    ??_ADC_Init 0037  
        __end_of_LCD_WriteCmd 08FD         ??i1_USART_WriteString 0073                       ??_Fuzzy 002E  
   __size_ofi1_PWM_DutyCycle2 001B                ??i1_TIMER0_Set 0070                  sprintf@width 00EA  
                     ??_trimf 0078                    __pbssBANK0 0041                    __pbssBANK1 00A0  
          __end_of_LCD_Cursor 0958                    ??_LCD_Init 0039         i1USART_WriteChar@byte 0070  
             ?_PWM_DutyCycle1 0037               ?_PWM_DutyCycle2 0037                    __pmaintext 0EAB  
                     ?___ftge 0020                       ?___wmul 0037                    __pintentry 0004  
                ??_TIMER0_Set 0037                       _CCP1CON 0017                       _CCP2CON 001D  
                   ?___ftpack 0070                       ?_trapmf 0020                    ??_PWM_Init 0037  
                  ??i1___wmul 007C                     ?___lwtoft 0078                 Fuzzy@setpoint 002C  
        __size_of_TIMER0_Init 000B       _posicao_do_grafico_food 00B2                       _SSPCON2 0091  
                  __stringtab 1000                    _fisetpoint 00AA            __end_of_TIMER0_Set 08C7  
     __end_of_LCD_WriteString 0A53                     _ADCResult 00A0                  ??_USART_Init 00E2  
           LCD_WriteData@Byte 0038                       ___aldiv 0DF0               __size_of___ftge 005F  
             __size_of___wmul 0025                       ___lwdiv 0B04                       ___lwmod 07B1  
                  ??___ftpack 0075            _posicao_do_grafico 00B0                       __ptext1 0411  
                     __ptext2 090C                       __ptext3 0A78                       __ptext4 07B1  
                     __ptext5 0B04                       __ptext6 0A53                       __ptext7 08CF  
                     __ptext8 0B44                       __ptext9 0DF0                    _pas_cooler 0057  
                  ??___lwtoft 007B               __size_of_trapmf 009F                  __size_of_ISR 0177  
                   _T1CONbits 0010                       _dpowers 1012             i1___lwdiv@divisor 0070  
                   _T2CONbits 0012                       _max_val 08DF                       _isdigit 090C  
           i1___lwdiv@counter 0077              ___aldiv@dividend 003B                     _LCD_Clear 0A9D  
          __end_of_USART_Init 0B9D                       _sprintf 0411                       clrloop0 08D8  
        end_of_initialization 0040               Fuzzy@velocidade 0030                     _RCSTAbits 0018  
            ___aldiv@quotient 00DA                       trapmf@a 0022                       trapmf@b 0024  
                     trapmf@c 0026                       trapmf@d 0028                       trapmf@x 0020  
                     trimf@ua 007C                  __pstringtext 1000          __end_ofi1_TIMER0_Set 08C1  
       i1___wmul@multiplicand 007A         __size_of_LCD_WriteCmd 000F                     _PORTBbits 0006  
                   _PORTEbits 0009                    ?_LCD_Clear 0070              i1_PWM_DutyCycle2 0958  
           __size_of_ADC_Init 0012                     i1___lwdiv 0AC6                  _contador_rb6 00A2  
         PWM_DutyCycle1@valor 0037                    _total_area 004F           PWM_DutyCycle2@valor 0037  
                 _CCP1CONbits 0017                   _CCP2CONbits 001D                     _TXSTAbits 0098  
            ?_LCD_WriteString 0039             __size_of_LCD_Init 006D                  _LCD_WriteCmd 08EE  
              __end_of___ftge 0BFC                __end_of___wmul 0A9D             i1_USART_WriteChar 08C7  
          ?i1_USART_WriteChar 0070                __end_of_trapmf 0DF0      __size_of_USART_WriteChar 0008  
           __size_of_PWM_Init 0024           start_initialization 0015             __size_ofi1___wmul 0023  
                 __end_of_ISR 07B1           ??i1_USART_WriteChar 0070                    ?i1___lwdiv 0070  
            ??_PWM_DutyCycle1 0039              ??_PWM_DutyCycle2 0039         __end_of_LCD_WriteData 090C  
           _USART_ReceiveChar 0973                      ??___ftge 0026            ?_USART_ReceiveChar 0070  
   __end_ofi1_USART_WriteChar 08CF                      ??___wmul 003B                   __pdataBANK0 0057  
                 __pdataBANK1 00EE   __end_ofi1_USART_WriteString 0A0A                      ??_trapmf 0078  
         ??_USART_ReceiveChar 0073             __size_of___ftpack 0068                     ___latbits 0002  
           __size_of___lwtoft 0014                 __pcstackBANK0 0020                 __pcstackBANK1 00D8  
               __pcstackBANK3 0190                   ??_LCD_Clear 0039           __end_of__stringdata 1123  
                _isdigit$1450 0037                   sprintf@_val 00E5                   sprintf@flag 00E9  
                 sprintf@prec 00E4     __end_of_USART_ReceiveChar 098E         __size_ofi1_TIMER0_Set 0006  
            ___lwdiv@dividend 0039           TIMER0_Set@contagens 0037                      ?___aldiv 0037  
                    ?___lwdiv 0037                      ?___lwmod 00D8                     _ativa_fan 0055  
               ??_TIMER0_Init 0037            USART_Init@BaudRate 00DE                      ?_max_val 0070  
                    ?_isdigit 0070                      _ADC_Init 091C                     _fop_rule1 0043  
              __size_of_Fuzzy 03CD    _posicao_do_grafico_service 00B4              ___lwdiv@quotient 003D  
                 ??i1___lwdiv 0074                      ?_sprintf 00DC                __size_of_trimf 0080  
           ??_USART_WriteChar 0037                  i1_TIMER0_Set 08BB               ___aldiv@divisor 0037  
           interrupt_function 0004               ___aldiv@counter 00D8                      _LCD_Init 0C64  
              ___wmul@product 003B                     clear_ram0 08D7                      _PIE1bits 008C  
                    _PIE2bits 008D                      _PIR1bits 000C                      _PIR2bits 000D  
                   _temp_lida 00BC      __end_ofi1_PWM_DutyCycle2 0973                     _tempo_rb6 00BE  
  __size_ofi1_USART_WriteChar 0008                   _display_rpm 00CE                   _display_pwm 00C4  
                  _ADCON0bits 001F                   __stringbase 1012                    _ADCON1bits 009F  
                 __stringdata 101C                      _PWM_Init 0A0A             ___wmul@multiplier 0037  
                    i1___wmul 09C4           __end_of_TIMER0_Init 0800    __size_of_USART_ReceiveChar 001B  
                  _EECON1bits 018C                      Fuzzy@sum 0031              __size_of___aldiv 00BB  
            __size_of___lwdiv 0040              __size_of___lwmod 0044                      ___ftpack 0BFC  
          __end_of__stringtab 1012                      ___lwtoft 092E              __size_of_max_val 000F  
            __size_of_isdigit 0010               ___lwdiv@divisor 0037               ___lwdiv@counter 003C  
           _USART_WriteString 0A53                      __ptext10 08C1                      __ptext11 07F5  
                    __ptext20 08EE                      __ptext12 0A0A                      __ptext21 091C  
                    __ptext13 09A9                      __ptext30 0CD1                      __ptext22 063A  
                    __ptext14 098E                      __ptext31 0D51                      __ptext23 08BB  
                    __ptext15 0A2E                      __ptext32 0AC6                      __ptext24 0973  
                    __ptext16 08FD                      __ptext33 08DF                      __ptext25 09E7  
                    __ptext17 0C64                      __ptext34 092E                      __ptext26 08C7  
                    __ptext18 0942                      __ptext35 0BFC                      __ptext27 0044  
                    __ptext19 0A9D                      __ptext36 0B9D                      __ptext28 09C4  
                    __ptext29 0958            ?_USART_WriteString 0038              __size_of_sprintf 0229  
          i1___lwdiv@dividend 0072                 __size_of_main 0155           USART_WriteChar@byte 0037  
         ??_USART_WriteString 003A        i1USART_WriteString@str 0071                    _LCD_Cursor 0942  
    __size_of_LCD_WriteString 0025            i1___lwdiv@quotient 0075                   _TIMER0_Init 07F5  
                  _INTCONbits 000B     __end_of_USART_WriteString 0A78                      max_val@a 0070  
                    max_val@b 0072                      isdigit@c 0038                      intlevel1 0000  
                   sprintf@ap 00E3                     sprintf@sp 00EC              ___lwmod@dividend 00DA  
                   stringcode 100A                  _tip_gorgeous 00C2          USART_WriteString@str 0038  
                  _TIMER0_Set 08C1                      trapmf@ua 007C               _USART_WriteChar 08CF  
                    sprintf@c 00ED                      sprintf@f 00DC               ___lwmod@divisor 00D8  
             ___lwmod@counter 0040                   _tip_average 00C0                      stringtab 1000  
                ___aldiv@sign 00D9        __size_of_LCD_WriteData 000F  __size_ofi1_USART_WriteString 0023  
                 _SSPCON2bits 0091         i1PWM_DutyCycle2@valor 0020                    _SSPCONbits 0014  
                  _USART_Init 0B44  
