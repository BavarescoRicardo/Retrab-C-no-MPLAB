

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Thu May 26 11:53:05 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	dabs	1,0x7E,2
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  000E                     	;# 
   184  000F                     	;# 
   185  0010                     	;# 
   186  0011                     	;# 
   187  0012                     	;# 
   188  0013                     	;# 
   189  0014                     	;# 
   190  0015                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0017                     	;# 
   194  0018                     	;# 
   195  0019                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  001D                     	;# 
   201  001E                     	;# 
   202  001F                     	;# 
   203  0081                     	;# 
   204  0085                     	;# 
   205  0086                     	;# 
   206  0087                     	;# 
   207  0088                     	;# 
   208  0089                     	;# 
   209  008C                     	;# 
   210  008D                     	;# 
   211  008E                     	;# 
   212  0091                     	;# 
   213  0092                     	;# 
   214  0093                     	;# 
   215  0094                     	;# 
   216  0098                     	;# 
   217  0099                     	;# 
   218  009C                     	;# 
   219  009D                     	;# 
   220  009E                     	;# 
   221  009F                     	;# 
   222  010C                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  0000                     	;# 
   229  0001                     	;# 
   230  0002                     	;# 
   231  0003                     	;# 
   232  0004                     	;# 
   233  0005                     	;# 
   234  0006                     	;# 
   235  0007                     	;# 
   236  0008                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0088                     	;# 
   268  0089                     	;# 
   269  008C                     	;# 
   270  008D                     	;# 
   271  008E                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009C                     	;# 
   279  009D                     	;# 
   280  009E                     	;# 
   281  009F                     	;# 
   282  010C                     	;# 
   283  010D                     	;# 
   284  010E                     	;# 
   285  010F                     	;# 
   286  018C                     	;# 
   287  018D                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  000E                     	;# 
   304  000F                     	;# 
   305  0010                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0015                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001B                     	;# 
   319  001C                     	;# 
   320  001D                     	;# 
   321  001E                     	;# 
   322  001F                     	;# 
   323  0081                     	;# 
   324  0085                     	;# 
   325  0086                     	;# 
   326  0087                     	;# 
   327  0088                     	;# 
   328  0089                     	;# 
   329  008C                     	;# 
   330  008D                     	;# 
   331  008E                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0094                     	;# 
   336  0098                     	;# 
   337  0099                     	;# 
   338  009C                     	;# 
   339  009D                     	;# 
   340  009E                     	;# 
   341  009F                     	;# 
   342  010C                     	;# 
   343  010D                     	;# 
   344  010E                     	;# 
   345  010F                     	;# 
   346  018C                     	;# 
   347  018D                     	;# 
   348  0000                     	;# 
   349  0001                     	;# 
   350  0002                     	;# 
   351  0003                     	;# 
   352  0004                     	;# 
   353  0005                     	;# 
   354  0006                     	;# 
   355  0007                     	;# 
   356  0008                     	;# 
   357  0009                     	;# 
   358  000A                     	;# 
   359  000B                     	;# 
   360  000C                     	;# 
   361  000D                     	;# 
   362  000E                     	;# 
   363  000E                     	;# 
   364  000F                     	;# 
   365  0010                     	;# 
   366  0011                     	;# 
   367  0012                     	;# 
   368  0013                     	;# 
   369  0014                     	;# 
   370  0015                     	;# 
   371  0015                     	;# 
   372  0016                     	;# 
   373  0017                     	;# 
   374  0018                     	;# 
   375  0019                     	;# 
   376  001A                     	;# 
   377  001B                     	;# 
   378  001B                     	;# 
   379  001C                     	;# 
   380  001D                     	;# 
   381  001E                     	;# 
   382  001F                     	;# 
   383  0081                     	;# 
   384  0085                     	;# 
   385  0086                     	;# 
   386  0087                     	;# 
   387  0088                     	;# 
   388  0089                     	;# 
   389  008C                     	;# 
   390  008D                     	;# 
   391  008E                     	;# 
   392  0091                     	;# 
   393  0092                     	;# 
   394  0093                     	;# 
   395  0094                     	;# 
   396  0098                     	;# 
   397  0099                     	;# 
   398  009C                     	;# 
   399  009D                     	;# 
   400  009E                     	;# 
   401  009F                     	;# 
   402  010C                     	;# 
   403  010D                     	;# 
   404  010E                     	;# 
   405  010F                     	;# 
   406  018C                     	;# 
   407  018D                     	;# 
   408  0000                     	;# 
   409  0001                     	;# 
   410  0002                     	;# 
   411  0003                     	;# 
   412  0004                     	;# 
   413  0005                     	;# 
   414  0006                     	;# 
   415  0007                     	;# 
   416  0008                     	;# 
   417  0009                     	;# 
   418  000A                     	;# 
   419  000B                     	;# 
   420  000C                     	;# 
   421  000D                     	;# 
   422  000E                     	;# 
   423  000E                     	;# 
   424  000F                     	;# 
   425  0010                     	;# 
   426  0011                     	;# 
   427  0012                     	;# 
   428  0013                     	;# 
   429  0014                     	;# 
   430  0015                     	;# 
   431  0015                     	;# 
   432  0016                     	;# 
   433  0017                     	;# 
   434  0018                     	;# 
   435  0019                     	;# 
   436  001A                     	;# 
   437  001B                     	;# 
   438  001B                     	;# 
   439  001C                     	;# 
   440  001D                     	;# 
   441  001E                     	;# 
   442  001F                     	;# 
   443  0081                     	;# 
   444  0085                     	;# 
   445  0086                     	;# 
   446  0087                     	;# 
   447  0088                     	;# 
   448  0089                     	;# 
   449  008C                     	;# 
   450  008D                     	;# 
   451  008E                     	;# 
   452  0091                     	;# 
   453  0092                     	;# 
   454  0093                     	;# 
   455  0094                     	;# 
   456  0098                     	;# 
   457  0099                     	;# 
   458  009C                     	;# 
   459  009D                     	;# 
   460  009E                     	;# 
   461  009F                     	;# 
   462  010C                     	;# 
   463  010D                     	;# 
   464  010E                     	;# 
   465  010F                     	;# 
   466  018C                     	;# 
   467  018D                     	;# 
   468  0000                     	;# 
   469  0001                     	;# 
   470  0002                     	;# 
   471  0003                     	;# 
   472  0004                     	;# 
   473  0005                     	;# 
   474  0006                     	;# 
   475  0007                     	;# 
   476  0008                     	;# 
   477  0009                     	;# 
   478  000A                     	;# 
   479  000B                     	;# 
   480  000C                     	;# 
   481  000D                     	;# 
   482  000E                     	;# 
   483  000E                     	;# 
   484  000F                     	;# 
   485  0010                     	;# 
   486  0011                     	;# 
   487  0012                     	;# 
   488  0013                     	;# 
   489  0014                     	;# 
   490  0015                     	;# 
   491  0015                     	;# 
   492  0016                     	;# 
   493  0017                     	;# 
   494  0018                     	;# 
   495  0019                     	;# 
   496  001A                     	;# 
   497  001B                     	;# 
   498  001B                     	;# 
   499  001C                     	;# 
   500  001D                     	;# 
   501  001E                     	;# 
   502  001F                     	;# 
   503  0081                     	;# 
   504  0085                     	;# 
   505  0086                     	;# 
   506  0087                     	;# 
   507  0088                     	;# 
   508  0089                     	;# 
   509  008C                     	;# 
   510  008D                     	;# 
   511  008E                     	;# 
   512  0091                     	;# 
   513  0092                     	;# 
   514  0093                     	;# 
   515  0094                     	;# 
   516  0098                     	;# 
   517  0099                     	;# 
   518  009C                     	;# 
   519  009D                     	;# 
   520  009E                     	;# 
   521  009F                     	;# 
   522  010C                     	;# 
   523  010D                     	;# 
   524  010E                     	;# 
   525  010F                     	;# 
   526  018C                     	;# 
   527  018D                     	;# 
   528  0000                     	;# 
   529  0001                     	;# 
   530  0002                     	;# 
   531  0003                     	;# 
   532  0004                     	;# 
   533  0005                     	;# 
   534  0006                     	;# 
   535  0007                     	;# 
   536  0008                     	;# 
   537  0009                     	;# 
   538  000A                     	;# 
   539  000B                     	;# 
   540  000C                     	;# 
   541  000D                     	;# 
   542  000E                     	;# 
   543  000E                     	;# 
   544  000F                     	;# 
   545  0010                     	;# 
   546  0011                     	;# 
   547  0012                     	;# 
   548  0013                     	;# 
   549  0014                     	;# 
   550  0015                     	;# 
   551  0015                     	;# 
   552  0016                     	;# 
   553  0017                     	;# 
   554  0018                     	;# 
   555  0019                     	;# 
   556  001A                     	;# 
   557  001B                     	;# 
   558  001B                     	;# 
   559  001C                     	;# 
   560  001D                     	;# 
   561  001E                     	;# 
   562  001F                     	;# 
   563  0081                     	;# 
   564  0085                     	;# 
   565  0086                     	;# 
   566  0087                     	;# 
   567  0088                     	;# 
   568  0089                     	;# 
   569  008C                     	;# 
   570  008D                     	;# 
   571  008E                     	;# 
   572  0091                     	;# 
   573  0092                     	;# 
   574  0093                     	;# 
   575  0094                     	;# 
   576  0098                     	;# 
   577  0099                     	;# 
   578  009C                     	;# 
   579  009D                     	;# 
   580  009E                     	;# 
   581  009F                     	;# 
   582  010C                     	;# 
   583  010D                     	;# 
   584  010E                     	;# 
   585  010F                     	;# 
   586  018C                     	;# 
   587  018D                     	;# 
   588                           
   589                           	psect	idataBANK0
   590  07FE                     __pidataBANK0:	
   591                           
   592                           ;initializer for _pas_cooler
   593  07FE  3407               	retlw	7
   594  07FF  3400               	retlw	0
   595                           
   596                           	psect	idataBANK1
   597  0E05                     __pidataBANK1:	
   598                           
   599                           ;initializer for _setpoint
   600  0E05  3400               	retlw	0
   601  0E06  34A0               	retlw	160
   602  0E07  3441               	retlw	65
   603                           
   604                           ;initializer for _tf
   605  0E08  3400               	retlw	0
   606  0E09  34A0               	retlw	160
   607  0E0A  3441               	retlw	65
   608                           
   609                           	psect	stringtext
   610  0500                     __pstringtext:	
   611  0500                     stringtab:	
   612  0500                     __stringtab:	
   613                           
   614                           ;	String table - string pointers are 2 bytes each
   615  0500  1BFF               	btfsc	btemp+1,7
   616  0501  2D0A               	ljmp	stringcode
   617  0502  1383               	bcf	3,7
   618  0503  187F               	btfsc	btemp+1,0
   619  0504  1783               	bsf	3,7
   620  0505  0800               	movf	0,w
   621  0506  0A84               	incf	4,f
   622  0507  1903               	skipnz
   623  0508  0AFF               	incf	btemp+1,f
   624  0509  0008               	return
   625  050A                     stringcode:	
   626  050A  087F               	movf	btemp+1,w
   627  050B  397F               	andlw	127
   628  050C  008A               	movwf	10
   629  050D  0804               	movf	4,w
   630  050E  0A84               	incf	4,f
   631  050F  1903               	skipnz
   632  0510  0AFF               	incf	btemp+1,f
   633  0511  0082               	movwf	2
   634  0512                     __stringbase:	
   635  0512                     __end_of__stringtab:	
   636  0512                     _dpowers:	
   637  0512  3401               	retlw	1
   638  0513  3400               	retlw	0
   639  0514  340A               	retlw	10
   640  0515  3400               	retlw	0
   641  0516  3464               	retlw	100
   642  0517  3400               	retlw	0
   643  0518  34E8               	retlw	232
   644  0519  3403               	retlw	3
   645  051A  3410               	retlw	16
   646  051B  3427               	retlw	39
   647  051C                     __end_of_dpowers:	
   648  000E                     _TMR1	set	14
   649  001F                     _ADCON0bits	set	31
   650  001E                     _ADRESH	set	30
   651  0017                     _CCP1CON	set	23
   652  0017                     _CCP1CONbits	set	23
   653  001D                     _CCP2CON	set	29
   654  001D                     _CCP2CONbits	set	29
   655  0015                     _CCPR1L	set	21
   656  001B                     _CCPR2L	set	27
   657  000B                     _INTCONbits	set	11
   658  000C                     _PIR1bits	set	12
   659  000D                     _PIR2bits	set	13
   660  0005                     _PORTA	set	5
   661  0006                     _PORTB	set	6
   662  0006                     _PORTBbits	set	6
   663  0007                     _PORTC	set	7
   664  0008                     _PORTD	set	8
   665  0009                     _PORTE	set	9
   666  0009                     _PORTEbits	set	9
   667  001A                     _RCREG	set	26
   668  0018                     _RCSTAbits	set	24
   669  0013                     _SSPBUF	set	19
   670  0014                     _SSPCONbits	set	20
   671  0010                     _T1CON	set	16
   672  0010                     _T1CONbits	set	16
   673  0012                     _T2CONbits	set	18
   674  0001                     _TMR0	set	1
   675  000F                     _TMR1H	set	15
   676  000E                     _TMR1L	set	14
   677  0019                     _TXREG	set	25
   678  00C1                     _OERR	set	193
   679  009F                     _ADCON1bits	set	159
   680  009E                     _ADRESL	set	158
   681  0081                     _OPTION_REGbits	set	129
   682  008C                     _PIE1bits	set	140
   683  008D                     _PIE2bits	set	141
   684  0092                     _PR2	set	146
   685  0099                     _SPBRG	set	153
   686  0093                     _SSPADD	set	147
   687  0091                     _SSPCON2	set	145
   688  0091                     _SSPCON2bits	set	145
   689  0094                     _SSPSTATbits	set	148
   690  0085                     _TRISA	set	133
   691  0086                     _TRISB	set	134
   692  0087                     _TRISC	set	135
   693  0088                     _TRISD	set	136
   694  0089                     _TRISE	set	137
   695  0098                     _TXSTAbits	set	152
   696  010D                     _EEADR	set	269
   697  010C                     _EEDATA	set	268
   698  018C                     _EECON1bits	set	396
   699  018D                     _EECON2	set	397
   700  051C                     __stringdata:	
   701  051C                     STR_19:	
   702  051C  340A               	retlw	10
   703  051D  340D               	retlw	13
   704  051E  3420               	retlw	32	;' '
   705  051F  342D               	retlw	45	;'-'
   706  0520  342D               	retlw	45	;'-'
   707  0521  342D               	retlw	45	;'-'
   708  0522  342D               	retlw	45	;'-'
   709  0523  342D               	retlw	45	;'-'
   710  0524  342D               	retlw	45	;'-'
   711  0525  342D               	retlw	45	;'-'
   712  0526  3420               	retlw	32	;' '
   713  0527  3445               	retlw	69	;'E'
   714  0528  3453               	retlw	83	;'S'
   715  0529  3454               	retlw	84	;'T'
   716  052A  344F               	retlw	79	;'O'
   717  052B  3455               	retlw	85	;'U'
   718  052C  3452               	retlw	82	;'R'
   719  052D  344F               	retlw	79	;'O'
   720  052E  3420               	retlw	32	;' '
   721  052F  3444               	retlw	68	;'D'
   722  0530  3445               	retlw	69	;'E'
   723  0531  3420               	retlw	32	;' '
   724  0532  3450               	retlw	80	;'P'
   725  0533  3449               	retlw	73	;'I'
   726  0534  344C               	retlw	76	;'L'
   727  0535  3448               	retlw	72	;'H'
   728  0536  3441               	retlw	65	;'A'
   729  0537  3420               	retlw	32	;' '
   730  0538  342D               	retlw	45	;'-'
   731  0539  342D               	retlw	45	;'-'
   732  053A  342D               	retlw	45	;'-'
   733  053B  342D               	retlw	45	;'-'
   734  053C  342D               	retlw	45	;'-'
   735  053D  342D               	retlw	45	;'-'
   736  053E  342D               	retlw	45	;'-'
   737  053F  3420               	retlw	32	;' '
   738  0540  340A               	retlw	10
   739  0541  340D               	retlw	13
   740  0542  3420               	retlw	32	;' '
   741  0543  3400               	retlw	0
   742  0544                     STR_11:	
   743  0544  3449               	retlw	73	;'I'
   744  0545  346E               	retlw	110	;'n'
   745  0546  3469               	retlw	105	;'i'
   746  0547  3463               	retlw	99	;'c'
   747  0548  3469               	retlw	105	;'i'
   748  0549  3461               	retlw	97	;'a'
   749  054A  346C               	retlw	108	;'l'
   750  054B  3469               	retlw	105	;'i'
   751  054C  347A               	retlw	122	;'z'
   752  054D  3461               	retlw	97	;'a'
   753  054E  346E               	retlw	110	;'n'
   754  054F  3464               	retlw	100	;'d'
   755  0550  346F               	retlw	111	;'o'
   756  0551  3420               	retlw	32	;' '
   757  0552  346F               	retlw	111	;'o'
   758  0553  3420               	retlw	32	;' '
   759  0554  3450               	retlw	80	;'P'
   760  0555  3449               	retlw	73	;'I'
   761  0556  3443               	retlw	67	;'C'
   762  0557  3431               	retlw	49	;'1'
   763  0558  3436               	retlw	54	;'6'
   764  0559  3446               	retlw	70	;'F'
   765  055A  3438               	retlw	56	;'8'
   766  055B  3437               	retlw	55	;'7'
   767  055C  3437               	retlw	55	;'7'
   768  055D  3441               	retlw	65	;'A'
   769  055E  340A               	retlw	10
   770  055F  340D               	retlw	13
   771  0560  3400               	retlw	0
   772  0561                     STR_12:	
   773  0561  3455               	retlw	85	;'U'
   774  0562  3453               	retlw	83	;'S'
   775  0563  3441               	retlw	65	;'A'
   776  0564  3452               	retlw	82	;'R'
   777  0565  3454               	retlw	84	;'T'
   778  0566  343A               	retlw	58	;':'
   779  0567  3420               	retlw	32	;' '
   780  0568  3431               	retlw	49	;'1'
   781  0569  3431               	retlw	49	;'1'
   782  056A  3435               	retlw	53	;'5'
   783  056B  342E               	retlw	46	;'.'
   784  056C  3432               	retlw	50	;'2'
   785  056D  3430               	retlw	48	;'0'
   786  056E  3430               	retlw	48	;'0'
   787  056F  3462               	retlw	98	;'b'
   788  0570  3470               	retlw	112	;'p'
   789  0571  3473               	retlw	115	;'s'
   790  0572  340A               	retlw	10
   791  0573  340D               	retlw	13
   792  0574  3400               	retlw	0
   793  0575                     STR_13:	
   794  0575  3449               	retlw	73	;'I'
   795  0576  346E               	retlw	110	;'n'
   796  0577  3469               	retlw	105	;'i'
   797  0578  3463               	retlw	99	;'c'
   798  0579  3469               	retlw	105	;'i'
   799  057A  3461               	retlw	97	;'a'
   800  057B  346C               	retlw	108	;'l'
   801  057C  3469               	retlw	105	;'i'
   802  057D  347A               	retlw	122	;'z'
   803  057E  3461               	retlw	97	;'a'
   804  057F  346E               	retlw	110	;'n'
   805  0580  3464               	retlw	100	;'d'
   806  0581  346F               	retlw	111	;'o'
   807  0582  342E               	retlw	46	;'.'
   808  0583  342E               	retlw	46	;'.'
   809  0584  342E               	retlw	46	;'.'
   810  0585  3400               	retlw	0
   811  0586                     STR_9:	
   812  0586  340A               	retlw	10
   813  0587  340D               	retlw	13
   814  0588  3470               	retlw	112	;'p'
   815  0589  3477               	retlw	119	;'w'
   816  058A  346D               	retlw	109	;'m'
   817  058B  3420               	retlw	32	;' '
   818  058C  343D               	retlw	61	;'='
   819  058D  3420               	retlw	32	;' '
   820  058E  3431               	retlw	49	;'1'
   821  058F  3430               	retlw	48	;'0'
   822  0590  3430               	retlw	48	;'0'
   823  0591  3430               	retlw	48	;'0'
   824  0592  340A               	retlw	10
   825  0593  340D               	retlw	13
   826  0594  3400               	retlw	0
   827  0595                     STR_10:	
   828  0595  340A               	retlw	10
   829  0596  340D               	retlw	13
   830  0597  3470               	retlw	112	;'p'
   831  0598  3477               	retlw	119	;'w'
   832  0599  346D               	retlw	109	;'m'
   833  059A  3420               	retlw	32	;' '
   834  059B  343D               	retlw	61	;'='
   835  059C  3420               	retlw	32	;' '
   836  059D  3431               	retlw	49	;'1'
   837  059E  3430               	retlw	48	;'0'
   838  059F  3432               	retlw	50	;'2'
   839  05A0  3433               	retlw	51	;'3'
   840  05A1  340A               	retlw	10
   841  05A2  340D               	retlw	13
   842  05A3  3400               	retlw	0
   843  05A4                     STR_6:	
   844  05A4  340A               	retlw	10
   845  05A5  340D               	retlw	13
   846  05A6  3470               	retlw	112	;'p'
   847  05A7  3477               	retlw	119	;'w'
   848  05A8  346D               	retlw	109	;'m'
   849  05A9  3420               	retlw	32	;' '
   850  05AA  343D               	retlw	61	;'='
   851  05AB  3420               	retlw	32	;' '
   852  05AC  3435               	retlw	53	;'5'
   853  05AD  3431               	retlw	49	;'1'
   854  05AE  3432               	retlw	50	;'2'
   855  05AF  340A               	retlw	10
   856  05B0  340D               	retlw	13
   857  05B1  3400               	retlw	0
   858  05B2                     STR_5:	
   859  05B2  340A               	retlw	10
   860  05B3  340D               	retlw	13
   861  05B4  3470               	retlw	112	;'p'
   862  05B5  3477               	retlw	119	;'w'
   863  05B6  346D               	retlw	109	;'m'
   864  05B7  3420               	retlw	32	;' '
   865  05B8  343D               	retlw	61	;'='
   866  05B9  3420               	retlw	32	;' '
   867  05BA  3432               	retlw	50	;'2'
   868  05BB  3435               	retlw	53	;'5'
   869  05BC  3436               	retlw	54	;'6'
   870  05BD  340A               	retlw	10
   871  05BE  340D               	retlw	13
   872  05BF  3400               	retlw	0
   873  05C0                     STR_8:	
   874  05C0  340A               	retlw	10
   875  05C1  340D               	retlw	13
   876  05C2  3470               	retlw	112	;'p'
   877  05C3  3477               	retlw	119	;'w'
   878  05C4  346D               	retlw	109	;'m'
   879  05C5  3420               	retlw	32	;' '
   880  05C6  343D               	retlw	61	;'='
   881  05C7  3420               	retlw	32	;' '
   882  05C8  3438               	retlw	56	;'8'
   883  05C9  3439               	retlw	57	;'9'
   884  05CA  3436               	retlw	54	;'6'
   885  05CB  340A               	retlw	10
   886  05CC  340D               	retlw	13
   887  05CD  3400               	retlw	0
   888  05CE                     STR_4:	
   889  05CE  340A               	retlw	10
   890  05CF  340D               	retlw	13
   891  05D0  3470               	retlw	112	;'p'
   892  05D1  3477               	retlw	119	;'w'
   893  05D2  346D               	retlw	109	;'m'
   894  05D3  3420               	retlw	32	;' '
   895  05D4  343D               	retlw	61	;'='
   896  05D5  3420               	retlw	32	;' '
   897  05D6  3431               	retlw	49	;'1'
   898  05D7  3432               	retlw	50	;'2'
   899  05D8  3438               	retlw	56	;'8'
   900  05D9  340A               	retlw	10
   901  05DA  340D               	retlw	13
   902  05DB  3400               	retlw	0
   903  05DC                     STR_7:	
   904  05DC  340A               	retlw	10
   905  05DD  340D               	retlw	13
   906  05DE  3470               	retlw	112	;'p'
   907  05DF  3477               	retlw	119	;'w'
   908  05E0  346D               	retlw	109	;'m'
   909  05E1  3420               	retlw	32	;' '
   910  05E2  343D               	retlw	61	;'='
   911  05E3  3420               	retlw	32	;' '
   912  05E4  3437               	retlw	55	;'7'
   913  05E5  3436               	retlw	54	;'6'
   914  05E6  3438               	retlw	56	;'8'
   915  05E7  340A               	retlw	10
   916  05E8  340D               	retlw	13
   917  05E9  3400               	retlw	0
   918  05EA                     STR_1:	
   919  05EA  340A               	retlw	10
   920  05EB  340D               	retlw	13
   921  05EC  3464               	retlw	100	;'d'
   922  05ED  3465               	retlw	101	;'e'
   923  05EE  3473               	retlw	115	;'s'
   924  05EF  346C               	retlw	108	;'l'
   925  05F0  3469               	retlw	105	;'i'
   926  05F1  3467               	retlw	103	;'g'
   927  05F2  3461               	retlw	97	;'a'
   928  05F3  3464               	retlw	100	;'d'
   929  05F4  346F               	retlw	111	;'o'
   930  05F5  340A               	retlw	10
   931  05F6  340D               	retlw	13
   932  05F7  3400               	retlw	0
   933  05F8                     STR_2:	
   934  05F8  340A               	retlw	10
   935  05F9  340D               	retlw	13
   936  05FA  3470               	retlw	112	;'p'
   937  05FB  3477               	retlw	119	;'w'
   938  05FC  346D               	retlw	109	;'m'
   939  05FD  3420               	retlw	32	;' '
   940  05FE  343D               	retlw	61	;'='
   941  05FF  3420               	retlw	32	;' '
   942  0600  3433               	retlw	51	;'3'
   943  0601  3432               	retlw	50	;'2'
   944  0602  340A               	retlw	10
   945  0603  340D               	retlw	13
   946  0604  3400               	retlw	0
   947  0605                     STR_3:	
   948  0605  340A               	retlw	10
   949  0606  340D               	retlw	13
   950  0607  3470               	retlw	112	;'p'
   951  0608  3477               	retlw	119	;'w'
   952  0609  346D               	retlw	109	;'m'
   953  060A  3420               	retlw	32	;' '
   954  060B  343D               	retlw	61	;'='
   955  060C  3420               	retlw	32	;' '
   956  060D  3436               	retlw	54	;'6'
   957  060E  3434               	retlw	52	;'4'
   958  060F  340A               	retlw	10
   959  0610  340D               	retlw	13
   960  0611  3400               	retlw	0
   961  0612                     STR_18:	
   962  0612  3450               	retlw	80	;'P'
   963  0613  3457               	retlw	87	;'W'
   964  0614  344D               	retlw	77	;'M'
   965  0615  343A               	retlw	58	;':'
   966  0616  3420               	retlw	32	;' '
   967  0617  3400               	retlw	0
   968  0618                     STR_17:	
   969  0618  3444               	retlw	68	;'D'
   970  0619  346C               	retlw	108	;'l'
   971  061A  3456               	retlw	86	;'V'
   972  061B  343A               	retlw	58	;':'
   973  061C  3420               	retlw	32	;' '
   974  061D  3400               	retlw	0
   975  061E                     STR_14:	
   976  061E  3425               	retlw	37	;'%'
   977  061F  3430               	retlw	48	;'0'
   978  0620  3434               	retlw	52	;'4'
   979  0621  3464               	retlw	100	;'d'
   980  0622  3400               	retlw	0
   981  0623                     __end_of__stringdata:	
   982                           
   983                           ; #config settings
   984  0000                     
   985                           	psect	cinit
   986  0015                     start_initialization:	
   987  0015                     __initialization:	
   988                           
   989                           ; Clear objects allocated to BANK0
   990  0015  1383               	bcf	3,7	;select IRP bank0
   991  0016  3020               	movlw	low __pbssBANK0
   992  0017  0084               	movwf	4
   993  0018  3046               	movlw	low (__pbssBANK0+38)
   994  0019  120A  158A  261B  120A  118A  	fcall	clear_ram0
   995                           
   996                           ; Clear objects allocated to BANK1
   997  001E  30A0               	movlw	low __pbssBANK1
   998  001F  0084               	movwf	4
   999  0020  30D2               	movlw	low (__pbssBANK1+50)
  1000  0021  120A  158A  261B  120A  118A  	fcall	clear_ram0
  1001                           
  1002                           ; Initialize objects allocated to BANK1
  1003  0026  1683               	bsf	3,5	;RP0=1, select bank1
  1004  0027  1303               	bcf	3,6	;RP1=0, select bank1
  1005  0028  120A  158A  2605  120A  118A  	fcall	__pidataBANK1	;fetch initializer
  1006  002D  00D2               	movwf	__pdataBANK1& (0+127)
  1007  002E  120A  158A  2606  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
  1008  0033  00D3               	movwf	(__pdataBANK1+1)& (0+127)
  1009  0034  120A  158A  2607  120A  118A  	fcall	__pidataBANK1+2	;fetch initializer
  1010  0039  00D4               	movwf	(__pdataBANK1+2)& (0+127)
  1011  003A  120A  158A  2608  120A  118A  	fcall	__pidataBANK1+3	;fetch initializer
  1012  003F  00D5               	movwf	(__pdataBANK1+3)& (0+127)
  1013  0040  120A  158A  2609  120A  118A  	fcall	__pidataBANK1+4	;fetch initializer
  1014  0045  00D6               	movwf	(__pdataBANK1+4)& (0+127)
  1015  0046  120A  158A  260A  120A  118A  	fcall	__pidataBANK1+5	;fetch initializer
  1016  004B  00D7               	movwf	(__pdataBANK1+5)& (0+127)
  1017                           
  1018                           ; Initialize objects allocated to BANK0
  1019  004C  1283               	bcf	3,5	;RP0=0, select bank0
  1020  004D  1303               	bcf	3,6	;RP1=0, select bank0
  1021  004E  120A  118A  27FE  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1022  0053  00EA               	movwf	__pdataBANK0& (0+127)
  1023  0054  120A  118A  27FF   	fcall	__pidataBANK0+1	;fetch initializer
  1024  0057  00EB               	movwf	(__pdataBANK0+1)& (0+127)
  1025  0058                     end_of_initialization:	
  1026                           ;End of C runtime variable initialization code
  1027                           
  1028  0058                     __end_of__initialization:	
  1029  0058  0183               	clrf	3
  1030  0059  120A  118A  2B9E   	ljmp	_main	;jump to C main() function
  1031                           
  1032                           	psect	bssBANK0
  1033  0020                     __pbssBANK0:	
  1034  0020                     _ativa_fan:	
  1035  0020                     	ds	3
  1036  0023                     _fitemp:	
  1037  0023                     	ds	3
  1038  0026                     _fop_rule1:	
  1039  0026                     	ds	3
  1040  0029                     _fop_rule2:	
  1041  0029                     	ds	3
  1042  002C                     _fop_rule3:	
  1043  002C                     	ds	3
  1044  002F                     _sum:	
  1045  002F                     	ds	3
  1046  0032                     _temp:	
  1047  0032                     	ds	3
  1048  0035                     _total_area:	
  1049  0035                     	ds	3
  1050  0038                     _x:	
  1051  0038                     	ds	3
  1052  003B                     _y:	
  1053  003B                     	ds	3
  1054  003E                     _contagens_tm0:	
  1055  003E                     	ds	2
  1056  0040                     _deltaV:	
  1057  0040                     	ds	2
  1058  0042                     _pulsos:	
  1059  0042                     	ds	2
  1060  0044                     _pwm:	
  1061  0044                     	ds	2
  1062                           
  1063                           	psect	dataBANK0
  1064  006A                     __pdataBANK0:	
  1065  006A                     _pas_cooler:	
  1066  006A                     	ds	2
  1067                           
  1068                           	psect	bssBANK1
  1069  00A0                     __pbssBANK1:	
  1070  00A0                     _derro:	
  1071  00A0                     	ds	3
  1072  00A3                     _fisetpoint:	
  1073  00A3                     	ds	3
  1074  00A6                     _foTip:	
  1075  00A6                     	ds	3
  1076  00A9                     _posicao_do_grafico:	
  1077  00A9                     	ds	3
  1078  00AC                     _posicao_do_grafico_food:	
  1079  00AC                     	ds	3
  1080  00AF                     _posicao_do_grafico_service:	
  1081  00AF                     	ds	3
  1082  00B2                     _ADCResult:	
  1083  00B2                     	ds	2
  1084  00B4                     _contador_rb6:	
  1085  00B4                     	ds	2
  1086  00B6                     _rpm:	
  1087  00B6                     	ds	2
  1088  00B8                     _status:	
  1089  00B8                     	ds	2
  1090  00BA                     _temp_lida:	
  1091  00BA                     	ds	2
  1092  00BC                     _tempo_rb6:	
  1093  00BC                     	ds	2
  1094  00BE                     _display_pwm:	
  1095  00BE                     	ds	10
  1096  00C8                     _display_rpm:	
  1097  00C8                     	ds	10
  1098                           
  1099                           	psect	dataBANK1
  1100  00D2                     __pdataBANK1:	
  1101  00D2                     _setpoint:	
  1102  00D2                     	ds	3
  1103  00D5                     _tf:	
  1104  00D5                     	ds	3
  1105                           
  1106                           	psect	clrtext
  1107  0E1B                     clear_ram0:	
  1108                           ;	Called with FSR containing the base address, and
  1109                           ;	W with the last address+1
  1110                           
  1111  0E1B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1112  0E1C                     clrloop0:	
  1113  0E1C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1114  0E1D  0A84               	incf	4,f	;increment pointer
  1115  0E1E  0604               	xorwf	4,w	;XOR with final address
  1116  0E1F  1903               	btfsc	3,2	;have we reached the end yet?
  1117  0E20  3400               	retlw	0	;all done for this memory range, return
  1118  0E21  0604               	xorwf	4,w	;XOR again to restore value
  1119  0E22  2E1C               	goto	clrloop0	;do the next byte
  1120                           
  1121                           	psect	cstackBANK1
  1122  00D8                     __pcstackBANK1:	
  1123  00D8                     ??_main:	
  1124                           
  1125                           ; 0 bytes @ 0x0
  1126  00D8                     	ds	3
  1127                           
  1128                           	psect	cstackCOMMON
  1129  0070                     __pcstackCOMMON:	
  1130  0070                     ?_TIMER0_Set:	
  1131  0070                     ?_TIMER0_Init:	
  1132                           ; 0 bytes @ 0x0
  1133                           
  1134  0070                     ?_ADC_Init:	
  1135                           ; 0 bytes @ 0x0
  1136                           
  1137  0070                     ?_PWM_Init:	
  1138                           ; 0 bytes @ 0x0
  1139                           
  1140  0070                     ?_LCD_Init:	
  1141                           ; 0 bytes @ 0x0
  1142                           
  1143  0070                     ?_LCD_Clear:	
  1144                           ; 0 bytes @ 0x0
  1145                           
  1146  0070                     ?_isdigit:	
  1147                           ; 0 bytes @ 0x0
  1148                           
  1149  0070                     ?_ISR:	
  1150                           ; 1 bit 
  1151                           
  1152  0070                     ?_main:	
  1153                           ; 0 bytes @ 0x0
  1154                           
  1155  0070                     ?_USART_WriteChar:	
  1156                           ; 0 bytes @ 0x0
  1157                           
  1158  0070                     ?_LCD_WriteCmd:	
  1159                           ; 0 bytes @ 0x0
  1160                           
  1161  0070                     ?_LCD_WriteData:	
  1162                           ; 0 bytes @ 0x0
  1163                           
  1164  0070                     ?i1_USART_WriteChar:	
  1165                           ; 0 bytes @ 0x0
  1166                           
  1167  0070                     ??i1_USART_WriteChar:	
  1168                           ; 0 bytes @ 0x0
  1169                           
  1170  0070                     ?i1_TIMER0_Set:	
  1171                           ; 0 bytes @ 0x0
  1172                           
  1173  0070                     ??i1_TIMER0_Set:	
  1174                           ; 0 bytes @ 0x0
  1175                           
  1176  0070                     ?i1_PWM_DutyCycle2:	
  1177                           ; 0 bytes @ 0x0
  1178                           
  1179  0070                     ?_USART_ReceiveChar:	
  1180                           ; 0 bytes @ 0x0
  1181                           
  1182  0070                     ?i1___lwdiv:	
  1183                           ; 1 bytes @ 0x0
  1184                           
  1185  0070                     i1USART_WriteChar@byte:	
  1186                           ; 2 bytes @ 0x0
  1187                           
  1188  0070                     i1TIMER0_Set@contagens:	
  1189                           ; 1 bytes @ 0x0
  1190                           
  1191  0070                     i1PWM_DutyCycle2@valor:	
  1192                           ; 1 bytes @ 0x0
  1193                           
  1194  0070                     i1___lwdiv@divisor:	
  1195                           ; 2 bytes @ 0x0
  1196                           
  1197                           
  1198                           ; 2 bytes @ 0x0
  1199  0070                     	ds	1
  1200  0071                     ?i1_USART_WriteString:	
  1201  0071                     i1USART_WriteString@str:	
  1202                           ; 0 bytes @ 0x1
  1203                           
  1204                           
  1205                           ; 2 bytes @ 0x1
  1206  0071                     	ds	1
  1207  0072                     ??i1_PWM_DutyCycle2:	
  1208  0072                     i1___lwdiv@dividend:	
  1209                           ; 0 bytes @ 0x2
  1210                           
  1211                           
  1212                           ; 2 bytes @ 0x2
  1213  0072                     	ds	1
  1214  0073                     ??_USART_ReceiveChar:	
  1215  0073                     ??i1_USART_WriteString:	
  1216                           ; 0 bytes @ 0x3
  1217                           
  1218                           
  1219                           ; 0 bytes @ 0x3
  1220  0073                     	ds	1
  1221  0074                     ??i1___lwdiv:	
  1222  0074                     USART_ReceiveChar@byte:	
  1223                           ; 0 bytes @ 0x4
  1224                           
  1225                           
  1226                           ; 1 bytes @ 0x4
  1227  0074                     	ds	1
  1228  0075                     i1___lwdiv@quotient:	
  1229                           
  1230                           ; 2 bytes @ 0x5
  1231  0075                     	ds	2
  1232  0077                     i1___lwdiv@counter:	
  1233                           
  1234                           ; 1 bytes @ 0x7
  1235  0077                     	ds	1
  1236  0078                     ?i1___wmul:	
  1237  0078                     i1___wmul@multiplier:	
  1238                           ; 2 bytes @ 0x8
  1239                           
  1240                           
  1241                           ; 2 bytes @ 0x8
  1242  0078                     	ds	2
  1243  007A                     i1___wmul@multiplicand:	
  1244                           
  1245                           ; 2 bytes @ 0xA
  1246  007A                     	ds	2
  1247  007C                     ??i1___wmul:	
  1248  007C                     i1___wmul@product:	
  1249                           ; 0 bytes @ 0xC
  1250                           
  1251                           
  1252                           ; 2 bytes @ 0xC
  1253  007C                     	ds	2
  1254                           
  1255                           	psect	cstackBANK0
  1256  0046                     __pcstackBANK0:	
  1257  0046                     ??_ISR:	
  1258                           
  1259                           ; 0 bytes @ 0x0
  1260  0046                     	ds	4
  1261  004A                     ?_PWM_DutyCycle2:	
  1262  004A                     ??_TIMER0_Set:	
  1263                           ; 0 bytes @ 0x4
  1264                           
  1265  004A                     ??_TIMER0_Init:	
  1266                           ; 0 bytes @ 0x4
  1267                           
  1268  004A                     ??_ADC_Init:	
  1269                           ; 0 bytes @ 0x4
  1270                           
  1271  004A                     ??_PWM_Init:	
  1272                           ; 0 bytes @ 0x4
  1273                           
  1274  004A                     ?_LCD_Cursor:	
  1275                           ; 0 bytes @ 0x4
  1276                           
  1277  004A                     ?_PWM_DutyCycle1:	
  1278                           ; 0 bytes @ 0x4
  1279                           
  1280  004A                     ??_isdigit:	
  1281                           ; 0 bytes @ 0x4
  1282                           
  1283  004A                     ??_USART_WriteChar:	
  1284                           ; 0 bytes @ 0x4
  1285                           
  1286  004A                     ??_LCD_WriteCmd:	
  1287                           ; 0 bytes @ 0x4
  1288                           
  1289  004A                     ??_LCD_WriteData:	
  1290                           ; 0 bytes @ 0x4
  1291                           
  1292  004A                     ?___wmul:	
  1293                           ; 0 bytes @ 0x4
  1294                           
  1295  004A                     ?___lwdiv:	
  1296                           ; 2 bytes @ 0x4
  1297                           
  1298  004A                     ?___aldiv:	
  1299                           ; 2 bytes @ 0x4
  1300                           
  1301  004A                     USART_WriteChar@byte:	
  1302                           ; 4 bytes @ 0x4
  1303                           
  1304  004A                     TIMER0_Set@contagens:	
  1305                           ; 1 bytes @ 0x4
  1306                           
  1307  004A                     LCD_Cursor@Col:	
  1308                           ; 1 bytes @ 0x4
  1309                           
  1310  004A                     _isdigit$1455:	
  1311                           ; 1 bytes @ 0x4
  1312                           
  1313  004A                     PWM_DutyCycle1@valor:	
  1314                           ; 1 bytes @ 0x4
  1315                           
  1316  004A                     PWM_DutyCycle2@valor:	
  1317                           ; 2 bytes @ 0x4
  1318                           
  1319  004A                     ___wmul@multiplier:	
  1320                           ; 2 bytes @ 0x4
  1321                           
  1322  004A                     ___lwdiv@divisor:	
  1323                           ; 2 bytes @ 0x4
  1324                           
  1325  004A                     ___aldiv@divisor:	
  1326                           ; 2 bytes @ 0x4
  1327                           
  1328                           
  1329                           ; 4 bytes @ 0x4
  1330  004A                     	ds	1
  1331  004B                     ?_USART_WriteString:	
  1332  004B                     ??_LCD_Cursor:	
  1333                           ; 0 bytes @ 0x5
  1334                           
  1335  004B                     LCD_WriteCmd@Byte:	
  1336                           ; 0 bytes @ 0x5
  1337                           
  1338  004B                     LCD_WriteData@Byte:	
  1339                           ; 1 bytes @ 0x5
  1340                           
  1341  004B                     isdigit@c:	
  1342                           ; 1 bytes @ 0x5
  1343                           
  1344  004B                     USART_WriteString@str:	
  1345                           ; 1 bytes @ 0x5
  1346                           
  1347                           
  1348                           ; 2 bytes @ 0x5
  1349  004B                     	ds	1
  1350  004C                     ??_PWM_DutyCycle2:	
  1351  004C                     ??_LCD_Init:	
  1352                           ; 0 bytes @ 0x6
  1353                           
  1354  004C                     ?_LCD_WriteString:	
  1355                           ; 0 bytes @ 0x6
  1356                           
  1357  004C                     ??_PWM_DutyCycle1:	
  1358                           ; 0 bytes @ 0x6
  1359                           
  1360  004C                     ??_LCD_Clear:	
  1361                           ; 0 bytes @ 0x6
  1362                           
  1363  004C                     LCD_Cursor@Row:	
  1364                           ; 0 bytes @ 0x6
  1365                           
  1366  004C                     LCD_WriteString@Str:	
  1367                           ; 1 bytes @ 0x6
  1368                           
  1369  004C                     ___wmul@multiplicand:	
  1370                           ; 2 bytes @ 0x6
  1371                           
  1372  004C                     ___lwdiv@dividend:	
  1373                           ; 2 bytes @ 0x6
  1374                           
  1375                           
  1376                           ; 2 bytes @ 0x6
  1377  004C                     	ds	1
  1378  004D                     ??_USART_WriteString:	
  1379                           
  1380                           ; 0 bytes @ 0x7
  1381  004D                     	ds	1
  1382  004E                     ??_LCD_WriteString:	
  1383  004E                     ??___wmul:	
  1384                           ; 0 bytes @ 0x8
  1385                           
  1386  004E                     ??___lwdiv:	
  1387                           ; 0 bytes @ 0x8
  1388                           
  1389  004E                     ___wmul@product:	
  1390                           ; 0 bytes @ 0x8
  1391                           
  1392  004E                     ___aldiv@dividend:	
  1393                           ; 2 bytes @ 0x8
  1394                           
  1395                           
  1396                           ; 4 bytes @ 0x8
  1397  004E                     	ds	1
  1398  004F                     ___lwdiv@quotient:	
  1399                           
  1400                           ; 2 bytes @ 0x9
  1401  004F                     	ds	2
  1402  0051                     ___lwdiv@counter:	
  1403                           
  1404                           ; 1 bytes @ 0xB
  1405  0051                     	ds	1
  1406  0052                     ??___aldiv:	
  1407  0052                     ?___lwmod:	
  1408                           ; 0 bytes @ 0xC
  1409                           
  1410  0052                     ___lwmod@divisor:	
  1411                           ; 2 bytes @ 0xC
  1412                           
  1413                           
  1414                           ; 2 bytes @ 0xC
  1415  0052                     	ds	1
  1416  0053                     ___aldiv@counter:	
  1417                           
  1418                           ; 1 bytes @ 0xD
  1419  0053                     	ds	1
  1420  0054                     ___aldiv@sign:	
  1421  0054                     ___lwmod@dividend:	
  1422                           ; 1 bytes @ 0xE
  1423                           
  1424                           
  1425                           ; 2 bytes @ 0xE
  1426  0054                     	ds	1
  1427  0055                     ___aldiv@quotient:	
  1428                           
  1429                           ; 4 bytes @ 0xF
  1430  0055                     	ds	1
  1431  0056                     ??___lwmod:	
  1432                           
  1433                           ; 0 bytes @ 0x10
  1434  0056                     	ds	1
  1435  0057                     ___lwmod@counter:	
  1436                           
  1437                           ; 1 bytes @ 0x11
  1438  0057                     	ds	1
  1439  0058                     ?_sprintf:	
  1440  0058                     sprintf@f:	
  1441                           ; 2 bytes @ 0x12
  1442                           
  1443                           
  1444                           ; 2 bytes @ 0x12
  1445  0058                     	ds	1
  1446  0059                     ?_USART_Init:	
  1447  0059                     USART_Init@BaudRate:	
  1448                           ; 0 bytes @ 0x13
  1449                           
  1450                           
  1451                           ; 4 bytes @ 0x13
  1452  0059                     	ds	3
  1453  005C                     ??_sprintf:	
  1454                           
  1455                           ; 0 bytes @ 0x16
  1456  005C                     	ds	1
  1457  005D                     ??_USART_Init:	
  1458                           
  1459                           ; 0 bytes @ 0x17
  1460  005D                     	ds	2
  1461  005F                     sprintf@ap:	
  1462                           
  1463                           ; 1 bytes @ 0x19
  1464  005F                     	ds	1
  1465  0060                     sprintf@prec:	
  1466                           
  1467                           ; 1 bytes @ 0x1A
  1468  0060                     	ds	1
  1469  0061                     sprintf@_val:	
  1470                           
  1471                           ; 4 bytes @ 0x1B
  1472  0061                     	ds	4
  1473  0065                     sprintf@flag:	
  1474                           
  1475                           ; 1 bytes @ 0x1F
  1476  0065                     	ds	1
  1477  0066                     sprintf@width:	
  1478                           
  1479                           ; 2 bytes @ 0x20
  1480  0066                     	ds	2
  1481  0068                     sprintf@sp:	
  1482                           
  1483                           ; 1 bytes @ 0x22
  1484  0068                     	ds	1
  1485  0069                     sprintf@c:	
  1486                           
  1487                           ; 1 bytes @ 0x23
  1488  0069                     	ds	1
  1489                           
  1490                           	psect	maintext
  1491  039E                     __pmaintext:	
  1492 ;;
  1493 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1494 ;;
  1495 ;; *************** function _main *****************
  1496 ;; Defined at:
  1497 ;;		line 522 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;		None
  1502 ;; Return value:  Size  Location     Type
  1503 ;;		None               void
  1504 ;; Registers used:
  1505 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1506 ;; Tracked objects:
  1507 ;;		On entry : 17F/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1511 ;;      Params:         0       0       0       0       0
  1512 ;;      Locals:         0       0       0       0       0
  1513 ;;      Temps:          0       0       3       0       0
  1514 ;;      Totals:         0       0       3       0       0
  1515 ;;Total ram usage:        3 bytes
  1516 ;; Hardware stack levels required when called:    6
  1517 ;; This function calls:
  1518 ;;		_ADC_Init
  1519 ;;		_LCD_Clear
  1520 ;;		_LCD_Cursor
  1521 ;;		_LCD_Init
  1522 ;;		_LCD_WriteString
  1523 ;;		_PWM_DutyCycle1
  1524 ;;		_PWM_DutyCycle2
  1525 ;;		_PWM_Init
  1526 ;;		_TIMER0_Init
  1527 ;;		_TIMER0_Set
  1528 ;;		_USART_Init
  1529 ;;		_USART_WriteString
  1530 ;;		_sprintf
  1531 ;; This function is called by:
  1532 ;;		Startup code after reset
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           
  1537                           ;psect for function _main
  1538  039E                     _main:	
  1539                           
  1540                           ;main.c: 524: TRISA = 0b00000001;
  1541                           
  1542                           ;incstack = 0
  1543                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1544  039E  3001               	movlw	1
  1545  039F  1683               	bsf	3,5	;RP0=1, select bank1
  1546  03A0  1303               	bcf	3,6	;RP1=0, select bank1
  1547  03A1  0085               	movwf	5	;volatile
  1548                           
  1549                           ;main.c: 525: PORTA = 0b00000001;
  1550  03A2  3001               	movlw	1
  1551  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  1552  03A4  1303               	bcf	3,6	;RP1=0, select bank0
  1553  03A5  0085               	movwf	5	;volatile
  1554                           
  1555                           ;main.c: 526: TRISB = 0b00000000;
  1556  03A6  1683               	bsf	3,5	;RP0=1, select bank1
  1557  03A7  1303               	bcf	3,6	;RP1=0, select bank1
  1558  03A8  0186               	clrf	6	;volatile
  1559                           
  1560                           ;main.c: 527: PORTB = 0b00000000;
  1561  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  1562  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  1563  03AB  0186               	clrf	6	;volatile
  1564                           
  1565                           ;main.c: 528: TRISC = 0b10000001;
  1566  03AC  3081               	movlw	129
  1567  03AD  1683               	bsf	3,5	;RP0=1, select bank1
  1568  03AE  1303               	bcf	3,6	;RP1=0, select bank1
  1569  03AF  0087               	movwf	7	;volatile
  1570                           
  1571                           ;main.c: 529: PORTC = 0b11000000;
  1572  03B0  30C0               	movlw	192
  1573  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  1574  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  1575  03B3  0087               	movwf	7	;volatile
  1576                           
  1577                           ;main.c: 530: TRISD = 0b00000000;
  1578  03B4  1683               	bsf	3,5	;RP0=1, select bank1
  1579  03B5  1303               	bcf	3,6	;RP1=0, select bank1
  1580  03B6  0188               	clrf	8	;volatile
  1581                           
  1582                           ;main.c: 531: PORTD = 0b00000000;
  1583  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  1584  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  1585  03B9  0188               	clrf	8	;volatile
  1586                           
  1587                           ;main.c: 532: TRISE = 0b00000000;
  1588  03BA  1683               	bsf	3,5	;RP0=1, select bank1
  1589  03BB  1303               	bcf	3,6	;RP1=0, select bank1
  1590  03BC  0189               	clrf	9	;volatile
  1591                           
  1592                           ;main.c: 533: PORTE = 0b00000000;
  1593  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  1594  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  1595  03BF  0189               	clrf	9	;volatile
  1596                           
  1597                           ;main.c: 536: T1CON = 0x03;
  1598  03C0  3003               	movlw	3
  1599  03C1  0090               	movwf	16	;volatile
  1600                           
  1601                           ;main.c: 537: TMR1L = 0x00;
  1602  03C2  018E               	clrf	14	;volatile
  1603                           
  1604                           ;main.c: 538: TMR1H = 0x00;
  1605  03C3  018F               	clrf	15	;volatile
  1606                           
  1607                           ;main.c: 541: USART_Init(115200);
  1608  03C4  3000               	movlw	0
  1609  03C5  00DC               	movwf	USART_Init@BaudRate+3
  1610  03C6  3001               	movlw	1
  1611  03C7  00DB               	movwf	USART_Init@BaudRate+2
  1612  03C8  30C2               	movlw	194
  1613  03C9  00DA               	movwf	USART_Init@BaudRate+1
  1614  03CA  3000               	movlw	0
  1615  03CB  00D9               	movwf	USART_Init@BaudRate
  1616  03CC  120A  118A  271F  120A  118A  	fcall	_USART_Init
  1617                           
  1618                           ;main.c: 542: TIMER0_Init();
  1619  03D1  120A  158A  2623  120A  118A  	fcall	_TIMER0_Init
  1620                           
  1621                           ;main.c: 543: ADC_Init();
  1622  03D6  120A  118A  24E9  120A  118A  	fcall	_ADC_Init
  1623                           
  1624                           ;main.c: 544: PWM_Init();
  1625  03DB  120A  158A  270E  120A  118A  	fcall	_PWM_Init
  1626                           
  1627                           ;main.c: 545: LCD_Init();
  1628  03E0  120A  118A  26B2  120A  118A  	fcall	_LCD_Init
  1629                           
  1630                           ;main.c: 548: INTCONbits.PEIE = 1;
  1631  03E5  170B               	bsf	11,6	;volatile
  1632                           
  1633                           ;main.c: 549: INTCONbits.GIE = 1;
  1634  03E6  178B               	bsf	11,7	;volatile
  1635                           
  1636                           ;main.c: 552: USART_WriteString("Inicializando o PIC16F877A\n\r");
  1637  03E7  3044               	movlw	low (STR_11| (0+32768))
  1638  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  1639  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  1640  03EA  00CB               	movwf	USART_WriteString@str
  1641  03EB  3085               	movlw	high (STR_11| (0+32768))
  1642  03EC  00CC               	movwf	USART_WriteString@str+1
  1643  03ED  120A  158A  2757  120A  118A  	fcall	_USART_WriteString
  1644                           
  1645                           ;main.c: 553: USART_WriteString("USART: 115.200bps\n\r");
  1646  03F2  3061               	movlw	low (STR_12| (0+32768))
  1647  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  1648  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  1649  03F5  00CB               	movwf	USART_WriteString@str
  1650  03F6  3085               	movlw	high (STR_12| (0+32768))
  1651  03F7  00CC               	movwf	USART_WriteString@str+1
  1652  03F8  120A  158A  2757  120A  118A  	fcall	_USART_WriteString
  1653                           
  1654                           ;main.c: 556: LCD_Init();
  1655  03FD  120A  118A  26B2  120A  118A  	fcall	_LCD_Init
  1656                           
  1657                           ;main.c: 557: LCD_Cursor(0,0);
  1658  0402  1283               	bcf	3,5	;RP0=0, select bank0
  1659  0403  1303               	bcf	3,6	;RP1=0, select bank0
  1660  0404  01CA               	clrf	LCD_Cursor@Col
  1661  0405  3000               	movlw	0
  1662  0406  120A  118A  27E8  120A  118A  	fcall	_LCD_Cursor
  1663                           
  1664                           ;main.c: 558: LCD_WriteString("Inicializando...");
  1665  040B  3075               	movlw	low (STR_13| (0+32768))
  1666  040C  1283               	bcf	3,5	;RP0=0, select bank0
  1667  040D  1303               	bcf	3,6	;RP1=0, select bank0
  1668  040E  00CC               	movwf	LCD_WriteString@Str
  1669  040F  3085               	movlw	high (STR_13| (0+32768))
  1670  0410  00CD               	movwf	LCD_WriteString@Str+1
  1671  0411  120A  158A  2732  120A  118A  	fcall	_LCD_WriteString
  1672                           
  1673                           ;main.c: 561: PWM_DutyCycle1(0);
  1674  0416  3000               	movlw	0
  1675  0417  1283               	bcf	3,5	;RP0=0, select bank0
  1676  0418  1303               	bcf	3,6	;RP1=0, select bank0
  1677  0419  00CA               	movwf	PWM_DutyCycle1@valor
  1678  041A  3000               	movlw	0
  1679  041B  00CB               	movwf	PWM_DutyCycle1@valor+1
  1680  041C  120A  158A  2692  120A  118A  	fcall	_PWM_DutyCycle1
  1681                           
  1682                           ;main.c: 562: PWM_DutyCycle2(0);
  1683  0421  3000               	movlw	0
  1684  0422  1283               	bcf	3,5	;RP0=0, select bank0
  1685  0423  1303               	bcf	3,6	;RP1=0, select bank0
  1686  0424  00CA               	movwf	PWM_DutyCycle2@valor
  1687  0425  3000               	movlw	0
  1688  0426  00CB               	movwf	PWM_DutyCycle2@valor+1
  1689  0427  120A  158A  26AD  120A  118A  	fcall	_PWM_DutyCycle2
  1690                           
  1691                           ;main.c: 565: TIMER0_Set(238);
  1692  042C  30EE               	movlw	238
  1693  042D  120A  158A  25FF  120A  118A  	fcall	_TIMER0_Set
  1694                           
  1695                           ;main.c: 568: _delay((unsigned long)((1000)*(18432000/4000.0)));
  1696  0432  3018               	movlw	24
  1697  0433  1683               	bsf	3,5	;RP0=1, select bank1
  1698  0434  1303               	bcf	3,6	;RP1=0, select bank1
  1699  0435  00DA               	movwf	(??_main^(0+128)+2)
  1700  0436  3061               	movlw	97
  1701  0437  00D9               	movwf	(??_main^(0+128)+1)
  1702  0438  306E               	movlw	110
  1703  0439  00D8               	movwf	??_main^(0+128)
  1704  043A                     u3537:	
  1705  043A  0BD8               	decfsz	??_main^(0+128),f
  1706  043B  2C3A               	goto	u3537
  1707  043C  0BD9               	decfsz	(??_main^(0+128)+1),f
  1708  043D  2C3A               	goto	u3537
  1709  043E  0BDA               	decfsz	(??_main^(0+128)+2),f
  1710  043F  2C3A               	goto	u3537
  1711  0440  0000               	nop
  1712  0441                     l214:	
  1713                           ;main.c: 571: while(1)
  1714                           
  1715                           
  1716                           ;main.c: 572: {
  1717                           ;main.c: 574: sprintf(display_rpm,"%04d", deltaV);
  1718  0441  301E               	movlw	low (STR_14| (0+32768))
  1719  0442  1283               	bcf	3,5	;RP0=0, select bank0
  1720  0443  1303               	bcf	3,6	;RP1=0, select bank0
  1721  0444  00D8               	movwf	sprintf@f
  1722  0445  3086               	movlw	high (STR_14| (0+32768))
  1723  0446  00D9               	movwf	sprintf@f+1
  1724  0447  0841               	movf	_deltaV+1,w
  1725  0448  01DB               	clrf	?_sprintf+3
  1726  0449  07DB               	addwf	?_sprintf+3,f
  1727  044A  0840               	movf	_deltaV,w
  1728  044B  01DA               	clrf	?_sprintf+2
  1729  044C  07DA               	addwf	?_sprintf+2,f
  1730  044D  30C8               	movlw	_display_rpm& (0+255)
  1731  044E  120A  118A  205C  120A  118A  	fcall	_sprintf
  1732                           
  1733                           ;main.c: 575: sprintf(display_pwm,"%04d", pwm);
  1734  0453  301E               	movlw	low (STR_14| (0+32768))
  1735  0454  1283               	bcf	3,5	;RP0=0, select bank0
  1736  0455  1303               	bcf	3,6	;RP1=0, select bank0
  1737  0456  00D8               	movwf	sprintf@f
  1738  0457  3086               	movlw	high (STR_14| (0+32768))
  1739  0458  00D9               	movwf	sprintf@f+1
  1740  0459  0845               	movf	_pwm+1,w
  1741  045A  01DB               	clrf	?_sprintf+3
  1742  045B  07DB               	addwf	?_sprintf+3,f
  1743  045C  0844               	movf	_pwm,w
  1744  045D  01DA               	clrf	?_sprintf+2
  1745  045E  07DA               	addwf	?_sprintf+2,f
  1746  045F  30BE               	movlw	_display_pwm& (0+255)
  1747  0460  120A  118A  205C  120A  118A  	fcall	_sprintf
  1748                           
  1749                           ;main.c: 579: USART_WriteString(display_rpm);
  1750  0465  30C8               	movlw	_display_rpm& (0+255)
  1751  0466  1283               	bcf	3,5	;RP0=0, select bank0
  1752  0467  1303               	bcf	3,6	;RP1=0, select bank0
  1753  0468  00CB               	movwf	USART_WriteString@str
  1754  0469  3000               	movlw	0
  1755  046A  00CC               	movwf	USART_WriteString@str+1
  1756  046B  120A  158A  2757  120A  118A  	fcall	_USART_WriteString
  1757                           
  1758                           ;main.c: 580: USART_WriteString("\n\r");
  1759  0470  3092               	movlw	low ((STR_9+12)| (0+32768))
  1760  0471  1283               	bcf	3,5	;RP0=0, select bank0
  1761  0472  1303               	bcf	3,6	;RP1=0, select bank0
  1762  0473  00CB               	movwf	USART_WriteString@str
  1763  0474  3085               	movlw	high ((STR_9+12)| (0+32768))
  1764  0475  00CC               	movwf	USART_WriteString@str+1
  1765  0476  120A  158A  2757  120A  118A  	fcall	_USART_WriteString
  1766                           
  1767                           ;main.c: 583: LCD_Clear();
  1768  047B  120A  158A  27A1  120A  118A  	fcall	_LCD_Clear
  1769                           
  1770                           ;main.c: 584: LCD_Cursor(0,0);
  1771  0480  1283               	bcf	3,5	;RP0=0, select bank0
  1772  0481  1303               	bcf	3,6	;RP1=0, select bank0
  1773  0482  01CA               	clrf	LCD_Cursor@Col
  1774  0483  3000               	movlw	0
  1775  0484  120A  118A  27E8  120A  118A  	fcall	_LCD_Cursor
  1776                           
  1777                           ;main.c: 585: LCD_WriteString("DlV: ");
  1778  0489  3018               	movlw	low (STR_17| (0+32768))
  1779  048A  1283               	bcf	3,5	;RP0=0, select bank0
  1780  048B  1303               	bcf	3,6	;RP1=0, select bank0
  1781  048C  00CC               	movwf	LCD_WriteString@Str
  1782  048D  3086               	movlw	high (STR_17| (0+32768))
  1783  048E  00CD               	movwf	LCD_WriteString@Str+1
  1784  048F  120A  158A  2732  120A  118A  	fcall	_LCD_WriteString
  1785                           
  1786                           ;main.c: 586: LCD_Cursor(0,6);
  1787  0494  3006               	movlw	6
  1788  0495  1683               	bsf	3,5	;RP0=1, select bank1
  1789  0496  1303               	bcf	3,6	;RP1=0, select bank1
  1790  0497  00D8               	movwf	??_main^(0+128)
  1791  0498  0858               	movf	??_main^(0+128),w
  1792  0499  1283               	bcf	3,5	;RP0=0, select bank0
  1793  049A  1303               	bcf	3,6	;RP1=0, select bank0
  1794  049B  00CA               	movwf	LCD_Cursor@Col
  1795  049C  3000               	movlw	0
  1796  049D  120A  118A  27E8  120A  118A  	fcall	_LCD_Cursor
  1797                           
  1798                           ;main.c: 587: LCD_WriteString(display_rpm);
  1799  04A2  30C8               	movlw	_display_rpm& (0+255)
  1800  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  1801  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  1802  04A5  00CC               	movwf	LCD_WriteString@Str
  1803  04A6  3000               	movlw	0
  1804  04A7  00CD               	movwf	LCD_WriteString@Str+1
  1805  04A8  120A  158A  2732  120A  118A  	fcall	_LCD_WriteString
  1806                           
  1807                           ;main.c: 588: LCD_Cursor(1,0);
  1808  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  1809  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  1810  04AF  01CA               	clrf	LCD_Cursor@Col
  1811  04B0  3001               	movlw	1
  1812  04B1  120A  118A  27E8  120A  118A  	fcall	_LCD_Cursor
  1813                           
  1814                           ;main.c: 589: LCD_WriteString("PWM: ");
  1815  04B6  3012               	movlw	low (STR_18| (0+32768))
  1816  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  1817  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  1818  04B9  00CC               	movwf	LCD_WriteString@Str
  1819  04BA  3086               	movlw	high (STR_18| (0+32768))
  1820  04BB  00CD               	movwf	LCD_WriteString@Str+1
  1821  04BC  120A  158A  2732  120A  118A  	fcall	_LCD_WriteString
  1822                           
  1823                           ;main.c: 590: LCD_Cursor(1,6);
  1824  04C1  3006               	movlw	6
  1825  04C2  1683               	bsf	3,5	;RP0=1, select bank1
  1826  04C3  1303               	bcf	3,6	;RP1=0, select bank1
  1827  04C4  00D8               	movwf	??_main^(0+128)
  1828  04C5  0858               	movf	??_main^(0+128),w
  1829  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  1830  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  1831  04C8  00CA               	movwf	LCD_Cursor@Col
  1832  04C9  3001               	movlw	1
  1833  04CA  120A  118A  27E8  120A  118A  	fcall	_LCD_Cursor
  1834                           
  1835                           ;main.c: 591: LCD_WriteString(display_pwm);
  1836  04CF  30BE               	movlw	_display_pwm& (0+255)
  1837  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  1838  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  1839  04D2  00CC               	movwf	LCD_WriteString@Str
  1840  04D3  3000               	movlw	0
  1841  04D4  00CD               	movwf	LCD_WriteString@Str+1
  1842  04D5  120A  158A  2732  120A  118A  	fcall	_LCD_WriteString
  1843                           
  1844                           ;main.c: 593: _delay((unsigned long)((200)*(18432000/4000.0)));
  1845  04DA  3005               	movlw	5
  1846  04DB  1683               	bsf	3,5	;RP0=1, select bank1
  1847  04DC  1303               	bcf	3,6	;RP1=0, select bank1
  1848  04DD  00DA               	movwf	(??_main^(0+128)+2)
  1849  04DE  30AD               	movlw	173
  1850  04DF  00D9               	movwf	(??_main^(0+128)+1)
  1851  04E0  30E0               	movlw	224
  1852  04E1  00D8               	movwf	??_main^(0+128)
  1853  04E2                     u3547:	
  1854  04E2  0BD8               	decfsz	??_main^(0+128),f
  1855  04E3  2CE2               	goto	u3547
  1856  04E4  0BD9               	decfsz	(??_main^(0+128)+1),f
  1857  04E5  2CE2               	goto	u3547
  1858  04E6  0BDA               	decfsz	(??_main^(0+128)+2),f
  1859  04E7  2CE2               	goto	u3547
  1860  04E8  2C41               	goto	l214
  1861  04E9                     __end_of_main:	
  1862                           
  1863                           	psect	text1
  1864  005C                     __ptext1:	
  1865 ;; *************** function _sprintf *****************
  1866 ;; Defined at:
  1867 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;  sp              1    wreg     PTR unsigned char 
  1870 ;;		 -> display_pwm(10), display_rpm(10), 
  1871 ;;  f               2   18[BANK0 ] PTR const unsigned char 
  1872 ;;		 -> STR_15(5), STR_14(5), 
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;  sp              1   34[BANK0 ] PTR unsigned char 
  1875 ;;		 -> display_pwm(10), display_rpm(10), 
  1876 ;;  _val            4   27[BANK0 ] struct .
  1877 ;;  width           2   32[BANK0 ] int 
  1878 ;;  c               1   35[BANK0 ] char 
  1879 ;;  flag            1   31[BANK0 ] unsigned char 
  1880 ;;  prec            1   26[BANK0 ] char 
  1881 ;;  ap              1   25[BANK0 ] PTR void [1]
  1882 ;;		 -> ?_sprintf(2), 
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  2   18[BANK0 ] int 
  1885 ;; Registers used:
  1886 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1892 ;;      Params:         0       4       0       0       0
  1893 ;;      Locals:         0      11       0       0       0
  1894 ;;      Temps:          0       3       0       0       0
  1895 ;;      Totals:         0      18       0       0       0
  1896 ;;Total ram usage:       18 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    5
  1899 ;; This function calls:
  1900 ;;		___lwdiv
  1901 ;;		___lwmod
  1902 ;;		___wmul
  1903 ;;		_isdigit
  1904 ;; This function is called by:
  1905 ;;		_main
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           
  1910                           ;psect for function _sprintf
  1911  005C                     _sprintf:	
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1915                           ;sprintf@sp stored from wreg
  1916  005C  1283               	bcf	3,5	;RP0=0, select bank0
  1917  005D  1303               	bcf	3,6	;RP1=0, select bank0
  1918  005E  00E8               	movwf	sprintf@sp
  1919                           
  1920                           ;doprnt.c: 494: va_list ap;
  1921                           ;doprnt.c: 499: signed char c;
  1922                           ;doprnt.c: 501: int width;
  1923                           ;doprnt.c: 506: signed char prec;
  1924                           ;doprnt.c: 508: unsigned char flag;
  1925                           ;doprnt.c: 527: union {
  1926                           ;doprnt.c: 528: unsigned int _val;
  1927                           ;doprnt.c: 529: struct {
  1928                           ;doprnt.c: 530: const char * _cp;
  1929                           ;doprnt.c: 531: unsigned _len;
  1930                           ;doprnt.c: 532: } _str;
  1931                           ;doprnt.c: 533: } _val;
  1932                           ;doprnt.c: 542: *ap = __va_start();
  1933  005F  305A               	movlw	(?_sprintf+2)& (0+255)
  1934  0060  00DC               	movwf	??_sprintf
  1935  0061  085C               	movf	??_sprintf,w
  1936  0062  00DF               	movwf	sprintf@ap
  1937  0063                     l2462:	
  1938                           ;doprnt.c: 545: while(c = *f++) {
  1939                           
  1940  0063  1283               	bcf	3,5	;RP0=0, select bank0
  1941  0064  1303               	bcf	3,6	;RP1=0, select bank0
  1942  0065  0859               	movf	sprintf@f+1,w
  1943  0066  00DD               	movwf	??_sprintf+1
  1944  0067  0858               	movf	sprintf@f,w
  1945  0068  00DC               	movwf	??_sprintf
  1946  0069  0AD8               	incf	sprintf@f,f
  1947  006A  1903               	skipnz
  1948  006B  0AD9               	incf	sprintf@f+1,f
  1949  006C  085D               	movf	??_sprintf+1,w
  1950  006D  00FF               	movwf	127
  1951  006E  085C               	movf	??_sprintf,w
  1952  006F  0084               	movwf	4
  1953  0070  120A  118A  2500  120A  118A  	fcall	stringtab
  1954  0075  00DE               	movwf	??_sprintf+2
  1955  0076  085E               	movf	??_sprintf+2,w
  1956  0077  00E9               	movwf	sprintf@c
  1957  0078  08E9               	movf	sprintf@c,f
  1958  0079  1903               	btfsc	3,2
  1959  007A  2A28               	goto	l2464
  1960                           
  1961                           ;doprnt.c: 547: if(c != '%')
  1962  007B  0869               	movf	sprintf@c,w
  1963  007C  3A25               	xorlw	37
  1964  007D  1903               	skipnz
  1965  007E  288B               	goto	l2368
  1966                           
  1967                           ;doprnt.c: 549: {
  1968                           ;doprnt.c: 550: ((*sp++ = (c)));
  1969  007F  0869               	movf	sprintf@c,w
  1970  0080  00DC               	movwf	??_sprintf
  1971  0081  0868               	movf	sprintf@sp,w
  1972  0082  0084               	movwf	4
  1973  0083  085C               	movf	??_sprintf,w
  1974  0084  1383               	bcf	3,7	;select IRP bank0
  1975  0085  0080               	movwf	0
  1976  0086  3001               	movlw	1
  1977  0087  00DC               	movwf	??_sprintf
  1978  0088  085C               	movf	??_sprintf,w
  1979  0089  07E8               	addwf	sprintf@sp,f
  1980                           
  1981                           ;doprnt.c: 551: continue;
  1982  008A  2863               	goto	l2462
  1983  008B                     l2368:	
  1984                           
  1985                           ;doprnt.c: 552: }
  1986                           ;doprnt.c: 555: width = 0;
  1987  008B  01E6               	clrf	sprintf@width
  1988  008C  01E7               	clrf	sprintf@width+1
  1989                           
  1990                           ;doprnt.c: 557: flag = 0;
  1991  008D  01E5               	clrf	sprintf@flag
  1992                           
  1993                           ;doprnt.c: 560: switch(*f) {
  1994                           
  1995                           ;doprnt.c: 559: for(;;) {
  1996  008E  2894               	goto	l2372
  1997  008F                     l491:	
  1998                           ;doprnt.c: 588: case '0':
  1999                           
  2000                           
  2001                           ;doprnt.c: 589: flag |= 0x04;
  2002  008F  1565               	bsf	sprintf@flag,2
  2003                           
  2004                           ;doprnt.c: 590: f++;
  2005  0090  3001               	movlw	1
  2006  0091  07D8               	addwf	sprintf@f,f
  2007  0092  1803               	skipnc
  2008  0093  0AD9               	incf	sprintf@f+1,f
  2009  0094                     l2372:	
  2010                           ;doprnt.c: 593: }
  2011                           
  2012                           ;doprnt.c: 591: continue;
  2013                           
  2014  0094  0859               	movf	sprintf@f+1,w
  2015  0095  00FF               	movwf	127
  2016  0096  0858               	movf	sprintf@f,w
  2017  0097  0084               	movwf	4
  2018  0098  120A  118A  2500  120A  118A  	fcall	stringtab
  2019                           
  2020                           ; Switch size 1, requested type "space"
  2021                           ; Number of cases is 1, Range of values is 48 to 48
  2022                           ; switch strategies available:
  2023                           ; Name         Instructions Cycles
  2024                           ; simple_byte            4     3 (average)
  2025                           ; direct_byte           14    11 (fixed)
  2026                           ; jumptable            263     9 (fixed)
  2027                           ;	Chosen strategy is simple_byte
  2028  009D  3A30               	xorlw	48	; case 48
  2029  009E  1903               	skipnz
  2030  009F  288F               	goto	l491
  2031  00A0  28A1               	goto	l2374
  2032  00A1                     l2374:	
  2033                           ;doprnt.c: 595: }
  2034                           
  2035                           ;doprnt.c: 594: break;
  2036                           
  2037                           
  2038                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2039  00A1  0859               	movf	sprintf@f+1,w
  2040  00A2  00FF               	movwf	127
  2041  00A3  0858               	movf	sprintf@f,w
  2042  00A4  0084               	movwf	4
  2043  00A5  120A  118A  2500  120A  118A  	fcall	stringtab
  2044  00AA  120A  158A  264C  120A  118A  	fcall	_isdigit
  2045  00AF  1C03               	btfss	3,0
  2046  00B0  28F7               	goto	l2388
  2047                           
  2048                           ;doprnt.c: 607: width = 0;
  2049  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  2050  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  2051  00B3  01E6               	clrf	sprintf@width
  2052  00B4  01E7               	clrf	sprintf@width+1
  2053  00B5                     l2378:	
  2054                           ;doprnt.c: 608: do {
  2055                           
  2056                           
  2057                           ;doprnt.c: 609: width *= 10;
  2058  00B5  300A               	movlw	10
  2059  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  2060  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  2061  00B8  00CA               	movwf	___wmul@multiplier
  2062  00B9  3000               	movlw	0
  2063  00BA  00CB               	movwf	___wmul@multiplier+1
  2064  00BB  0867               	movf	sprintf@width+1,w
  2065  00BC  01CD               	clrf	___wmul@multiplicand+1
  2066  00BD  07CD               	addwf	___wmul@multiplicand+1,f
  2067  00BE  0866               	movf	sprintf@width,w
  2068  00BF  01CC               	clrf	___wmul@multiplicand
  2069  00C0  07CC               	addwf	___wmul@multiplicand,f
  2070  00C1  120A  158A  277C  120A  118A  	fcall	___wmul
  2071  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  2072  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  2073  00C8  084B               	movf	?___wmul+1,w
  2074  00C9  01E7               	clrf	sprintf@width+1
  2075  00CA  07E7               	addwf	sprintf@width+1,f
  2076  00CB  084A               	movf	?___wmul,w
  2077  00CC  01E6               	clrf	sprintf@width
  2078  00CD  07E6               	addwf	sprintf@width,f
  2079                           
  2080                           ;doprnt.c: 610: width += *f++ - '0';
  2081  00CE  0859               	movf	sprintf@f+1,w
  2082  00CF  00FF               	movwf	127
  2083  00D0  0858               	movf	sprintf@f,w
  2084  00D1  0084               	movwf	4
  2085  00D2  120A  118A  2500  120A  118A  	fcall	stringtab
  2086  00D7  3ED0               	addlw	208
  2087  00D8  00DC               	movwf	??_sprintf
  2088  00D9  30FF               	movlw	255
  2089  00DA  1803               	skipnc
  2090  00DB  3000               	movlw	0
  2091  00DC  00DD               	movwf	??_sprintf+1
  2092  00DD  085C               	movf	??_sprintf,w
  2093  00DE  07E6               	addwf	sprintf@width,f
  2094  00DF  1803               	skipnc
  2095  00E0  0AE7               	incf	sprintf@width+1,f
  2096  00E1  085D               	movf	??_sprintf+1,w
  2097  00E2  07E7               	addwf	sprintf@width+1,f
  2098  00E3  3001               	movlw	1
  2099  00E4  07D8               	addwf	sprintf@f,f
  2100  00E5  1803               	skipnc
  2101  00E6  0AD9               	incf	sprintf@f+1,f
  2102                           
  2103                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2104  00E7  0859               	movf	sprintf@f+1,w
  2105  00E8  00FF               	movwf	127
  2106  00E9  0858               	movf	sprintf@f,w
  2107  00EA  0084               	movwf	4
  2108  00EB  120A  118A  2500  120A  118A  	fcall	stringtab
  2109  00F0  120A  158A  264C  120A  118A  	fcall	_isdigit
  2110  00F5  1803               	btfsc	3,0
  2111  00F6  28B5               	goto	l2378
  2112  00F7                     l2388:	
  2113                           ;doprnt.c: 831: }
  2114                           
  2115                           ;doprnt.c: 822: continue;
  2116                           
  2117                           ;doprnt.c: 811: default:
  2118                           
  2119                           ;doprnt.c: 707: case 'i':
  2120                           ;doprnt.c: 708: break;
  2121                           
  2122                           ;doprnt.c: 706: case 'd':
  2123                           
  2124                           ;doprnt.c: 647: goto alldone;
  2125                           
  2126                           ;doprnt.c: 646: case 0:
  2127                           
  2128                           ;doprnt.c: 617: }
  2129                           ;doprnt.c: 644: switch(c = *f++) {
  2130                           
  2131  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  2132  00F8  1303               	bcf	3,6	;RP1=0, select bank0
  2133  00F9  0859               	movf	sprintf@f+1,w
  2134  00FA  00DD               	movwf	??_sprintf+1
  2135  00FB  0858               	movf	sprintf@f,w
  2136  00FC  00DC               	movwf	??_sprintf
  2137  00FD  0AD8               	incf	sprintf@f,f
  2138  00FE  1903               	skipnz
  2139  00FF  0AD9               	incf	sprintf@f+1,f
  2140  0100  085D               	movf	??_sprintf+1,w
  2141  0101  00FF               	movwf	127
  2142  0102  085C               	movf	??_sprintf,w
  2143  0103  0084               	movwf	4
  2144  0104  120A  118A  2500  120A  118A  	fcall	stringtab
  2145  0109  00E9               	movwf	sprintf@c
  2146                           
  2147                           ; Switch size 1, requested type "space"
  2148                           ; Number of cases is 3, Range of values is 0 to 105
  2149                           ; switch strategies available:
  2150                           ; Name         Instructions Cycles
  2151                           ; simple_byte           10     6 (average)
  2152                           ; jumptable            260     6 (fixed)
  2153                           ;	Chosen strategy is simple_byte
  2154  010A  3A00               	xorlw	0	; case 0
  2155  010B  1903               	skipnz
  2156  010C  2A28               	goto	l2464
  2157  010D  3A64               	xorlw	100	; case 100
  2158  010E  1903               	skipnz
  2159  010F  2914               	goto	l2390
  2160  0110  3A0D               	xorlw	13	; case 105
  2161  0111  1903               	skipnz
  2162  0112  2914               	goto	l2390
  2163  0113  2863               	goto	l2462
  2164  0114                     l2390:	
  2165                           
  2166                           ;doprnt.c: 1262: {
  2167                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2168  0114  1283               	bcf	3,5	;RP0=0, select bank0
  2169  0115  1303               	bcf	3,6	;RP1=0, select bank0
  2170  0116  085F               	movf	sprintf@ap,w
  2171  0117  0084               	movwf	4
  2172  0118  1383               	bcf	3,7	;select IRP bank0
  2173  0119  0800               	movf	0,w
  2174  011A  00E1               	movwf	sprintf@_val
  2175  011B  0A84               	incf	4,f
  2176  011C  0800               	movf	0,w
  2177  011D  00E2               	movwf	sprintf@_val+1
  2178  011E  3002               	movlw	2
  2179  011F  00DC               	movwf	??_sprintf
  2180  0120  085C               	movf	??_sprintf,w
  2181  0121  07DF               	addwf	sprintf@ap,f
  2182                           
  2183                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  2184  0122  1FE2               	btfss	sprintf@_val+1,7
  2185  0123  292D               	goto	l2400
  2186                           
  2187                           ;doprnt.c: 1271: flag |= 0x03;
  2188  0124  3003               	movlw	3
  2189  0125  00DC               	movwf	??_sprintf
  2190  0126  085C               	movf	??_sprintf,w
  2191  0127  04E5               	iorwf	sprintf@flag,f
  2192                           
  2193                           ;doprnt.c: 1272: _val._val = -_val._val;
  2194  0128  09E1               	comf	sprintf@_val,f
  2195  0129  09E2               	comf	sprintf@_val+1,f
  2196  012A  0AE1               	incf	sprintf@_val,f
  2197  012B  1903               	skipnz
  2198  012C  0AE2               	incf	sprintf@_val+1,f
  2199  012D                     l2400:	
  2200                           
  2201                           ;doprnt.c: 1273: }
  2202                           ;doprnt.c: 1275: }
  2203                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2204  012D  01E9               	clrf	sprintf@c
  2205  012E  0AE9               	incf	sprintf@c,f
  2206  012F  0869               	movf	sprintf@c,w
  2207  0130  3A05               	xorlw	5
  2208  0131  1903               	btfsc	3,2
  2209  0132  2958               	goto	l2412
  2210  0133                     l2404:	
  2211                           
  2212                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2213  0133  0869               	movf	sprintf@c,w
  2214  0134  00DC               	movwf	??_sprintf
  2215  0135  075C               	addwf	??_sprintf,w
  2216  0136  3E12               	addlw	low (_dpowers| (0+32768))
  2217  0137  0084               	movwf	4
  2218  0138  3085               	movlw	high (_dpowers| (0+32768))
  2219  0139  1803               	skipnc
  2220  013A  3E01               	addlw	1
  2221  013B  00FF               	movwf	127
  2222  013C  120A  118A  2500  120A  118A  	fcall	stringtab
  2223  0141  00DD               	movwf	??_sprintf+1
  2224  0142  120A  118A  2500  120A  118A  	fcall	stringtab
  2225  0147  00DE               	movwf	??_sprintf+2
  2226  0148  085E               	movf	??_sprintf+2,w
  2227  0149  0262               	subwf	sprintf@_val+1,w
  2228  014A  1D03               	skipz
  2229  014B  294E               	goto	u2065
  2230  014C  085D               	movf	??_sprintf+1,w
  2231  014D  0261               	subwf	sprintf@_val,w
  2232  014E                     u2065:	
  2233  014E  1C03               	btfss	3,0
  2234  014F  2958               	goto	l2412
  2235                           
  2236                           ;doprnt.c: 1316: break;
  2237  0150  3001               	movlw	1
  2238  0151  00DC               	movwf	??_sprintf
  2239  0152  085C               	movf	??_sprintf,w
  2240  0153  07E9               	addwf	sprintf@c,f
  2241  0154  0869               	movf	sprintf@c,w
  2242  0155  3A05               	xorlw	5
  2243  0156  1D03               	skipz
  2244  0157  2933               	goto	l2404
  2245  0158                     l2412:	
  2246                           
  2247                           ;doprnt.c: 1354: if(width && flag & 0x03)
  2248  0158  0867               	movf	sprintf@width+1,w
  2249  0159  0466               	iorwf	sprintf@width,w
  2250  015A  1903               	skipnz
  2251  015B  2966               	goto	l509
  2252  015C  0865               	movf	sprintf@flag,w
  2253  015D  3903               	andlw	3
  2254  015E  1903               	btfsc	3,2
  2255  015F  2966               	goto	l509
  2256                           
  2257                           ;doprnt.c: 1355: width--;
  2258  0160  30FF               	movlw	255
  2259  0161  07E6               	addwf	sprintf@width,f
  2260  0162  1803               	skipnc
  2261  0163  0AE7               	incf	sprintf@width+1,f
  2262  0164  30FF               	movlw	255
  2263  0165  07E7               	addwf	sprintf@width+1,f
  2264  0166                     l509:	
  2265                           
  2266                           ;doprnt.c: 1390: if(width > c)
  2267  0166  0869               	movf	sprintf@c,w
  2268  0167  00DC               	movwf	??_sprintf
  2269  0168  01DD               	clrf	??_sprintf+1
  2270  0169  1BDC               	btfsc	??_sprintf,7
  2271  016A  03DD               	decf	??_sprintf+1,f
  2272  016B  085D               	movf	??_sprintf+1,w
  2273  016C  3A80               	xorlw	128
  2274  016D  00DE               	movwf	??_sprintf+2
  2275  016E  0867               	movf	sprintf@width+1,w
  2276  016F  3A80               	xorlw	128
  2277  0170  025E               	subwf	??_sprintf+2,w
  2278  0171  1D03               	skipz
  2279  0172  2975               	goto	u2105
  2280  0173  0866               	movf	sprintf@width,w
  2281  0174  025C               	subwf	??_sprintf,w
  2282  0175                     u2105:	
  2283  0175  1803               	skipnc
  2284  0176  2985               	goto	l2420
  2285                           
  2286                           ;doprnt.c: 1391: width -= c;
  2287  0177  1283               	bcf	3,5	;RP0=0, select bank0
  2288  0178  1303               	bcf	3,6	;RP1=0, select bank0
  2289  0179  0869               	movf	sprintf@c,w
  2290  017A  00DC               	movwf	??_sprintf
  2291  017B  01DD               	clrf	??_sprintf+1
  2292  017C  1BDC               	btfsc	??_sprintf,7
  2293  017D  03DD               	decf	??_sprintf+1,f
  2294  017E  085C               	movf	??_sprintf,w
  2295  017F  02E6               	subwf	sprintf@width,f
  2296  0180  085D               	movf	??_sprintf+1,w
  2297  0181  1C03               	skipc
  2298  0182  03E7               	decf	sprintf@width+1,f
  2299  0183  02E7               	subwf	sprintf@width+1,f
  2300  0184  2989               	goto	l2422
  2301  0185                     l2420:	
  2302                           
  2303                           ;doprnt.c: 1392: else
  2304                           ;doprnt.c: 1393: width = 0;
  2305  0185  1283               	bcf	3,5	;RP0=0, select bank0
  2306  0186  1303               	bcf	3,6	;RP1=0, select bank0
  2307  0187  01E6               	clrf	sprintf@width
  2308  0188  01E7               	clrf	sprintf@width+1
  2309  0189                     l2422:	
  2310                           
  2311                           ;doprnt.c: 1396: if(flag & 0x04) {
  2312  0189  1D65               	btfss	sprintf@flag,2
  2313  018A  29B0               	goto	l2438
  2314                           
  2315                           ;doprnt.c: 1401: if(flag & 0x03)
  2316  018B  0865               	movf	sprintf@flag,w
  2317  018C  3903               	andlw	3
  2318  018D  1903               	btfsc	3,2
  2319  018E  299A               	goto	l2430
  2320                           
  2321                           ;doprnt.c: 1402: ((*sp++ = ('-')));
  2322  018F  302D               	movlw	45
  2323  0190  00DC               	movwf	??_sprintf
  2324  0191  0868               	movf	sprintf@sp,w
  2325  0192  0084               	movwf	4
  2326  0193  085C               	movf	??_sprintf,w
  2327  0194  1383               	bcf	3,7	;select IRP bank0
  2328  0195  0080               	movwf	0
  2329  0196  3001               	movlw	1
  2330  0197  00DC               	movwf	??_sprintf
  2331  0198  085C               	movf	??_sprintf,w
  2332  0199  07E8               	addwf	sprintf@sp,f
  2333  019A                     l2430:	
  2334                           
  2335                           ;doprnt.c: 1424: if(width)
  2336  019A  0867               	movf	sprintf@width+1,w
  2337  019B  0466               	iorwf	sprintf@width,w
  2338  019C  1903               	skipnz
  2339  019D  29D8               	goto	l2452
  2340                           
  2341                           ;doprnt.c: 1426: ((*sp++ = ('0')));
  2342                           
  2343                           ;doprnt.c: 1425: do
  2344  019E  3030               	movlw	48
  2345  019F  00DC               	movwf	??_sprintf
  2346  01A0  0868               	movf	sprintf@sp,w
  2347  01A1  0084               	movwf	4
  2348  01A2  085C               	movf	??_sprintf,w
  2349  01A3  1383               	bcf	3,7	;select IRP bank0
  2350  01A4  0080               	movwf	0
  2351  01A5  3001               	movlw	1
  2352  01A6  00DC               	movwf	??_sprintf
  2353  01A7  085C               	movf	??_sprintf,w
  2354  01A8  07E8               	addwf	sprintf@sp,f
  2355                           
  2356                           ;doprnt.c: 1427: while(--width);
  2357  01A9  30FF               	movlw	255
  2358  01AA  07E6               	addwf	sprintf@width,f
  2359  01AB  1803               	skipnc
  2360  01AC  0AE7               	incf	sprintf@width+1,f
  2361  01AD  30FF               	movlw	255
  2362  01AE  07E7               	addwf	sprintf@width+1,f
  2363  01AF  299A               	goto	l2430
  2364  01B0                     l2438:	
  2365                           ;doprnt.c: 1429: } else
  2366                           
  2367                           
  2368                           ;doprnt.c: 1431: {
  2369                           ;doprnt.c: 1433: if(width
  2370                           ;doprnt.c: 1437: )
  2371  01B0  0867               	movf	sprintf@width+1,w
  2372  01B1  0466               	iorwf	sprintf@width,w
  2373  01B2  1903               	skipnz
  2374  01B3  29C9               	goto	l2446
  2375  01B4                     l2440:	
  2376                           ;doprnt.c: 1438: do
  2377                           
  2378                           
  2379                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  2380  01B4  3020               	movlw	32
  2381  01B5  00DC               	movwf	??_sprintf
  2382  01B6  0868               	movf	sprintf@sp,w
  2383  01B7  0084               	movwf	4
  2384  01B8  085C               	movf	??_sprintf,w
  2385  01B9  1383               	bcf	3,7	;select IRP bank0
  2386  01BA  0080               	movwf	0
  2387  01BB  3001               	movlw	1
  2388  01BC  00DC               	movwf	??_sprintf
  2389  01BD  085C               	movf	??_sprintf,w
  2390  01BE  07E8               	addwf	sprintf@sp,f
  2391                           
  2392                           ;doprnt.c: 1440: while(--width);
  2393  01BF  30FF               	movlw	255
  2394  01C0  07E6               	addwf	sprintf@width,f
  2395  01C1  1803               	skipnc
  2396  01C2  0AE7               	incf	sprintf@width+1,f
  2397  01C3  30FF               	movlw	255
  2398  01C4  07E7               	addwf	sprintf@width+1,f
  2399  01C5  0867               	movf	sprintf@width+1,w
  2400  01C6  0466               	iorwf	sprintf@width,w
  2401  01C7  1D03               	skipz
  2402  01C8  29B4               	goto	l2440
  2403  01C9                     l2446:	
  2404                           
  2405                           ;doprnt.c: 1447: if(flag & 0x03)
  2406  01C9  0865               	movf	sprintf@flag,w
  2407  01CA  3903               	andlw	3
  2408  01CB  1903               	btfsc	3,2
  2409  01CC  29D8               	goto	l2452
  2410                           
  2411                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2412  01CD  302D               	movlw	45
  2413  01CE  00DC               	movwf	??_sprintf
  2414  01CF  0868               	movf	sprintf@sp,w
  2415  01D0  0084               	movwf	4
  2416  01D1  085C               	movf	??_sprintf,w
  2417  01D2  1383               	bcf	3,7	;select IRP bank0
  2418  01D3  0080               	movwf	0
  2419  01D4  3001               	movlw	1
  2420  01D5  00DC               	movwf	??_sprintf
  2421  01D6  085C               	movf	??_sprintf,w
  2422  01D7  07E8               	addwf	sprintf@sp,f
  2423  01D8                     l2452:	
  2424                           
  2425                           ;doprnt.c: 1478: }
  2426                           ;doprnt.c: 1481: prec = c;
  2427  01D8  0869               	movf	sprintf@c,w
  2428  01D9  00DC               	movwf	??_sprintf
  2429  01DA  085C               	movf	??_sprintf,w
  2430  01DB  00E0               	movwf	sprintf@prec
  2431  01DC                     l2460:	
  2432                           ;doprnt.c: 1483: while(prec--) {
  2433                           
  2434  01DC  30FF               	movlw	-1
  2435  01DD  00DC               	movwf	??_sprintf
  2436  01DE  085C               	movf	??_sprintf,w
  2437  01DF  07E0               	addwf	sprintf@prec,f
  2438  01E0  0860               	movf	sprintf@prec,w
  2439  01E1  3AFF               	xorlw	-1
  2440  01E2  1903               	btfsc	3,2
  2441  01E3  2863               	goto	l2462
  2442                           
  2443                           ;doprnt.c: 1487: {
  2444                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2445  01E4  300A               	movlw	10
  2446  01E5  00D2               	movwf	___lwmod@divisor
  2447  01E6  3000               	movlw	0
  2448  01E7  00D3               	movwf	___lwmod@divisor+1
  2449  01E8  0860               	movf	sprintf@prec,w
  2450  01E9  00DC               	movwf	??_sprintf
  2451  01EA  075C               	addwf	??_sprintf,w
  2452  01EB  3E12               	addlw	low (_dpowers| (0+32768))
  2453  01EC  0084               	movwf	4
  2454  01ED  3085               	movlw	high (_dpowers| (0+32768))
  2455  01EE  1803               	skipnc
  2456  01EF  3E01               	addlw	1
  2457  01F0  00FF               	movwf	127
  2458  01F1  120A  118A  2500  120A  118A  	fcall	stringtab
  2459  01F6  00CA               	movwf	___lwdiv@divisor
  2460  01F7  120A  118A  2500  120A  118A  	fcall	stringtab
  2461  01FC  00CB               	movwf	___lwdiv@divisor+1
  2462  01FD  0862               	movf	sprintf@_val+1,w
  2463  01FE  01CD               	clrf	___lwdiv@dividend+1
  2464  01FF  07CD               	addwf	___lwdiv@dividend+1,f
  2465  0200  0861               	movf	sprintf@_val,w
  2466  0201  01CC               	clrf	___lwdiv@dividend
  2467  0202  07CC               	addwf	___lwdiv@dividend,f
  2468  0203  120A  118A  276A  120A  118A  	fcall	___lwdiv
  2469  0208  1283               	bcf	3,5	;RP0=0, select bank0
  2470  0209  1303               	bcf	3,6	;RP1=0, select bank0
  2471  020A  084B               	movf	?___lwdiv+1,w
  2472  020B  01D5               	clrf	___lwmod@dividend+1
  2473  020C  07D5               	addwf	___lwmod@dividend+1,f
  2474  020D  084A               	movf	?___lwdiv,w
  2475  020E  01D4               	clrf	___lwmod@dividend
  2476  020F  07D4               	addwf	___lwmod@dividend,f
  2477  0210  120A  158A  27CA  120A  118A  	fcall	___lwmod
  2478  0215  1283               	bcf	3,5	;RP0=0, select bank0
  2479  0216  1303               	bcf	3,6	;RP1=0, select bank0
  2480  0217  0852               	movf	?___lwmod,w
  2481  0218  3E30               	addlw	48
  2482  0219  00DD               	movwf	??_sprintf+1
  2483  021A  085D               	movf	??_sprintf+1,w
  2484  021B  00E9               	movwf	sprintf@c
  2485                           
  2486                           ;doprnt.c: 1532: }
  2487                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2488  021C  0869               	movf	sprintf@c,w
  2489  021D  00DC               	movwf	??_sprintf
  2490  021E  0868               	movf	sprintf@sp,w
  2491  021F  0084               	movwf	4
  2492  0220  085C               	movf	??_sprintf,w
  2493  0221  1383               	bcf	3,7	;select IRP bank0
  2494  0222  0080               	movwf	0
  2495  0223  3001               	movlw	1
  2496  0224  00DC               	movwf	??_sprintf
  2497  0225  085C               	movf	??_sprintf,w
  2498  0226  07E8               	addwf	sprintf@sp,f
  2499  0227  29DC               	goto	l2460
  2500  0228                     l2464:	
  2501                           ;doprnt.c: 1534: }
  2502                           ;doprnt.c: 1542: }
  2503                           ;doprnt.c: 1544: alldone:
  2504                           
  2505                           
  2506                           ;doprnt.c: 1547: *sp = 0;
  2507  0228  1283               	bcf	3,5	;RP0=0, select bank0
  2508  0229  1303               	bcf	3,6	;RP1=0, select bank0
  2509  022A  0868               	movf	sprintf@sp,w
  2510  022B  0084               	movwf	4
  2511  022C  1383               	bcf	3,7	;select IRP bank0
  2512  022D  0180               	clrf	0
  2513  022E  0008               	return
  2514  022F                     __end_of_sprintf:	
  2515                           ;doprnt.c: 1549: return 0;
  2516                           ;	Return value of _sprintf is never used
  2517                           
  2518                           
  2519                           	psect	text2
  2520  0E4C                     __ptext2:	
  2521 ;; *************** function _isdigit *****************
  2522 ;; Defined at:
  2523 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  c               1    wreg     unsigned char 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  c               1    5[BANK0 ] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;		None               void
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2537 ;;      Params:         0       0       0       0       0
  2538 ;;      Locals:         0       2       0       0       0
  2539 ;;      Temps:          0       0       0       0       0
  2540 ;;      Totals:         0       2       0       0       0
  2541 ;;Total ram usage:        2 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    4
  2544 ;; This function calls:
  2545 ;;		Nothing
  2546 ;; This function is called by:
  2547 ;;		_sprintf
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           
  2552                           ;psect for function _isdigit
  2553  0E4C                     _isdigit:	
  2554                           
  2555                           ;incstack = 0
  2556                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2557                           ;isdigit@c stored from wreg
  2558  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
  2559  0E4D  1303               	bcf	3,6	;RP1=0, select bank0
  2560  0E4E  00CB               	movwf	isdigit@c
  2561  0E4F  01CA               	clrf	_isdigit$1455
  2562  0E50  303A               	movlw	58
  2563  0E51  024B               	subwf	isdigit@c,w
  2564  0E52  1803               	skipnc
  2565  0E53  2E5A               	goto	l2028
  2566  0E54  3030               	movlw	48
  2567  0E55  024B               	subwf	isdigit@c,w
  2568  0E56  1C03               	skipc
  2569  0E57  2E5A               	goto	l2028
  2570  0E58  01CA               	clrf	_isdigit$1455
  2571  0E59  0ACA               	incf	_isdigit$1455,f
  2572  0E5A                     l2028:	
  2573  0E5A  0C4A               	rrf	_isdigit$1455,w
  2574  0E5B  0008               	return
  2575  0E5C                     __end_of_isdigit:	
  2576                           
  2577                           	psect	text3
  2578  0F7C                     __ptext3:	
  2579 ;; *************** function ___wmul *****************
  2580 ;; Defined at:
  2581 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2582 ;; Parameters:    Size  Location     Type
  2583 ;;  multiplier      2    4[BANK0 ] unsigned int 
  2584 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  product         2    8[BANK0 ] unsigned int 
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  2    4[BANK0 ] unsigned int 
  2589 ;; Registers used:
  2590 ;;		wreg, status,2, status,0
  2591 ;; Tracked objects:
  2592 ;;		On entry : 0/0
  2593 ;;		On exit  : 0/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2596 ;;      Params:         0       4       0       0       0
  2597 ;;      Locals:         0       2       0       0       0
  2598 ;;      Temps:          0       0       0       0       0
  2599 ;;      Totals:         0       6       0       0       0
  2600 ;;Total ram usage:        6 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; Hardware stack levels required when called:    4
  2603 ;; This function calls:
  2604 ;;		Nothing
  2605 ;; This function is called by:
  2606 ;;		_sprintf
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           
  2611                           ;psect for function ___wmul
  2612  0F7C                     ___wmul:	
  2613                           
  2614                           ;incstack = 0
  2615                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2616  0F7C  1283               	bcf	3,5	;RP0=0, select bank0
  2617  0F7D  1303               	bcf	3,6	;RP1=0, select bank0
  2618  0F7E  01CE               	clrf	___wmul@product
  2619  0F7F  01CF               	clrf	___wmul@product+1
  2620  0F80                     l2034:	
  2621  0F80  1C4A               	btfss	___wmul@multiplier,0
  2622  0F81  2F88               	goto	l610
  2623  0F82  084C               	movf	___wmul@multiplicand,w
  2624  0F83  07CE               	addwf	___wmul@product,f
  2625  0F84  1803               	skipnc
  2626  0F85  0ACF               	incf	___wmul@product+1,f
  2627  0F86  084D               	movf	___wmul@multiplicand+1,w
  2628  0F87  07CF               	addwf	___wmul@product+1,f
  2629  0F88                     l610:	
  2630  0F88  3001               	movlw	1
  2631  0F89                     u1525:	
  2632  0F89  1003               	clrc
  2633  0F8A  0DCC               	rlf	___wmul@multiplicand,f
  2634  0F8B  0DCD               	rlf	___wmul@multiplicand+1,f
  2635  0F8C  3EFF               	addlw	-1
  2636  0F8D  1D03               	skipz
  2637  0F8E  2F89               	goto	u1525
  2638  0F8F  3001               	movlw	1
  2639  0F90                     u1535:	
  2640  0F90  1003               	clrc
  2641  0F91  0CCB               	rrf	___wmul@multiplier+1,f
  2642  0F92  0CCA               	rrf	___wmul@multiplier,f
  2643  0F93  3EFF               	addlw	-1
  2644  0F94  1D03               	skipz
  2645  0F95  2F90               	goto	u1535
  2646  0F96  084B               	movf	___wmul@multiplier+1,w
  2647  0F97  044A               	iorwf	___wmul@multiplier,w
  2648  0F98  1D03               	skipz
  2649  0F99  2F80               	goto	l2034
  2650  0F9A  084F               	movf	___wmul@product+1,w
  2651  0F9B  01CB               	clrf	?___wmul+1
  2652  0F9C  07CB               	addwf	?___wmul+1,f
  2653  0F9D  084E               	movf	___wmul@product,w
  2654  0F9E  01CA               	clrf	?___wmul
  2655  0F9F  07CA               	addwf	?___wmul,f
  2656  0FA0  0008               	return
  2657  0FA1                     __end_of___wmul:	
  2658                           
  2659                           	psect	text4
  2660  0FCA                     __ptext4:	
  2661 ;; *************** function ___lwmod *****************
  2662 ;; Defined at:
  2663 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;  divisor         2   12[BANK0 ] unsigned int 
  2666 ;;  dividend        2   14[BANK0 ] unsigned int 
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;  counter         1   17[BANK0 ] unsigned char 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  2   12[BANK0 ] unsigned int 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2678 ;;      Params:         0       4       0       0       0
  2679 ;;      Locals:         0       1       0       0       0
  2680 ;;      Temps:          0       1       0       0       0
  2681 ;;      Totals:         0       6       0       0       0
  2682 ;;Total ram usage:        6 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    4
  2685 ;; This function calls:
  2686 ;;		Nothing
  2687 ;; This function is called by:
  2688 ;;		_sprintf
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           
  2693                           ;psect for function ___lwmod
  2694  0FCA                     ___lwmod:	
  2695                           
  2696                           ;incstack = 0
  2697                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2698  0FCA  1283               	bcf	3,5	;RP0=0, select bank0
  2699  0FCB  1303               	bcf	3,6	;RP1=0, select bank0
  2700  0FCC  0853               	movf	___lwmod@divisor+1,w
  2701  0FCD  0452               	iorwf	___lwmod@divisor,w
  2702  0FCE  1903               	skipnz
  2703  0FCF  2FF9               	goto	l2128
  2704  0FD0  01D7               	clrf	___lwmod@counter
  2705  0FD1  0AD7               	incf	___lwmod@counter,f
  2706  0FD2                     l2118:	
  2707  0FD2  1BD3               	btfsc	___lwmod@divisor+1,7
  2708  0FD3  2FE0               	goto	l2120
  2709  0FD4  3001               	movlw	1
  2710  0FD5                     u1735:	
  2711  0FD5  1003               	clrc
  2712  0FD6  0DD2               	rlf	___lwmod@divisor,f
  2713  0FD7  0DD3               	rlf	___lwmod@divisor+1,f
  2714  0FD8  3EFF               	addlw	-1
  2715  0FD9  1D03               	skipz
  2716  0FDA  2FD5               	goto	u1735
  2717  0FDB  3001               	movlw	1
  2718  0FDC  00D6               	movwf	??___lwmod
  2719  0FDD  0856               	movf	??___lwmod,w
  2720  0FDE  07D7               	addwf	___lwmod@counter,f
  2721  0FDF  2FD2               	goto	l2118
  2722  0FE0                     l2120:	
  2723  0FE0  0853               	movf	___lwmod@divisor+1,w
  2724  0FE1  0255               	subwf	___lwmod@dividend+1,w
  2725  0FE2  1D03               	skipz
  2726  0FE3  2FE6               	goto	u1755
  2727  0FE4  0852               	movf	___lwmod@divisor,w
  2728  0FE5  0254               	subwf	___lwmod@dividend,w
  2729  0FE6                     u1755:	
  2730  0FE6  1C03               	skipc
  2731  0FE7  2FEE               	goto	l2124
  2732  0FE8  0852               	movf	___lwmod@divisor,w
  2733  0FE9  02D4               	subwf	___lwmod@dividend,f
  2734  0FEA  0853               	movf	___lwmod@divisor+1,w
  2735  0FEB  1C03               	skipc
  2736  0FEC  03D5               	decf	___lwmod@dividend+1,f
  2737  0FED  02D5               	subwf	___lwmod@dividend+1,f
  2738  0FEE                     l2124:	
  2739  0FEE  3001               	movlw	1
  2740  0FEF                     u1765:	
  2741  0FEF  1003               	clrc
  2742  0FF0  0CD3               	rrf	___lwmod@divisor+1,f
  2743  0FF1  0CD2               	rrf	___lwmod@divisor,f
  2744  0FF2  3EFF               	addlw	-1
  2745  0FF3  1D03               	skipz
  2746  0FF4  2FEF               	goto	u1765
  2747  0FF5  3001               	movlw	1
  2748  0FF6  02D7               	subwf	___lwmod@counter,f
  2749  0FF7  1D03               	btfss	3,2
  2750  0FF8  2FE0               	goto	l2120
  2751  0FF9                     l2128:	
  2752  0FF9  0855               	movf	___lwmod@dividend+1,w
  2753  0FFA  01D3               	clrf	?___lwmod+1
  2754  0FFB  07D3               	addwf	?___lwmod+1,f
  2755  0FFC  0854               	movf	___lwmod@dividend,w
  2756  0FFD  01D2               	clrf	?___lwmod
  2757  0FFE  07D2               	addwf	?___lwmod,f
  2758  0FFF  0008               	return
  2759  1000                     __end_of___lwmod:	
  2760                           
  2761                           	psect	text5
  2762  076A                     __ptext5:	
  2763 ;; *************** function ___lwdiv *****************
  2764 ;; Defined at:
  2765 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;  divisor         2    4[BANK0 ] unsigned int 
  2768 ;;  dividend        2    6[BANK0 ] unsigned int 
  2769 ;; Auto vars:     Size  Location     Type
  2770 ;;  quotient        2    9[BANK0 ] unsigned int 
  2771 ;;  counter         1   11[BANK0 ] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  2    4[BANK0 ] unsigned int 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2, status,0
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2781 ;;      Params:         0       4       0       0       0
  2782 ;;      Locals:         0       3       0       0       0
  2783 ;;      Temps:          0       1       0       0       0
  2784 ;;      Totals:         0       8       0       0       0
  2785 ;;Total ram usage:        8 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    4
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_sprintf
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           
  2796                           ;psect for function ___lwdiv
  2797  076A                     ___lwdiv:	
  2798                           
  2799                           ;incstack = 0
  2800                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2801  076A  1283               	bcf	3,5	;RP0=0, select bank0
  2802  076B  1303               	bcf	3,6	;RP1=0, select bank0
  2803  076C  01CF               	clrf	___lwdiv@quotient
  2804  076D  01D0               	clrf	___lwdiv@quotient+1
  2805  076E  084B               	movf	___lwdiv@divisor+1,w
  2806  076F  044A               	iorwf	___lwdiv@divisor,w
  2807  0770  1903               	skipnz
  2808  0771  2FA3               	goto	l2106
  2809  0772  01D1               	clrf	___lwdiv@counter
  2810  0773  0AD1               	incf	___lwdiv@counter,f
  2811  0774                     l2094:	
  2812  0774  1BCB               	btfsc	___lwdiv@divisor+1,7
  2813  0775  2F82               	goto	l2096
  2814  0776  3001               	movlw	1
  2815  0777                     u1665:	
  2816  0777  1003               	clrc
  2817  0778  0DCA               	rlf	___lwdiv@divisor,f
  2818  0779  0DCB               	rlf	___lwdiv@divisor+1,f
  2819  077A  3EFF               	addlw	-1
  2820  077B  1D03               	skipz
  2821  077C  2F77               	goto	u1665
  2822  077D  3001               	movlw	1
  2823  077E  00CE               	movwf	??___lwdiv
  2824  077F  084E               	movf	??___lwdiv,w
  2825  0780  07D1               	addwf	___lwdiv@counter,f
  2826  0781  2F74               	goto	l2094
  2827  0782                     l2096:	
  2828  0782  3001               	movlw	1
  2829  0783                     u1685:	
  2830  0783  1003               	clrc
  2831  0784  0DCF               	rlf	___lwdiv@quotient,f
  2832  0785  0DD0               	rlf	___lwdiv@quotient+1,f
  2833  0786  3EFF               	addlw	-1
  2834  0787  1D03               	skipz
  2835  0788  2F83               	goto	u1685
  2836  0789  084B               	movf	___lwdiv@divisor+1,w
  2837  078A  024D               	subwf	___lwdiv@dividend+1,w
  2838  078B  1D03               	skipz
  2839  078C  2F8F               	goto	u1695
  2840  078D  084A               	movf	___lwdiv@divisor,w
  2841  078E  024C               	subwf	___lwdiv@dividend,w
  2842  078F                     u1695:	
  2843  078F  1C03               	skipc
  2844  0790  2F98               	goto	l2102
  2845  0791  084A               	movf	___lwdiv@divisor,w
  2846  0792  02CC               	subwf	___lwdiv@dividend,f
  2847  0793  084B               	movf	___lwdiv@divisor+1,w
  2848  0794  1C03               	skipc
  2849  0795  03CD               	decf	___lwdiv@dividend+1,f
  2850  0796  02CD               	subwf	___lwdiv@dividend+1,f
  2851  0797  144F               	bsf	___lwdiv@quotient,0
  2852  0798                     l2102:	
  2853  0798  3001               	movlw	1
  2854  0799                     u1705:	
  2855  0799  1003               	clrc
  2856  079A  0CCB               	rrf	___lwdiv@divisor+1,f
  2857  079B  0CCA               	rrf	___lwdiv@divisor,f
  2858  079C  3EFF               	addlw	-1
  2859  079D  1D03               	skipz
  2860  079E  2F99               	goto	u1705
  2861  079F  3001               	movlw	1
  2862  07A0  02D1               	subwf	___lwdiv@counter,f
  2863  07A1  1D03               	btfss	3,2
  2864  07A2  2F82               	goto	l2096
  2865  07A3                     l2106:	
  2866  07A3  0850               	movf	___lwdiv@quotient+1,w
  2867  07A4  01CB               	clrf	?___lwdiv+1
  2868  07A5  07CB               	addwf	?___lwdiv+1,f
  2869  07A6  084F               	movf	___lwdiv@quotient,w
  2870  07A7  01CA               	clrf	?___lwdiv
  2871  07A8  07CA               	addwf	?___lwdiv,f
  2872  07A9  0008               	return
  2873  07AA                     __end_of___lwdiv:	
  2874                           
  2875                           	psect	text6
  2876  0F57                     __ptext6:	
  2877 ;; *************** function _USART_WriteString *****************
  2878 ;; Defined at:
  2879 ;;		line 52 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  str             2    5[BANK0 ] PTR const unsigned char 
  2882 ;;		 -> STR_19(40), STR_16(3), display_rpm(10), STR_12(20), 
  2883 ;;		 -> STR_11(29), STR_10(15), STR_9(15), STR_8(14), 
  2884 ;;		 -> STR_7(14), STR_6(14), STR_5(14), STR_4(14), 
  2885 ;;		 -> STR_3(13), STR_2(13), STR_1(14), 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;		None
  2888 ;; Return value:  Size  Location     Type
  2889 ;;		None               void
  2890 ;; Registers used:
  2891 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2897 ;;      Params:         0       2       0       0       0
  2898 ;;      Locals:         0       0       0       0       0
  2899 ;;      Temps:          0       0       0       0       0
  2900 ;;      Totals:         0       2       0       0       0
  2901 ;;Total ram usage:        2 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    5
  2904 ;; This function calls:
  2905 ;;		_USART_WriteChar
  2906 ;; This function is called by:
  2907 ;;		_main
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           
  2912                           ;psect for function _USART_WriteString
  2913  0F57                     _USART_WriteString:	
  2914  0F57                     l2234:	
  2915                           ;usart.c: 54: while(*str != '\0')
  2916                           
  2917                           ;incstack = 0
  2918                           ; Regs used in _USART_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2919                           
  2920  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  2921  0F58  1303               	bcf	3,6	;RP1=0, select bank0
  2922  0F59  084C               	movf	USART_WriteString@str+1,w
  2923  0F5A  00FF               	movwf	127
  2924  0F5B  084B               	movf	USART_WriteString@str,w
  2925  0F5C  0084               	movwf	4
  2926  0F5D  120A  118A  2500  120A  158A  	fcall	stringtab
  2927  0F62  3800               	iorlw	0
  2928  0F63  1903               	btfsc	3,2
  2929  0F64  0008               	return
  2930                           
  2931                           ;usart.c: 55: {
  2932                           ;usart.c: 56: USART_WriteChar(*str);
  2933  0F65  1283               	bcf	3,5	;RP0=0, select bank0
  2934  0F66  1303               	bcf	3,6	;RP1=0, select bank0
  2935  0F67  084C               	movf	USART_WriteString@str+1,w
  2936  0F68  00FF               	movwf	127
  2937  0F69  084B               	movf	USART_WriteString@str,w
  2938  0F6A  0084               	movwf	4
  2939  0F6B  120A  118A  2500  120A  158A  	fcall	stringtab
  2940  0F70  120A  158A  2613  120A  158A  	fcall	_USART_WriteChar
  2941                           
  2942                           ;usart.c: 57: str++;
  2943  0F75  3001               	movlw	1
  2944  0F76  1283               	bcf	3,5	;RP0=0, select bank0
  2945  0F77  1303               	bcf	3,6	;RP1=0, select bank0
  2946  0F78  07CB               	addwf	USART_WriteString@str,f
  2947  0F79  1803               	skipnc
  2948  0F7A  0ACC               	incf	USART_WriteString@str+1,f
  2949  0F7B  2F57               	goto	l2234
  2950  0F7C                     __end_of_USART_WriteString:	
  2951                           
  2952                           	psect	text7
  2953  0E13                     __ptext7:	
  2954 ;; *************** function _USART_WriteChar *****************
  2955 ;; Defined at:
  2956 ;;		line 44 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;  byte            1    wreg     unsigned char 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;  byte            1    4[BANK0 ] unsigned char 
  2961 ;; Return value:  Size  Location     Type
  2962 ;;		None               void
  2963 ;; Registers used:
  2964 ;;		wreg
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2970 ;;      Params:         0       0       0       0       0
  2971 ;;      Locals:         0       1       0       0       0
  2972 ;;      Temps:          0       0       0       0       0
  2973 ;;      Totals:         0       1       0       0       0
  2974 ;;Total ram usage:        1 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:    4
  2977 ;; This function calls:
  2978 ;;		Nothing
  2979 ;; This function is called by:
  2980 ;;		_USART_WriteString
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           
  2985                           ;psect for function _USART_WriteChar
  2986  0E13                     _USART_WriteChar:	
  2987                           
  2988                           ;incstack = 0
  2989                           ; Regs used in _USART_WriteChar: [wreg]
  2990                           ;USART_WriteChar@byte stored from wreg
  2991  0E13  1283               	bcf	3,5	;RP0=0, select bank0
  2992  0E14  1303               	bcf	3,6	;RP1=0, select bank0
  2993  0E15  00CA               	movwf	USART_WriteChar@byte
  2994  0E16                     l239:	
  2995                           ;usart.c: 46: while(!PIR1bits.TXIF);
  2996                           
  2997  0E16  1E0C               	btfss	12,4	;volatile
  2998  0E17  2E16               	goto	l239
  2999                           
  3000                           ;usart.c: 47: TXREG = byte;
  3001  0E18  084A               	movf	USART_WriteChar@byte,w
  3002  0E19  0099               	movwf	25	;volatile
  3003  0E1A  0008               	return
  3004  0E1B                     __end_of_USART_WriteChar:	
  3005                           
  3006                           	psect	text8
  3007  071F                     __ptext8:	
  3008 ;; *************** function _USART_Init *****************
  3009 ;; Defined at:
  3010 ;;		line 6 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;  BaudRate        4   19[BANK0 ] long 
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;		None
  3015 ;; Return value:  Size  Location     Type
  3016 ;;		None               void
  3017 ;; Registers used:
  3018 ;;		wreg, status,2, status,0, pclath, cstack
  3019 ;; Tracked objects:
  3020 ;;		On entry : 0/0
  3021 ;;		On exit  : 0/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3024 ;;      Params:         0       4       0       0       0
  3025 ;;      Locals:         0       0       0       0       0
  3026 ;;      Temps:          0       4       0       0       0
  3027 ;;      Totals:         0       8       0       0       0
  3028 ;;Total ram usage:        8 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    5
  3031 ;; This function calls:
  3032 ;;		___aldiv
  3033 ;; This function is called by:
  3034 ;;		_main
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _USART_Init
  3040  071F                     _USART_Init:	
  3041                           
  3042                           ;usart.c: 13: SPBRG = (unsigned char)(18432000 / (16 * BaudRate)) - 1;
  3043                           
  3044                           ;incstack = 0
  3045                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
  3046  071F  1283               	bcf	3,5	;RP0=0, select bank0
  3047  0720  1303               	bcf	3,6	;RP1=0, select bank0
  3048  0721  0859               	movf	USART_Init@BaudRate,w
  3049  0722  00DD               	movwf	??_USART_Init
  3050  0723  085A               	movf	USART_Init@BaudRate+1,w
  3051  0724  00DE               	movwf	??_USART_Init+1
  3052  0725  085B               	movf	USART_Init@BaudRate+2,w
  3053  0726  00DF               	movwf	??_USART_Init+2
  3054  0727  085C               	movf	USART_Init@BaudRate+3,w
  3055  0728  00E0               	movwf	??_USART_Init+3
  3056  0729  3004               	movlw	4
  3057  072A                     u1975:	
  3058  072A  1003               	clrc
  3059  072B  0DDD               	rlf	??_USART_Init,f
  3060  072C  0DDE               	rlf	??_USART_Init+1,f
  3061  072D  0DDF               	rlf	??_USART_Init+2,f
  3062  072E  0DE0               	rlf	??_USART_Init+3,f
  3063  072F  3EFF               	addlw	-1
  3064  0730  1D03               	skipz
  3065  0731  2F2A               	goto	u1975
  3066  0732  0860               	movf	??_USART_Init+3,w
  3067  0733  00CD               	movwf	___aldiv@divisor+3
  3068  0734  085F               	movf	??_USART_Init+2,w
  3069  0735  00CC               	movwf	___aldiv@divisor+2
  3070  0736  085E               	movf	??_USART_Init+1,w
  3071  0737  00CB               	movwf	___aldiv@divisor+1
  3072  0738  085D               	movf	??_USART_Init,w
  3073  0739  00CA               	movwf	___aldiv@divisor
  3074  073A  3001               	movlw	1
  3075  073B  00D1               	movwf	___aldiv@dividend+3
  3076  073C  3019               	movlw	25
  3077  073D  00D0               	movwf	___aldiv@dividend+2
  3078  073E  3040               	movlw	64
  3079  073F  00CF               	movwf	___aldiv@dividend+1
  3080  0740  3000               	movlw	0
  3081  0741  00CE               	movwf	___aldiv@dividend
  3082  0742  120A  118A  2623   	fcall	___aldiv
  3083  0745  1283               	bcf	3,5	;RP0=0, select bank0
  3084  0746  1303               	bcf	3,6	;RP1=0, select bank0
  3085  0747  084A               	movf	?___aldiv,w
  3086  0748  3EFF               	addlw	255
  3087  0749  1683               	bsf	3,5	;RP0=1, select bank1
  3088  074A  1303               	bcf	3,6	;RP1=0, select bank1
  3089  074B  0099               	movwf	25	;volatile
  3090                           
  3091                           ;usart.c: 16: TXSTAbits.CSRC = 0;
  3092  074C  1398               	bcf	24,7	;volatile
  3093                           
  3094                           ;usart.c: 17: TXSTAbits.TX9 = 0;
  3095  074D  1318               	bcf	24,6	;volatile
  3096                           
  3097                           ;usart.c: 18: TXSTAbits.TXEN = 1;
  3098  074E  1698               	bsf	24,5	;volatile
  3099                           
  3100                           ;usart.c: 19: TXSTAbits.SYNC = 0;
  3101  074F  1218               	bcf	24,4	;volatile
  3102                           
  3103                           ;usart.c: 21: TXSTAbits.BRGH = 1;
  3104  0750  1518               	bsf	24,2	;volatile
  3105                           
  3106                           ;usart.c: 22: TXSTAbits.TRMT = 1;
  3107  0751  1498               	bsf	24,1	;volatile
  3108                           
  3109                           ;usart.c: 23: TXSTAbits.TX9D = 0;
  3110  0752  1018               	bcf	24,0	;volatile
  3111                           
  3112                           ;usart.c: 26: RCSTAbits.SPEN = 1;
  3113  0753  1283               	bcf	3,5	;RP0=0, select bank0
  3114  0754  1303               	bcf	3,6	;RP1=0, select bank0
  3115  0755  1798               	bsf	24,7	;volatile
  3116                           
  3117                           ;usart.c: 27: RCSTAbits.RX9 = 0;
  3118  0756  1318               	bcf	24,6	;volatile
  3119                           
  3120                           ;usart.c: 28: RCSTAbits.SREN = 0;
  3121  0757  1298               	bcf	24,5	;volatile
  3122                           
  3123                           ;usart.c: 29: RCSTAbits.CREN = 1;
  3124  0758  1618               	bsf	24,4	;volatile
  3125                           
  3126                           ;usart.c: 30: RCSTAbits.ADDEN = 0;
  3127  0759  1198               	bcf	24,3	;volatile
  3128                           
  3129                           ;usart.c: 31: RCSTAbits.FERR = 0;
  3130  075A  1118               	bcf	24,2	;volatile
  3131                           
  3132                           ;usart.c: 32: RCSTAbits.OERR = 0;
  3133  075B  1098               	bcf	24,1	;volatile
  3134                           
  3135                           ;usart.c: 33: RCSTAbits.RX9D = 0;
  3136  075C  1018               	bcf	24,0	;volatile
  3137                           
  3138                           ;usart.c: 36: PIE1bits.TXIE = 0;
  3139  075D  1683               	bsf	3,5	;RP0=1, select bank1
  3140  075E  1303               	bcf	3,6	;RP1=0, select bank1
  3141  075F  120C               	bcf	12,4	;volatile
  3142                           
  3143                           ;usart.c: 37: PIR1bits.TXIF = 0;
  3144  0760  1283               	bcf	3,5	;RP0=0, select bank0
  3145  0761  1303               	bcf	3,6	;RP1=0, select bank0
  3146  0762  120C               	bcf	12,4	;volatile
  3147                           
  3148                           ;usart.c: 38: PIE1bits.RCIE = 1;
  3149  0763  1683               	bsf	3,5	;RP0=1, select bank1
  3150  0764  1303               	bcf	3,6	;RP1=0, select bank1
  3151  0765  168C               	bsf	12,5	;volatile
  3152                           
  3153                           ;usart.c: 39: PIR1bits.RCIF = 0;
  3154  0766  1283               	bcf	3,5	;RP0=0, select bank0
  3155  0767  1303               	bcf	3,6	;RP1=0, select bank0
  3156  0768  128C               	bcf	12,5	;volatile
  3157  0769  0008               	return
  3158  076A                     __end_of_USART_Init:	
  3159                           
  3160                           	psect	text9
  3161  0623                     __ptext9:	
  3162 ;; *************** function ___aldiv *****************
  3163 ;; Defined at:
  3164 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  divisor         4    4[BANK0 ] long 
  3167 ;;  dividend        4    8[BANK0 ] long 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  quotient        4   15[BANK0 ] long 
  3170 ;;  sign            1   14[BANK0 ] unsigned char 
  3171 ;;  counter         1   13[BANK0 ] unsigned char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  4    4[BANK0 ] long 
  3174 ;; Registers used:
  3175 ;;		wreg, status,2, status,0
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3181 ;;      Params:         0       8       0       0       0
  3182 ;;      Locals:         0       6       0       0       0
  3183 ;;      Temps:          0       1       0       0       0
  3184 ;;      Totals:         0      15       0       0       0
  3185 ;;Total ram usage:       15 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    4
  3188 ;; This function calls:
  3189 ;;		Nothing
  3190 ;; This function is called by:
  3191 ;;		_USART_Init
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           
  3196                           ;psect for function ___aldiv
  3197  0623                     ___aldiv:	
  3198                           
  3199                           ;incstack = 0
  3200                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3201  0623  1283               	bcf	3,5	;RP0=0, select bank0
  3202  0624  1303               	bcf	3,6	;RP1=0, select bank0
  3203  0625  01D4               	clrf	___aldiv@sign
  3204  0626  1FCD               	btfss	___aldiv@divisor+3,7
  3205  0627  2E35               	goto	l665
  3206  0628  09CA               	comf	___aldiv@divisor,f
  3207  0629  09CB               	comf	___aldiv@divisor+1,f
  3208  062A  09CC               	comf	___aldiv@divisor+2,f
  3209  062B  09CD               	comf	___aldiv@divisor+3,f
  3210  062C  0ACA               	incf	___aldiv@divisor,f
  3211  062D  1903               	skipnz
  3212  062E  0ACB               	incf	___aldiv@divisor+1,f
  3213  062F  1903               	skipnz
  3214  0630  0ACC               	incf	___aldiv@divisor+2,f
  3215  0631  1903               	skipnz
  3216  0632  0ACD               	incf	___aldiv@divisor+3,f
  3217  0633  01D4               	clrf	___aldiv@sign
  3218  0634  0AD4               	incf	___aldiv@sign,f
  3219  0635                     l665:	
  3220  0635  1FD1               	btfss	___aldiv@dividend+3,7
  3221  0636  2E46               	goto	l2054
  3222  0637  09CE               	comf	___aldiv@dividend,f
  3223  0638  09CF               	comf	___aldiv@dividend+1,f
  3224  0639  09D0               	comf	___aldiv@dividend+2,f
  3225  063A  09D1               	comf	___aldiv@dividend+3,f
  3226  063B  0ACE               	incf	___aldiv@dividend,f
  3227  063C  1903               	skipnz
  3228  063D  0ACF               	incf	___aldiv@dividend+1,f
  3229  063E  1903               	skipnz
  3230  063F  0AD0               	incf	___aldiv@dividend+2,f
  3231  0640  1903               	skipnz
  3232  0641  0AD1               	incf	___aldiv@dividend+3,f
  3233  0642  3001               	movlw	1
  3234  0643  00D2               	movwf	??___aldiv
  3235  0644  0852               	movf	??___aldiv,w
  3236  0645  06D4               	xorwf	___aldiv@sign,f
  3237  0646                     l2054:	
  3238  0646  3000               	movlw	0
  3239  0647  00D8               	movwf	___aldiv@quotient+3
  3240  0648  3000               	movlw	0
  3241  0649  00D7               	movwf	___aldiv@quotient+2
  3242  064A  3000               	movlw	0
  3243  064B  00D6               	movwf	___aldiv@quotient+1
  3244  064C  3000               	movlw	0
  3245  064D  00D5               	movwf	___aldiv@quotient
  3246  064E  084D               	movf	___aldiv@divisor+3,w
  3247  064F  044C               	iorwf	___aldiv@divisor+2,w
  3248  0650  044B               	iorwf	___aldiv@divisor+1,w
  3249  0651  044A               	iorwf	___aldiv@divisor,w
  3250  0652  1903               	skipnz
  3251  0653  2E9B               	goto	l2076
  3252  0654  01D3               	clrf	___aldiv@counter
  3253  0655  0AD3               	incf	___aldiv@counter,f
  3254  0656                     l2062:	
  3255  0656  1BCD               	btfsc	___aldiv@divisor+3,7
  3256  0657  2E66               	goto	l2064
  3257  0658  3001               	movlw	1
  3258  0659  00D2               	movwf	??___aldiv
  3259  065A                     u1585:	
  3260  065A  1003               	clrc
  3261  065B  0DCA               	rlf	___aldiv@divisor,f
  3262  065C  0DCB               	rlf	___aldiv@divisor+1,f
  3263  065D  0DCC               	rlf	___aldiv@divisor+2,f
  3264  065E  0DCD               	rlf	___aldiv@divisor+3,f
  3265  065F  0BD2               	decfsz	??___aldiv,f
  3266  0660  2E5A               	goto	u1585
  3267  0661  3001               	movlw	1
  3268  0662  00D2               	movwf	??___aldiv
  3269  0663  0852               	movf	??___aldiv,w
  3270  0664  07D3               	addwf	___aldiv@counter,f
  3271  0665  2E56               	goto	l2062
  3272  0666                     l2064:	
  3273  0666  3001               	movlw	1
  3274  0667  00D2               	movwf	??___aldiv
  3275  0668                     u1605:	
  3276  0668  1003               	clrc
  3277  0669  0DD5               	rlf	___aldiv@quotient,f
  3278  066A  0DD6               	rlf	___aldiv@quotient+1,f
  3279  066B  0DD7               	rlf	___aldiv@quotient+2,f
  3280  066C  0DD8               	rlf	___aldiv@quotient+3,f
  3281  066D  0BD2               	decfsz	??___aldiv,f
  3282  066E  2E68               	goto	u1605
  3283  066F  084D               	movf	___aldiv@divisor+3,w
  3284  0670  0251               	subwf	___aldiv@dividend+3,w
  3285  0671  1D03               	skipz
  3286  0672  2E7D               	goto	u1615
  3287  0673  084C               	movf	___aldiv@divisor+2,w
  3288  0674  0250               	subwf	___aldiv@dividend+2,w
  3289  0675  1D03               	skipz
  3290  0676  2E7D               	goto	u1615
  3291  0677  084B               	movf	___aldiv@divisor+1,w
  3292  0678  024F               	subwf	___aldiv@dividend+1,w
  3293  0679  1D03               	skipz
  3294  067A  2E7D               	goto	u1615
  3295  067B  084A               	movf	___aldiv@divisor,w
  3296  067C  024E               	subwf	___aldiv@dividend,w
  3297  067D                     u1615:	
  3298  067D  1C03               	skipc
  3299  067E  2E8E               	goto	l2072
  3300  067F  084A               	movf	___aldiv@divisor,w
  3301  0680  02CE               	subwf	___aldiv@dividend,f
  3302  0681  084B               	movf	___aldiv@divisor+1,w
  3303  0682  1C03               	skipc
  3304  0683  0F4B               	incfsz	___aldiv@divisor+1,w
  3305  0684  02CF               	subwf	___aldiv@dividend+1,f
  3306  0685  084C               	movf	___aldiv@divisor+2,w
  3307  0686  1C03               	skipc
  3308  0687  0F4C               	incfsz	___aldiv@divisor+2,w
  3309  0688  02D0               	subwf	___aldiv@dividend+2,f
  3310  0689  084D               	movf	___aldiv@divisor+3,w
  3311  068A  1C03               	skipc
  3312  068B  0F4D               	incfsz	___aldiv@divisor+3,w
  3313  068C  02D1               	subwf	___aldiv@dividend+3,f
  3314  068D  1455               	bsf	___aldiv@quotient,0
  3315  068E                     l2072:	
  3316  068E  3001               	movlw	1
  3317  068F                     u1625:	
  3318  068F  1003               	clrc
  3319  0690  0CCD               	rrf	___aldiv@divisor+3,f
  3320  0691  0CCC               	rrf	___aldiv@divisor+2,f
  3321  0692  0CCB               	rrf	___aldiv@divisor+1,f
  3322  0693  0CCA               	rrf	___aldiv@divisor,f
  3323  0694  3EFF               	addlw	-1
  3324  0695  1D03               	skipz
  3325  0696  2E8F               	goto	u1625
  3326  0697  3001               	movlw	1
  3327  0698  02D3               	subwf	___aldiv@counter,f
  3328  0699  1D03               	btfss	3,2
  3329  069A  2E66               	goto	l2064
  3330  069B                     l2076:	
  3331  069B  0854               	movf	___aldiv@sign,w
  3332  069C  1903               	btfsc	3,2
  3333  069D  2EA9               	goto	l2080
  3334  069E  09D5               	comf	___aldiv@quotient,f
  3335  069F  09D6               	comf	___aldiv@quotient+1,f
  3336  06A0  09D7               	comf	___aldiv@quotient+2,f
  3337  06A1  09D8               	comf	___aldiv@quotient+3,f
  3338  06A2  0AD5               	incf	___aldiv@quotient,f
  3339  06A3  1903               	skipnz
  3340  06A4  0AD6               	incf	___aldiv@quotient+1,f
  3341  06A5  1903               	skipnz
  3342  06A6  0AD7               	incf	___aldiv@quotient+2,f
  3343  06A7  1903               	skipnz
  3344  06A8  0AD8               	incf	___aldiv@quotient+3,f
  3345  06A9                     l2080:	
  3346  06A9  0858               	movf	___aldiv@quotient+3,w
  3347  06AA  00CD               	movwf	?___aldiv+3
  3348  06AB  0857               	movf	___aldiv@quotient+2,w
  3349  06AC  00CC               	movwf	?___aldiv+2
  3350  06AD  0856               	movf	___aldiv@quotient+1,w
  3351  06AE  00CB               	movwf	?___aldiv+1
  3352  06AF  0855               	movf	___aldiv@quotient,w
  3353  06B0  00CA               	movwf	?___aldiv
  3354  06B1  0008               	return
  3355  06B2                     __end_of___aldiv:	
  3356                           
  3357                           	psect	text10
  3358  0DFF                     __ptext10:	
  3359 ;; *************** function _TIMER0_Set *****************
  3360 ;; Defined at:
  3361 ;;		line 20 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\timers.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  contagens       1    wreg     unsigned char 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  contagens       1    4[BANK0 ] unsigned char 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;		None               void
  3368 ;; Registers used:
  3369 ;;		wreg
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3375 ;;      Params:         0       0       0       0       0
  3376 ;;      Locals:         0       1       0       0       0
  3377 ;;      Temps:          0       0       0       0       0
  3378 ;;      Totals:         0       1       0       0       0
  3379 ;;Total ram usage:        1 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    4
  3382 ;; This function calls:
  3383 ;;		Nothing
  3384 ;; This function is called by:
  3385 ;;		_main
  3386 ;; This function uses a non-reentrant model
  3387 ;;
  3388                           
  3389                           
  3390                           ;psect for function _TIMER0_Set
  3391  0DFF                     _TIMER0_Set:	
  3392                           
  3393                           ;incstack = 0
  3394                           ; Regs used in _TIMER0_Set: [wreg]
  3395                           ;TIMER0_Set@contagens stored from wreg
  3396  0DFF  1283               	bcf	3,5	;RP0=0, select bank0
  3397  0E00  1303               	bcf	3,6	;RP1=0, select bank0
  3398  0E01  00CA               	movwf	TIMER0_Set@contagens
  3399                           
  3400                           ;timers.c: 22: TMR0 = contagens;
  3401  0E02  084A               	movf	TIMER0_Set@contagens,w
  3402  0E03  0081               	movwf	1	;volatile
  3403  0E04  0008               	return
  3404  0E05                     __end_of_TIMER0_Set:	
  3405                           
  3406                           	psect	text11
  3407  0E23                     __ptext11:	
  3408 ;; *************** function _TIMER0_Init *****************
  3409 ;; Defined at:
  3410 ;;		line 6 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\timers.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;		None
  3415 ;; Return value:  Size  Location     Type
  3416 ;;		None               void
  3417 ;; Registers used:
  3418 ;;		None
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3424 ;;      Params:         0       0       0       0       0
  3425 ;;      Locals:         0       0       0       0       0
  3426 ;;      Temps:          0       0       0       0       0
  3427 ;;      Totals:         0       0       0       0       0
  3428 ;;Total ram usage:        0 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    4
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_main
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           
  3439                           ;psect for function _TIMER0_Init
  3440  0E23                     _TIMER0_Init:	
  3441                           
  3442                           ;timers.c: 8: OPTION_REGbits.T0CS = 0;
  3443                           
  3444                           ;incstack = 0
  3445                           ; Regs used in _TIMER0_Init: []
  3446  0E23  1683               	bsf	3,5	;RP0=1, select bank1
  3447  0E24  1303               	bcf	3,6	;RP1=0, select bank1
  3448  0E25  1281               	bcf	1,5	;volatile
  3449                           
  3450                           ;timers.c: 9: OPTION_REGbits.T0SE = 0;
  3451  0E26  1201               	bcf	1,4	;volatile
  3452                           
  3453                           ;timers.c: 10: OPTION_REGbits.PSA = 0;
  3454  0E27  1181               	bcf	1,3	;volatile
  3455                           
  3456                           ;timers.c: 11: OPTION_REGbits.PS2 = 1;
  3457  0E28  1501               	bsf	1,2	;volatile
  3458                           
  3459                           ;timers.c: 12: OPTION_REGbits.PS1 = 1;
  3460  0E29  1481               	bsf	1,1	;volatile
  3461                           
  3462                           ;timers.c: 13: OPTION_REGbits.PS0 = 1;
  3463  0E2A  1401               	bsf	1,0	;volatile
  3464                           
  3465                           ;timers.c: 14: INTCONbits.TMR0IF = 0;
  3466  0E2B  110B               	bcf	11,2	;volatile
  3467                           
  3468                           ;timers.c: 15: INTCONbits.TMR0IE = 1;
  3469  0E2C  168B               	bsf	11,5	;volatile
  3470  0E2D  0008               	return
  3471  0E2E                     __end_of_TIMER0_Init:	
  3472                           
  3473                           	psect	text12
  3474  0F0E                     __ptext12:	
  3475 ;; *************** function _PWM_Init *****************
  3476 ;; Defined at:
  3477 ;;		line 5 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;		None
  3480 ;; Auto vars:     Size  Location     Type
  3481 ;;		None
  3482 ;; Return value:  Size  Location     Type
  3483 ;;		None               void
  3484 ;; Registers used:
  3485 ;;		wreg
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3491 ;;      Params:         0       0       0       0       0
  3492 ;;      Locals:         0       0       0       0       0
  3493 ;;      Temps:          0       0       0       0       0
  3494 ;;      Totals:         0       0       0       0       0
  3495 ;;Total ram usage:        0 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; Hardware stack levels required when called:    4
  3498 ;; This function calls:
  3499 ;;		Nothing
  3500 ;; This function is called by:
  3501 ;;		_main
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           
  3506                           ;psect for function _PWM_Init
  3507  0F0E                     _PWM_Init:	
  3508                           
  3509                           ;pwm.c: 14: T2CONbits.T2CKPS1 = 1;
  3510                           
  3511                           ;incstack = 0
  3512                           ; Regs used in _PWM_Init: [wreg]
  3513  0F0E  1283               	bcf	3,5	;RP0=0, select bank0
  3514  0F0F  1303               	bcf	3,6	;RP1=0, select bank0
  3515  0F10  1492               	bsf	18,1	;volatile
  3516                           
  3517                           ;pwm.c: 15: T2CONbits.T2CKPS0 = 0;
  3518  0F11  1012               	bcf	18,0	;volatile
  3519                           
  3520                           ;pwm.c: 18: T2CONbits.TOUTPS3 = 0;
  3521  0F12  1312               	bcf	18,6	;volatile
  3522                           
  3523                           ;pwm.c: 19: T2CONbits.TOUTPS2 = 0;
  3524  0F13  1292               	bcf	18,5	;volatile
  3525                           
  3526                           ;pwm.c: 20: T2CONbits.TOUTPS1 = 0;
  3527  0F14  1212               	bcf	18,4	;volatile
  3528                           
  3529                           ;pwm.c: 21: T2CONbits.TOUTPS0 = 0;
  3530  0F15  1192               	bcf	18,3	;volatile
  3531                           
  3532                           ;pwm.c: 24: T2CONbits.TMR2ON = 1;
  3533  0F16  1512               	bsf	18,2	;volatile
  3534                           
  3535                           ;pwm.c: 27: PR2 = 255;
  3536  0F17  30FF               	movlw	255
  3537  0F18  1683               	bsf	3,5	;RP0=1, select bank1
  3538  0F19  1303               	bcf	3,6	;RP1=0, select bank1
  3539  0F1A  0092               	movwf	18	;volatile
  3540                           
  3541                           ;pwm.c: 43: CCP1CONbits.CCP1M3 = 1;
  3542  0F1B  1283               	bcf	3,5	;RP0=0, select bank0
  3543  0F1C  1303               	bcf	3,6	;RP1=0, select bank0
  3544  0F1D  1597               	bsf	23,3	;volatile
  3545                           
  3546                           ;pwm.c: 44: CCP1CONbits.CCP1M2 = 1;
  3547  0F1E  1517               	bsf	23,2	;volatile
  3548                           
  3549                           ;pwm.c: 45: CCP1CONbits.CCP1M1 = 1;
  3550  0F1F  1497               	bsf	23,1	;volatile
  3551                           
  3552                           ;pwm.c: 46: CCP1CONbits.CCP1M0 = 1;
  3553  0F20  1417               	bsf	23,0	;volatile
  3554                           
  3555                           ;pwm.c: 49: PIE1bits.CCP1IE = 1;
  3556  0F21  1683               	bsf	3,5	;RP0=1, select bank1
  3557  0F22  1303               	bcf	3,6	;RP1=0, select bank1
  3558  0F23  150C               	bsf	12,2	;volatile
  3559                           
  3560                           ;pwm.c: 50: PIR1bits.CCP1IF = 0;
  3561  0F24  1283               	bcf	3,5	;RP0=0, select bank0
  3562  0F25  1303               	bcf	3,6	;RP1=0, select bank0
  3563  0F26  110C               	bcf	12,2	;volatile
  3564                           
  3565                           ;pwm.c: 53: CCP2CONbits.CCP2M3 = 1;
  3566  0F27  159D               	bsf	29,3	;volatile
  3567                           
  3568                           ;pwm.c: 54: CCP2CONbits.CCP2M2 = 1;
  3569  0F28  151D               	bsf	29,2	;volatile
  3570                           
  3571                           ;pwm.c: 55: CCP2CONbits.CCP2M1 = 1;
  3572  0F29  149D               	bsf	29,1	;volatile
  3573                           
  3574                           ;pwm.c: 56: CCP2CONbits.CCP2M0 = 1;
  3575  0F2A  141D               	bsf	29,0	;volatile
  3576                           
  3577                           ;pwm.c: 59: PIE2bits.CCP2IE = 1;
  3578  0F2B  1683               	bsf	3,5	;RP0=1, select bank1
  3579  0F2C  1303               	bcf	3,6	;RP1=0, select bank1
  3580  0F2D  140D               	bsf	13,0	;volatile
  3581                           
  3582                           ;pwm.c: 60: PIR2bits.CCP2IF = 0;
  3583  0F2E  1283               	bcf	3,5	;RP0=0, select bank0
  3584  0F2F  1303               	bcf	3,6	;RP1=0, select bank0
  3585  0F30  100D               	bcf	13,0	;volatile
  3586  0F31  0008               	return
  3587  0F32                     __end_of_PWM_Init:	
  3588                           
  3589                           	psect	text13
  3590  0EAD                     __ptext13:	
  3591 ;; *************** function _PWM_DutyCycle2 *****************
  3592 ;; Defined at:
  3593 ;;		line 96 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;  valor           2    4[BANK0 ] int 
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;		None
  3598 ;; Return value:  Size  Location     Type
  3599 ;;		None               void
  3600 ;; Registers used:
  3601 ;;		wreg, status,2, status,0
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3607 ;;      Params:         0       2       0       0       0
  3608 ;;      Locals:         0       0       0       0       0
  3609 ;;      Temps:          0       2       0       0       0
  3610 ;;      Totals:         0       4       0       0       0
  3611 ;;Total ram usage:        4 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; Hardware stack levels required when called:    4
  3614 ;; This function calls:
  3615 ;;		Nothing
  3616 ;; This function is called by:
  3617 ;;		_main
  3618 ;;		_Fuzzy
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           
  3623                           ;psect for function _PWM_DutyCycle2
  3624  0EAD                     _PWM_DutyCycle2:	
  3625                           
  3626                           ;pwm.c: 98: CCPR2L = valor >> 2;
  3627                           
  3628                           ;incstack = 0
  3629                           ; Regs used in _PWM_DutyCycle2: [wreg+status,2+status,0]
  3630  0EAD  1283               	bcf	3,5	;RP0=0, select bank0
  3631  0EAE  1303               	bcf	3,6	;RP1=0, select bank0
  3632  0EAF  084B               	movf	PWM_DutyCycle2@valor+1,w
  3633  0EB0  00CD               	movwf	??_PWM_DutyCycle2+1
  3634  0EB1  084A               	movf	PWM_DutyCycle2@valor,w
  3635  0EB2  00CC               	movwf	??_PWM_DutyCycle2
  3636  0EB3  0D4D               	rlf	??_PWM_DutyCycle2+1,w
  3637  0EB4  0CCD               	rrf	??_PWM_DutyCycle2+1,f
  3638  0EB5  0CCC               	rrf	??_PWM_DutyCycle2,f
  3639  0EB6  0D4D               	rlf	??_PWM_DutyCycle2+1,w
  3640  0EB7  0CCD               	rrf	??_PWM_DutyCycle2+1,f
  3641  0EB8  0CCC               	rrf	??_PWM_DutyCycle2,f
  3642  0EB9  084C               	movf	??_PWM_DutyCycle2,w
  3643  0EBA  009B               	movwf	27	;volatile
  3644                           
  3645                           ;pwm.c: 99: CCP2CON = (valor << 4)|0X0C;
  3646  0EBB  084A               	movf	PWM_DutyCycle2@valor,w
  3647  0EBC  00CC               	movwf	??_PWM_DutyCycle2
  3648  0EBD  3003               	movlw	3
  3649  0EBE                     u1945:	
  3650  0EBE  1003               	clrc
  3651  0EBF  0DCC               	rlf	??_PWM_DutyCycle2,f
  3652  0EC0  3EFF               	addlw	-1
  3653  0EC1  1D03               	skipz
  3654  0EC2  2EBE               	goto	u1945
  3655  0EC3  1003               	clrc
  3656  0EC4  0D4C               	rlf	??_PWM_DutyCycle2,w
  3657  0EC5  380C               	iorlw	12
  3658  0EC6  009D               	movwf	29	;volatile
  3659  0EC7  0008               	return
  3660  0EC8                     __end_of_PWM_DutyCycle2:	
  3661                           
  3662                           	psect	text14
  3663  0E92                     __ptext14:	
  3664 ;; *************** function _PWM_DutyCycle1 *****************
  3665 ;; Defined at:
  3666 ;;		line 64 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;  valor           2    4[BANK0 ] int 
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;		None
  3671 ;; Return value:  Size  Location     Type
  3672 ;;		None               void
  3673 ;; Registers used:
  3674 ;;		wreg, status,2, status,0
  3675 ;; Tracked objects:
  3676 ;;		On entry : 0/0
  3677 ;;		On exit  : 0/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3680 ;;      Params:         0       2       0       0       0
  3681 ;;      Locals:         0       0       0       0       0
  3682 ;;      Temps:          0       2       0       0       0
  3683 ;;      Totals:         0       4       0       0       0
  3684 ;;Total ram usage:        4 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; Hardware stack levels required when called:    4
  3687 ;; This function calls:
  3688 ;;		Nothing
  3689 ;; This function is called by:
  3690 ;;		_main
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           
  3695                           ;psect for function _PWM_DutyCycle1
  3696  0E92                     _PWM_DutyCycle1:	
  3697                           
  3698                           ;pwm.c: 91: CCPR1L = valor >> 2;
  3699                           
  3700                           ;incstack = 0
  3701                           ; Regs used in _PWM_DutyCycle1: [wreg+status,2+status,0]
  3702  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  3703  0E93  1303               	bcf	3,6	;RP1=0, select bank0
  3704  0E94  084B               	movf	PWM_DutyCycle1@valor+1,w
  3705  0E95  00CD               	movwf	??_PWM_DutyCycle1+1
  3706  0E96  084A               	movf	PWM_DutyCycle1@valor,w
  3707  0E97  00CC               	movwf	??_PWM_DutyCycle1
  3708  0E98  0D4D               	rlf	??_PWM_DutyCycle1+1,w
  3709  0E99  0CCD               	rrf	??_PWM_DutyCycle1+1,f
  3710  0E9A  0CCC               	rrf	??_PWM_DutyCycle1,f
  3711  0E9B  0D4D               	rlf	??_PWM_DutyCycle1+1,w
  3712  0E9C  0CCD               	rrf	??_PWM_DutyCycle1+1,f
  3713  0E9D  0CCC               	rrf	??_PWM_DutyCycle1,f
  3714  0E9E  084C               	movf	??_PWM_DutyCycle1,w
  3715  0E9F  0095               	movwf	21	;volatile
  3716                           
  3717                           ;pwm.c: 92: CCP1CON = (valor << 4)|0X0C;
  3718  0EA0  084A               	movf	PWM_DutyCycle1@valor,w
  3719  0EA1  00CC               	movwf	??_PWM_DutyCycle1
  3720  0EA2  3003               	movlw	3
  3721  0EA3                     u2005:	
  3722  0EA3  1003               	clrc
  3723  0EA4  0DCC               	rlf	??_PWM_DutyCycle1,f
  3724  0EA5  3EFF               	addlw	-1
  3725  0EA6  1D03               	skipz
  3726  0EA7  2EA3               	goto	u2005
  3727  0EA8  1003               	clrc
  3728  0EA9  0D4C               	rlf	??_PWM_DutyCycle1,w
  3729  0EAA  380C               	iorlw	12
  3730  0EAB  0097               	movwf	23	;volatile
  3731  0EAC  0008               	return
  3732  0EAD                     __end_of_PWM_DutyCycle1:	
  3733                           
  3734                           	psect	text15
  3735  0F32                     __ptext15:	
  3736 ;; *************** function _LCD_WriteString *****************
  3737 ;; Defined at:
  3738 ;;		line 61 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;  Str             2    6[BANK0 ] PTR const unsigned char 
  3741 ;;		 -> STR_18(6), STR_17(6), display_pwm(10), display_rpm(10), 
  3742 ;;		 -> STR_13(17), 
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;		None
  3745 ;; Return value:  Size  Location     Type
  3746 ;;		None               void
  3747 ;; Registers used:
  3748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3754 ;;      Params:         0       2       0       0       0
  3755 ;;      Locals:         0       0       0       0       0
  3756 ;;      Temps:          0       0       0       0       0
  3757 ;;      Totals:         0       2       0       0       0
  3758 ;;Total ram usage:        2 bytes
  3759 ;; Hardware stack levels used:    1
  3760 ;; Hardware stack levels required when called:    5
  3761 ;; This function calls:
  3762 ;;		_LCD_WriteData
  3763 ;; This function is called by:
  3764 ;;		_main
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           
  3769                           ;psect for function _LCD_WriteString
  3770  0F32                     _LCD_WriteString:	
  3771  0F32                     l2354:	
  3772                           ;lcd.c: 63: while(*Str != '\0')
  3773                           
  3774                           ;incstack = 0
  3775                           ; Regs used in _LCD_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3776                           
  3777  0F32  1283               	bcf	3,5	;RP0=0, select bank0
  3778  0F33  1303               	bcf	3,6	;RP1=0, select bank0
  3779  0F34  084D               	movf	LCD_WriteString@Str+1,w
  3780  0F35  00FF               	movwf	127
  3781  0F36  084C               	movf	LCD_WriteString@Str,w
  3782  0F37  0084               	movwf	4
  3783  0F38  120A  118A  2500  120A  158A  	fcall	stringtab
  3784  0F3D  3800               	iorlw	0
  3785  0F3E  1903               	btfsc	3,2
  3786  0F3F  0008               	return
  3787                           
  3788                           ;lcd.c: 64: {
  3789                           ;lcd.c: 65: LCD_WriteData(*Str);
  3790  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  3791  0F41  1303               	bcf	3,6	;RP1=0, select bank0
  3792  0F42  084D               	movf	LCD_WriteString@Str+1,w
  3793  0F43  00FF               	movwf	127
  3794  0F44  084C               	movf	LCD_WriteString@Str,w
  3795  0F45  0084               	movwf	4
  3796  0F46  120A  118A  2500  120A  158A  	fcall	stringtab
  3797  0F4B  120A  158A  263D  120A  158A  	fcall	_LCD_WriteData
  3798                           
  3799                           ;lcd.c: 66: Str++;
  3800  0F50  3001               	movlw	1
  3801  0F51  1283               	bcf	3,5	;RP0=0, select bank0
  3802  0F52  1303               	bcf	3,6	;RP1=0, select bank0
  3803  0F53  07CC               	addwf	LCD_WriteString@Str,f
  3804  0F54  1803               	skipnc
  3805  0F55  0ACD               	incf	LCD_WriteString@Str+1,f
  3806  0F56  2F32               	goto	l2354
  3807  0F57                     __end_of_LCD_WriteString:	
  3808                           
  3809                           	psect	text16
  3810  0E3D                     __ptext16:	
  3811 ;; *************** function _LCD_WriteData *****************
  3812 ;; Defined at:
  3813 ;;		line 47 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  Byte            1    wreg     unsigned char 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  Byte            1    5[BANK0 ] unsigned char 
  3818 ;; Return value:  Size  Location     Type
  3819 ;;		None               void
  3820 ;; Registers used:
  3821 ;;		wreg
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3827 ;;      Params:         0       0       0       0       0
  3828 ;;      Locals:         0       1       0       0       0
  3829 ;;      Temps:          0       1       0       0       0
  3830 ;;      Totals:         0       2       0       0       0
  3831 ;;Total ram usage:        2 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    4
  3834 ;; This function calls:
  3835 ;;		Nothing
  3836 ;; This function is called by:
  3837 ;;		_LCD_WriteString
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           
  3842                           ;psect for function _LCD_WriteData
  3843  0E3D                     _LCD_WriteData:	
  3844                           
  3845                           ;incstack = 0
  3846                           ; Regs used in _LCD_WriteData: [wreg]
  3847                           ;LCD_WriteData@Byte stored from wreg
  3848  0E3D  1283               	bcf	3,5	;RP0=0, select bank0
  3849  0E3E  1303               	bcf	3,6	;RP1=0, select bank0
  3850  0E3F  00CB               	movwf	LCD_WriteData@Byte
  3851                           
  3852                           ;lcd.c: 49: PORTEbits.RE0 = 1;
  3853  0E40  1409               	bsf	9,0	;volatile
  3854                           
  3855                           ;lcd.c: 51: PORTD = Byte;
  3856  0E41  084B               	movf	LCD_WriteData@Byte,w
  3857  0E42  0088               	movwf	8	;volatile
  3858                           
  3859                           ;lcd.c: 53: PORTEbits.RE1 = 1;
  3860  0E43  1489               	bsf	9,1	;volatile
  3861                           
  3862                           ;lcd.c: 55: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3863  0E44  303D               	movlw	61
  3864  0E45  00CA               	movwf	??_LCD_WriteData
  3865  0E46                     u3557:	
  3866  0E46  0BCA               	decfsz	??_LCD_WriteData,f
  3867  0E47  2E46               	goto	u3557
  3868                           
  3869                           ;lcd.c: 57: PORTEbits.RE1 = 0;
  3870  0E48  1283               	bcf	3,5	;RP0=0, select bank0
  3871  0E49  1303               	bcf	3,6	;RP1=0, select bank0
  3872  0E4A  1089               	bcf	9,1	;volatile
  3873  0E4B  0008               	return
  3874  0E4C                     __end_of_LCD_WriteData:	
  3875                           
  3876                           	psect	text17
  3877  06B2                     __ptext17:	
  3878 ;; *************** function _LCD_Init *****************
  3879 ;; Defined at:
  3880 ;;		line 87 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;		None
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;		None               void
  3887 ;; Registers used:
  3888 ;;		wreg, status,2, status,0, pclath, cstack
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3894 ;;      Params:         0       0       0       0       0
  3895 ;;      Locals:         0       0       0       0       0
  3896 ;;      Temps:          0       2       0       0       0
  3897 ;;      Totals:         0       2       0       0       0
  3898 ;;Total ram usage:        2 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    5
  3901 ;; This function calls:
  3902 ;;		_LCD_WriteCmd
  3903 ;; This function is called by:
  3904 ;;		_main
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           
  3909                           ;psect for function _LCD_Init
  3910  06B2                     _LCD_Init:	
  3911                           
  3912                           ;lcd.c: 90: ADCON1bits.PCFG3 = 0;
  3913                           
  3914                           ;incstack = 0
  3915                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  3916  06B2  1683               	bsf	3,5	;RP0=1, select bank1
  3917  06B3  1303               	bcf	3,6	;RP1=0, select bank1
  3918  06B4  119F               	bcf	31,3	;volatile
  3919                           
  3920                           ;lcd.c: 91: ADCON1bits.PCFG2 = 1;
  3921  06B5  151F               	bsf	31,2	;volatile
  3922                           
  3923                           ;lcd.c: 92: ADCON1bits.PCFG1 = 0;
  3924  06B6  109F               	bcf	31,1	;volatile
  3925                           
  3926                           ;lcd.c: 93: ADCON1bits.PCFG0 = 0;
  3927  06B7  101F               	bcf	31,0	;volatile
  3928                           
  3929                           ;lcd.c: 95: _delay((unsigned long)((15)*(18432000/4000.0)));
  3930  06B8  305A               	movlw	90
  3931  06B9  1283               	bcf	3,5	;RP0=0, select bank0
  3932  06BA  1303               	bcf	3,6	;RP1=0, select bank0
  3933  06BB  00CD               	movwf	??_LCD_Init+1
  3934  06BC  30C3               	movlw	195
  3935  06BD  00CC               	movwf	??_LCD_Init
  3936  06BE                     u3567:	
  3937  06BE  0BCC               	decfsz	??_LCD_Init,f
  3938  06BF  2EBE               	goto	u3567
  3939  06C0  0BCD               	decfsz	??_LCD_Init+1,f
  3940  06C1  2EBE               	goto	u3567
  3941                           
  3942                           ;lcd.c: 97: LCD_WriteCmd(0x30);
  3943  06C2  3030               	movlw	48
  3944  06C3  120A  158A  262E  120A  118A  	fcall	_LCD_WriteCmd
  3945                           
  3946                           ;lcd.c: 98: _delay((unsigned long)((4)*(18432000/4000.0)));
  3947  06C8  3018               	movlw	24
  3948  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  3949  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  3950  06CB  00CD               	movwf	??_LCD_Init+1
  3951  06CC  30EF               	movlw	239
  3952  06CD  00CC               	movwf	??_LCD_Init
  3953  06CE                     u3577:	
  3954  06CE  0BCC               	decfsz	??_LCD_Init,f
  3955  06CF  2ECE               	goto	u3577
  3956  06D0  0BCD               	decfsz	??_LCD_Init+1,f
  3957  06D1  2ECE               	goto	u3577
  3958                           
  3959                           ;lcd.c: 100: LCD_WriteCmd(0x30);
  3960  06D2  3030               	movlw	48
  3961  06D3  120A  158A  262E  120A  118A  	fcall	_LCD_WriteCmd
  3962                           
  3963                           ;lcd.c: 101: _delay((unsigned long)((100)*(18432000/4000000.0)));
  3964  06D8  3099               	movlw	153
  3965  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  3966  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  3967  06DB  00CC               	movwf	??_LCD_Init
  3968  06DC                     u3587:	
  3969  06DC  0BCC               	decfsz	??_LCD_Init,f
  3970  06DD  2EDC               	goto	u3587
  3971                           
  3972                           ;lcd.c: 103: LCD_WriteCmd(0x30);
  3973  06DE  3030               	movlw	48
  3974  06DF  120A  158A  262E  120A  118A  	fcall	_LCD_WriteCmd
  3975                           
  3976                           ;lcd.c: 104: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3977  06E4  303D               	movlw	61
  3978  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  3979  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  3980  06E7  00CC               	movwf	??_LCD_Init
  3981  06E8                     u3597:	
  3982  06E8  0BCC               	decfsz	??_LCD_Init,f
  3983  06E9  2EE8               	goto	u3597
  3984                           
  3985                           ;lcd.c: 106: LCD_WriteCmd(0x38);
  3986  06EA  3038               	movlw	56
  3987  06EB  120A  158A  262E  120A  118A  	fcall	_LCD_WriteCmd
  3988                           
  3989                           ;lcd.c: 107: _delay((unsigned long)((40)*(18432000/4000000.0)));
  3990  06F0  303D               	movlw	61
  3991  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  3992  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  3993  06F3  00CC               	movwf	??_LCD_Init
  3994  06F4                     u3607:	
  3995  06F4  0BCC               	decfsz	??_LCD_Init,f
  3996  06F5  2EF4               	goto	u3607
  3997                           
  3998                           ;lcd.c: 109: LCD_WriteCmd(0x01);
  3999  06F6  3001               	movlw	1
  4000  06F7  120A  158A  262E  120A  118A  	fcall	_LCD_WriteCmd
  4001                           
  4002                           ;lcd.c: 110: _delay((unsigned long)((2)*(18432000/4000.0)));
  4003  06FC  300C               	movlw	12
  4004  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  4005  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  4006  06FF  00CD               	movwf	??_LCD_Init+1
  4007  0700  30F7               	movlw	247
  4008  0701  00CC               	movwf	??_LCD_Init
  4009  0702                     u3617:	
  4010  0702  0BCC               	decfsz	??_LCD_Init,f
  4011  0703  2F02               	goto	u3617
  4012  0704  0BCD               	decfsz	??_LCD_Init+1,f
  4013  0705  2F02               	goto	u3617
  4014                           
  4015                           ;lcd.c: 112: LCD_WriteCmd(0x0C);
  4016  0706  300C               	movlw	12
  4017  0707  120A  158A  262E  120A  118A  	fcall	_LCD_WriteCmd
  4018                           
  4019                           ;lcd.c: 113: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4020  070C  303D               	movlw	61
  4021  070D  1283               	bcf	3,5	;RP0=0, select bank0
  4022  070E  1303               	bcf	3,6	;RP1=0, select bank0
  4023  070F  00CC               	movwf	??_LCD_Init
  4024  0710                     u3627:	
  4025  0710  0BCC               	decfsz	??_LCD_Init,f
  4026  0711  2F10               	goto	u3627
  4027                           
  4028                           ;lcd.c: 115: LCD_WriteCmd(0x06);
  4029  0712  3006               	movlw	6
  4030  0713  120A  158A  262E  120A  118A  	fcall	_LCD_WriteCmd
  4031                           
  4032                           ;lcd.c: 116: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4033  0718  303D               	movlw	61
  4034  0719  1283               	bcf	3,5	;RP0=0, select bank0
  4035  071A  1303               	bcf	3,6	;RP1=0, select bank0
  4036  071B  00CC               	movwf	??_LCD_Init
  4037  071C                     u3637:	
  4038  071C  0BCC               	decfsz	??_LCD_Init,f
  4039  071D  2F1C               	goto	u3637
  4040  071E  0008               	return
  4041  071F                     __end_of_LCD_Init:	
  4042                           
  4043                           	psect	text18
  4044  07E8                     __ptext18:	
  4045 ;; *************** function _LCD_Cursor *****************
  4046 ;; Defined at:
  4047 ;;		line 10 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;  Row             1    wreg     unsigned char 
  4050 ;;  Col             1    4[BANK0 ] unsigned char 
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  Row             1    6[BANK0 ] unsigned char 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;		None               void
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4062 ;;      Params:         0       1       0       0       0
  4063 ;;      Locals:         0       1       0       0       0
  4064 ;;      Temps:          0       1       0       0       0
  4065 ;;      Totals:         0       3       0       0       0
  4066 ;;Total ram usage:        3 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; Hardware stack levels required when called:    4
  4069 ;; This function calls:
  4070 ;;		Nothing
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function _LCD_Cursor
  4078  07E8                     _LCD_Cursor:	
  4079                           
  4080                           ;incstack = 0
  4081                           ; Regs used in _LCD_Cursor: [wreg+status,2+status,0]
  4082                           ;LCD_Cursor@Row stored from wreg
  4083  07E8  1283               	bcf	3,5	;RP0=0, select bank0
  4084  07E9  1303               	bcf	3,6	;RP1=0, select bank0
  4085  07EA  00CC               	movwf	LCD_Cursor@Row
  4086                           
  4087                           ;lcd.c: 12: PORTEbits.RE0 = 0;
  4088  07EB  1009               	bcf	9,0	;volatile
  4089                           
  4090                           ;lcd.c: 14: if (Row == 0)
  4091  07EC  08CC               	movf	LCD_Cursor@Row,f
  4092  07ED  1D03               	skipz
  4093  07EE  2FF2               	goto	l2340
  4094                           
  4095                           ;lcd.c: 15: {
  4096                           ;lcd.c: 16: PORTD = 0x80 + Col;
  4097  07EF  084A               	movf	LCD_Cursor@Col,w
  4098  07F0  3E80               	addlw	128
  4099  07F1  2FF4               	goto	L2
  4100  07F2                     l2340:	
  4101                           ;lcd.c: 17: }
  4102                           
  4103                           
  4104                           ;lcd.c: 18: else
  4105                           ;lcd.c: 19: {
  4106                           ;lcd.c: 20: PORTD = 0xC0 + Col;
  4107  07F2  084A               	movf	LCD_Cursor@Col,w
  4108  07F3  3EC0               	addlw	192
  4109  07F4                     L2:	
  4110  07F4  0088               	movwf	8	;volatile
  4111                           
  4112                           ;lcd.c: 21: }
  4113                           ;lcd.c: 24: PORTEbits.RE1 = 1;
  4114  07F5  1489               	bsf	9,1	;volatile
  4115                           
  4116                           ;lcd.c: 26: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4117  07F6  303D               	movlw	61
  4118  07F7  00CB               	movwf	??_LCD_Cursor
  4119  07F8                     u3647:	
  4120  07F8  0BCB               	decfsz	??_LCD_Cursor,f
  4121  07F9  2FF8               	goto	u3647
  4122                           
  4123                           ;lcd.c: 28: PORTEbits.RE1 = 0;
  4124  07FA  1283               	bcf	3,5	;RP0=0, select bank0
  4125  07FB  1303               	bcf	3,6	;RP1=0, select bank0
  4126  07FC  1089               	bcf	9,1	;volatile
  4127  07FD  0008               	return
  4128  07FE                     __end_of_LCD_Cursor:	
  4129                           
  4130                           	psect	text19
  4131  0FA1                     __ptext19:	
  4132 ;; *************** function _LCD_Clear *****************
  4133 ;; Defined at:
  4134 ;;		line 71 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;		None
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;		None
  4139 ;; Return value:  Size  Location     Type
  4140 ;;		None               void
  4141 ;; Registers used:
  4142 ;;		wreg, status,2, status,0, pclath, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4148 ;;      Params:         0       0       0       0       0
  4149 ;;      Locals:         0       0       0       0       0
  4150 ;;      Temps:          0       2       0       0       0
  4151 ;;      Totals:         0       2       0       0       0
  4152 ;;Total ram usage:        2 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    5
  4155 ;; This function calls:
  4156 ;;		_LCD_WriteCmd
  4157 ;; This function is called by:
  4158 ;;		_main
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           
  4163                           ;psect for function _LCD_Clear
  4164  0FA1                     _LCD_Clear:	
  4165                           
  4166                           ;lcd.c: 73: LCD_WriteCmd(0x01);
  4167                           
  4168                           ;incstack = 0
  4169                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  4170  0FA1  3001               	movlw	1
  4171  0FA2  120A  158A  262E  120A  158A  	fcall	_LCD_WriteCmd
  4172                           
  4173                           ;lcd.c: 75: _delay((unsigned long)((2)*(18432000/4000.0)));
  4174  0FA7  300C               	movlw	12
  4175  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  4176  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  4177  0FAA  00CD               	movwf	??_LCD_Clear+1
  4178  0FAB  30F7               	movlw	247
  4179  0FAC  00CC               	movwf	??_LCD_Clear
  4180  0FAD                     u3657:	
  4181  0FAD  0BCC               	decfsz	??_LCD_Clear,f
  4182  0FAE  2FAD               	goto	u3657
  4183  0FAF  0BCD               	decfsz	??_LCD_Clear+1,f
  4184  0FB0  2FAD               	goto	u3657
  4185                           
  4186                           ;lcd.c: 77: LCD_WriteCmd(0x0C);
  4187  0FB1  300C               	movlw	12
  4188  0FB2  120A  158A  262E  120A  158A  	fcall	_LCD_WriteCmd
  4189                           
  4190                           ;lcd.c: 79: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4191  0FB7  303D               	movlw	61
  4192  0FB8  1283               	bcf	3,5	;RP0=0, select bank0
  4193  0FB9  1303               	bcf	3,6	;RP1=0, select bank0
  4194  0FBA  00CC               	movwf	??_LCD_Clear
  4195  0FBB                     u3667:	
  4196  0FBB  0BCC               	decfsz	??_LCD_Clear,f
  4197  0FBC  2FBB               	goto	u3667
  4198                           
  4199                           ;lcd.c: 81: LCD_WriteCmd(0x06);
  4200  0FBD  3006               	movlw	6
  4201  0FBE  120A  158A  262E  120A  158A  	fcall	_LCD_WriteCmd
  4202                           
  4203                           ;lcd.c: 83: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4204  0FC3  303D               	movlw	61
  4205  0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  4206  0FC5  1303               	bcf	3,6	;RP1=0, select bank0
  4207  0FC6  00CC               	movwf	??_LCD_Clear
  4208  0FC7                     u3677:	
  4209  0FC7  0BCC               	decfsz	??_LCD_Clear,f
  4210  0FC8  2FC7               	goto	u3677
  4211  0FC9  0008               	return
  4212  0FCA                     __end_of_LCD_Clear:	
  4213                           
  4214                           	psect	text20
  4215  0E2E                     __ptext20:	
  4216 ;; *************** function _LCD_WriteCmd *****************
  4217 ;; Defined at:
  4218 ;;		line 32 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4219 ;; Parameters:    Size  Location     Type
  4220 ;;  Byte            1    wreg     unsigned char 
  4221 ;; Auto vars:     Size  Location     Type
  4222 ;;  Byte            1    5[BANK0 ] unsigned char 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;		None               void
  4225 ;; Registers used:
  4226 ;;		wreg
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4232 ;;      Params:         0       0       0       0       0
  4233 ;;      Locals:         0       1       0       0       0
  4234 ;;      Temps:          0       1       0       0       0
  4235 ;;      Totals:         0       2       0       0       0
  4236 ;;Total ram usage:        2 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    4
  4239 ;; This function calls:
  4240 ;;		Nothing
  4241 ;; This function is called by:
  4242 ;;		_LCD_Clear
  4243 ;;		_LCD_Init
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           
  4248                           ;psect for function _LCD_WriteCmd
  4249  0E2E                     _LCD_WriteCmd:	
  4250                           
  4251                           ;incstack = 0
  4252                           ; Regs used in _LCD_WriteCmd: [wreg]
  4253                           ;LCD_WriteCmd@Byte stored from wreg
  4254  0E2E  1283               	bcf	3,5	;RP0=0, select bank0
  4255  0E2F  1303               	bcf	3,6	;RP1=0, select bank0
  4256  0E30  00CB               	movwf	LCD_WriteCmd@Byte
  4257                           
  4258                           ;lcd.c: 34: PORTEbits.RE0 = 0;
  4259  0E31  1009               	bcf	9,0	;volatile
  4260                           
  4261                           ;lcd.c: 36: PORTD = Byte;
  4262  0E32  084B               	movf	LCD_WriteCmd@Byte,w
  4263  0E33  0088               	movwf	8	;volatile
  4264                           
  4265                           ;lcd.c: 39: PORTEbits.RE1 = 1;
  4266  0E34  1489               	bsf	9,1	;volatile
  4267                           
  4268                           ;lcd.c: 41: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4269  0E35  303D               	movlw	61
  4270  0E36  00CA               	movwf	??_LCD_WriteCmd
  4271  0E37                     u3687:	
  4272  0E37  0BCA               	decfsz	??_LCD_WriteCmd,f
  4273  0E38  2E37               	goto	u3687
  4274                           
  4275                           ;lcd.c: 43: PORTEbits.RE1 = 0;
  4276  0E39  1283               	bcf	3,5	;RP0=0, select bank0
  4277  0E3A  1303               	bcf	3,6	;RP1=0, select bank0
  4278  0E3B  1089               	bcf	9,1	;volatile
  4279  0E3C  0008               	return
  4280  0E3D                     __end_of_LCD_WriteCmd:	
  4281                           
  4282                           	psect	text21
  4283  04E9                     __ptext21:	
  4284 ;; *************** function _ADC_Init *****************
  4285 ;; Defined at:
  4286 ;;		line 6 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\adc.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;		None               void
  4293 ;; Registers used:
  4294 ;;		None
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4300 ;;      Params:         0       0       0       0       0
  4301 ;;      Locals:         0       0       0       0       0
  4302 ;;      Temps:          0       0       0       0       0
  4303 ;;      Totals:         0       0       0       0       0
  4304 ;;Total ram usage:        0 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    4
  4307 ;; This function calls:
  4308 ;;		Nothing
  4309 ;; This function is called by:
  4310 ;;		_main
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           
  4315                           ;psect for function _ADC_Init
  4316  04E9                     _ADC_Init:	
  4317                           
  4318                           ;adc.c: 9: ADCON1bits.ADFM = 1;
  4319                           
  4320                           ;incstack = 0
  4321                           ; Regs used in _ADC_Init: []
  4322  04E9  1683               	bsf	3,5	;RP0=1, select bank1
  4323  04EA  1303               	bcf	3,6	;RP1=0, select bank1
  4324  04EB  179F               	bsf	31,7	;volatile
  4325                           
  4326                           ;adc.c: 32: ADCON1bits.PCFG3 = 1;
  4327  04EC  159F               	bsf	31,3	;volatile
  4328                           
  4329                           ;adc.c: 33: ADCON1bits.PCFG2 = 1;
  4330  04ED  151F               	bsf	31,2	;volatile
  4331                           
  4332                           ;adc.c: 34: ADCON1bits.PCFG1 = 1;
  4333  04EE  149F               	bsf	31,1	;volatile
  4334                           
  4335                           ;adc.c: 35: ADCON1bits.PCFG0 = 0;
  4336  04EF  101F               	bcf	31,0	;volatile
  4337                           
  4338                           ;adc.c: 38: ADCON0bits.ADCS1 = 1;
  4339  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  4340  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  4341  04F2  179F               	bsf	31,7	;volatile
  4342                           
  4343                           ;adc.c: 39: ADCON0bits.ADCS0 = 0;
  4344  04F3  131F               	bcf	31,6	;volatile
  4345                           
  4346                           ;adc.c: 42: PIE1bits.ADIE = 0;
  4347  04F4  1683               	bsf	3,5	;RP0=1, select bank1
  4348  04F5  1303               	bcf	3,6	;RP1=0, select bank1
  4349  04F6  130C               	bcf	12,6	;volatile
  4350                           
  4351                           ;adc.c: 43: PIR1bits.ADIF = 0;
  4352  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  4353  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  4354  04F9  130C               	bcf	12,6	;volatile
  4355  04FA  0008               	return
  4356  04FB                     __end_of_ADC_Init:	
  4357                           
  4358                           	psect	text22
  4359  022F                     __ptext22:	
  4360 ;; *************** function _ISR *****************
  4361 ;; Defined at:
  4362 ;;		line 359 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;		None
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;		None
  4367 ;; Return value:  Size  Location     Type
  4368 ;;		None               void
  4369 ;; Registers used:
  4370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4376 ;;      Params:         0       0       0       0       0
  4377 ;;      Locals:         0       0       0       0       0
  4378 ;;      Temps:          0       4       0       0       0
  4379 ;;      Totals:         0       4       0       0       0
  4380 ;;Total ram usage:        4 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    3
  4383 ;; This function calls:
  4384 ;;		_USART_ReceiveChar
  4385 ;;		i1_PWM_DutyCycle2
  4386 ;;		i1_TIMER0_Set
  4387 ;;		i1_USART_WriteString
  4388 ;;		i1___lwdiv
  4389 ;;		i1___wmul
  4390 ;; This function is called by:
  4391 ;;		Interrupt level 1
  4392 ;; This function uses a non-reentrant model
  4393 ;;
  4394                           
  4395                           
  4396                           ;psect for function _ISR
  4397  022F                     _ISR:	
  4398                           
  4399                           ;main.c: 362: if (PIR1bits.RCIF)
  4400  022F  1E8C               	btfss	12,5	;volatile
  4401  0230  2B3C               	goto	i1l2864
  4402                           
  4403                           ;main.c: 363: {
  4404                           ;main.c: 364: if (USART_ReceiveChar() == '0')
  4405  0231  120A  158A  265C  120A  118A  	fcall	_USART_ReceiveChar
  4406  0236  3A30               	xorlw	48
  4407  0237  1D03               	skipz
  4408  0238  2A52               	goto	i1l2798
  4409                           
  4410                           ;main.c: 365: {
  4411                           ;main.c: 366: USART_WriteString("\n\rdesligado\n\r");
  4412  0239  30EA               	movlw	low (STR_1| (0+32768))
  4413  023A  00F1               	movwf	i1USART_WriteString@str
  4414  023B  3085               	movlw	high (STR_1| (0+32768))
  4415  023C  00F2               	movwf	i1USART_WriteString@str+1
  4416  023D  120A  158A  26C8  120A  118A  	fcall	i1_USART_WriteString
  4417                           
  4418                           ;main.c: 367: pwm = 0;
  4419  0242  1283               	bcf	3,5	;RP0=0, select bank0
  4420  0243  1303               	bcf	3,6	;RP1=0, select bank0
  4421  0244  01C4               	clrf	_pwm
  4422  0245  01C5               	clrf	_pwm+1
  4423                           
  4424                           ;main.c: 368: PWM_DutyCycle2(pwm);
  4425  0246  0845               	movf	_pwm+1,w
  4426  0247  01F1               	clrf	i1PWM_DutyCycle2@valor+1
  4427  0248  07F1               	addwf	i1PWM_DutyCycle2@valor+1,f
  4428  0249  0844               	movf	_pwm,w
  4429  024A  01F0               	clrf	i1PWM_DutyCycle2@valor
  4430  024B  07F0               	addwf	i1PWM_DutyCycle2@valor,f
  4431  024C  120A  158A  2677  120A  118A  	fcall	i1_PWM_DutyCycle2
  4432                           
  4433                           ;main.c: 369: return;
  4434  0251  2B91               	goto	i1l192
  4435  0252                     i1l2798:	
  4436                           
  4437                           ;main.c: 370: }
  4438                           ;main.c: 372: if (USART_ReceiveChar() == '1')
  4439  0252  120A  158A  265C  120A  118A  	fcall	_USART_ReceiveChar
  4440  0257  3A31               	xorlw	49
  4441  0258  1D03               	skipz
  4442  0259  2A69               	goto	i1l2804
  4443                           
  4444                           ;main.c: 373: {
  4445                           ;main.c: 374: USART_WriteString("\n\rpwm = 32\n\r");
  4446  025A  30F8               	movlw	low (STR_2| (0+32768))
  4447  025B  00F1               	movwf	i1USART_WriteString@str
  4448  025C  3085               	movlw	high (STR_2| (0+32768))
  4449  025D  00F2               	movwf	i1USART_WriteString@str+1
  4450  025E  120A  158A  26C8  120A  118A  	fcall	i1_USART_WriteString
  4451                           
  4452                           ;main.c: 375: pwm = 32;
  4453  0263  3020               	movlw	32
  4454  0264  1283               	bcf	3,5	;RP0=0, select bank0
  4455  0265  1303               	bcf	3,6	;RP1=0, select bank0
  4456  0266  00C4               	movwf	_pwm
  4457  0267  3000               	movlw	0
  4458  0268  00C5               	movwf	_pwm+1
  4459  0269                     i1l2804:	
  4460                           
  4461                           ;main.c: 377: }
  4462                           ;main.c: 379: if (USART_ReceiveChar() == '2')
  4463  0269  120A  158A  265C  120A  118A  	fcall	_USART_ReceiveChar
  4464  026E  3A32               	xorlw	50
  4465  026F  1D03               	skipz
  4466  0270  2A80               	goto	i1l2810
  4467                           
  4468                           ;main.c: 380: {
  4469                           ;main.c: 381: USART_WriteString("\n\rpwm = 64\n\r");
  4470  0271  3005               	movlw	low (STR_3| (0+32768))
  4471  0272  00F1               	movwf	i1USART_WriteString@str
  4472  0273  3086               	movlw	high (STR_3| (0+32768))
  4473  0274  00F2               	movwf	i1USART_WriteString@str+1
  4474  0275  120A  158A  26C8  120A  118A  	fcall	i1_USART_WriteString
  4475                           
  4476                           ;main.c: 382: pwm = 64;
  4477  027A  3040               	movlw	64
  4478  027B  1283               	bcf	3,5	;RP0=0, select bank0
  4479  027C  1303               	bcf	3,6	;RP1=0, select bank0
  4480  027D  00C4               	movwf	_pwm
  4481  027E  3000               	movlw	0
  4482  027F  00C5               	movwf	_pwm+1
  4483  0280                     i1l2810:	
  4484                           
  4485                           ;main.c: 384: }
  4486                           ;main.c: 386: if (USART_ReceiveChar() == '3')
  4487  0280  120A  158A  265C  120A  118A  	fcall	_USART_ReceiveChar
  4488  0285  3A33               	xorlw	51
  4489  0286  1D03               	skipz
  4490  0287  2A9C               	goto	i1l2820
  4491                           
  4492                           ;main.c: 387: {
  4493                           ;main.c: 388: USART_WriteString("\n\rpwm = 128\n\r");
  4494  0288  30CE               	movlw	low (STR_4| (0+32768))
  4495  0289  00F1               	movwf	i1USART_WriteString@str
  4496  028A  3085               	movlw	high (STR_4| (0+32768))
  4497  028B  00F2               	movwf	i1USART_WriteString@str+1
  4498  028C  120A  158A  26C8  120A  118A  	fcall	i1_USART_WriteString
  4499                           
  4500                           ;main.c: 389: pwm = 128;
  4501  0291  3080               	movlw	128
  4502  0292  1283               	bcf	3,5	;RP0=0, select bank0
  4503  0293  1303               	bcf	3,6	;RP1=0, select bank0
  4504  0294  00C4               	movwf	_pwm
  4505  0295  3000               	movlw	0
  4506  0296  00C5               	movwf	_pwm+1
  4507                           
  4508                           ;main.c: 391: if(PORTBbits.RB0 == 0)
  4509  0297  1806               	btfsc	6,0	;volatile
  4510  0298  2A9B               	goto	i1l196
  4511                           
  4512                           ;main.c: 392: {
  4513                           ;main.c: 393: PORTBbits.RB0 = 1;
  4514  0299  1406               	bsf	6,0	;volatile
  4515                           
  4516                           ;main.c: 394: }else{
  4517  029A  2A9C               	goto	i1l2820
  4518  029B                     i1l196:	
  4519                           
  4520                           ;main.c: 395: PORTBbits.RB0 = 0;
  4521  029B  1006               	bcf	6,0	;volatile
  4522  029C                     i1l2820:	
  4523                           
  4524                           ;main.c: 396: }
  4525                           ;main.c: 397: }
  4526                           ;main.c: 399: if (USART_ReceiveChar() == '4')
  4527  029C  120A  158A  265C  120A  118A  	fcall	_USART_ReceiveChar
  4528  02A1  3A34               	xorlw	52
  4529  02A2  1D03               	skipz
  4530  02A3  2AC6               	goto	i1l2832
  4531                           
  4532                           ;main.c: 400: {
  4533                           ;main.c: 401: USART_WriteString("\n\rpwm = 256\n\r");
  4534  02A4  30B2               	movlw	low (STR_5| (0+32768))
  4535  02A5  00F1               	movwf	i1USART_WriteString@str
  4536  02A6  3085               	movlw	high (STR_5| (0+32768))
  4537  02A7  00F2               	movwf	i1USART_WriteString@str+1
  4538  02A8  120A  158A  26C8  120A  118A  	fcall	i1_USART_WriteString
  4539                           
  4540                           ;main.c: 402: pwm = 256;
  4541  02AD  3000               	movlw	0
  4542  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  4543  02AF  1303               	bcf	3,6	;RP1=0, select bank0
  4544  02B0  00C4               	movwf	_pwm
  4545  02B1  3001               	movlw	1
  4546  02B2  00C5               	movwf	_pwm+1
  4547                           
  4548                           ;main.c: 403: PWM_DutyCycle2(pwm);
  4549  02B3  0845               	movf	_pwm+1,w
  4550  02B4  01F1               	clrf	i1PWM_DutyCycle2@valor+1
  4551  02B5  07F1               	addwf	i1PWM_DutyCycle2@valor+1,f
  4552  02B6  0844               	movf	_pwm,w
  4553  02B7  01F0               	clrf	i1PWM_DutyCycle2@valor
  4554  02B8  07F0               	addwf	i1PWM_DutyCycle2@valor,f
  4555  02B9  120A  158A  2677  120A  118A  	fcall	i1_PWM_DutyCycle2
  4556                           
  4557                           ;main.c: 404: if(PORTBbits.RB1 == 0)
  4558  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  4559  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  4560  02C0  1886               	btfsc	6,1	;volatile
  4561  02C1  2AC4               	goto	i1l199
  4562                           
  4563                           ;main.c: 405: {
  4564                           ;main.c: 406: PORTBbits.RB1 = 1;
  4565  02C2  1486               	bsf	6,1	;volatile
  4566                           
  4567                           ;main.c: 407: }else{
  4568  02C3  2B91               	goto	i1l192
  4569  02C4                     i1l199:	
  4570                           
  4571                           ;main.c: 408: PORTBbits.RB1 = 0;
  4572  02C4  1086               	bcf	6,1	;volatile
  4573                           
  4574                           ;main.c: 409: }
  4575                           ;main.c: 410: return;
  4576  02C5  2B91               	goto	i1l192
  4577  02C6                     i1l2832:	
  4578                           
  4579                           ;main.c: 411: }
  4580                           ;main.c: 413: if (USART_ReceiveChar() == '5')
  4581  02C6  120A  158A  265C  120A  118A  	fcall	_USART_ReceiveChar
  4582  02CB  3A35               	xorlw	53
  4583  02CC  1D03               	skipz
  4584  02CD  2ADD               	goto	i1l2838
  4585                           
  4586                           ;main.c: 414: {
  4587                           ;main.c: 415: USART_WriteString("\n\rpwm = 512\n\r");
  4588  02CE  30A4               	movlw	low (STR_6| (0+32768))
  4589  02CF  00F1               	movwf	i1USART_WriteString@str
  4590  02D0  3085               	movlw	high (STR_6| (0+32768))
  4591  02D1  00F2               	movwf	i1USART_WriteString@str+1
  4592  02D2  120A  158A  26C8  120A  118A  	fcall	i1_USART_WriteString
  4593                           
  4594                           ;main.c: 416: pwm = 512;
  4595  02D7  3000               	movlw	0
  4596  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  4597  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  4598  02DA  00C4               	movwf	_pwm
  4599  02DB  3002               	movlw	2
  4600  02DC  00C5               	movwf	_pwm+1
  4601  02DD                     i1l2838:	
  4602                           
  4603                           ;main.c: 418: }
  4604                           ;main.c: 420: if (USART_ReceiveChar() == '6')
  4605  02DD  120A  158A  265C  120A  118A  	fcall	_USART_ReceiveChar
  4606  02E2  3A36               	xorlw	54
  4607  02E3  1D03               	skipz
  4608  02E4  2AF4               	goto	i1l2844
  4609                           
  4610                           ;main.c: 421: {
  4611                           ;main.c: 422: USART_WriteString("\n\rpwm = 768\n\r");
  4612  02E5  30DC               	movlw	low (STR_7| (0+32768))
  4613  02E6  00F1               	movwf	i1USART_WriteString@str
  4614  02E7  3085               	movlw	high (STR_7| (0+32768))
  4615  02E8  00F2               	movwf	i1USART_WriteString@str+1
  4616  02E9  120A  158A  26C8  120A  118A  	fcall	i1_USART_WriteString
  4617                           
  4618                           ;main.c: 423: pwm = 768;
  4619  02EE  3000               	movlw	0
  4620  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  4621  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  4622  02F1  00C4               	movwf	_pwm
  4623  02F2  3003               	movlw	3
  4624  02F3  00C5               	movwf	_pwm+1
  4625  02F4                     i1l2844:	
  4626                           
  4627                           ;main.c: 425: }
  4628                           ;main.c: 427: if (USART_ReceiveChar() == '7')
  4629  02F4  120A  158A  265C  120A  118A  	fcall	_USART_ReceiveChar
  4630  02F9  3A37               	xorlw	55
  4631  02FA  1D03               	skipz
  4632  02FB  2B0B               	goto	i1l2850
  4633                           
  4634                           ;main.c: 428: {
  4635                           ;main.c: 429: USART_WriteString("\n\rpwm = 896\n\r");
  4636  02FC  30C0               	movlw	low (STR_8| (0+32768))
  4637  02FD  00F1               	movwf	i1USART_WriteString@str
  4638  02FE  3085               	movlw	high (STR_8| (0+32768))
  4639  02FF  00F2               	movwf	i1USART_WriteString@str+1
  4640  0300  120A  158A  26C8  120A  118A  	fcall	i1_USART_WriteString
  4641                           
  4642                           ;main.c: 430: pwm = 896;
  4643  0305  3080               	movlw	128
  4644  0306  1283               	bcf	3,5	;RP0=0, select bank0
  4645  0307  1303               	bcf	3,6	;RP1=0, select bank0
  4646  0308  00C4               	movwf	_pwm
  4647  0309  3003               	movlw	3
  4648  030A  00C5               	movwf	_pwm+1
  4649  030B                     i1l2850:	
  4650                           
  4651                           ;main.c: 432: }
  4652                           ;main.c: 434: if (USART_ReceiveChar() == '8')
  4653  030B  120A  158A  265C  120A  118A  	fcall	_USART_ReceiveChar
  4654  0310  3A38               	xorlw	56
  4655  0311  1D03               	skipz
  4656  0312  2B22               	goto	i1l2856
  4657                           
  4658                           ;main.c: 435: {
  4659                           ;main.c: 436: USART_WriteString("\n\rpwm = 1000\n\r");
  4660  0313  3086               	movlw	low (STR_9| (0+32768))
  4661  0314  00F1               	movwf	i1USART_WriteString@str
  4662  0315  3085               	movlw	high (STR_9| (0+32768))
  4663  0316  00F2               	movwf	i1USART_WriteString@str+1
  4664  0317  120A  158A  26C8  120A  118A  	fcall	i1_USART_WriteString
  4665                           
  4666                           ;main.c: 437: pwm = 1000;
  4667  031C  30E8               	movlw	232
  4668  031D  1283               	bcf	3,5	;RP0=0, select bank0
  4669  031E  1303               	bcf	3,6	;RP1=0, select bank0
  4670  031F  00C4               	movwf	_pwm
  4671  0320  3003               	movlw	3
  4672  0321  00C5               	movwf	_pwm+1
  4673  0322                     i1l2856:	
  4674                           
  4675                           ;main.c: 439: }
  4676                           ;main.c: 441: if (USART_ReceiveChar() == '9')
  4677  0322  120A  158A  265C  120A  118A  	fcall	_USART_ReceiveChar
  4678  0327  3A39               	xorlw	57
  4679  0328  1D03               	skipz
  4680  0329  2B39               	goto	i1l2862
  4681                           
  4682                           ;main.c: 442: {
  4683                           ;main.c: 443: USART_WriteString("\n\rpwm = 1023\n\r");
  4684  032A  3095               	movlw	low (STR_10| (0+32768))
  4685  032B  00F1               	movwf	i1USART_WriteString@str
  4686  032C  3085               	movlw	high (STR_10| (0+32768))
  4687  032D  00F2               	movwf	i1USART_WriteString@str+1
  4688  032E  120A  158A  26C8  120A  118A  	fcall	i1_USART_WriteString
  4689                           
  4690                           ;main.c: 444: pwm = 1023;
  4691  0333  30FF               	movlw	255
  4692  0334  1283               	bcf	3,5	;RP0=0, select bank0
  4693  0335  1303               	bcf	3,6	;RP1=0, select bank0
  4694  0336  00C4               	movwf	_pwm
  4695  0337  3003               	movlw	3
  4696  0338  00C5               	movwf	_pwm+1
  4697  0339                     i1l2862:	
  4698                           
  4699                           ;main.c: 446: }
  4700                           ;main.c: 453: PIR1bits.RCIF = 0;
  4701  0339  1283               	bcf	3,5	;RP0=0, select bank0
  4702  033A  1303               	bcf	3,6	;RP1=0, select bank0
  4703  033B  128C               	bcf	12,5	;volatile
  4704  033C                     i1l2864:	
  4705                           
  4706                           ;main.c: 454: }
  4707                           ;main.c: 457: if (PIR1bits.ADIF)
  4708  033C  1B0C               	btfsc	12,6	;volatile
  4709                           
  4710                           ;main.c: 458: {
  4711                           ;main.c: 462: PIR1bits.ADIF = 0;
  4712  033D  130C               	bcf	12,6	;volatile
  4713                           
  4714                           ;main.c: 463: }
  4715                           ;main.c: 467: if (INTCONbits.T0IF)
  4716  033E  1D0B               	btfss	11,2	;volatile
  4717  033F  2B8D               	goto	i1l2890
  4718                           
  4719                           ;main.c: 468: {
  4720                           ;main.c: 470: TIMER0_Set(238);
  4721  0340  30EE               	movlw	238
  4722  0341  120A  158A  25F9  120A  118A  	fcall	i1_TIMER0_Set
  4723                           
  4724                           ;main.c: 473: if (contagens_tm0 < 499)
  4725  0346  3001               	movlw	1
  4726  0347  1283               	bcf	3,5	;RP0=0, select bank0
  4727  0348  1303               	bcf	3,6	;RP1=0, select bank0
  4728  0349  023F               	subwf	_contagens_tm0+1,w
  4729  034A  30F3               	movlw	243
  4730  034B  1903               	skipnz
  4731  034C  023E               	subwf	_contagens_tm0,w
  4732  034D  1803               	skipnc
  4733  034E  2B57               	goto	i1l2876
  4734                           
  4735                           ;main.c: 474: {
  4736                           ;main.c: 476: contagens_tm0++;
  4737  034F  3001               	movlw	1
  4738  0350  07BE               	addwf	_contagens_tm0,f
  4739  0351  1803               	skipnc
  4740  0352  0ABF               	incf	_contagens_tm0+1,f
  4741  0353  3000               	movlw	0
  4742  0354  07BF               	addwf	_contagens_tm0+1,f
  4743                           
  4744                           ;main.c: 479: PORTBbits.RB6 = 1;
  4745  0355  1706               	bsf	6,6	;volatile
  4746                           
  4747                           ;main.c: 480: }
  4748  0356  2B8C               	goto	i1l2888
  4749  0357                     i1l2876:	
  4750                           
  4751                           ;main.c: 481: else
  4752                           ;main.c: 482: {
  4753                           ;main.c: 484: contagens_tm0 = 0;
  4754  0357  01BE               	clrf	_contagens_tm0
  4755  0358  01BF               	clrf	_contagens_tm0+1
  4756                           
  4757                           ;main.c: 487: pulsos = (TMR1H << 8) + TMR1L;
  4758  0359  080F               	movf	15,w	;volatile
  4759  035A  01C3               	clrf	_pulsos+1
  4760  035B  07C3               	addwf	_pulsos+1,f
  4761  035C  080E               	movf	14,w	;volatile
  4762  035D  01C2               	clrf	_pulsos
  4763  035E  07C2               	addwf	_pulsos,f
  4764                           
  4765                           ;main.c: 488: rpm = ((pulsos / pas_cooler) * 120);
  4766  035F  086B               	movf	_pas_cooler+1,w
  4767  0360  01F1               	clrf	i1___lwdiv@divisor+1
  4768  0361  07F1               	addwf	i1___lwdiv@divisor+1,f
  4769  0362  086A               	movf	_pas_cooler,w
  4770  0363  01F0               	clrf	i1___lwdiv@divisor
  4771  0364  07F0               	addwf	i1___lwdiv@divisor,f
  4772  0365  0843               	movf	_pulsos+1,w
  4773  0366  01F3               	clrf	i1___lwdiv@dividend+1
  4774  0367  07F3               	addwf	i1___lwdiv@dividend+1,f
  4775  0368  0842               	movf	_pulsos,w
  4776  0369  01F2               	clrf	i1___lwdiv@dividend
  4777  036A  07F2               	addwf	i1___lwdiv@dividend,f
  4778  036B  120A  118A  27AA  120A  118A  	fcall	i1___lwdiv
  4779  0370  0871               	movf	?i1___lwdiv+1,w
  4780  0371  01F9               	clrf	i1___wmul@multiplier+1
  4781  0372  07F9               	addwf	i1___wmul@multiplier+1,f
  4782  0373  0870               	movf	?i1___lwdiv,w
  4783  0374  01F8               	clrf	i1___wmul@multiplier
  4784  0375  07F8               	addwf	i1___wmul@multiplier,f
  4785  0376  3078               	movlw	120
  4786  0377  00FA               	movwf	i1___wmul@multiplicand
  4787  0378  3000               	movlw	0
  4788  0379  00FB               	movwf	i1___wmul@multiplicand+1
  4789  037A  120A  158A  26EB  120A  118A  	fcall	i1___wmul
  4790  037F  0879               	movf	?i1___wmul+1,w
  4791  0380  1683               	bsf	3,5	;RP0=1, select bank1
  4792  0381  1303               	bcf	3,6	;RP1=0, select bank1
  4793  0382  01B7               	clrf	(_rpm+1)^(0+128)
  4794  0383  07B7               	addwf	(_rpm+1)^(0+128),f
  4795  0384  0878               	movf	?i1___wmul,w
  4796  0385  01B6               	clrf	_rpm^(0+128)
  4797  0386  07B6               	addwf	_rpm^(0+128),f
  4798                           
  4799                           ;main.c: 491: TMR1L = 0x00;
  4800  0387  1283               	bcf	3,5	;RP0=0, select bank0
  4801  0388  1303               	bcf	3,6	;RP1=0, select bank0
  4802  0389  018E               	clrf	14	;volatile
  4803                           
  4804                           ;main.c: 492: TMR1H = 0x00;
  4805  038A  018F               	clrf	15	;volatile
  4806                           
  4807                           ;main.c: 495: PORTBbits.RB6 = 0;
  4808  038B  1306               	bcf	6,6	;volatile
  4809  038C                     i1l2888:	
  4810                           
  4811                           ;main.c: 496: }
  4812                           ;main.c: 499: INTCONbits.T0IF = 0;
  4813  038C  110B               	bcf	11,2	;volatile
  4814  038D                     i1l2890:	
  4815                           
  4816                           ;main.c: 500: }
  4817                           ;main.c: 503: if (PIR1bits.TMR1IF)
  4818  038D  180C               	btfsc	12,0	;volatile
  4819                           
  4820                           ;main.c: 504: {
  4821                           ;main.c: 508: PIR1bits.TMR1IF = 0;
  4822  038E  100C               	bcf	12,0	;volatile
  4823                           
  4824                           ;main.c: 509: }
  4825                           ;main.c: 512: if (PIR1bits.SSPIF)
  4826  038F  198C               	btfsc	12,3	;volatile
  4827                           
  4828                           ;main.c: 513: {
  4829                           ;main.c: 517: PIR1bits.SSPIF = 0;
  4830  0390  118C               	bcf	12,3	;volatile
  4831  0391                     i1l192:	
  4832  0391  1283               	bcf	3,5	;RP0=0, select bank0
  4833  0392  1303               	bcf	3,6	;RP1=0, select bank0
  4834  0393  0849               	movf	??_ISR+3,w
  4835  0394  00FF               	movwf	127
  4836  0395  0848               	movf	??_ISR+2,w
  4837  0396  008A               	movwf	10
  4838  0397  0847               	movf	??_ISR+1,w
  4839  0398  0084               	movwf	4
  4840  0399  0E46               	swapf	??_ISR^0,w
  4841  039A  0083               	movwf	3
  4842  039B  0EFE               	swapf	126,f
  4843  039C  0E7E               	swapf	126,w
  4844  039D  0009               	retfie
  4845  039E                     __end_of_ISR:	
  4846                           
  4847                           	psect	intentry
  4848  0004                     __pintentry:	
  4849                           ;incstack = 0
  4850                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4851                           
  4852  0004                     interrupt_function:	
  4853  007E                     saved_w	set	btemp
  4854  0004  00FE               	movwf	btemp
  4855  0005  0E03               	swapf	3,w
  4856  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4857  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4858  0008  00C6               	movwf	??_ISR
  4859  0009  0804               	movf	4,w
  4860  000A  00C7               	movwf	??_ISR+1
  4861  000B  080A               	movf	10,w
  4862  000C  00C8               	movwf	??_ISR+2
  4863  000D  087F               	movf	btemp+1,w
  4864  000E  00C9               	movwf	??_ISR+3
  4865  000F  120A  118A  2A2F   	ljmp	_ISR
  4866                           
  4867                           	psect	text23
  4868  0EEB                     __ptext23:	
  4869 ;; *************** function i1___wmul *****************
  4870 ;; Defined at:
  4871 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  multiplier      2    8[COMMON] unsigned int 
  4874 ;;  multiplicand    2   10[COMMON] unsigned int 
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  __wmul          2   12[COMMON] unsigned int 
  4877 ;; Return value:  Size  Location     Type
  4878 ;;                  2    8[COMMON] unsigned int 
  4879 ;; Registers used:
  4880 ;;		wreg, status,2, status,0
  4881 ;; Tracked objects:
  4882 ;;		On entry : 0/0
  4883 ;;		On exit  : 0/0
  4884 ;;		Unchanged: 0/0
  4885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4886 ;;      Params:         4       0       0       0       0
  4887 ;;      Locals:         2       0       0       0       0
  4888 ;;      Temps:          0       0       0       0       0
  4889 ;;      Totals:         6       0       0       0       0
  4890 ;;Total ram usage:        6 bytes
  4891 ;; Hardware stack levels used:    1
  4892 ;; This function calls:
  4893 ;;		Nothing
  4894 ;; This function is called by:
  4895 ;;		_ISR
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           
  4900                           ;psect for function i1___wmul
  4901  0EEB                     i1___wmul:	
  4902                           
  4903                           ;incstack = 0
  4904                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  4905  0EEB  01FC               	clrf	i1___wmul@product
  4906  0EEC  01FD               	clrf	i1___wmul@product+1
  4907  0EED                     i1l2588:	
  4908  0EED  1C78               	btfss	i1___wmul@multiplier,0
  4909  0EEE  2EF5               	goto	i1l610
  4910  0EEF  087A               	movf	i1___wmul@multiplicand,w
  4911  0EF0  07FC               	addwf	i1___wmul@product,f
  4912  0EF1  1803               	skipnc
  4913  0EF2  0AFD               	incf	i1___wmul@product+1,f
  4914  0EF3  087B               	movf	i1___wmul@multiplicand+1,w
  4915  0EF4  07FD               	addwf	i1___wmul@product+1,f
  4916  0EF5                     i1l610:	
  4917  0EF5  3001               	movlw	1
  4918  0EF6                     u257_25:	
  4919  0EF6  1003               	clrc
  4920  0EF7  0DFA               	rlf	i1___wmul@multiplicand,f
  4921  0EF8  0DFB               	rlf	i1___wmul@multiplicand+1,f
  4922  0EF9  3EFF               	addlw	-1
  4923  0EFA  1D03               	skipz
  4924  0EFB  2EF6               	goto	u257_25
  4925  0EFC  3001               	movlw	1
  4926  0EFD                     u258_25:	
  4927  0EFD  1003               	clrc
  4928  0EFE  0CF9               	rrf	i1___wmul@multiplier+1,f
  4929  0EFF  0CF8               	rrf	i1___wmul@multiplier,f
  4930  0F00  3EFF               	addlw	-1
  4931  0F01  1D03               	skipz
  4932  0F02  2EFD               	goto	u258_25
  4933  0F03  0879               	movf	i1___wmul@multiplier+1,w
  4934  0F04  0478               	iorwf	i1___wmul@multiplier,w
  4935  0F05  1D03               	skipz
  4936  0F06  2EED               	goto	i1l2588
  4937  0F07  087D               	movf	i1___wmul@product+1,w
  4938  0F08  01F9               	clrf	?i1___wmul+1
  4939  0F09  07F9               	addwf	?i1___wmul+1,f
  4940  0F0A  087C               	movf	i1___wmul@product,w
  4941  0F0B  01F8               	clrf	?i1___wmul
  4942  0F0C  07F8               	addwf	?i1___wmul,f
  4943  0F0D  0008               	return
  4944  0F0E                     __end_ofi1___wmul:	
  4945                           
  4946                           	psect	text24
  4947  07AA                     __ptext24:	
  4948 ;; *************** function i1___lwdiv *****************
  4949 ;; Defined at:
  4950 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;  divisor         2    0[COMMON] unsigned int 
  4953 ;;  dividend        2    2[COMMON] unsigned int 
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;  __lwdiv         2    5[COMMON] unsigned int 
  4956 ;;  __lwdiv         1    7[COMMON] unsigned char 
  4957 ;; Return value:  Size  Location     Type
  4958 ;;                  2    0[COMMON] unsigned int 
  4959 ;; Registers used:
  4960 ;;		wreg, status,2, status,0
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4966 ;;      Params:         4       0       0       0       0
  4967 ;;      Locals:         3       0       0       0       0
  4968 ;;      Temps:          1       0       0       0       0
  4969 ;;      Totals:         8       0       0       0       0
  4970 ;;Total ram usage:        8 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; This function calls:
  4973 ;;		Nothing
  4974 ;; This function is called by:
  4975 ;;		_ISR
  4976 ;; This function uses a non-reentrant model
  4977 ;;
  4978                           
  4979                           
  4980                           ;psect for function i1___lwdiv
  4981  07AA                     i1___lwdiv:	
  4982                           
  4983                           ;incstack = 0
  4984                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  4985  07AA  01F5               	clrf	i1___lwdiv@quotient
  4986  07AB  01F6               	clrf	i1___lwdiv@quotient+1
  4987  07AC  0871               	movf	i1___lwdiv@divisor+1,w
  4988  07AD  0470               	iorwf	i1___lwdiv@divisor,w
  4989  07AE  1903               	skipnz
  4990  07AF  2FE1               	goto	i1l2620
  4991  07B0  01F7               	clrf	i1___lwdiv@counter
  4992  07B1  0AF7               	incf	i1___lwdiv@counter,f
  4993  07B2                     i1l2608:	
  4994  07B2  1BF1               	btfsc	i1___lwdiv@divisor+1,7
  4995  07B3  2FC0               	goto	i1l2610
  4996  07B4  3001               	movlw	1
  4997  07B5                     u261_25:	
  4998  07B5  1003               	clrc
  4999  07B6  0DF0               	rlf	i1___lwdiv@divisor,f
  5000  07B7  0DF1               	rlf	i1___lwdiv@divisor+1,f
  5001  07B8  3EFF               	addlw	-1
  5002  07B9  1D03               	skipz
  5003  07BA  2FB5               	goto	u261_25
  5004  07BB  3001               	movlw	1
  5005  07BC  00F4               	movwf	??i1___lwdiv
  5006  07BD  0874               	movf	??i1___lwdiv,w
  5007  07BE  07F7               	addwf	i1___lwdiv@counter,f
  5008  07BF  2FB2               	goto	i1l2608
  5009  07C0                     i1l2610:	
  5010  07C0  3001               	movlw	1
  5011  07C1                     u263_25:	
  5012  07C1  1003               	clrc
  5013  07C2  0DF5               	rlf	i1___lwdiv@quotient,f
  5014  07C3  0DF6               	rlf	i1___lwdiv@quotient+1,f
  5015  07C4  3EFF               	addlw	-1
  5016  07C5  1D03               	skipz
  5017  07C6  2FC1               	goto	u263_25
  5018  07C7  0871               	movf	i1___lwdiv@divisor+1,w
  5019  07C8  0273               	subwf	i1___lwdiv@dividend+1,w
  5020  07C9  1D03               	skipz
  5021  07CA  2FCD               	goto	u264_25
  5022  07CB  0870               	movf	i1___lwdiv@divisor,w
  5023  07CC  0272               	subwf	i1___lwdiv@dividend,w
  5024  07CD                     u264_25:	
  5025  07CD  1C03               	skipc
  5026  07CE  2FD6               	goto	i1l2616
  5027  07CF  0870               	movf	i1___lwdiv@divisor,w
  5028  07D0  02F2               	subwf	i1___lwdiv@dividend,f
  5029  07D1  0871               	movf	i1___lwdiv@divisor+1,w
  5030  07D2  1C03               	skipc
  5031  07D3  03F3               	decf	i1___lwdiv@dividend+1,f
  5032  07D4  02F3               	subwf	i1___lwdiv@dividend+1,f
  5033  07D5  1475               	bsf	i1___lwdiv@quotient,0
  5034  07D6                     i1l2616:	
  5035  07D6  3001               	movlw	1
  5036  07D7                     u265_25:	
  5037  07D7  1003               	clrc
  5038  07D8  0CF1               	rrf	i1___lwdiv@divisor+1,f
  5039  07D9  0CF0               	rrf	i1___lwdiv@divisor,f
  5040  07DA  3EFF               	addlw	-1
  5041  07DB  1D03               	skipz
  5042  07DC  2FD7               	goto	u265_25
  5043  07DD  3001               	movlw	1
  5044  07DE  02F7               	subwf	i1___lwdiv@counter,f
  5045  07DF  1D03               	btfss	3,2
  5046  07E0  2FC0               	goto	i1l2610
  5047  07E1                     i1l2620:	
  5048  07E1  0876               	movf	i1___lwdiv@quotient+1,w
  5049  07E2  01F1               	clrf	?i1___lwdiv+1
  5050  07E3  07F1               	addwf	?i1___lwdiv+1,f
  5051  07E4  0875               	movf	i1___lwdiv@quotient,w
  5052  07E5  01F0               	clrf	?i1___lwdiv
  5053  07E6  07F0               	addwf	?i1___lwdiv,f
  5054  07E7  0008               	return
  5055  07E8                     __end_ofi1___lwdiv:	
  5056                           
  5057                           	psect	text25
  5058  0DF9                     __ptext25:	
  5059 ;; *************** function i1_TIMER0_Set *****************
  5060 ;; Defined at:
  5061 ;;		line 20 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\timers.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  contagens       1    wreg     unsigned char 
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;  contagens       1    0[COMMON] unsigned char 
  5066 ;; Return value:  Size  Location     Type
  5067 ;;		None               void
  5068 ;; Registers used:
  5069 ;;		wreg
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5075 ;;      Params:         0       0       0       0       0
  5076 ;;      Locals:         1       0       0       0       0
  5077 ;;      Temps:          0       0       0       0       0
  5078 ;;      Totals:         1       0       0       0       0
  5079 ;;Total ram usage:        1 bytes
  5080 ;; Hardware stack levels used:    1
  5081 ;; This function calls:
  5082 ;;		Nothing
  5083 ;; This function is called by:
  5084 ;;		_ISR
  5085 ;; This function uses a non-reentrant model
  5086 ;;
  5087                           
  5088                           
  5089                           ;psect for function i1_TIMER0_Set
  5090  0DF9                     i1_TIMER0_Set:	
  5091                           
  5092                           ;incstack = 0
  5093                           ; Regs used in i1_TIMER0_Set: [wreg]
  5094                           ;i1TIMER0_Set@contagens stored from wreg
  5095  0DF9  00F0               	movwf	i1TIMER0_Set@contagens
  5096                           
  5097                           ;timers.c: 22: TMR0 = contagens;
  5098  0DFA  0870               	movf	i1TIMER0_Set@contagens,w
  5099  0DFB  1283               	bcf	3,5	;RP0=0, select bank0
  5100  0DFC  1303               	bcf	3,6	;RP1=0, select bank0
  5101  0DFD  0081               	movwf	1	;volatile
  5102  0DFE  0008               	return
  5103  0DFF                     __end_ofi1_TIMER0_Set:	
  5104                           
  5105                           	psect	text26
  5106  0E77                     __ptext26:	
  5107 ;; *************** function i1_PWM_DutyCycle2 *****************
  5108 ;; Defined at:
  5109 ;;		line 96 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  valor           2    0[COMMON] int 
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;		None
  5114 ;; Return value:  Size  Location     Type
  5115 ;;		None               void
  5116 ;; Registers used:
  5117 ;;		wreg, status,2, status,0
  5118 ;; Tracked objects:
  5119 ;;		On entry : 0/0
  5120 ;;		On exit  : 0/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5123 ;;      Params:         2       0       0       0       0
  5124 ;;      Locals:         0       0       0       0       0
  5125 ;;      Temps:          2       0       0       0       0
  5126 ;;      Totals:         4       0       0       0       0
  5127 ;;Total ram usage:        4 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; This function calls:
  5130 ;;		Nothing
  5131 ;; This function is called by:
  5132 ;;		_ISR
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           
  5137                           ;psect for function i1_PWM_DutyCycle2
  5138  0E77                     i1_PWM_DutyCycle2:	
  5139                           
  5140                           ;pwm.c: 98: CCPR2L = valor >> 2;
  5141                           
  5142                           ;incstack = 0
  5143                           ; Regs used in i1_PWM_DutyCycle2: [wreg+status,2+status,0]
  5144  0E77  0871               	movf	i1PWM_DutyCycle2@valor+1,w
  5145  0E78  00F3               	movwf	??i1_PWM_DutyCycle2+1
  5146  0E79  0870               	movf	i1PWM_DutyCycle2@valor,w
  5147  0E7A  00F2               	movwf	??i1_PWM_DutyCycle2
  5148  0E7B  0D73               	rlf	??i1_PWM_DutyCycle2+1,w
  5149  0E7C  0CF3               	rrf	??i1_PWM_DutyCycle2+1,f
  5150  0E7D  0CF2               	rrf	??i1_PWM_DutyCycle2,f
  5151  0E7E  0D73               	rlf	??i1_PWM_DutyCycle2+1,w
  5152  0E7F  0CF3               	rrf	??i1_PWM_DutyCycle2+1,f
  5153  0E80  0CF2               	rrf	??i1_PWM_DutyCycle2,f
  5154  0E81  0872               	movf	??i1_PWM_DutyCycle2,w
  5155  0E82  1283               	bcf	3,5	;RP0=0, select bank0
  5156  0E83  1303               	bcf	3,6	;RP1=0, select bank0
  5157  0E84  009B               	movwf	27	;volatile
  5158                           
  5159                           ;pwm.c: 99: CCP2CON = (valor << 4)|0X0C;
  5160  0E85  0870               	movf	i1PWM_DutyCycle2@valor,w
  5161  0E86  00F2               	movwf	??i1_PWM_DutyCycle2
  5162  0E87  3003               	movlw	3
  5163  0E88                     u255_25:	
  5164  0E88  1003               	clrc
  5165  0E89  0DF2               	rlf	??i1_PWM_DutyCycle2,f
  5166  0E8A  3EFF               	addlw	-1
  5167  0E8B  1D03               	skipz
  5168  0E8C  2E88               	goto	u255_25
  5169  0E8D  1003               	clrc
  5170  0E8E  0D72               	rlf	??i1_PWM_DutyCycle2,w
  5171  0E8F  380C               	iorlw	12
  5172  0E90  009D               	movwf	29	;volatile
  5173  0E91  0008               	return
  5174  0E92                     __end_ofi1_PWM_DutyCycle2:	
  5175                           
  5176                           	psect	text27
  5177  0E5C                     __ptext27:	
  5178 ;; *************** function _USART_ReceiveChar *****************
  5179 ;; Defined at:
  5180 ;;		line 63 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;		None
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;  byte            1    4[COMMON] unsigned char 
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      unsigned char 
  5187 ;; Registers used:
  5188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5194 ;;      Params:         0       0       0       0       0
  5195 ;;      Locals:         1       0       0       0       0
  5196 ;;      Temps:          1       0       0       0       0
  5197 ;;      Totals:         2       0       0       0       0
  5198 ;;Total ram usage:        2 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:    2
  5201 ;; This function calls:
  5202 ;;		i1_USART_WriteString
  5203 ;; This function is called by:
  5204 ;;		_ISR
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           
  5209                           ;psect for function _USART_ReceiveChar
  5210  0E5C                     _USART_ReceiveChar:	
  5211                           
  5212                           ;usart.c: 65: unsigned char byte;
  5213                           ;usart.c: 67: if (!OERR)
  5214                           
  5215                           ;incstack = 0
  5216                           ; Regs used in _USART_ReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5217  0E5C  1283               	bcf	3,5	;RP0=0, select bank0
  5218  0E5D  1303               	bcf	3,6	;RP1=0, select bank0
  5219  0E5E  1898               	btfsc	24,1	;volatile
  5220  0E5F  2E65               	goto	i1l2214
  5221                           
  5222                           ;usart.c: 68: {
  5223                           ;usart.c: 69: byte = RCREG;
  5224  0E60  081A               	movf	26,w	;volatile
  5225  0E61  00F3               	movwf	??_USART_ReceiveChar
  5226  0E62  0873               	movf	??_USART_ReceiveChar,w
  5227  0E63  00F4               	movwf	USART_ReceiveChar@byte
  5228  0E64  2E74               	goto	i1l2222
  5229  0E65                     i1l2214:	
  5230                           ;usart.c: 71: }
  5231                           
  5232                           ;usart.c: 70: PIR1bits.RCIF = 0;
  5233                           
  5234                           
  5235                           ;usart.c: 72: else
  5236                           ;usart.c: 73: {
  5237                           ;usart.c: 74: USART_WriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  5238  0E65  301C               	movlw	low (STR_19| (0+32768))
  5239  0E66  00F1               	movwf	i1USART_WriteString@str
  5240  0E67  3085               	movlw	high (STR_19| (0+32768))
  5241  0E68  00F2               	movwf	i1USART_WriteString@str+1
  5242  0E69  120A  158A  26C8   	fcall	i1_USART_WriteString
  5243                           
  5244                           ;usart.c: 76: RCSTAbits.CREN = 0;
  5245  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  5246  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  5247  0E6E  1218               	bcf	24,4	;volatile
  5248                           
  5249                           ;usart.c: 77: byte = RCREG;
  5250  0E6F  081A               	movf	26,w	;volatile
  5251  0E70  00F3               	movwf	??_USART_ReceiveChar
  5252  0E71  0873               	movf	??_USART_ReceiveChar,w
  5253  0E72  00F4               	movwf	USART_ReceiveChar@byte
  5254                           
  5255                           ;usart.c: 78: RCSTAbits.CREN = 1;
  5256  0E73  1618               	bsf	24,4	;volatile
  5257  0E74                     i1l2222:	
  5258                           
  5259                           ;usart.c: 79: PIR1bits.RCIF = 0;
  5260  0E74  128C               	bcf	12,5	;volatile
  5261                           
  5262                           ;usart.c: 80: }
  5263                           ;usart.c: 82: return(byte);
  5264  0E75  0874               	movf	USART_ReceiveChar@byte,w
  5265  0E76  0008               	return
  5266  0E77                     __end_of_USART_ReceiveChar:	
  5267                           
  5268                           	psect	text28
  5269  0EC8                     __ptext28:	
  5270 ;; *************** function i1_USART_WriteString *****************
  5271 ;; Defined at:
  5272 ;;		line 52 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  str             2    1[COMMON] PTR const unsigned char 
  5275 ;;		 -> STR_19(40), STR_16(3), display_rpm(10), STR_12(20), 
  5276 ;;		 -> STR_11(29), STR_10(15), STR_9(15), STR_8(14), 
  5277 ;;		 -> STR_7(14), STR_6(14), STR_5(14), STR_4(14), 
  5278 ;;		 -> STR_3(13), STR_2(13), STR_1(14), 
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;		None
  5281 ;; Return value:  Size  Location     Type
  5282 ;;		None               void
  5283 ;; Registers used:
  5284 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5290 ;;      Params:         2       0       0       0       0
  5291 ;;      Locals:         0       0       0       0       0
  5292 ;;      Temps:          0       0       0       0       0
  5293 ;;      Totals:         2       0       0       0       0
  5294 ;;Total ram usage:        2 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    1
  5297 ;; This function calls:
  5298 ;;		i1_USART_WriteChar
  5299 ;; This function is called by:
  5300 ;;		_ISR
  5301 ;;		_USART_ReceiveChar
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           
  5306                           ;psect for function i1_USART_WriteString
  5307  0EC8                     i1_USART_WriteString:	
  5308  0EC8                     i1l2138:	
  5309                           ;usart.c: 54: while(*str != '\0')
  5310                           
  5311                           ;incstack = 0
  5312                           ; Regs used in i1_USART_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  5313                           
  5314  0EC8  0872               	movf	i1USART_WriteString@str+1,w
  5315  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  5316  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  5317  0ECB  00FF               	movwf	127
  5318  0ECC  0871               	movf	i1USART_WriteString@str,w
  5319  0ECD  0084               	movwf	4
  5320  0ECE  120A  118A  2500  120A  158A  	fcall	stringtab
  5321  0ED3  3800               	iorlw	0
  5322  0ED4  1903               	btfsc	3,2
  5323  0ED5  0008               	return
  5324                           
  5325                           ;usart.c: 55: {
  5326                           ;usart.c: 56: USART_WriteChar(*str);
  5327  0ED6  0872               	movf	i1USART_WriteString@str+1,w
  5328  0ED7  1283               	bcf	3,5	;RP0=0, select bank0
  5329  0ED8  1303               	bcf	3,6	;RP1=0, select bank0
  5330  0ED9  00FF               	movwf	127
  5331  0EDA  0871               	movf	i1USART_WriteString@str,w
  5332  0EDB  0084               	movwf	4
  5333  0EDC  120A  118A  2500  120A  158A  	fcall	stringtab
  5334  0EE1  120A  158A  260B  120A  158A  	fcall	i1_USART_WriteChar
  5335                           
  5336                           ;usart.c: 57: str++;
  5337  0EE6  3001               	movlw	1
  5338  0EE7  07F1               	addwf	i1USART_WriteString@str,f
  5339  0EE8  1803               	skipnc
  5340  0EE9  0AF2               	incf	i1USART_WriteString@str+1,f
  5341  0EEA  2EC8               	goto	i1l2138
  5342  0EEB                     __end_ofi1_USART_WriteString:	
  5343                           
  5344                           	psect	text29
  5345  0E0B                     __ptext29:	
  5346 ;; *************** function i1_USART_WriteChar *****************
  5347 ;; Defined at:
  5348 ;;		line 44 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;  byte            1    wreg     unsigned char 
  5351 ;; Auto vars:     Size  Location     Type
  5352 ;;  byte            1    0[COMMON] unsigned char 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;		None               void
  5355 ;; Registers used:
  5356 ;;		wreg
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5362 ;;      Params:         0       0       0       0       0
  5363 ;;      Locals:         1       0       0       0       0
  5364 ;;      Temps:          0       0       0       0       0
  5365 ;;      Totals:         1       0       0       0       0
  5366 ;;Total ram usage:        1 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; This function calls:
  5369 ;;		Nothing
  5370 ;; This function is called by:
  5371 ;;		i1_USART_WriteString
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           
  5376                           ;psect for function i1_USART_WriteChar
  5377  0E0B                     i1_USART_WriteChar:	
  5378                           
  5379                           ;incstack = 0
  5380                           ; Regs used in i1_USART_WriteChar: [wreg]
  5381                           ;i1USART_WriteChar@byte stored from wreg
  5382  0E0B  00F0               	movwf	i1USART_WriteChar@byte
  5383  0E0C                     i1l239:	
  5384                           ;usart.c: 46: while(!PIR1bits.TXIF);
  5385                           
  5386  0E0C  1283               	bcf	3,5	;RP0=0, select bank0
  5387  0E0D  1303               	bcf	3,6	;RP1=0, select bank0
  5388  0E0E  1E0C               	btfss	12,4	;volatile
  5389  0E0F  2E0C               	goto	i1l239
  5390                           
  5391                           ;usart.c: 47: TXREG = byte;
  5392  0E10  0870               	movf	i1USART_WriteChar@byte,w
  5393  0E11  0099               	movwf	25	;volatile
  5394  0E12  0008               	return
  5395  0E13                     __end_ofi1_USART_WriteChar:	
  5396  007E                     btemp	set	126	;btemp
  5397  007E                     wtemp	set	126
  5398  007E                     wtemp0	set	126
  5399  0080                     wtemp1	set	128
  5400  0082                     wtemp2	set	130
  5401  0084                     wtemp3	set	132
  5402  0086                     wtemp4	set	134
  5403  0088                     wtemp5	set	136
  5404  007F                     wtemp6	set	127
  5405  007E                     ttemp	set	126
  5406  007E                     ttemp0	set	126
  5407  0081                     ttemp1	set	129
  5408  0084                     ttemp2	set	132
  5409  0087                     ttemp3	set	135
  5410  007F                     ttemp4	set	127
  5411  007E                     ltemp	set	126
  5412  007E                     ltemp0	set	126
  5413  0082                     ltemp1	set	130
  5414  0086                     ltemp2	set	134
  5415  0080                     ltemp3	set	128


Data Sizes:
    Strings     263
    Constant    10
    Data        8
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     36      76
    BANK1            80      3      59
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_15(CODE[5]), STR_14(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> display_pwm(BANK1[10]), display_rpm(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1259$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    LCD_WriteString@Str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_18(CODE[6]), STR_17(CODE[6]), display_pwm(BANK1[10]), display_rpm(BANK1[10]), 
		 -> STR_13(CODE[17]), 

    USART_WriteString@str	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_19(CODE[40]), STR_16(CODE[3]), display_rpm(BANK1[10]), STR_12(CODE[20]), 
		 -> STR_11(CODE[29]), STR_10(CODE[15]), STR_9(CODE[15]), STR_8(CODE[14]), 
		 -> STR_7(CODE[14]), STR_6(CODE[14]), STR_5(CODE[14]), STR_4(CODE[14]), 
		 -> STR_3(CODE[13]), STR_2(CODE[13]), STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1___wmul
    i1___wmul->i1___lwdiv
    _USART_ReceiveChar->i1_USART_WriteString
    i1_USART_WriteString->i1_USART_WriteChar

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USART_WriteString->_USART_WriteChar
    _USART_Init->___aldiv
    _LCD_WriteString->_LCD_WriteData
    _LCD_Init->_LCD_WriteCmd
    _LCD_Clear->_LCD_WriteCmd

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4579
                                              0 BANK1      3     3      0
                           _ADC_Init
                          _LCD_Clear
                         _LCD_Cursor
                           _LCD_Init
                    _LCD_WriteString
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                           _PWM_Init
                        _TIMER0_Init
                         _TIMER0_Set
                         _USART_Init
                  _USART_WriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    14      4    2129
                                             18 BANK0     18    14      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     296
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                             12 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     366
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _USART_WriteString                                    2     0      2     741
                                              5 BANK0      2     0      2
                    _USART_WriteChar
 ---------------------------------------------------------------------------------
 (2) _USART_WriteChar                                      1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           8     4      4     514
                                             19 BANK0      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     428
                                              4 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _TIMER0_Set                                           1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle2                                       4     2      2     248
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle1                                       4     2      2     108
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteString                                      2     0      2     387
                                              6 BANK0      2     0      2
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        2     2      0      22
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      22
                                              6 BANK0      2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Cursor                                           3     2      1     386
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0      22
                                              6 BANK0      2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteCmd                                         2     2      0      22
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0    1206
                                              0 BANK0      4     4      0
                  _USART_ReceiveChar
                   i1_PWM_DutyCycle2
                       i1_TIMER0_Set
                i1_USART_WriteString
                          i1___lwdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (4) i1___wmul                                             6     2      4     144
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) i1___lwdiv                                            8     4      4     214
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) i1_TIMER0_Set                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) i1_PWM_DutyCycle2                                     4     2      2      96
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _USART_ReceiveChar                                    2     2      0     377
                                              3 COMMON     2     2      0
                i1_USART_WriteString
 ---------------------------------------------------------------------------------
 (4) i1_USART_WriteString                                  2     0      2     353
                                              1 COMMON     2     0      2
                  i1_USART_WriteChar
 ---------------------------------------------------------------------------------
 (5) i1_USART_WriteChar                                    1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _LCD_Clear
     _LCD_WriteCmd
   _LCD_Cursor
   _LCD_Init
     _LCD_WriteCmd
   _LCD_WriteString
     _LCD_WriteData
   _PWM_DutyCycle1
   _PWM_DutyCycle2
   _PWM_Init
   _TIMER0_Init
   _TIMER0_Set
   _USART_Init
     ___aldiv
   _USART_WriteString
     _USART_WriteChar
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _ISR (ROOT)
   _USART_ReceiveChar
     i1_USART_WriteString
       i1_USART_WriteChar
   i1_PWM_DutyCycle2
   i1_TIMER0_Set
   i1_USART_WriteString
     i1_USART_WriteChar
   i1___lwdiv
   i1___wmul
     i1___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      3      3B       7       73.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      95      12        0.0%
ABS                  0      0      95       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Thu May 26 11:53:05 2022

           ?i1_PWM_DutyCycle2 0070                             _x 0038                             _y 003B  
                           pc 0002                   ?_LCD_Cursor 004A       __size_of_PWM_DutyCycle1 001B  
     __size_of_PWM_DutyCycle2 001B                   __CFG_CP$OFF 0000                   _SSPSTATbits 0094  
                          _tf 00D5                            fsr 0004           ___wmul@multiplicand 004C  
          ??i1_PWM_DutyCycle2 0072              i1___wmul@product 007C                 _contagens_tm0 003E  
                         l214 0441                           l239 0E16                           l610 0F88  
                         l509 0166                           l491 008F                           l665 0635  
                         _PR2 0092                  __CFG_CPD$OFF 0000                           _ISR 022F  
                         _rpm 00B6                           fsr0 0004                           _pwm 0044  
                         _sum 002F    __size_of_USART_WriteString 0025                           indf 0000  
                __CFG_FOSC$HS 0000             ??_LCD_WriteString 004E                  __CFG_LVP$OFF 0000  
                        ?_ISR 0070                          l2102 0798                          l2120 0FE0  
                        l2106 07A3                          l2034 0F80                          l2124 0FEE  
                        l2028 0E5A            LCD_WriteString@Str 004C                          l2062 0656  
                        l2054 0646                          l2118 0FD2                          l2080 06A9  
                        l2072 068E                          l2064 0666                          l2128 0FF9  
                        l2400 012D                          l2234 0F57                          l2340 07F2  
                        l2076 069B                          l2420 0185                          l2412 0158  
                        l2404 0133                          l2094 0774                          l2430 019A  
                        l2422 0189                          l2096 0782                          l2440 01B4  
                        l2354 0F32                          l2460 01DC                          l2452 01D8  
                        l2372 0094                          l2446 01C9                          l2438 01B0  
                        l2390 0114                          l2374 00A1                          l2462 0063  
                        l2464 0228                          l2368 008B                          l2378 00B5  
                        l2388 00F7                          STR_1 05EA                          STR_2 05F8  
                        STR_3 0605                          STR_4 05CE                          STR_5 05B2  
                        STR_6 05A4                          STR_7 05DC                          STR_8 05C0  
                        STR_9 0586                          u2005 0EA3                          u2105 0175  
                        u2065 014E                          u1605 0668                          u1525 0F89  
                        u1615 067D                          u1535 0F90                          u1625 068F  
                        u1705 0799                          u1735 0FD5                          u1585 065A  
                        u1665 0777                          u1755 0FE6                          u1685 0783  
                        u1765 0FEF                          u3607 06F4                          u1695 078F  
                        u3617 0702                          u1945 0EBE                          u3537 043A  
                        u3627 0710                          u3547 04E2                          u3637 071C  
                        u3557 0E46                          u3647 07F8                          u3567 06BE  
                        u1975 072A                          u3657 0FAD                          u3577 06CE  
                        u3667 0FBB                          u3587 06DC                          u3677 0FC7  
                        u3597 06E8                          u3687 0E37                          _OERR 00C1  
                        _TMR0 0001                          _TMR1 000E                          _main 039E  
          __size_of_LCD_Clear 0029                          _temp 0032                          btemp 007E  
            __end_of_ADC_Init 04FB                          ltemp 007E                          start 0012  
                        ttemp 007E                          wtemp 007E                 ?_LCD_WriteCmd 0070  
               _LCD_WriteData 0E3D       __end_of_USART_WriteChar 0E1B                         ??_ISR 0046  
                 ?_TIMER0_Set 0070              __end_of_LCD_Init 071F               __end_of___aldiv 06B2  
                       ?_main 0070                         _EEADR 010D                         STR_10 0595  
                       STR_11 0544                         STR_12 0561                         STR_13 0575  
                       STR_14 061E                         STR_15 061E                         STR_16 0592  
                       STR_17 0618                 __CFG_WDTE$OFF 0000                         STR_18 0612  
                       STR_19 051C                         _T1CON 0010               __end_of___lwdiv 07AA  
                       i1l239 0E0C                         i1l192 0391               __end_of___lwmod 1000  
                       i1l610 0EF5                         i1l196 029B                         i1l199 02C4  
                       _RCREG 001A                         _TMR1H 000F                         _TMR1L 000E  
                       _SPBRG 0099                         _PORTA 0005                         _PORTB 0006  
                       _PORTC 0007                         _PORTD 0008                         _PORTE 0009  
                       _TRISA 0085                         _TRISB 0086                         _TRISC 0087  
                       _TRISD 0088                         _TRISE 0089                         _TXREG 0019  
               __CFG_PWRTE$ON 0000                         _foTip 00A6                         _derro 00A0  
             __end_of_dpowers 051C               __end_of_isdigit 0E5C                __CFG_BOREN$OFF 0000  
         __size_of_LCD_Cursor 0016                         pclath 000A              __end_of_PWM_Init 0F32  
            __end_ofi1___wmul 0F0E                         ltemp0 007E                         ltemp1 0082  
                       ltemp2 0086                         ltemp3 0080                         ttemp0 007E  
                       ttemp1 0081                         ttemp2 0084                         ttemp3 0087  
                       ttemp4 007F                         status 0003           i1___wmul@multiplier 0078  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F               __end_of_sprintf 022F            __size_ofi1___lwdiv 003E  
              ??_LCD_WriteCmd 004A                ?_LCD_WriteData 0070                   ?_USART_Init 0059  
       i1TIMER0_Set@contagens 0070               __initialization 0015                  __end_of_main 04E9  
                      ??_main 00D8                  ?_TIMER0_Init 0070             __end_of_LCD_Clear 0FCA  
                      _ADRESH 001E                        _ADRESL 009E                        _EEDATA 010C  
                      _CCPR1L 0015                        _CCPR2L 001B                        _EECON2 018D  
                      i1l2222 0E74                        i1l2214 0E65                        i1l2138 0EC8  
                      i1l2610 07C0                        i1l2620 07E1                        i1l2616 07D6  
                      i1l2608 07B2                        i1l2810 0280                        i1l2820 029C  
                      i1l2804 0269                        i1l2832 02C6                        i1l2850 030B  
                      i1l2588 0EED                        i1l2844 02F4                        i1l2862 0339  
                      i1l2838 02DD                        i1l2856 0322                        i1l2864 033C  
                      i1l2890 038D                        i1l2876 0357                        i1l2798 0252  
                      i1l2888 038C                        u261_25 07B5                        u255_25 0E88  
                      u263_25 07C1                        u264_25 07CD                        u265_25 07D7  
                      u257_25 0EF6                        u258_25 0EFD           __size_of_TIMER0_Set 0006  
                      _SSPADD 0093                        _SSPBUF 0013              LCD_WriteCmd@Byte 004B  
         i1_USART_WriteString 0EC8                     ??___aldiv 0052                        ___wmul 0F7C  
              _PWM_DutyCycle1 0E92                _PWM_DutyCycle2 0EAD              ?_USART_WriteChar 0070  
                      _deltaV 0040                     ??___lwdiv 004E                     ??___lwmod 0056  
                      _fitemp 0023         USART_ReceiveChar@byte 0074                        _pulsos 0042  
                      _status 00B8             __end_ofi1___lwdiv 07E8                     ??_isdigit 004A  
                   ?_ADC_Init 0070                        saved_w 007E          ?i1_USART_WriteString 0071  
         __size_of_USART_Init 004B                     ??_sprintf 005C                 ?i1_TIMER0_Set 0070  
     __end_of__initialization 0058                     ?_LCD_Init 0070               ??_LCD_WriteData 004A  
      __end_of_PWM_DutyCycle1 0EAD        __end_of_PWM_DutyCycle2 0EC8                __pcstackCOMMON 0070  
                __pidataBANK0 07FE                  __pidataBANK1 0E05                 LCD_Cursor@Col 004A  
               LCD_Cursor@Row 004C                  ??_LCD_Cursor 004B               _LCD_WriteString 0F32  
                   ?_PWM_Init 0070                     ?i1___wmul 0078                _OPTION_REGbits 0081  
                  ??_ADC_Init 004A          __end_of_LCD_WriteCmd 0E3D         ??i1_USART_WriteString 0073  
   __size_ofi1_PWM_DutyCycle2 001B                ??i1_TIMER0_Set 0070                  sprintf@width 0066  
                  __pbssBANK0 0020                    __pbssBANK1 00A0            __end_of_LCD_Cursor 07FE  
                  ??_LCD_Init 004C         i1USART_WriteChar@byte 0070               ?_PWM_DutyCycle1 004A  
             ?_PWM_DutyCycle2 004A                    __pmaintext 039E                       ?___wmul 004A  
                  __pintentry 0004                  ??_TIMER0_Set 004A                       _CCP1CON 0017  
                     _CCP2CON 001D                    ??_PWM_Init 004A                    ??i1___wmul 007C  
        __size_of_TIMER0_Init 000B       _posicao_do_grafico_food 00AC                       _SSPCON2 0091  
                  __stringtab 0500                    _fisetpoint 00A3            __end_of_TIMER0_Set 0E05  
     __end_of_LCD_WriteString 0F57                     _ADCResult 00B2                  ??_USART_Init 005D  
           LCD_WriteData@Byte 004B                       ___aldiv 0623               __size_of___wmul 0025  
                     ___lwdiv 076A                       ___lwmod 0FCA            _posicao_do_grafico 00A9  
                     __ptext1 005C                       __ptext2 0E4C                       __ptext3 0F7C  
                     __ptext4 0FCA                       __ptext5 076A                       __ptext6 0F57  
                     __ptext7 0E13                       __ptext8 071F                       __ptext9 0623  
                  _pas_cooler 006A                  __size_of_ISR 016F                     _T1CONbits 0010  
                     _dpowers 0512             i1___lwdiv@divisor 0070                     _T2CONbits 0012  
                     _isdigit 0E4C             i1___lwdiv@counter 0077              ___aldiv@dividend 004E  
                   _LCD_Clear 0FA1            __end_of_USART_Init 076A                       _sprintf 005C  
                     clrloop0 0E1C          end_of_initialization 0058                     _RCSTAbits 0018  
            ___aldiv@quotient 0055                  __pstringtext 0500          __end_ofi1_TIMER0_Set 0DFF  
       i1___wmul@multiplicand 007A         __size_of_LCD_WriteCmd 000F                     _PORTBbits 0006  
                   _PORTEbits 0009                    ?_LCD_Clear 0070              i1_PWM_DutyCycle2 0E77  
           __size_of_ADC_Init 0012                     i1___lwdiv 07AA                  _contador_rb6 00B4  
         PWM_DutyCycle1@valor 004A                    _total_area 0035           PWM_DutyCycle2@valor 004A  
                 _CCP1CONbits 0017                   _CCP2CONbits 001D                     _TXSTAbits 0098  
            ?_LCD_WriteString 004C             __size_of_LCD_Init 006D                  _LCD_WriteCmd 0E2E  
              __end_of___wmul 0FA1             i1_USART_WriteChar 0E0B            ?i1_USART_WriteChar 0070  
    __size_of_USART_WriteChar 0008             __size_of_PWM_Init 0024           start_initialization 0015  
           __size_ofi1___wmul 0023                   __end_of_ISR 039E           ??i1_USART_WriteChar 0070  
                  ?i1___lwdiv 0070              ??_PWM_DutyCycle1 004C              ??_PWM_DutyCycle2 004C  
       __end_of_LCD_WriteData 0E4C             _USART_ReceiveChar 0E5C            ?_USART_ReceiveChar 0070  
   __end_ofi1_USART_WriteChar 0E13                      ??___wmul 004E                   __pdataBANK0 006A  
                 __pdataBANK1 00D2   __end_ofi1_USART_WriteString 0EEB           ??_USART_ReceiveChar 0073  
                   ___latbits 0002                 __pcstackBANK0 0046                 __pcstackBANK1 00D8  
                 ??_LCD_Clear 004C           __end_of__stringdata 0623                  _isdigit$1455 004A  
                 sprintf@_val 0061                   sprintf@flag 0065                   sprintf@prec 0060  
   __end_of_USART_ReceiveChar 0E77         __size_ofi1_TIMER0_Set 0006              ___lwdiv@dividend 004C  
         TIMER0_Set@contagens 004A                      ?___aldiv 004A                      ?___lwdiv 004A  
                    ?___lwmod 0052                     _ativa_fan 0020                 ??_TIMER0_Init 004A  
          USART_Init@BaudRate 0059                      ?_isdigit 0070                      _ADC_Init 04E9  
                   _fop_rule1 0026                     _fop_rule2 0029                     _fop_rule3 002C  
  _posicao_do_grafico_service 00AF              ___lwdiv@quotient 004F                   ??i1___lwdiv 0074  
                    ?_sprintf 0058             ??_USART_WriteChar 004A                  i1_TIMER0_Set 0DF9  
             ___aldiv@divisor 004A             interrupt_function 0004               ___aldiv@counter 0053  
                    _LCD_Init 06B2                ___wmul@product 004E                     clear_ram0 0E1B  
                    _PIE1bits 008C                      _PIE2bits 008D                      _PIR1bits 000C  
                    _PIR2bits 000D                     _temp_lida 00BA      __end_ofi1_PWM_DutyCycle2 0E92  
                   _tempo_rb6 00BC    __size_ofi1_USART_WriteChar 0008                   _display_rpm 00C8  
                 _display_pwm 00BE                    _ADCON0bits 001F                   __stringbase 0512  
                  _ADCON1bits 009F                   __stringdata 051C                      _PWM_Init 0F0E  
           ___wmul@multiplier 004A                      i1___wmul 0EEB           __end_of_TIMER0_Init 0E2E  
  __size_of_USART_ReceiveChar 001B                    _EECON1bits 018C              __size_of___aldiv 008F  
            __size_of___lwdiv 0040              __size_of___lwmod 0036            __end_of__stringtab 0512  
            __size_of_isdigit 0010               ___lwdiv@divisor 004A               ___lwdiv@counter 0051  
           _USART_WriteString 0F57                      __ptext10 0DFF                      __ptext11 0E23  
                    __ptext20 0E2E                      __ptext12 0F0E                      __ptext21 04E9  
                    __ptext13 0EAD                      __ptext22 022F                      __ptext14 0E92  
                    __ptext23 0EEB                      __ptext15 0F32                      __ptext24 07AA  
                    __ptext16 0E3D                      __ptext25 0DF9                      __ptext17 06B2  
                    __ptext26 0E77                      __ptext18 07E8                      __ptext27 0E5C  
                    __ptext19 0FA1                      __ptext28 0EC8                      __ptext29 0E0B  
          ?_USART_WriteString 004B              __size_of_sprintf 01D3            i1___lwdiv@dividend 0072  
               __size_of_main 014B           USART_WriteChar@byte 004A           ??_USART_WriteString 004D  
      i1USART_WriteString@str 0071                      _setpoint 00D2                    _LCD_Cursor 07E8  
    __size_of_LCD_WriteString 0025            i1___lwdiv@quotient 0075                   _TIMER0_Init 0E23  
                  _INTCONbits 000B     __end_of_USART_WriteString 0F7C                      isdigit@c 004B  
                    intlevel1 0000                     sprintf@ap 005F                     sprintf@sp 0068  
            ___lwmod@dividend 0054                     stringcode 050A          USART_WriteString@str 004B  
                  _TIMER0_Set 0DFF               _USART_WriteChar 0E13                      sprintf@c 0069  
                    sprintf@f 0058               ___lwmod@divisor 0052               ___lwmod@counter 0057  
                    stringtab 0500                  ___aldiv@sign 0054        __size_of_LCD_WriteData 000F  
__size_ofi1_USART_WriteString 0023                   _SSPCON2bits 0091         i1PWM_DutyCycle2@valor 0070  
                  _SSPCONbits 0014                    _USART_Init 071F  
