

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue May 24 17:03:25 2022

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	dabs	1,0x7E,2
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0007                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000D                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0013                     	;# 
    77  0014                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001B                     	;# 
    86  001B                     	;# 
    87  001C                     	;# 
    88  001D                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  0088                     	;# 
    96  0089                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0098                     	;# 
   105  0099                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  009F                     	;# 
   110  010C                     	;# 
   111  010D                     	;# 
   112  010E                     	;# 
   113  010F                     	;# 
   114  018C                     	;# 
   115  018D                     	;# 
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000D                     	;# 
   130  000E                     	;# 
   131  000E                     	;# 
   132  000F                     	;# 
   133  0010                     	;# 
   134  0011                     	;# 
   135  0012                     	;# 
   136  0013                     	;# 
   137  0014                     	;# 
   138  0015                     	;# 
   139  0015                     	;# 
   140  0016                     	;# 
   141  0017                     	;# 
   142  0018                     	;# 
   143  0019                     	;# 
   144  001A                     	;# 
   145  001B                     	;# 
   146  001B                     	;# 
   147  001C                     	;# 
   148  001D                     	;# 
   149  001E                     	;# 
   150  001F                     	;# 
   151  0081                     	;# 
   152  0085                     	;# 
   153  0086                     	;# 
   154  0087                     	;# 
   155  0088                     	;# 
   156  0089                     	;# 
   157  008C                     	;# 
   158  008D                     	;# 
   159  008E                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  010C                     	;# 
   171  010D                     	;# 
   172  010E                     	;# 
   173  010F                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000D                     	;# 
   190  000E                     	;# 
   191  000E                     	;# 
   192  000F                     	;# 
   193  0010                     	;# 
   194  0011                     	;# 
   195  0012                     	;# 
   196  0013                     	;# 
   197  0014                     	;# 
   198  0015                     	;# 
   199  0015                     	;# 
   200  0016                     	;# 
   201  0017                     	;# 
   202  0018                     	;# 
   203  0019                     	;# 
   204  001A                     	;# 
   205  001B                     	;# 
   206  001B                     	;# 
   207  001C                     	;# 
   208  001D                     	;# 
   209  001E                     	;# 
   210  001F                     	;# 
   211  0081                     	;# 
   212  0085                     	;# 
   213  0086                     	;# 
   214  0087                     	;# 
   215  0088                     	;# 
   216  0089                     	;# 
   217  008C                     	;# 
   218  008D                     	;# 
   219  008E                     	;# 
   220  0091                     	;# 
   221  0092                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0098                     	;# 
   225  0099                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  010C                     	;# 
   231  010D                     	;# 
   232  010E                     	;# 
   233  010F                     	;# 
   234  018C                     	;# 
   235  018D                     	;# 
   236  0000                     	;# 
   237  0001                     	;# 
   238  0002                     	;# 
   239  0003                     	;# 
   240  0004                     	;# 
   241  0005                     	;# 
   242  0006                     	;# 
   243  0007                     	;# 
   244  0008                     	;# 
   245  0009                     	;# 
   246  000A                     	;# 
   247  000B                     	;# 
   248  000C                     	;# 
   249  000D                     	;# 
   250  000E                     	;# 
   251  000E                     	;# 
   252  000F                     	;# 
   253  0010                     	;# 
   254  0011                     	;# 
   255  0012                     	;# 
   256  0013                     	;# 
   257  0014                     	;# 
   258  0015                     	;# 
   259  0015                     	;# 
   260  0016                     	;# 
   261  0017                     	;# 
   262  0018                     	;# 
   263  0019                     	;# 
   264  001A                     	;# 
   265  001B                     	;# 
   266  001B                     	;# 
   267  001C                     	;# 
   268  001D                     	;# 
   269  001E                     	;# 
   270  001F                     	;# 
   271  0081                     	;# 
   272  0085                     	;# 
   273  0086                     	;# 
   274  0087                     	;# 
   275  0088                     	;# 
   276  0089                     	;# 
   277  008C                     	;# 
   278  008D                     	;# 
   279  008E                     	;# 
   280  0091                     	;# 
   281  0092                     	;# 
   282  0093                     	;# 
   283  0094                     	;# 
   284  0098                     	;# 
   285  0099                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010E                     	;# 
   293  010F                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  000E                     	;# 
   312  000F                     	;# 
   313  0010                     	;# 
   314  0011                     	;# 
   315  0012                     	;# 
   316  0013                     	;# 
   317  0014                     	;# 
   318  0015                     	;# 
   319  0015                     	;# 
   320  0016                     	;# 
   321  0017                     	;# 
   322  0018                     	;# 
   323  0019                     	;# 
   324  001A                     	;# 
   325  001B                     	;# 
   326  001B                     	;# 
   327  001C                     	;# 
   328  001D                     	;# 
   329  001E                     	;# 
   330  001F                     	;# 
   331  0081                     	;# 
   332  0085                     	;# 
   333  0086                     	;# 
   334  0087                     	;# 
   335  0088                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  0091                     	;# 
   341  0092                     	;# 
   342  0093                     	;# 
   343  0094                     	;# 
   344  0098                     	;# 
   345  0099                     	;# 
   346  009C                     	;# 
   347  009D                     	;# 
   348  009E                     	;# 
   349  009F                     	;# 
   350  010C                     	;# 
   351  010D                     	;# 
   352  010E                     	;# 
   353  010F                     	;# 
   354  018C                     	;# 
   355  018D                     	;# 
   356  0000                     	;# 
   357  0001                     	;# 
   358  0002                     	;# 
   359  0003                     	;# 
   360  0004                     	;# 
   361  0005                     	;# 
   362  0006                     	;# 
   363  0007                     	;# 
   364  0008                     	;# 
   365  0009                     	;# 
   366  000A                     	;# 
   367  000B                     	;# 
   368  000C                     	;# 
   369  000D                     	;# 
   370  000E                     	;# 
   371  000E                     	;# 
   372  000F                     	;# 
   373  0010                     	;# 
   374  0011                     	;# 
   375  0012                     	;# 
   376  0013                     	;# 
   377  0014                     	;# 
   378  0015                     	;# 
   379  0015                     	;# 
   380  0016                     	;# 
   381  0017                     	;# 
   382  0018                     	;# 
   383  0019                     	;# 
   384  001A                     	;# 
   385  001B                     	;# 
   386  001B                     	;# 
   387  001C                     	;# 
   388  001D                     	;# 
   389  001E                     	;# 
   390  001F                     	;# 
   391  0081                     	;# 
   392  0085                     	;# 
   393  0086                     	;# 
   394  0087                     	;# 
   395  0088                     	;# 
   396  0089                     	;# 
   397  008C                     	;# 
   398  008D                     	;# 
   399  008E                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0094                     	;# 
   404  0098                     	;# 
   405  0099                     	;# 
   406  009C                     	;# 
   407  009D                     	;# 
   408  009E                     	;# 
   409  009F                     	;# 
   410  010C                     	;# 
   411  010D                     	;# 
   412  010E                     	;# 
   413  010F                     	;# 
   414  018C                     	;# 
   415  018D                     	;# 
   416  0000                     	;# 
   417  0001                     	;# 
   418  0002                     	;# 
   419  0003                     	;# 
   420  0004                     	;# 
   421  0005                     	;# 
   422  0006                     	;# 
   423  0007                     	;# 
   424  0008                     	;# 
   425  0009                     	;# 
   426  000A                     	;# 
   427  000B                     	;# 
   428  000C                     	;# 
   429  000D                     	;# 
   430  000E                     	;# 
   431  000E                     	;# 
   432  000F                     	;# 
   433  0010                     	;# 
   434  0011                     	;# 
   435  0012                     	;# 
   436  0013                     	;# 
   437  0014                     	;# 
   438  0015                     	;# 
   439  0015                     	;# 
   440  0016                     	;# 
   441  0017                     	;# 
   442  0018                     	;# 
   443  0019                     	;# 
   444  001A                     	;# 
   445  001B                     	;# 
   446  001B                     	;# 
   447  001C                     	;# 
   448  001D                     	;# 
   449  001E                     	;# 
   450  001F                     	;# 
   451  0081                     	;# 
   452  0085                     	;# 
   453  0086                     	;# 
   454  0087                     	;# 
   455  0088                     	;# 
   456  0089                     	;# 
   457  008C                     	;# 
   458  008D                     	;# 
   459  008E                     	;# 
   460  0091                     	;# 
   461  0092                     	;# 
   462  0093                     	;# 
   463  0094                     	;# 
   464  0098                     	;# 
   465  0099                     	;# 
   466  009C                     	;# 
   467  009D                     	;# 
   468  009E                     	;# 
   469  009F                     	;# 
   470  010C                     	;# 
   471  010D                     	;# 
   472  010E                     	;# 
   473  010F                     	;# 
   474  018C                     	;# 
   475  018D                     	;# 
   476  0000                     	;# 
   477  0001                     	;# 
   478  0002                     	;# 
   479  0003                     	;# 
   480  0004                     	;# 
   481  0005                     	;# 
   482  0006                     	;# 
   483  0007                     	;# 
   484  0008                     	;# 
   485  0009                     	;# 
   486  000A                     	;# 
   487  000B                     	;# 
   488  000C                     	;# 
   489  000D                     	;# 
   490  000E                     	;# 
   491  000E                     	;# 
   492  000F                     	;# 
   493  0010                     	;# 
   494  0011                     	;# 
   495  0012                     	;# 
   496  0013                     	;# 
   497  0014                     	;# 
   498  0015                     	;# 
   499  0015                     	;# 
   500  0016                     	;# 
   501  0017                     	;# 
   502  0018                     	;# 
   503  0019                     	;# 
   504  001A                     	;# 
   505  001B                     	;# 
   506  001B                     	;# 
   507  001C                     	;# 
   508  001D                     	;# 
   509  001E                     	;# 
   510  001F                     	;# 
   511  0081                     	;# 
   512  0085                     	;# 
   513  0086                     	;# 
   514  0087                     	;# 
   515  0088                     	;# 
   516  0089                     	;# 
   517  008C                     	;# 
   518  008D                     	;# 
   519  008E                     	;# 
   520  0091                     	;# 
   521  0092                     	;# 
   522  0093                     	;# 
   523  0094                     	;# 
   524  0098                     	;# 
   525  0099                     	;# 
   526  009C                     	;# 
   527  009D                     	;# 
   528  009E                     	;# 
   529  009F                     	;# 
   530  010C                     	;# 
   531  010D                     	;# 
   532  010E                     	;# 
   533  010F                     	;# 
   534  018C                     	;# 
   535  018D                     	;# 
   536  0000                     	;# 
   537  0001                     	;# 
   538  0002                     	;# 
   539  0003                     	;# 
   540  0004                     	;# 
   541  0005                     	;# 
   542  0006                     	;# 
   543  0007                     	;# 
   544  0008                     	;# 
   545  0009                     	;# 
   546  000A                     	;# 
   547  000B                     	;# 
   548  000C                     	;# 
   549  000D                     	;# 
   550  000E                     	;# 
   551  000E                     	;# 
   552  000F                     	;# 
   553  0010                     	;# 
   554  0011                     	;# 
   555  0012                     	;# 
   556  0013                     	;# 
   557  0014                     	;# 
   558  0015                     	;# 
   559  0015                     	;# 
   560  0016                     	;# 
   561  0017                     	;# 
   562  0018                     	;# 
   563  0019                     	;# 
   564  001A                     	;# 
   565  001B                     	;# 
   566  001B                     	;# 
   567  001C                     	;# 
   568  001D                     	;# 
   569  001E                     	;# 
   570  001F                     	;# 
   571  0081                     	;# 
   572  0085                     	;# 
   573  0086                     	;# 
   574  0087                     	;# 
   575  0088                     	;# 
   576  0089                     	;# 
   577  008C                     	;# 
   578  008D                     	;# 
   579  008E                     	;# 
   580  0091                     	;# 
   581  0092                     	;# 
   582  0093                     	;# 
   583  0094                     	;# 
   584  0098                     	;# 
   585  0099                     	;# 
   586  009C                     	;# 
   587  009D                     	;# 
   588  009E                     	;# 
   589  009F                     	;# 
   590  010C                     	;# 
   591  010D                     	;# 
   592  010E                     	;# 
   593  010F                     	;# 
   594  018C                     	;# 
   595  018D                     	;# 
   596                           
   597                           	psect	idataBANK0
   598  0984                     __pidataBANK0:	
   599                           
   600                           ;initializer for _pas_cooler
   601  0984  3407               	retlw	7
   602  0985  3400               	retlw	0
   603                           
   604                           	psect	idataBANK1
   605  0982                     __pidataBANK1:	
   606                           
   607                           ;initializer for _tf
   608  0982  3414               	retlw	20
   609  0983  3400               	retlw	0
   610                           
   611                           	psect	stringtext
   612  1000                     __pstringtext:	
   613  1000                     stringtab:	
   614  1000                     __stringtab:	
   615                           
   616                           ;	String table - string pointers are 2 bytes each
   617  1000  1BFF               	btfsc	btemp+1,7
   618  1001  280A               	ljmp	stringcode
   619  1002  1383               	bcf	3,7
   620  1003  187F               	btfsc	btemp+1,0
   621  1004  1783               	bsf	3,7
   622  1005  0800               	movf	0,w
   623  1006  0A84               	incf	4,f
   624  1007  1903               	skipnz
   625  1008  0AFF               	incf	btemp+1,f
   626  1009  0008               	return
   627  100A                     stringcode:	
   628  100A  087F               	movf	btemp+1,w
   629  100B  397F               	andlw	127
   630  100C  008A               	movwf	10
   631  100D  0804               	movf	4,w
   632  100E  0A84               	incf	4,f
   633  100F  1903               	skipnz
   634  1010  0AFF               	incf	btemp+1,f
   635  1011  0082               	movwf	2
   636  1012                     __stringbase:	
   637  1012                     __end_of__stringtab:	
   638  1012                     _dpowers:	
   639  1012  3401               	retlw	1
   640  1013  3400               	retlw	0
   641  1014  340A               	retlw	10
   642  1015  3400               	retlw	0
   643  1016  3464               	retlw	100
   644  1017  3400               	retlw	0
   645  1018  34E8               	retlw	232
   646  1019  3403               	retlw	3
   647  101A  3410               	retlw	16
   648  101B  3427               	retlw	39
   649  101C                     __end_of_dpowers:	
   650  000E                     _TMR1	set	14
   651  001F                     _ADCON0bits	set	31
   652  001E                     _ADRESH	set	30
   653  0017                     _CCP1CON	set	23
   654  0017                     _CCP1CONbits	set	23
   655  001D                     _CCP2CON	set	29
   656  001D                     _CCP2CONbits	set	29
   657  0015                     _CCPR1L	set	21
   658  001B                     _CCPR2L	set	27
   659  000B                     _INTCONbits	set	11
   660  000C                     _PIR1bits	set	12
   661  000D                     _PIR2bits	set	13
   662  0005                     _PORTA	set	5
   663  0006                     _PORTB	set	6
   664  0006                     _PORTBbits	set	6
   665  0007                     _PORTC	set	7
   666  0008                     _PORTD	set	8
   667  0009                     _PORTE	set	9
   668  0009                     _PORTEbits	set	9
   669  001A                     _RCREG	set	26
   670  0018                     _RCSTAbits	set	24
   671  0013                     _SSPBUF	set	19
   672  0014                     _SSPCONbits	set	20
   673  0010                     _T1CON	set	16
   674  0010                     _T1CONbits	set	16
   675  0012                     _T2CONbits	set	18
   676  0001                     _TMR0	set	1
   677  000F                     _TMR1H	set	15
   678  000E                     _TMR1L	set	14
   679  0019                     _TXREG	set	25
   680  00C1                     _OERR	set	193
   681  009F                     _ADCON1bits	set	159
   682  009E                     _ADRESL	set	158
   683  0081                     _OPTION_REGbits	set	129
   684  008C                     _PIE1bits	set	140
   685  008D                     _PIE2bits	set	141
   686  0092                     _PR2	set	146
   687  0099                     _SPBRG	set	153
   688  0093                     _SSPADD	set	147
   689  0091                     _SSPCON2	set	145
   690  0091                     _SSPCON2bits	set	145
   691  0094                     _SSPSTATbits	set	148
   692  0085                     _TRISA	set	133
   693  0086                     _TRISB	set	134
   694  0087                     _TRISC	set	135
   695  0088                     _TRISD	set	136
   696  0089                     _TRISE	set	137
   697  0098                     _TXSTAbits	set	152
   698  010D                     _EEADR	set	269
   699  010C                     _EEDATA	set	268
   700  018C                     _EECON1bits	set	396
   701  018D                     _EECON2	set	397
   702  101C                     __stringdata:	
   703  101C                     STR_19:	
   704  101C  340A               	retlw	10
   705  101D  340D               	retlw	13
   706  101E  3420               	retlw	32	;' '
   707  101F  342D               	retlw	45	;'-'
   708  1020  342D               	retlw	45	;'-'
   709  1021  342D               	retlw	45	;'-'
   710  1022  342D               	retlw	45	;'-'
   711  1023  342D               	retlw	45	;'-'
   712  1024  342D               	retlw	45	;'-'
   713  1025  342D               	retlw	45	;'-'
   714  1026  3420               	retlw	32	;' '
   715  1027  3445               	retlw	69	;'E'
   716  1028  3453               	retlw	83	;'S'
   717  1029  3454               	retlw	84	;'T'
   718  102A  344F               	retlw	79	;'O'
   719  102B  3455               	retlw	85	;'U'
   720  102C  3452               	retlw	82	;'R'
   721  102D  344F               	retlw	79	;'O'
   722  102E  3420               	retlw	32	;' '
   723  102F  3444               	retlw	68	;'D'
   724  1030  3445               	retlw	69	;'E'
   725  1031  3420               	retlw	32	;' '
   726  1032  3450               	retlw	80	;'P'
   727  1033  3449               	retlw	73	;'I'
   728  1034  344C               	retlw	76	;'L'
   729  1035  3448               	retlw	72	;'H'
   730  1036  3441               	retlw	65	;'A'
   731  1037  3420               	retlw	32	;' '
   732  1038  342D               	retlw	45	;'-'
   733  1039  342D               	retlw	45	;'-'
   734  103A  342D               	retlw	45	;'-'
   735  103B  342D               	retlw	45	;'-'
   736  103C  342D               	retlw	45	;'-'
   737  103D  342D               	retlw	45	;'-'
   738  103E  342D               	retlw	45	;'-'
   739  103F  3420               	retlw	32	;' '
   740  1040  340A               	retlw	10
   741  1041  340D               	retlw	13
   742  1042  3420               	retlw	32	;' '
   743  1043  3400               	retlw	0
   744  1044                     STR_11:	
   745  1044  3449               	retlw	73	;'I'
   746  1045  346E               	retlw	110	;'n'
   747  1046  3469               	retlw	105	;'i'
   748  1047  3463               	retlw	99	;'c'
   749  1048  3469               	retlw	105	;'i'
   750  1049  3461               	retlw	97	;'a'
   751  104A  346C               	retlw	108	;'l'
   752  104B  3469               	retlw	105	;'i'
   753  104C  347A               	retlw	122	;'z'
   754  104D  3461               	retlw	97	;'a'
   755  104E  346E               	retlw	110	;'n'
   756  104F  3464               	retlw	100	;'d'
   757  1050  346F               	retlw	111	;'o'
   758  1051  3420               	retlw	32	;' '
   759  1052  346F               	retlw	111	;'o'
   760  1053  3420               	retlw	32	;' '
   761  1054  3450               	retlw	80	;'P'
   762  1055  3449               	retlw	73	;'I'
   763  1056  3443               	retlw	67	;'C'
   764  1057  3431               	retlw	49	;'1'
   765  1058  3436               	retlw	54	;'6'
   766  1059  3446               	retlw	70	;'F'
   767  105A  3438               	retlw	56	;'8'
   768  105B  3437               	retlw	55	;'7'
   769  105C  3437               	retlw	55	;'7'
   770  105D  3441               	retlw	65	;'A'
   771  105E  340A               	retlw	10
   772  105F  340D               	retlw	13
   773  1060  3400               	retlw	0
   774  1061                     STR_12:	
   775  1061  3455               	retlw	85	;'U'
   776  1062  3453               	retlw	83	;'S'
   777  1063  3441               	retlw	65	;'A'
   778  1064  3452               	retlw	82	;'R'
   779  1065  3454               	retlw	84	;'T'
   780  1066  343A               	retlw	58	;':'
   781  1067  3420               	retlw	32	;' '
   782  1068  3431               	retlw	49	;'1'
   783  1069  3431               	retlw	49	;'1'
   784  106A  3435               	retlw	53	;'5'
   785  106B  342E               	retlw	46	;'.'
   786  106C  3432               	retlw	50	;'2'
   787  106D  3430               	retlw	48	;'0'
   788  106E  3430               	retlw	48	;'0'
   789  106F  3462               	retlw	98	;'b'
   790  1070  3470               	retlw	112	;'p'
   791  1071  3473               	retlw	115	;'s'
   792  1072  340A               	retlw	10
   793  1073  340D               	retlw	13
   794  1074  3400               	retlw	0
   795  1075                     STR_13:	
   796  1075  3449               	retlw	73	;'I'
   797  1076  346E               	retlw	110	;'n'
   798  1077  3469               	retlw	105	;'i'
   799  1078  3463               	retlw	99	;'c'
   800  1079  3469               	retlw	105	;'i'
   801  107A  3461               	retlw	97	;'a'
   802  107B  346C               	retlw	108	;'l'
   803  107C  3469               	retlw	105	;'i'
   804  107D  347A               	retlw	122	;'z'
   805  107E  3461               	retlw	97	;'a'
   806  107F  346E               	retlw	110	;'n'
   807  1080  3464               	retlw	100	;'d'
   808  1081  346F               	retlw	111	;'o'
   809  1082  342E               	retlw	46	;'.'
   810  1083  342E               	retlw	46	;'.'
   811  1084  342E               	retlw	46	;'.'
   812  1085  3400               	retlw	0
   813  1086                     STR_9:	
   814  1086  340A               	retlw	10
   815  1087  340D               	retlw	13
   816  1088  3470               	retlw	112	;'p'
   817  1089  3477               	retlw	119	;'w'
   818  108A  346D               	retlw	109	;'m'
   819  108B  3420               	retlw	32	;' '
   820  108C  343D               	retlw	61	;'='
   821  108D  3420               	retlw	32	;' '
   822  108E  3431               	retlw	49	;'1'
   823  108F  3430               	retlw	48	;'0'
   824  1090  3430               	retlw	48	;'0'
   825  1091  3430               	retlw	48	;'0'
   826  1092  340A               	retlw	10
   827  1093  340D               	retlw	13
   828  1094  3400               	retlw	0
   829  1095                     STR_10:	
   830  1095  340A               	retlw	10
   831  1096  340D               	retlw	13
   832  1097  3470               	retlw	112	;'p'
   833  1098  3477               	retlw	119	;'w'
   834  1099  346D               	retlw	109	;'m'
   835  109A  3420               	retlw	32	;' '
   836  109B  343D               	retlw	61	;'='
   837  109C  3420               	retlw	32	;' '
   838  109D  3431               	retlw	49	;'1'
   839  109E  3430               	retlw	48	;'0'
   840  109F  3432               	retlw	50	;'2'
   841  10A0  3433               	retlw	51	;'3'
   842  10A1  340A               	retlw	10
   843  10A2  340D               	retlw	13
   844  10A3  3400               	retlw	0
   845  10A4                     STR_6:	
   846  10A4  340A               	retlw	10
   847  10A5  340D               	retlw	13
   848  10A6  3470               	retlw	112	;'p'
   849  10A7  3477               	retlw	119	;'w'
   850  10A8  346D               	retlw	109	;'m'
   851  10A9  3420               	retlw	32	;' '
   852  10AA  343D               	retlw	61	;'='
   853  10AB  3420               	retlw	32	;' '
   854  10AC  3435               	retlw	53	;'5'
   855  10AD  3431               	retlw	49	;'1'
   856  10AE  3432               	retlw	50	;'2'
   857  10AF  340A               	retlw	10
   858  10B0  340D               	retlw	13
   859  10B1  3400               	retlw	0
   860  10B2                     STR_5:	
   861  10B2  340A               	retlw	10
   862  10B3  340D               	retlw	13
   863  10B4  3470               	retlw	112	;'p'
   864  10B5  3477               	retlw	119	;'w'
   865  10B6  346D               	retlw	109	;'m'
   866  10B7  3420               	retlw	32	;' '
   867  10B8  343D               	retlw	61	;'='
   868  10B9  3420               	retlw	32	;' '
   869  10BA  3432               	retlw	50	;'2'
   870  10BB  3435               	retlw	53	;'5'
   871  10BC  3436               	retlw	54	;'6'
   872  10BD  340A               	retlw	10
   873  10BE  340D               	retlw	13
   874  10BF  3400               	retlw	0
   875  10C0                     STR_8:	
   876  10C0  340A               	retlw	10
   877  10C1  340D               	retlw	13
   878  10C2  3470               	retlw	112	;'p'
   879  10C3  3477               	retlw	119	;'w'
   880  10C4  346D               	retlw	109	;'m'
   881  10C5  3420               	retlw	32	;' '
   882  10C6  343D               	retlw	61	;'='
   883  10C7  3420               	retlw	32	;' '
   884  10C8  3438               	retlw	56	;'8'
   885  10C9  3439               	retlw	57	;'9'
   886  10CA  3436               	retlw	54	;'6'
   887  10CB  340A               	retlw	10
   888  10CC  340D               	retlw	13
   889  10CD  3400               	retlw	0
   890  10CE                     STR_4:	
   891  10CE  340A               	retlw	10
   892  10CF  340D               	retlw	13
   893  10D0  3470               	retlw	112	;'p'
   894  10D1  3477               	retlw	119	;'w'
   895  10D2  346D               	retlw	109	;'m'
   896  10D3  3420               	retlw	32	;' '
   897  10D4  343D               	retlw	61	;'='
   898  10D5  3420               	retlw	32	;' '
   899  10D6  3431               	retlw	49	;'1'
   900  10D7  3432               	retlw	50	;'2'
   901  10D8  3438               	retlw	56	;'8'
   902  10D9  340A               	retlw	10
   903  10DA  340D               	retlw	13
   904  10DB  3400               	retlw	0
   905  10DC                     STR_7:	
   906  10DC  340A               	retlw	10
   907  10DD  340D               	retlw	13
   908  10DE  3470               	retlw	112	;'p'
   909  10DF  3477               	retlw	119	;'w'
   910  10E0  346D               	retlw	109	;'m'
   911  10E1  3420               	retlw	32	;' '
   912  10E2  343D               	retlw	61	;'='
   913  10E3  3420               	retlw	32	;' '
   914  10E4  3437               	retlw	55	;'7'
   915  10E5  3436               	retlw	54	;'6'
   916  10E6  3438               	retlw	56	;'8'
   917  10E7  340A               	retlw	10
   918  10E8  340D               	retlw	13
   919  10E9  3400               	retlw	0
   920  10EA                     STR_1:	
   921  10EA  340A               	retlw	10
   922  10EB  340D               	retlw	13
   923  10EC  3464               	retlw	100	;'d'
   924  10ED  3465               	retlw	101	;'e'
   925  10EE  3473               	retlw	115	;'s'
   926  10EF  346C               	retlw	108	;'l'
   927  10F0  3469               	retlw	105	;'i'
   928  10F1  3467               	retlw	103	;'g'
   929  10F2  3461               	retlw	97	;'a'
   930  10F3  3464               	retlw	100	;'d'
   931  10F4  346F               	retlw	111	;'o'
   932  10F5  340A               	retlw	10
   933  10F6  340D               	retlw	13
   934  10F7  3400               	retlw	0
   935  10F8                     STR_2:	
   936  10F8  340A               	retlw	10
   937  10F9  340D               	retlw	13
   938  10FA  3470               	retlw	112	;'p'
   939  10FB  3477               	retlw	119	;'w'
   940  10FC  346D               	retlw	109	;'m'
   941  10FD  3420               	retlw	32	;' '
   942  10FE  343D               	retlw	61	;'='
   943  10FF  3420               	retlw	32	;' '
   944  1100  3433               	retlw	51	;'3'
   945  1101  3432               	retlw	50	;'2'
   946  1102  340A               	retlw	10
   947  1103  340D               	retlw	13
   948  1104  3400               	retlw	0
   949  1105                     STR_3:	
   950  1105  340A               	retlw	10
   951  1106  340D               	retlw	13
   952  1107  3470               	retlw	112	;'p'
   953  1108  3477               	retlw	119	;'w'
   954  1109  346D               	retlw	109	;'m'
   955  110A  3420               	retlw	32	;' '
   956  110B  343D               	retlw	61	;'='
   957  110C  3420               	retlw	32	;' '
   958  110D  3436               	retlw	54	;'6'
   959  110E  3434               	retlw	52	;'4'
   960  110F  340A               	retlw	10
   961  1110  340D               	retlw	13
   962  1111  3400               	retlw	0
   963  1112                     STR_18:	
   964  1112  3450               	retlw	80	;'P'
   965  1113  3457               	retlw	87	;'W'
   966  1114  344D               	retlw	77	;'M'
   967  1115  343A               	retlw	58	;':'
   968  1116  3420               	retlw	32	;' '
   969  1117  3400               	retlw	0
   970  1118                     STR_17:	
   971  1118  3444               	retlw	68	;'D'
   972  1119  346C               	retlw	108	;'l'
   973  111A  3456               	retlw	86	;'V'
   974  111B  343A               	retlw	58	;':'
   975  111C  3420               	retlw	32	;' '
   976  111D  3400               	retlw	0
   977  111E                     STR_14:	
   978  111E  3425               	retlw	37	;'%'
   979  111F  3430               	retlw	48	;'0'
   980  1120  3434               	retlw	52	;'4'
   981  1121  3464               	retlw	100	;'d'
   982  1122  3400               	retlw	0
   983  1123                     __end_of__stringdata:	
   984                           
   985                           ; #config settings
   986  0000                     
   987                           	psect	cinit
   988  0015                     start_initialization:	
   989  0015                     __initialization:	
   990                           
   991                           ; Clear objects allocated to BANK0
   992  0015  1383               	bcf	3,7	;select IRP bank0
   993  0016  3041               	movlw	low __pbssBANK0
   994  0017  0084               	movwf	4
   995  0018  3057               	movlw	low (__pbssBANK0+22)
   996  0019  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   997                           
   998                           ; Clear objects allocated to BANK1
   999  001E  30A0               	movlw	low __pbssBANK1
  1000  001F  0084               	movwf	4
  1001  0020  30D8               	movlw	low (__pbssBANK1+56)
  1002  0021  120A  118A  27F8  120A  118A  	fcall	clear_ram0
  1003                           
  1004                           ; Initialize objects allocated to BANK1
  1005  0026  1683               	bsf	3,5	;RP0=1, select bank1
  1006  0027  1303               	bcf	3,6	;RP1=0, select bank1
  1007  0028  120A  158A  2182  120A  118A  	fcall	__pidataBANK1	;fetch initializer
  1008  002D  00EE               	movwf	__pdataBANK1& (0+127)
  1009  002E  120A  158A  2183  120A  118A  	fcall	__pidataBANK1+1	;fetch initializer
  1010  0033  00EF               	movwf	(__pdataBANK1+1)& (0+127)
  1011                           
  1012                           ; Initialize objects allocated to BANK0
  1013  0034  1283               	bcf	3,5	;RP0=0, select bank0
  1014  0035  1303               	bcf	3,6	;RP1=0, select bank0
  1015  0036  120A  158A  2184  120A  118A  	fcall	__pidataBANK0	;fetch initializer
  1016  003B  00D7               	movwf	__pdataBANK0& (0+127)
  1017  003C  120A  158A  2185   	fcall	__pidataBANK0+1	;fetch initializer
  1018  003F  00D8               	movwf	(__pdataBANK0+1)& (0+127)
  1019  0040                     end_of_initialization:	
  1020                           ;End of C runtime variable initialization code
  1021                           
  1022  0040                     __end_of__initialization:	
  1023  0040  0183               	clrf	3
  1024  0041  120A  158A  2EA3   	ljmp	_main	;jump to C main() function
  1025                           
  1026                           	psect	bssBANK0
  1027  0041                     __pbssBANK0:	
  1028  0041                     _ativa_fan:	
  1029  0041                     	ds	2
  1030  0043                     _deltaV:	
  1031  0043                     	ds	2
  1032  0045                     _fitemp:	
  1033  0045                     	ds	2
  1034  0047                     _fop_rule1:	
  1035  0047                     	ds	2
  1036  0049                     _pwm:	
  1037  0049                     	ds	2
  1038  004B                     _pwmAnt:	
  1039  004B                     	ds	2
  1040  004D                     _temp:	
  1041  004D                     	ds	2
  1042  004F                     _tip:	
  1043  004F                     	ds	2
  1044  0051                     _total_area:	
  1045  0051                     	ds	2
  1046  0053                     _x:	
  1047  0053                     	ds	2
  1048  0055                     _y:	
  1049  0055                     	ds	2
  1050                           
  1051                           	psect	dataBANK0
  1052  0057                     __pdataBANK0:	
  1053  0057                     _pas_cooler:	
  1054  0057                     	ds	2
  1055                           
  1056                           	psect	bssBANK1
  1057  00A0                     __pbssBANK1:	
  1058  00A0                     _ADCResult:	
  1059  00A0                     	ds	2
  1060  00A2                     _contador_rb6:	
  1061  00A2                     	ds	2
  1062  00A4                     _contagens_tm0:	
  1063  00A4                     	ds	2
  1064  00A6                     _derro:	
  1065  00A6                     	ds	2
  1066  00A8                     _fisetpoint:	
  1067  00A8                     	ds	2
  1068  00AA                     _foTip:	
  1069  00AA                     	ds	2
  1070  00AC                     _ideal:	
  1071  00AC                     	ds	2
  1072  00AE                     _posicao_do_grafico:	
  1073  00AE                     	ds	2
  1074  00B0                     _posicao_do_grafico_food:	
  1075  00B0                     	ds	2
  1076  00B2                     _posicao_do_grafico_service:	
  1077  00B2                     	ds	2
  1078  00B4                     _pulsos:	
  1079  00B4                     	ds	2
  1080  00B6                     _rpm:	
  1081  00B6                     	ds	2
  1082  00B8                     _status:	
  1083  00B8                     	ds	2
  1084  00BA                     _sum:	
  1085  00BA                     	ds	2
  1086  00BC                     _temp_lida:	
  1087  00BC                     	ds	2
  1088  00BE                     _tempo_rb6:	
  1089  00BE                     	ds	2
  1090  00C0                     _tip_average:	
  1091  00C0                     	ds	2
  1092  00C2                     _tip_gorgeous:	
  1093  00C2                     	ds	2
  1094  00C4                     _display_pwm:	
  1095  00C4                     	ds	10
  1096  00CE                     _display_rpm:	
  1097  00CE                     	ds	10
  1098                           
  1099                           	psect	dataBANK1
  1100  00EE                     __pdataBANK1:	
  1101  00EE                     _tf:	
  1102  00EE                     	ds	2
  1103                           
  1104                           	psect	clrtext
  1105  07F8                     clear_ram0:	
  1106                           ;	Called with FSR containing the base address, and
  1107                           ;	W with the last address+1
  1108                           
  1109  07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
  1110  07F9                     clrloop0:	
  1111  07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
  1112  07FA  0A84               	incf	4,f	;increment pointer
  1113  07FB  0604               	xorwf	4,w	;XOR with final address
  1114  07FC  1903               	btfsc	3,2	;have we reached the end yet?
  1115  07FD  3400               	retlw	0	;all done for this memory range, return
  1116  07FE  0604               	xorwf	4,w	;XOR again to restore value
  1117  07FF  2FF9               	goto	clrloop0	;do the next byte
  1118                           
  1119                           	psect	cstackBANK3
  1120  0190                     __pcstackBANK3:	
  1121  0190                     ??_main:	
  1122                           
  1123                           ; 0 bytes @ 0x0
  1124  0190                     	ds	3
  1125                           
  1126                           	psect	cstackBANK1
  1127  00D8                     __pcstackBANK1:	
  1128  00D8                     ?___lwmod:	
  1129  00D8                     ___aldiv@counter:	
  1130                           ; 2 bytes @ 0x0
  1131                           
  1132  00D8                     ___lwmod@divisor:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135                           
  1136                           ; 2 bytes @ 0x0
  1137  00D8                     	ds	1
  1138  00D9                     ___aldiv@sign:	
  1139                           
  1140                           ; 1 bytes @ 0x1
  1141  00D9                     	ds	1
  1142  00DA                     ___lwmod@dividend:	
  1143  00DA                     ___aldiv@quotient:	
  1144                           ; 2 bytes @ 0x2
  1145                           
  1146                           
  1147                           ; 4 bytes @ 0x2
  1148  00DA                     	ds	2
  1149  00DC                     ?_sprintf:	
  1150  00DC                     sprintf@f:	
  1151                           ; 2 bytes @ 0x4
  1152                           
  1153                           
  1154                           ; 2 bytes @ 0x4
  1155  00DC                     	ds	2
  1156  00DE                     ?_USART_Init:	
  1157  00DE                     USART_Init@BaudRate:	
  1158                           ; 0 bytes @ 0x6
  1159                           
  1160                           
  1161                           ; 4 bytes @ 0x6
  1162  00DE                     	ds	2
  1163  00E0                     ??_sprintf:	
  1164                           
  1165                           ; 0 bytes @ 0x8
  1166  00E0                     	ds	2
  1167  00E2                     ??_USART_Init:	
  1168                           
  1169                           ; 0 bytes @ 0xA
  1170  00E2                     	ds	1
  1171  00E3                     sprintf@ap:	
  1172                           
  1173                           ; 1 bytes @ 0xB
  1174  00E3                     	ds	1
  1175  00E4                     sprintf@prec:	
  1176                           
  1177                           ; 1 bytes @ 0xC
  1178  00E4                     	ds	1
  1179  00E5                     sprintf@_val:	
  1180                           
  1181                           ; 4 bytes @ 0xD
  1182  00E5                     	ds	4
  1183  00E9                     sprintf@flag:	
  1184                           
  1185                           ; 1 bytes @ 0x11
  1186  00E9                     	ds	1
  1187  00EA                     sprintf@width:	
  1188                           
  1189                           ; 2 bytes @ 0x12
  1190  00EA                     	ds	2
  1191  00EC                     sprintf@sp:	
  1192                           
  1193                           ; 1 bytes @ 0x14
  1194  00EC                     	ds	1
  1195  00ED                     sprintf@c:	
  1196                           
  1197                           ; 1 bytes @ 0x15
  1198  00ED                     	ds	1
  1199                           
  1200                           	psect	cstackCOMMON
  1201  0070                     __pcstackCOMMON:	
  1202  0070                     ?_TIMER0_Set:	
  1203  0070                     ?_TIMER0_Init:	
  1204                           ; 0 bytes @ 0x0
  1205                           
  1206  0070                     ?_ADC_Init:	
  1207                           ; 0 bytes @ 0x0
  1208                           
  1209  0070                     ?_PWM_Init:	
  1210                           ; 0 bytes @ 0x0
  1211                           
  1212  0070                     ?_LCD_Init:	
  1213                           ; 0 bytes @ 0x0
  1214                           
  1215  0070                     ?_LCD_Clear:	
  1216                           ; 0 bytes @ 0x0
  1217                           
  1218  0070                     ?_isdigit:	
  1219                           ; 0 bytes @ 0x0
  1220                           
  1221  0070                     ?_ISR:	
  1222                           ; 1 bit 
  1223                           
  1224  0070                     ?_main:	
  1225                           ; 0 bytes @ 0x0
  1226                           
  1227  0070                     ?_USART_WriteChar:	
  1228                           ; 0 bytes @ 0x0
  1229                           
  1230  0070                     ?_LCD_WriteCmd:	
  1231                           ; 0 bytes @ 0x0
  1232                           
  1233  0070                     ?_LCD_WriteData:	
  1234                           ; 0 bytes @ 0x0
  1235                           
  1236  0070                     ?i1_USART_WriteChar:	
  1237                           ; 0 bytes @ 0x0
  1238                           
  1239  0070                     ??i1_USART_WriteChar:	
  1240                           ; 0 bytes @ 0x0
  1241                           
  1242  0070                     ?i1_TIMER0_Set:	
  1243                           ; 0 bytes @ 0x0
  1244                           
  1245  0070                     ??i1_TIMER0_Set:	
  1246                           ; 0 bytes @ 0x0
  1247                           
  1248  0070                     ?i1_PWM_DutyCycle2:	
  1249                           ; 0 bytes @ 0x0
  1250                           
  1251  0070                     ?_USART_ReceiveChar:	
  1252                           ; 0 bytes @ 0x0
  1253                           
  1254  0070                     ?_max_val:	
  1255                           ; 1 bytes @ 0x0
  1256                           
  1257  0070                     ?i1___lwdiv:	
  1258                           ; 2 bytes @ 0x0
  1259                           
  1260  0070                     ?___ftpack:	
  1261                           ; 2 bytes @ 0x0
  1262                           
  1263  0070                     i1USART_WriteChar@byte:	
  1264                           ; 3 bytes @ 0x0
  1265                           
  1266  0070                     i1TIMER0_Set@contagens:	
  1267                           ; 1 bytes @ 0x0
  1268                           
  1269  0070                     max_val@a:	
  1270                           ; 1 bytes @ 0x0
  1271                           
  1272  0070                     i1PWM_DutyCycle2@valor:	
  1273                           ; 2 bytes @ 0x0
  1274                           
  1275  0070                     i1___lwdiv@divisor:	
  1276                           ; 2 bytes @ 0x0
  1277                           
  1278  0070                     ___ftpack@arg:	
  1279                           ; 2 bytes @ 0x0
  1280                           
  1281                           
  1282                           ; 3 bytes @ 0x0
  1283  0070                     	ds	1
  1284  0071                     ?i1_USART_WriteString:	
  1285  0071                     i1USART_WriteString@str:	
  1286                           ; 0 bytes @ 0x1
  1287                           
  1288                           
  1289                           ; 2 bytes @ 0x1
  1290  0071                     	ds	1
  1291  0072                     ??i1_PWM_DutyCycle2:	
  1292  0072                     max_val@b:	
  1293                           ; 0 bytes @ 0x2
  1294                           
  1295  0072                     i1___lwdiv@dividend:	
  1296                           ; 2 bytes @ 0x2
  1297                           
  1298                           
  1299                           ; 2 bytes @ 0x2
  1300  0072                     	ds	1
  1301  0073                     ??_USART_ReceiveChar:	
  1302  0073                     ??i1_USART_WriteString:	
  1303                           ; 0 bytes @ 0x3
  1304                           
  1305  0073                     ___ftpack@exp:	
  1306                           ; 0 bytes @ 0x3
  1307                           
  1308                           
  1309                           ; 1 bytes @ 0x3
  1310  0073                     	ds	1
  1311  0074                     ??_max_val:	
  1312  0074                     ??i1___lwdiv:	
  1313                           ; 0 bytes @ 0x4
  1314                           
  1315  0074                     USART_ReceiveChar@byte:	
  1316                           ; 0 bytes @ 0x4
  1317                           
  1318  0074                     ___ftpack@sign:	
  1319                           ; 1 bytes @ 0x4
  1320                           
  1321                           
  1322                           ; 1 bytes @ 0x4
  1323  0074                     	ds	1
  1324  0075                     ??___ftpack:	
  1325  0075                     i1___lwdiv@quotient:	
  1326                           ; 0 bytes @ 0x5
  1327                           
  1328                           
  1329                           ; 2 bytes @ 0x5
  1330  0075                     	ds	2
  1331  0077                     i1___lwdiv@counter:	
  1332                           
  1333                           ; 1 bytes @ 0x7
  1334  0077                     	ds	1
  1335  0078                     ??_trimf:	
  1336  0078                     ??_trapmf:	
  1337                           ; 0 bytes @ 0x8
  1338                           
  1339  0078                     ?i1___wmul:	
  1340                           ; 0 bytes @ 0x8
  1341                           
  1342  0078                     ?___lwtoft:	
  1343                           ; 2 bytes @ 0x8
  1344                           
  1345  0078                     ___lwtoft@c:	
  1346                           ; 3 bytes @ 0x8
  1347                           
  1348  0078                     i1___wmul@multiplier:	
  1349                           ; 2 bytes @ 0x8
  1350                           
  1351                           
  1352                           ; 2 bytes @ 0x8
  1353  0078                     	ds	2
  1354  007A                     i1___wmul@multiplicand:	
  1355                           
  1356                           ; 2 bytes @ 0xA
  1357  007A                     	ds	1
  1358  007B                     ??___lwtoft:	
  1359                           
  1360                           ; 0 bytes @ 0xB
  1361  007B                     	ds	1
  1362  007C                     ??i1___wmul:	
  1363  007C                     trimf@ua:	
  1364                           ; 0 bytes @ 0xC
  1365                           
  1366  007C                     trapmf@ua:	
  1367                           ; 2 bytes @ 0xC
  1368                           
  1369  007C                     i1___wmul@product:	
  1370                           ; 2 bytes @ 0xC
  1371                           
  1372                           
  1373                           ; 2 bytes @ 0xC
  1374  007C                     	ds	2
  1375                           
  1376                           	psect	cstackBANK0
  1377  0020                     __pcstackBANK0:	
  1378  0020                     ?___ftge:	
  1379  0020                     ?_trimf:	
  1380                           ; 1 bit 
  1381                           
  1382  0020                     ?_trapmf:	
  1383                           ; 2 bytes @ 0x0
  1384                           
  1385  0020                     trimf@x:	
  1386                           ; 2 bytes @ 0x0
  1387                           
  1388  0020                     trapmf@x:	
  1389                           ; 2 bytes @ 0x0
  1390                           
  1391  0020                     ___ftge@ff1:	
  1392                           ; 2 bytes @ 0x0
  1393                           
  1394                           
  1395                           ; 3 bytes @ 0x0
  1396  0020                     	ds	2
  1397  0022                     trimf@a:	
  1398  0022                     trapmf@a:	
  1399                           ; 2 bytes @ 0x2
  1400                           
  1401                           
  1402                           ; 2 bytes @ 0x2
  1403  0022                     	ds	1
  1404  0023                     ___ftge@ff2:	
  1405                           
  1406                           ; 3 bytes @ 0x3
  1407  0023                     	ds	1
  1408  0024                     trimf@b:	
  1409  0024                     trapmf@b:	
  1410                           ; 2 bytes @ 0x4
  1411                           
  1412                           
  1413                           ; 2 bytes @ 0x4
  1414  0024                     	ds	2
  1415  0026                     ??___ftge:	
  1416  0026                     trimf@c:	
  1417                           ; 0 bytes @ 0x6
  1418                           
  1419  0026                     trapmf@c:	
  1420                           ; 2 bytes @ 0x6
  1421                           
  1422                           
  1423                           ; 2 bytes @ 0x6
  1424  0026                     	ds	2
  1425  0028                     trapmf@d:	
  1426                           
  1427                           ; 2 bytes @ 0x8
  1428  0028                     	ds	4
  1429  002C                     ?_Fuzzy:	
  1430  002C                     Fuzzy@setpoint:	
  1431                           ; 0 bytes @ 0xC
  1432                           
  1433                           
  1434                           ; 2 bytes @ 0xC
  1435  002C                     	ds	2
  1436  002E                     ??_Fuzzy:	
  1437                           
  1438                           ; 0 bytes @ 0xE
  1439  002E                     	ds	2
  1440  0030                     Fuzzy@velocidade:	
  1441                           
  1442                           ; 1 bytes @ 0x10
  1443  0030                     	ds	1
  1444  0031                     Fuzzy@sum:	
  1445                           
  1446                           ; 2 bytes @ 0x11
  1447  0031                     	ds	2
  1448  0033                     ??_ISR:	
  1449                           
  1450                           ; 0 bytes @ 0x13
  1451  0033                     	ds	4
  1452  0037                     ?_PWM_DutyCycle2:	
  1453  0037                     ??_TIMER0_Set:	
  1454                           ; 0 bytes @ 0x17
  1455                           
  1456  0037                     ??_TIMER0_Init:	
  1457                           ; 0 bytes @ 0x17
  1458                           
  1459  0037                     ??_ADC_Init:	
  1460                           ; 0 bytes @ 0x17
  1461                           
  1462  0037                     ??_PWM_Init:	
  1463                           ; 0 bytes @ 0x17
  1464                           
  1465  0037                     ?_LCD_Cursor:	
  1466                           ; 0 bytes @ 0x17
  1467                           
  1468  0037                     ?_PWM_DutyCycle1:	
  1469                           ; 0 bytes @ 0x17
  1470                           
  1471  0037                     ??_isdigit:	
  1472                           ; 0 bytes @ 0x17
  1473                           
  1474  0037                     ??_USART_WriteChar:	
  1475                           ; 0 bytes @ 0x17
  1476                           
  1477  0037                     ??_LCD_WriteCmd:	
  1478                           ; 0 bytes @ 0x17
  1479                           
  1480  0037                     ??_LCD_WriteData:	
  1481                           ; 0 bytes @ 0x17
  1482                           
  1483  0037                     ?___wmul:	
  1484                           ; 0 bytes @ 0x17
  1485                           
  1486  0037                     ?___lwdiv:	
  1487                           ; 2 bytes @ 0x17
  1488                           
  1489  0037                     ?___aldiv:	
  1490                           ; 2 bytes @ 0x17
  1491                           
  1492  0037                     USART_WriteChar@byte:	
  1493                           ; 4 bytes @ 0x17
  1494                           
  1495  0037                     TIMER0_Set@contagens:	
  1496                           ; 1 bytes @ 0x17
  1497                           
  1498  0037                     LCD_Cursor@Col:	
  1499                           ; 1 bytes @ 0x17
  1500                           
  1501  0037                     _isdigit$1450:	
  1502                           ; 1 bytes @ 0x17
  1503                           
  1504  0037                     PWM_DutyCycle1@valor:	
  1505                           ; 1 bytes @ 0x17
  1506                           
  1507  0037                     PWM_DutyCycle2@valor:	
  1508                           ; 2 bytes @ 0x17
  1509                           
  1510  0037                     ___wmul@multiplier:	
  1511                           ; 2 bytes @ 0x17
  1512                           
  1513  0037                     ___lwdiv@divisor:	
  1514                           ; 2 bytes @ 0x17
  1515                           
  1516  0037                     ___aldiv@divisor:	
  1517                           ; 2 bytes @ 0x17
  1518                           
  1519                           
  1520                           ; 4 bytes @ 0x17
  1521  0037                     	ds	1
  1522  0038                     ?_USART_WriteString:	
  1523  0038                     ??_LCD_Cursor:	
  1524                           ; 0 bytes @ 0x18
  1525                           
  1526  0038                     LCD_WriteCmd@Byte:	
  1527                           ; 0 bytes @ 0x18
  1528                           
  1529  0038                     LCD_WriteData@Byte:	
  1530                           ; 1 bytes @ 0x18
  1531                           
  1532  0038                     isdigit@c:	
  1533                           ; 1 bytes @ 0x18
  1534                           
  1535  0038                     USART_WriteString@str:	
  1536                           ; 1 bytes @ 0x18
  1537                           
  1538                           
  1539                           ; 2 bytes @ 0x18
  1540  0038                     	ds	1
  1541  0039                     ??_PWM_DutyCycle2:	
  1542  0039                     ??_LCD_Init:	
  1543                           ; 0 bytes @ 0x19
  1544                           
  1545  0039                     ?_LCD_WriteString:	
  1546                           ; 0 bytes @ 0x19
  1547                           
  1548  0039                     ??_PWM_DutyCycle1:	
  1549                           ; 0 bytes @ 0x19
  1550                           
  1551  0039                     ??_LCD_Clear:	
  1552                           ; 0 bytes @ 0x19
  1553                           
  1554  0039                     LCD_Cursor@Row:	
  1555                           ; 0 bytes @ 0x19
  1556                           
  1557  0039                     LCD_WriteString@Str:	
  1558                           ; 1 bytes @ 0x19
  1559                           
  1560  0039                     ___wmul@multiplicand:	
  1561                           ; 2 bytes @ 0x19
  1562                           
  1563  0039                     ___lwdiv@dividend:	
  1564                           ; 2 bytes @ 0x19
  1565                           
  1566                           
  1567                           ; 2 bytes @ 0x19
  1568  0039                     	ds	1
  1569  003A                     ??_USART_WriteString:	
  1570                           
  1571                           ; 0 bytes @ 0x1A
  1572  003A                     	ds	1
  1573  003B                     ??_LCD_WriteString:	
  1574  003B                     ??___wmul:	
  1575                           ; 0 bytes @ 0x1B
  1576                           
  1577  003B                     ??___lwdiv:	
  1578                           ; 0 bytes @ 0x1B
  1579                           
  1580  003B                     ___wmul@product:	
  1581                           ; 0 bytes @ 0x1B
  1582                           
  1583  003B                     ___aldiv@dividend:	
  1584                           ; 2 bytes @ 0x1B
  1585                           
  1586                           
  1587                           ; 4 bytes @ 0x1B
  1588  003B                     	ds	1
  1589  003C                     ___lwdiv@counter:	
  1590                           
  1591                           ; 1 bytes @ 0x1C
  1592  003C                     	ds	1
  1593  003D                     ___lwdiv@quotient:	
  1594                           
  1595                           ; 2 bytes @ 0x1D
  1596  003D                     	ds	2
  1597  003F                     ??___aldiv:	
  1598  003F                     ??___lwmod:	
  1599                           ; 0 bytes @ 0x1F
  1600                           
  1601                           
  1602                           ; 0 bytes @ 0x1F
  1603  003F                     	ds	1
  1604  0040                     ___lwmod@counter:	
  1605                           
  1606                           ; 1 bytes @ 0x20
  1607  0040                     	ds	1
  1608                           
  1609                           	psect	maintext
  1610  0EA3                     __pmaintext:	
  1611 ;;
  1612 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1613 ;;
  1614 ;; *************** function _main *****************
  1615 ;; Defined at:
  1616 ;;		line 487 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;		None
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;		None
  1621 ;; Return value:  Size  Location     Type
  1622 ;;		None               void
  1623 ;; Registers used:
  1624 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1625 ;; Tracked objects:
  1626 ;;		On entry : 17F/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1630 ;;      Params:         0       0       0       0       0
  1631 ;;      Locals:         0       0       0       0       0
  1632 ;;      Temps:          0       0       0       3       0
  1633 ;;      Totals:         0       0       0       3       0
  1634 ;;Total ram usage:        3 bytes
  1635 ;; Hardware stack levels required when called:    6
  1636 ;; This function calls:
  1637 ;;		_ADC_Init
  1638 ;;		_LCD_Clear
  1639 ;;		_LCD_Cursor
  1640 ;;		_LCD_Init
  1641 ;;		_LCD_WriteString
  1642 ;;		_PWM_DutyCycle1
  1643 ;;		_PWM_DutyCycle2
  1644 ;;		_PWM_Init
  1645 ;;		_TIMER0_Init
  1646 ;;		_TIMER0_Set
  1647 ;;		_USART_Init
  1648 ;;		_USART_WriteString
  1649 ;;		_sprintf
  1650 ;; This function is called by:
  1651 ;;		Startup code after reset
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           
  1656                           ;psect for function _main
  1657  0EA3                     _main:	
  1658                           
  1659                           ;main.c: 489: TRISA = 0b00000001;
  1660                           
  1661                           ;incstack = 0
  1662                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1663  0EA3  3001               	movlw	1
  1664  0EA4  1683               	bsf	3,5	;RP0=1, select bank1
  1665  0EA5  1303               	bcf	3,6	;RP1=0, select bank1
  1666  0EA6  0085               	movwf	5	;volatile
  1667                           
  1668                           ;main.c: 490: PORTA = 0b00000001;
  1669  0EA7  3001               	movlw	1
  1670  0EA8  1283               	bcf	3,5	;RP0=0, select bank0
  1671  0EA9  1303               	bcf	3,6	;RP1=0, select bank0
  1672  0EAA  0085               	movwf	5	;volatile
  1673                           
  1674                           ;main.c: 491: TRISB = 0b00000000;
  1675  0EAB  1683               	bsf	3,5	;RP0=1, select bank1
  1676  0EAC  1303               	bcf	3,6	;RP1=0, select bank1
  1677  0EAD  0186               	clrf	6	;volatile
  1678                           
  1679                           ;main.c: 492: PORTB = 0b00000000;
  1680  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  1681  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  1682  0EB0  0186               	clrf	6	;volatile
  1683                           
  1684                           ;main.c: 493: TRISC = 0b10000001;
  1685  0EB1  3081               	movlw	129
  1686  0EB2  1683               	bsf	3,5	;RP0=1, select bank1
  1687  0EB3  1303               	bcf	3,6	;RP1=0, select bank1
  1688  0EB4  0087               	movwf	7	;volatile
  1689                           
  1690                           ;main.c: 494: PORTC = 0b11000000;
  1691  0EB5  30C0               	movlw	192
  1692  0EB6  1283               	bcf	3,5	;RP0=0, select bank0
  1693  0EB7  1303               	bcf	3,6	;RP1=0, select bank0
  1694  0EB8  0087               	movwf	7	;volatile
  1695                           
  1696                           ;main.c: 495: TRISD = 0b00000000;
  1697  0EB9  1683               	bsf	3,5	;RP0=1, select bank1
  1698  0EBA  1303               	bcf	3,6	;RP1=0, select bank1
  1699  0EBB  0188               	clrf	8	;volatile
  1700                           
  1701                           ;main.c: 496: PORTD = 0b00000000;
  1702  0EBC  1283               	bcf	3,5	;RP0=0, select bank0
  1703  0EBD  1303               	bcf	3,6	;RP1=0, select bank0
  1704  0EBE  0188               	clrf	8	;volatile
  1705                           
  1706                           ;main.c: 497: TRISE = 0b00000000;
  1707  0EBF  1683               	bsf	3,5	;RP0=1, select bank1
  1708  0EC0  1303               	bcf	3,6	;RP1=0, select bank1
  1709  0EC1  0189               	clrf	9	;volatile
  1710                           
  1711                           ;main.c: 498: PORTE = 0b00000000;
  1712  0EC2  1283               	bcf	3,5	;RP0=0, select bank0
  1713  0EC3  1303               	bcf	3,6	;RP1=0, select bank0
  1714  0EC4  0189               	clrf	9	;volatile
  1715                           
  1716                           ;main.c: 501: T1CON = 0x03;
  1717  0EC5  3003               	movlw	3
  1718  0EC6  0090               	movwf	16	;volatile
  1719                           
  1720                           ;main.c: 502: TMR1L = 0x00;
  1721  0EC7  018E               	clrf	14	;volatile
  1722                           
  1723                           ;main.c: 503: TMR1H = 0x00;
  1724  0EC8  018F               	clrf	15	;volatile
  1725                           
  1726                           ;main.c: 506: USART_Init(115200);
  1727  0EC9  3000               	movlw	0
  1728  0ECA  1683               	bsf	3,5	;RP0=1, select bank1
  1729  0ECB  1303               	bcf	3,6	;RP1=0, select bank1
  1730  0ECC  00E1               	movwf	(USART_Init@BaudRate+3)^(0+128)
  1731  0ECD  3001               	movlw	1
  1732  0ECE  00E0               	movwf	(USART_Init@BaudRate+2)^(0+128)
  1733  0ECF  30C2               	movlw	194
  1734  0ED0  00DF               	movwf	(USART_Init@BaudRate+1)^(0+128)
  1735  0ED1  3000               	movlw	0
  1736  0ED2  00DE               	movwf	USART_Init@BaudRate^(0+128)
  1737  0ED3  120A  158A  2456  120A  158A  	fcall	_USART_Init
  1738                           
  1739                           ;main.c: 507: TIMER0_Init();
  1740  0ED8  120A  158A  21A2  120A  158A  	fcall	_TIMER0_Init
  1741                           
  1742                           ;main.c: 508: ADC_Init();
  1743  0EDD  120A  158A  21EA  120A  158A  	fcall	_ADC_Init
  1744                           
  1745                           ;main.c: 509: PWM_Init();
  1746  0EE2  120A  158A  22D8  120A  158A  	fcall	_PWM_Init
  1747                           
  1748                           ;main.c: 510: LCD_Init();
  1749  0EE7  120A  158A  2517  120A  158A  	fcall	_LCD_Init
  1750                           
  1751                           ;main.c: 513: INTCONbits.PEIE = 1;
  1752  0EEC  170B               	bsf	11,6	;volatile
  1753                           
  1754                           ;main.c: 514: INTCONbits.GIE = 1;
  1755  0EED  178B               	bsf	11,7	;volatile
  1756                           
  1757                           ;main.c: 517: USART_WriteString("Inicializando o PIC16F877A\n\r");
  1758  0EEE  3044               	movlw	low (STR_11| (0+32768))
  1759  0EEF  1283               	bcf	3,5	;RP0=0, select bank0
  1760  0EF0  1303               	bcf	3,6	;RP1=0, select bank0
  1761  0EF1  00B8               	movwf	USART_WriteString@str
  1762  0EF2  3090               	movlw	high (STR_11| (0+32768))
  1763  0EF3  00B9               	movwf	USART_WriteString@str+1
  1764  0EF4  120A  158A  2321  120A  158A  	fcall	_USART_WriteString
  1765                           
  1766                           ;main.c: 518: USART_WriteString("USART: 115.200bps\n\r");
  1767  0EF9  3061               	movlw	low (STR_12| (0+32768))
  1768  0EFA  1283               	bcf	3,5	;RP0=0, select bank0
  1769  0EFB  1303               	bcf	3,6	;RP1=0, select bank0
  1770  0EFC  00B8               	movwf	USART_WriteString@str
  1771  0EFD  3090               	movlw	high (STR_12| (0+32768))
  1772  0EFE  00B9               	movwf	USART_WriteString@str+1
  1773  0EFF  120A  158A  2321  120A  158A  	fcall	_USART_WriteString
  1774                           
  1775                           ;main.c: 521: LCD_Init();
  1776  0F04  120A  158A  2517  120A  158A  	fcall	_LCD_Init
  1777                           
  1778                           ;main.c: 522: LCD_Cursor(0,0);
  1779  0F09  1283               	bcf	3,5	;RP0=0, select bank0
  1780  0F0A  1303               	bcf	3,6	;RP1=0, select bank0
  1781  0F0B  01B7               	clrf	LCD_Cursor@Col
  1782  0F0C  3000               	movlw	0
  1783  0F0D  120A  158A  2210  120A  158A  	fcall	_LCD_Cursor
  1784                           
  1785                           ;main.c: 523: LCD_WriteString("Inicializando...");
  1786  0F12  3075               	movlw	low (STR_13| (0+32768))
  1787  0F13  1283               	bcf	3,5	;RP0=0, select bank0
  1788  0F14  1303               	bcf	3,6	;RP1=0, select bank0
  1789  0F15  00B9               	movwf	LCD_WriteString@Str
  1790  0F16  3090               	movlw	high (STR_13| (0+32768))
  1791  0F17  00BA               	movwf	LCD_WriteString@Str+1
  1792  0F18  120A  158A  22FC  120A  158A  	fcall	_LCD_WriteString
  1793                           
  1794                           ;main.c: 526: PWM_DutyCycle1(0);
  1795  0F1D  3000               	movlw	0
  1796  0F1E  1283               	bcf	3,5	;RP0=0, select bank0
  1797  0F1F  1303               	bcf	3,6	;RP1=0, select bank0
  1798  0F20  00B7               	movwf	PWM_DutyCycle1@valor
  1799  0F21  3000               	movlw	0
  1800  0F22  00B8               	movwf	PWM_DutyCycle1@valor+1
  1801  0F23  120A  158A  225C  120A  158A  	fcall	_PWM_DutyCycle1
  1802                           
  1803                           ;main.c: 527: PWM_DutyCycle2(0);
  1804  0F28  3000               	movlw	0
  1805  0F29  1283               	bcf	3,5	;RP0=0, select bank0
  1806  0F2A  1303               	bcf	3,6	;RP1=0, select bank0
  1807  0F2B  00B7               	movwf	PWM_DutyCycle2@valor
  1808  0F2C  3000               	movlw	0
  1809  0F2D  00B8               	movwf	PWM_DutyCycle2@valor+1
  1810  0F2E  120A  158A  2277  120A  158A  	fcall	_PWM_DutyCycle2
  1811                           
  1812                           ;main.c: 530: TIMER0_Set(238);
  1813  0F33  30EE               	movlw	238
  1814  0F34  120A  158A  218C  120A  158A  	fcall	_TIMER0_Set
  1815                           
  1816                           ;main.c: 533: _delay((unsigned long)((1000)*(18432000/4000.0)));
  1817  0F39  3018               	movlw	24
  1818  0F3A  1683               	bsf	3,5	;RP0=1, select bank3
  1819  0F3B  1703               	bsf	3,6	;RP1=1, select bank3
  1820  0F3C  0092               	movwf	(??_main^(0+384)+2)
  1821  0F3D  3061               	movlw	97
  1822  0F3E  0091               	movwf	(??_main^(0+384)+1)
  1823  0F3F  306E               	movlw	110
  1824  0F40  0090               	movwf	??_main^(0+384)
  1825  0F41                     u3297:	
  1826  0F41  0B90               	decfsz	??_main^(0+384),f
  1827  0F42  2F41               	goto	u3297
  1828  0F43  0B91               	decfsz	(??_main^(0+384)+1),f
  1829  0F44  2F41               	goto	u3297
  1830  0F45  0B92               	decfsz	(??_main^(0+384)+2),f
  1831  0F46  2F41               	goto	u3297
  1832  0F47  0000               	nop
  1833  0F48                     l208:	
  1834                           ;main.c: 536: while(1)
  1835                           
  1836                           
  1837                           ;main.c: 537: {
  1838                           ;main.c: 539: sprintf(display_rpm,"%04d", deltaV);
  1839  0F48  301E               	movlw	low (STR_14| (0+32768))
  1840  0F49  1683               	bsf	3,5	;RP0=1, select bank1
  1841  0F4A  1303               	bcf	3,6	;RP1=0, select bank1
  1842  0F4B  00DC               	movwf	sprintf@f^(0+128)
  1843  0F4C  3091               	movlw	high (STR_14| (0+32768))
  1844  0F4D  00DD               	movwf	(sprintf@f^(0+128)+1)
  1845  0F4E  1283               	bcf	3,5	;RP0=0, select bank0
  1846  0F4F  1303               	bcf	3,6	;RP1=0, select bank0
  1847  0F50  0844               	movf	_deltaV+1,w
  1848  0F51  1683               	bsf	3,5	;RP0=1, select bank1
  1849  0F52  1303               	bcf	3,6	;RP1=0, select bank1
  1850  0F53  01DF               	clrf	((?_sprintf+1)^(0+128)+2)
  1851  0F54  07DF               	addwf	((?_sprintf+1)^(0+128)+2),f
  1852  0F55  1283               	bcf	3,5	;RP0=0, select bank0
  1853  0F56  1303               	bcf	3,6	;RP1=0, select bank0
  1854  0F57  0843               	movf	_deltaV,w
  1855  0F58  1683               	bsf	3,5	;RP0=1, select bank1
  1856  0F59  1303               	bcf	3,6	;RP1=0, select bank1
  1857  0F5A  01DE               	clrf	(?_sprintf^(0+128)+2)
  1858  0F5B  07DE               	addwf	(?_sprintf^(0+128)+2),f
  1859  0F5C  30CE               	movlw	_display_rpm& (0+255)
  1860  0F5D  120A  118A  2334  120A  158A  	fcall	_sprintf
  1861                           
  1862                           ;main.c: 540: sprintf(display_pwm,"%04d", pwm);
  1863  0F62  301E               	movlw	low (STR_14| (0+32768))
  1864  0F63  1683               	bsf	3,5	;RP0=1, select bank1
  1865  0F64  1303               	bcf	3,6	;RP1=0, select bank1
  1866  0F65  00DC               	movwf	sprintf@f^(0+128)
  1867  0F66  3091               	movlw	high (STR_14| (0+32768))
  1868  0F67  00DD               	movwf	(sprintf@f^(0+128)+1)
  1869  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  1870  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  1871  0F6A  084A               	movf	_pwm+1,w
  1872  0F6B  1683               	bsf	3,5	;RP0=1, select bank1
  1873  0F6C  1303               	bcf	3,6	;RP1=0, select bank1
  1874  0F6D  01DF               	clrf	((?_sprintf+1)^(0+128)+2)
  1875  0F6E  07DF               	addwf	((?_sprintf+1)^(0+128)+2),f
  1876  0F6F  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0F70  1303               	bcf	3,6	;RP1=0, select bank0
  1878  0F71  0849               	movf	_pwm,w
  1879  0F72  1683               	bsf	3,5	;RP0=1, select bank1
  1880  0F73  1303               	bcf	3,6	;RP1=0, select bank1
  1881  0F74  01DE               	clrf	(?_sprintf^(0+128)+2)
  1882  0F75  07DE               	addwf	(?_sprintf^(0+128)+2),f
  1883  0F76  30C4               	movlw	_display_pwm& (0+255)
  1884  0F77  120A  118A  2334  120A  158A  	fcall	_sprintf
  1885                           
  1886                           ;main.c: 544: USART_WriteString(display_rpm);
  1887  0F7C  30CE               	movlw	_display_rpm& (0+255)
  1888  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
  1889  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
  1890  0F7F  00B8               	movwf	USART_WriteString@str
  1891  0F80  3000               	movlw	0
  1892  0F81  00B9               	movwf	USART_WriteString@str+1
  1893  0F82  120A  158A  2321  120A  158A  	fcall	_USART_WriteString
  1894                           
  1895                           ;main.c: 545: USART_WriteString("\n\r");
  1896  0F87  3092               	movlw	low ((STR_9+12)| (0+32768))
  1897  0F88  1283               	bcf	3,5	;RP0=0, select bank0
  1898  0F89  1303               	bcf	3,6	;RP1=0, select bank0
  1899  0F8A  00B8               	movwf	USART_WriteString@str
  1900  0F8B  3090               	movlw	high ((STR_9+12)| (0+32768))
  1901  0F8C  00B9               	movwf	USART_WriteString@str+1
  1902  0F8D  120A  158A  2321  120A  158A  	fcall	_USART_WriteString
  1903                           
  1904                           ;main.c: 548: LCD_Clear();
  1905  0F92  120A  158A  236B  120A  158A  	fcall	_LCD_Clear
  1906                           
  1907                           ;main.c: 549: LCD_Cursor(0,0);
  1908  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  1909  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  1910  0F99  01B7               	clrf	LCD_Cursor@Col
  1911  0F9A  3000               	movlw	0
  1912  0F9B  120A  158A  2210  120A  158A  	fcall	_LCD_Cursor
  1913                           
  1914                           ;main.c: 550: LCD_WriteString("DlV: ");
  1915  0FA0  3018               	movlw	low (STR_17| (0+32768))
  1916  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  1917  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  1918  0FA3  00B9               	movwf	LCD_WriteString@Str
  1919  0FA4  3091               	movlw	high (STR_17| (0+32768))
  1920  0FA5  00BA               	movwf	LCD_WriteString@Str+1
  1921  0FA6  120A  158A  22FC  120A  158A  	fcall	_LCD_WriteString
  1922                           
  1923                           ;main.c: 551: LCD_Cursor(0,6);
  1924  0FAB  3006               	movlw	6
  1925  0FAC  1683               	bsf	3,5	;RP0=1, select bank3
  1926  0FAD  1703               	bsf	3,6	;RP1=1, select bank3
  1927  0FAE  0090               	movwf	??_main^(0+384)
  1928  0FAF  0810               	movf	??_main^(0+384),w
  1929  0FB0  1283               	bcf	3,5	;RP0=0, select bank0
  1930  0FB1  1303               	bcf	3,6	;RP1=0, select bank0
  1931  0FB2  00B7               	movwf	LCD_Cursor@Col
  1932  0FB3  3000               	movlw	0
  1933  0FB4  120A  158A  2210  120A  158A  	fcall	_LCD_Cursor
  1934                           
  1935                           ;main.c: 552: LCD_WriteString(display_rpm);
  1936  0FB9  30CE               	movlw	_display_rpm& (0+255)
  1937  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  1938  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  1939  0FBC  00B9               	movwf	LCD_WriteString@Str
  1940  0FBD  3000               	movlw	0
  1941  0FBE  00BA               	movwf	LCD_WriteString@Str+1
  1942  0FBF  120A  158A  22FC  120A  158A  	fcall	_LCD_WriteString
  1943                           
  1944                           ;main.c: 553: LCD_Cursor(1,0);
  1945  0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  1946  0FC5  1303               	bcf	3,6	;RP1=0, select bank0
  1947  0FC6  01B7               	clrf	LCD_Cursor@Col
  1948  0FC7  3001               	movlw	1
  1949  0FC8  120A  158A  2210  120A  158A  	fcall	_LCD_Cursor
  1950                           
  1951                           ;main.c: 554: LCD_WriteString("PWM: ");
  1952  0FCD  3012               	movlw	low (STR_18| (0+32768))
  1953  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  1954  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  1955  0FD0  00B9               	movwf	LCD_WriteString@Str
  1956  0FD1  3091               	movlw	high (STR_18| (0+32768))
  1957  0FD2  00BA               	movwf	LCD_WriteString@Str+1
  1958  0FD3  120A  158A  22FC  120A  158A  	fcall	_LCD_WriteString
  1959                           
  1960                           ;main.c: 555: LCD_Cursor(1,6);
  1961  0FD8  3006               	movlw	6
  1962  0FD9  1683               	bsf	3,5	;RP0=1, select bank3
  1963  0FDA  1703               	bsf	3,6	;RP1=1, select bank3
  1964  0FDB  0090               	movwf	??_main^(0+384)
  1965  0FDC  0810               	movf	??_main^(0+384),w
  1966  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  1967  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  1968  0FDF  00B7               	movwf	LCD_Cursor@Col
  1969  0FE0  3001               	movlw	1
  1970  0FE1  120A  158A  2210  120A  158A  	fcall	_LCD_Cursor
  1971                           
  1972                           ;main.c: 556: LCD_WriteString(display_pwm);
  1973  0FE6  30C4               	movlw	_display_pwm& (0+255)
  1974  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  1975  0FE8  1303               	bcf	3,6	;RP1=0, select bank0
  1976  0FE9  00B9               	movwf	LCD_WriteString@Str
  1977  0FEA  3000               	movlw	0
  1978  0FEB  00BA               	movwf	LCD_WriteString@Str+1
  1979  0FEC  120A  158A  22FC  120A  158A  	fcall	_LCD_WriteString
  1980                           
  1981                           ;main.c: 558: _delay((unsigned long)((200)*(18432000/4000.0)));
  1982  0FF1  3005               	movlw	5
  1983  0FF2  1683               	bsf	3,5	;RP0=1, select bank3
  1984  0FF3  1703               	bsf	3,6	;RP1=1, select bank3
  1985  0FF4  0092               	movwf	(??_main^(0+384)+2)
  1986  0FF5  30AD               	movlw	173
  1987  0FF6  0091               	movwf	(??_main^(0+384)+1)
  1988  0FF7  30E0               	movlw	224
  1989  0FF8  0090               	movwf	??_main^(0+384)
  1990  0FF9                     u3307:	
  1991  0FF9  0B90               	decfsz	??_main^(0+384),f
  1992  0FFA  2FF9               	goto	u3307
  1993  0FFB  0B91               	decfsz	(??_main^(0+384)+1),f
  1994  0FFC  2FF9               	goto	u3307
  1995  0FFD  0B92               	decfsz	(??_main^(0+384)+2),f
  1996  0FFE  2FF9               	goto	u3307
  1997  0FFF  2F48               	goto	l208
  1998  1000                     __end_of_main:	
  1999                           
  2000                           	psect	text1
  2001  0334                     __ptext1:	
  2002 ;; *************** function _sprintf *****************
  2003 ;; Defined at:
  2004 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  sp              1    wreg     PTR unsigned char 
  2007 ;;		 -> display_pwm(10), display_rpm(10), 
  2008 ;;  f               2    4[BANK1 ] PTR const unsigned char 
  2009 ;;		 -> STR_15(5), STR_14(5), 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  sp              1   20[BANK1 ] PTR unsigned char 
  2012 ;;		 -> display_pwm(10), display_rpm(10), 
  2013 ;;  _val            4   13[BANK1 ] struct .
  2014 ;;  width           2   18[BANK1 ] int 
  2015 ;;  c               1   21[BANK1 ] char 
  2016 ;;  flag            1   17[BANK1 ] unsigned char 
  2017 ;;  prec            1   12[BANK1 ] char 
  2018 ;;  ap              1   11[BANK1 ] PTR void [1]
  2019 ;;		 -> ?_sprintf(2), 
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  2    4[BANK1 ] int 
  2022 ;; Registers used:
  2023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2029 ;;      Params:         0       0       4       0       0
  2030 ;;      Locals:         0       0      11       0       0
  2031 ;;      Temps:          0       0       3       0       0
  2032 ;;      Totals:         0       0      18       0       0
  2033 ;;Total ram usage:       18 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; Hardware stack levels required when called:    5
  2036 ;; This function calls:
  2037 ;;		___lwdiv
  2038 ;;		___lwmod
  2039 ;;		___wmul
  2040 ;;		_isdigit
  2041 ;; This function is called by:
  2042 ;;		_main
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           
  2047                           ;psect for function _sprintf
  2048  0334                     _sprintf:	
  2049                           
  2050                           ;incstack = 0
  2051                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2052                           ;sprintf@sp stored from wreg
  2053  0334  1683               	bsf	3,5	;RP0=1, select bank1
  2054  0335  1303               	bcf	3,6	;RP1=0, select bank1
  2055  0336  00EC               	movwf	sprintf@sp^(0+128)
  2056                           
  2057                           ;doprnt.c: 494: va_list ap;
  2058                           ;doprnt.c: 499: signed char c;
  2059                           ;doprnt.c: 501: int width;
  2060                           ;doprnt.c: 506: signed char prec;
  2061                           ;doprnt.c: 508: unsigned char flag;
  2062                           ;doprnt.c: 527: union {
  2063                           ;doprnt.c: 528: unsigned int _val;
  2064                           ;doprnt.c: 529: struct {
  2065                           ;doprnt.c: 530: const char * _cp;
  2066                           ;doprnt.c: 531: unsigned _len;
  2067                           ;doprnt.c: 532: } _str;
  2068                           ;doprnt.c: 533: } _val;
  2069                           ;doprnt.c: 542: *ap = __va_start();
  2070  0337  30DE               	movlw	(?_sprintf+2)& (0+255)
  2071  0338  00E0               	movwf	??_sprintf^(0+128)
  2072  0339  0860               	movf	??_sprintf^(0+128),w
  2073  033A  00E3               	movwf	sprintf@ap^(0+128)
  2074  033B                     l3104:	
  2075                           ;doprnt.c: 545: while(c = *f++) {
  2076                           
  2077  033B  1683               	bsf	3,5	;RP0=1, select bank1
  2078  033C  1303               	bcf	3,6	;RP1=0, select bank1
  2079  033D  085D               	movf	(sprintf@f+1)^(0+128),w
  2080  033E  00E1               	movwf	(??_sprintf^(0+128)+1)
  2081  033F  085C               	movf	sprintf@f^(0+128),w
  2082  0340  00E0               	movwf	??_sprintf^(0+128)
  2083  0341  0ADC               	incf	sprintf@f^(0+128),f
  2084  0342  1903               	skipnz
  2085  0343  0ADD               	incf	(sprintf@f+1)^(0+128),f
  2086  0344  0861               	movf	(??_sprintf+1)^(0+128),w
  2087  0345  1283               	bcf	3,5	;RP0=0, select bank0
  2088  0346  1303               	bcf	3,6	;RP1=0, select bank0
  2089  0347  00FF               	movwf	127
  2090  0348  1683               	bsf	3,5	;RP0=1, select bank1
  2091  0349  1303               	bcf	3,6	;RP1=0, select bank1
  2092  034A  0860               	movf	??_sprintf^(0+128),w
  2093  034B  0084               	movwf	4
  2094  034C  1283               	bcf	3,5	;RP0=0, select bank0
  2095  034D  1303               	bcf	3,6	;RP1=0, select bank0
  2096  034E  160A  118A  2000  120A  118A  	fcall	stringtab
  2097  0353  1683               	bsf	3,5	;RP0=1, select bank1
  2098  0354  1303               	bcf	3,6	;RP1=0, select bank1
  2099  0355  00E2               	movwf	(??_sprintf+2)^(0+128)
  2100  0356  0862               	movf	(??_sprintf+2)^(0+128),w
  2101  0357  00ED               	movwf	sprintf@c^(0+128)
  2102  0358  08ED               	movf	sprintf@c^(0+128),f
  2103  0359  1903               	btfsc	3,2
  2104  035A  2D56               	goto	l3106
  2105                           
  2106                           ;doprnt.c: 547: if(c != '%')
  2107  035B  086D               	movf	sprintf@c^(0+128),w
  2108  035C  3A25               	xorlw	37
  2109  035D  1903               	skipnz
  2110  035E  2B6B               	goto	l3010
  2111                           
  2112                           ;doprnt.c: 549: {
  2113                           ;doprnt.c: 550: ((*sp++ = (c)));
  2114  035F  086D               	movf	sprintf@c^(0+128),w
  2115  0360  00E0               	movwf	??_sprintf^(0+128)
  2116  0361  086C               	movf	sprintf@sp^(0+128),w
  2117  0362  0084               	movwf	4
  2118  0363  0860               	movf	??_sprintf^(0+128),w
  2119  0364  1383               	bcf	3,7	;select IRP bank0
  2120  0365  0080               	movwf	0
  2121  0366  3001               	movlw	1
  2122  0367  00E0               	movwf	??_sprintf^(0+128)
  2123  0368  0860               	movf	??_sprintf^(0+128),w
  2124  0369  07EC               	addwf	sprintf@sp^(0+128),f
  2125                           
  2126                           ;doprnt.c: 551: continue;
  2127  036A  2B3B               	goto	l3104
  2128  036B                     l3010:	
  2129                           
  2130                           ;doprnt.c: 552: }
  2131                           ;doprnt.c: 555: width = 0;
  2132  036B  01EA               	clrf	sprintf@width^(0+128)
  2133  036C  01EB               	clrf	(sprintf@width+1)^(0+128)
  2134                           
  2135                           ;doprnt.c: 557: flag = 0;
  2136  036D  01E9               	clrf	sprintf@flag^(0+128)
  2137                           
  2138                           ;doprnt.c: 560: switch(*f) {
  2139                           
  2140                           ;doprnt.c: 559: for(;;) {
  2141  036E  2B76               	goto	l3014
  2142  036F                     l485:	
  2143                           ;doprnt.c: 588: case '0':
  2144                           
  2145                           
  2146                           ;doprnt.c: 589: flag |= 0x04;
  2147  036F  1683               	bsf	3,5	;RP0=1, select bank1
  2148  0370  1303               	bcf	3,6	;RP1=0, select bank1
  2149  0371  1569               	bsf	sprintf@flag^(0+128),2
  2150                           
  2151                           ;doprnt.c: 590: f++;
  2152  0372  3001               	movlw	1
  2153  0373  07DC               	addwf	sprintf@f^(0+128),f
  2154  0374  1803               	skipnc
  2155  0375  0ADD               	incf	(sprintf@f+1)^(0+128),f
  2156  0376                     l3014:	
  2157                           ;doprnt.c: 593: }
  2158                           
  2159                           ;doprnt.c: 591: continue;
  2160                           
  2161  0376  1683               	bsf	3,5	;RP0=1, select bank1
  2162  0377  1303               	bcf	3,6	;RP1=0, select bank1
  2163  0378  085D               	movf	(sprintf@f+1)^(0+128),w
  2164  0379  1283               	bcf	3,5	;RP0=0, select bank0
  2165  037A  1303               	bcf	3,6	;RP1=0, select bank0
  2166  037B  00FF               	movwf	127
  2167  037C  1683               	bsf	3,5	;RP0=1, select bank1
  2168  037D  1303               	bcf	3,6	;RP1=0, select bank1
  2169  037E  085C               	movf	sprintf@f^(0+128),w
  2170  037F  0084               	movwf	4
  2171  0380  1283               	bcf	3,5	;RP0=0, select bank0
  2172  0381  1303               	bcf	3,6	;RP1=0, select bank0
  2173  0382  160A  118A  2000  120A  118A  	fcall	stringtab
  2174                           
  2175                           ; Switch size 1, requested type "space"
  2176                           ; Number of cases is 1, Range of values is 48 to 48
  2177                           ; switch strategies available:
  2178                           ; Name         Instructions Cycles
  2179                           ; simple_byte            4     3 (average)
  2180                           ; direct_byte           14    11 (fixed)
  2181                           ; jumptable            263     9 (fixed)
  2182                           ;	Chosen strategy is simple_byte
  2183  0387  3A30               	xorlw	48	; case 48
  2184  0388  1903               	skipnz
  2185  0389  2B6F               	goto	l485
  2186  038A  2B8B               	goto	l3016
  2187  038B                     l3016:	
  2188                           ;doprnt.c: 595: }
  2189                           
  2190                           ;doprnt.c: 594: break;
  2191                           
  2192                           
  2193                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  2194  038B  1683               	bsf	3,5	;RP0=1, select bank1
  2195  038C  1303               	bcf	3,6	;RP1=0, select bank1
  2196  038D  085D               	movf	(sprintf@f+1)^(0+128),w
  2197  038E  1283               	bcf	3,5	;RP0=0, select bank0
  2198  038F  1303               	bcf	3,6	;RP1=0, select bank0
  2199  0390  00FF               	movwf	127
  2200  0391  1683               	bsf	3,5	;RP0=1, select bank1
  2201  0392  1303               	bcf	3,6	;RP1=0, select bank1
  2202  0393  085C               	movf	sprintf@f^(0+128),w
  2203  0394  0084               	movwf	4
  2204  0395  1283               	bcf	3,5	;RP0=0, select bank0
  2205  0396  1303               	bcf	3,6	;RP1=0, select bank0
  2206  0397  160A  118A  2000  120A  118A  	fcall	stringtab
  2207  039C  120A  158A  21DA  120A  118A  	fcall	_isdigit
  2208  03A1  1C03               	btfss	3,0
  2209  03A2  2C05               	goto	l3030
  2210                           
  2211                           ;doprnt.c: 607: width = 0;
  2212  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  2213  03A4  1303               	bcf	3,6	;RP1=0, select bank1
  2214  03A5  01EA               	clrf	sprintf@width^(0+128)
  2215  03A6  01EB               	clrf	(sprintf@width+1)^(0+128)
  2216  03A7                     l3020:	
  2217                           ;doprnt.c: 608: do {
  2218                           
  2219                           
  2220                           ;doprnt.c: 609: width *= 10;
  2221  03A7  300A               	movlw	10
  2222  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  2223  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  2224  03AA  00B7               	movwf	___wmul@multiplier
  2225  03AB  3000               	movlw	0
  2226  03AC  00B8               	movwf	___wmul@multiplier+1
  2227  03AD  1683               	bsf	3,5	;RP0=1, select bank1
  2228  03AE  1303               	bcf	3,6	;RP1=0, select bank1
  2229  03AF  086B               	movf	(sprintf@width+1)^(0+128),w
  2230  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  2231  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  2232  03B2  01BA               	clrf	___wmul@multiplicand+1
  2233  03B3  07BA               	addwf	___wmul@multiplicand+1,f
  2234  03B4  1683               	bsf	3,5	;RP0=1, select bank1
  2235  03B5  1303               	bcf	3,6	;RP1=0, select bank1
  2236  03B6  086A               	movf	sprintf@width^(0+128),w
  2237  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  2238  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  2239  03B9  01B9               	clrf	___wmul@multiplicand
  2240  03BA  07B9               	addwf	___wmul@multiplicand,f
  2241  03BB  120A  158A  2346  120A  118A  	fcall	___wmul
  2242  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  2243  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  2244  03C2  0838               	movf	?___wmul+1,w
  2245  03C3  1683               	bsf	3,5	;RP0=1, select bank1
  2246  03C4  1303               	bcf	3,6	;RP1=0, select bank1
  2247  03C5  01EB               	clrf	(sprintf@width+1)^(0+128)
  2248  03C6  07EB               	addwf	(sprintf@width+1)^(0+128),f
  2249  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  2250  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  2251  03C9  0837               	movf	?___wmul,w
  2252  03CA  1683               	bsf	3,5	;RP0=1, select bank1
  2253  03CB  1303               	bcf	3,6	;RP1=0, select bank1
  2254  03CC  01EA               	clrf	sprintf@width^(0+128)
  2255  03CD  07EA               	addwf	sprintf@width^(0+128),f
  2256                           
  2257                           ;doprnt.c: 610: width += *f++ - '0';
  2258  03CE  085D               	movf	(sprintf@f+1)^(0+128),w
  2259  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  2260  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  2261  03D1  00FF               	movwf	127
  2262  03D2  1683               	bsf	3,5	;RP0=1, select bank1
  2263  03D3  1303               	bcf	3,6	;RP1=0, select bank1
  2264  03D4  085C               	movf	sprintf@f^(0+128),w
  2265  03D5  0084               	movwf	4
  2266  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  2267  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  2268  03D8  160A  118A  2000  120A  118A  	fcall	stringtab
  2269  03DD  3ED0               	addlw	208
  2270  03DE  1683               	bsf	3,5	;RP0=1, select bank1
  2271  03DF  1303               	bcf	3,6	;RP1=0, select bank1
  2272  03E0  00E0               	movwf	??_sprintf^(0+128)
  2273  03E1  30FF               	movlw	255
  2274  03E2  1803               	skipnc
  2275  03E3  3000               	movlw	0
  2276  03E4  00E1               	movwf	(??_sprintf^(0+128)+1)
  2277  03E5  0860               	movf	??_sprintf^(0+128),w
  2278  03E6  07EA               	addwf	sprintf@width^(0+128),f
  2279  03E7  1803               	skipnc
  2280  03E8  0AEB               	incf	(sprintf@width+1)^(0+128),f
  2281  03E9  0861               	movf	(??_sprintf+1)^(0+128),w
  2282  03EA  07EB               	addwf	(sprintf@width+1)^(0+128),f
  2283  03EB  3001               	movlw	1
  2284  03EC  07DC               	addwf	sprintf@f^(0+128),f
  2285  03ED  1803               	skipnc
  2286  03EE  0ADD               	incf	(sprintf@f+1)^(0+128),f
  2287                           
  2288                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  2289  03EF  085D               	movf	(sprintf@f+1)^(0+128),w
  2290  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  2291  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  2292  03F2  00FF               	movwf	127
  2293  03F3  1683               	bsf	3,5	;RP0=1, select bank1
  2294  03F4  1303               	bcf	3,6	;RP1=0, select bank1
  2295  03F5  085C               	movf	sprintf@f^(0+128),w
  2296  03F6  0084               	movwf	4
  2297  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2298  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2299  03F9  160A  118A  2000  120A  118A  	fcall	stringtab
  2300  03FE  120A  158A  21DA  120A  118A  	fcall	_isdigit
  2301  0403  1803               	btfsc	3,0
  2302  0404  2BA7               	goto	l3020
  2303  0405                     l3030:	
  2304                           ;doprnt.c: 831: }
  2305                           
  2306                           ;doprnt.c: 822: continue;
  2307                           
  2308                           ;doprnt.c: 811: default:
  2309                           
  2310                           ;doprnt.c: 707: case 'i':
  2311                           ;doprnt.c: 708: break;
  2312                           
  2313                           ;doprnt.c: 706: case 'd':
  2314                           
  2315                           ;doprnt.c: 647: goto alldone;
  2316                           
  2317                           ;doprnt.c: 646: case 0:
  2318                           
  2319                           ;doprnt.c: 617: }
  2320                           ;doprnt.c: 644: switch(c = *f++) {
  2321                           
  2322  0405  1683               	bsf	3,5	;RP0=1, select bank1
  2323  0406  1303               	bcf	3,6	;RP1=0, select bank1
  2324  0407  085D               	movf	(sprintf@f+1)^(0+128),w
  2325  0408  00E1               	movwf	(??_sprintf^(0+128)+1)
  2326  0409  085C               	movf	sprintf@f^(0+128),w
  2327  040A  00E0               	movwf	??_sprintf^(0+128)
  2328  040B  0ADC               	incf	sprintf@f^(0+128),f
  2329  040C  1903               	skipnz
  2330  040D  0ADD               	incf	(sprintf@f+1)^(0+128),f
  2331  040E  0861               	movf	(??_sprintf+1)^(0+128),w
  2332  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2333  0410  1303               	bcf	3,6	;RP1=0, select bank0
  2334  0411  00FF               	movwf	127
  2335  0412  1683               	bsf	3,5	;RP0=1, select bank1
  2336  0413  1303               	bcf	3,6	;RP1=0, select bank1
  2337  0414  0860               	movf	??_sprintf^(0+128),w
  2338  0415  0084               	movwf	4
  2339  0416  1283               	bcf	3,5	;RP0=0, select bank0
  2340  0417  1303               	bcf	3,6	;RP1=0, select bank0
  2341  0418  160A  118A  2000  120A  118A  	fcall	stringtab
  2342  041D  1683               	bsf	3,5	;RP0=1, select bank1
  2343  041E  1303               	bcf	3,6	;RP1=0, select bank1
  2344  041F  00ED               	movwf	sprintf@c^(0+128)
  2345                           
  2346                           ; Switch size 1, requested type "space"
  2347                           ; Number of cases is 3, Range of values is 0 to 105
  2348                           ; switch strategies available:
  2349                           ; Name         Instructions Cycles
  2350                           ; simple_byte           10     6 (average)
  2351                           ; jumptable            260     6 (fixed)
  2352                           ;	Chosen strategy is simple_byte
  2353  0420  3A00               	xorlw	0	; case 0
  2354  0421  1903               	skipnz
  2355  0422  2D56               	goto	l3106
  2356  0423  3A64               	xorlw	100	; case 100
  2357  0424  1903               	skipnz
  2358  0425  2C2A               	goto	l3032
  2359  0426  3A0D               	xorlw	13	; case 105
  2360  0427  1903               	skipnz
  2361  0428  2C2A               	goto	l3032
  2362  0429  2B3B               	goto	l3104
  2363  042A                     l3032:	
  2364                           
  2365                           ;doprnt.c: 1262: {
  2366                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2367  042A  1683               	bsf	3,5	;RP0=1, select bank1
  2368  042B  1303               	bcf	3,6	;RP1=0, select bank1
  2369  042C  0863               	movf	sprintf@ap^(0+128),w
  2370  042D  0084               	movwf	4
  2371  042E  1383               	bcf	3,7	;select IRP bank0
  2372  042F  0800               	movf	0,w
  2373  0430  00E5               	movwf	sprintf@_val^(0+128)
  2374  0431  0A84               	incf	4,f
  2375  0432  0800               	movf	0,w
  2376  0433  00E6               	movwf	(sprintf@_val+1)^(0+128)
  2377  0434  3002               	movlw	2
  2378  0435  00E0               	movwf	??_sprintf^(0+128)
  2379  0436  0860               	movf	??_sprintf^(0+128),w
  2380  0437  07E3               	addwf	sprintf@ap^(0+128),f
  2381                           
  2382                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  2383  0438  1FE6               	btfss	(sprintf@_val+1)^(0+128),7
  2384  0439  2C43               	goto	l3042
  2385                           
  2386                           ;doprnt.c: 1271: flag |= 0x03;
  2387  043A  3003               	movlw	3
  2388  043B  00E0               	movwf	??_sprintf^(0+128)
  2389  043C  0860               	movf	??_sprintf^(0+128),w
  2390  043D  04E9               	iorwf	sprintf@flag^(0+128),f
  2391                           
  2392                           ;doprnt.c: 1272: _val._val = -_val._val;
  2393  043E  09E5               	comf	sprintf@_val^(0+128),f
  2394  043F  09E6               	comf	(sprintf@_val+1)^(0+128),f
  2395  0440  0AE5               	incf	sprintf@_val^(0+128),f
  2396  0441  1903               	skipnz
  2397  0442  0AE6               	incf	(sprintf@_val+1)^(0+128),f
  2398  0443                     l3042:	
  2399                           
  2400                           ;doprnt.c: 1273: }
  2401                           ;doprnt.c: 1275: }
  2402                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2403  0443  01ED               	clrf	sprintf@c^(0+128)
  2404  0444  0AED               	incf	sprintf@c^(0+128),f
  2405  0445  086D               	movf	sprintf@c^(0+128),w
  2406  0446  3A05               	xorlw	5
  2407  0447  1903               	btfsc	3,2
  2408  0448  2C76               	goto	l3054
  2409  0449                     l3046:	
  2410                           
  2411                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2412  0449  086D               	movf	sprintf@c^(0+128),w
  2413  044A  00E0               	movwf	??_sprintf^(0+128)
  2414  044B  0760               	addwf	??_sprintf^(0+128),w
  2415  044C  3E12               	addlw	low (_dpowers| (0+32768))
  2416  044D  0084               	movwf	4
  2417  044E  3090               	movlw	high (_dpowers| (0+32768))
  2418  044F  1803               	skipnc
  2419  0450  3E01               	addlw	1
  2420  0451  1283               	bcf	3,5	;RP0=0, select bank0
  2421  0452  1303               	bcf	3,6	;RP1=0, select bank0
  2422  0453  00FF               	movwf	127
  2423  0454  160A  118A  2000  120A  118A  	fcall	stringtab
  2424  0459  1683               	bsf	3,5	;RP0=1, select bank1
  2425  045A  1303               	bcf	3,6	;RP1=0, select bank1
  2426  045B  00E1               	movwf	(??_sprintf+1)^(0+128)
  2427  045C  1283               	bcf	3,5	;RP0=0, select bank0
  2428  045D  1303               	bcf	3,6	;RP1=0, select bank0
  2429  045E  160A  118A  2000  120A  118A  	fcall	stringtab
  2430  0463  1683               	bsf	3,5	;RP0=1, select bank1
  2431  0464  1303               	bcf	3,6	;RP1=0, select bank1
  2432  0465  00E2               	movwf	((??_sprintf+1)^(0+128)+1)
  2433  0466  0862               	movf	(??_sprintf+2)^(0+128),w
  2434  0467  0266               	subwf	(sprintf@_val+1)^(0+128),w
  2435  0468  1D03               	skipz
  2436  0469  2C6C               	goto	u3155
  2437  046A  0861               	movf	(??_sprintf+1)^(0+128),w
  2438  046B  0265               	subwf	sprintf@_val^(0+128),w
  2439  046C                     u3155:	
  2440  046C  1C03               	btfss	3,0
  2441  046D  2C76               	goto	l3054
  2442                           
  2443                           ;doprnt.c: 1316: break;
  2444  046E  3001               	movlw	1
  2445  046F  00E0               	movwf	??_sprintf^(0+128)
  2446  0470  0860               	movf	??_sprintf^(0+128),w
  2447  0471  07ED               	addwf	sprintf@c^(0+128),f
  2448  0472  086D               	movf	sprintf@c^(0+128),w
  2449  0473  3A05               	xorlw	5
  2450  0474  1D03               	skipz
  2451  0475  2C49               	goto	l3046
  2452  0476                     l3054:	
  2453                           
  2454                           ;doprnt.c: 1354: if(width && flag & 0x03)
  2455  0476  086B               	movf	(sprintf@width+1)^(0+128),w
  2456  0477  046A               	iorwf	sprintf@width^(0+128),w
  2457  0478  1903               	skipnz
  2458  0479  2C84               	goto	l503
  2459  047A  0869               	movf	sprintf@flag^(0+128),w
  2460  047B  3903               	andlw	3
  2461  047C  1903               	btfsc	3,2
  2462  047D  2C84               	goto	l503
  2463                           
  2464                           ;doprnt.c: 1355: width--;
  2465  047E  30FF               	movlw	255
  2466  047F  07EA               	addwf	sprintf@width^(0+128),f
  2467  0480  1803               	skipnc
  2468  0481  0AEB               	incf	(sprintf@width+1)^(0+128),f
  2469  0482  30FF               	movlw	255
  2470  0483  07EB               	addwf	(sprintf@width+1)^(0+128),f
  2471  0484                     l503:	
  2472                           
  2473                           ;doprnt.c: 1390: if(width > c)
  2474  0484  086D               	movf	sprintf@c^(0+128),w
  2475  0485  00E0               	movwf	??_sprintf^(0+128)
  2476  0486  01E1               	clrf	(??_sprintf^(0+128)+1)
  2477  0487  1BE0               	btfsc	??_sprintf^(0+128),7
  2478  0488  03E1               	decf	(??_sprintf^(0+128)+1),f
  2479  0489  0861               	movf	(??_sprintf+1)^(0+128),w
  2480  048A  3A80               	xorlw	128
  2481  048B  00E2               	movwf	(??_sprintf+2)^(0+128)
  2482  048C  086B               	movf	(sprintf@width+1)^(0+128),w
  2483  048D  3A80               	xorlw	128
  2484  048E  0262               	subwf	(??_sprintf+2)^(0+128),w
  2485  048F  1D03               	skipz
  2486  0490  2C93               	goto	u3195
  2487  0491  086A               	movf	sprintf@width^(0+128),w
  2488  0492  0260               	subwf	??_sprintf^(0+128),w
  2489  0493                     u3195:	
  2490  0493  1803               	skipnc
  2491  0494  2CA3               	goto	l3062
  2492                           
  2493                           ;doprnt.c: 1391: width -= c;
  2494  0495  1683               	bsf	3,5	;RP0=1, select bank1
  2495  0496  1303               	bcf	3,6	;RP1=0, select bank1
  2496  0497  086D               	movf	sprintf@c^(0+128),w
  2497  0498  00E0               	movwf	??_sprintf^(0+128)
  2498  0499  01E1               	clrf	(??_sprintf^(0+128)+1)
  2499  049A  1BE0               	btfsc	??_sprintf^(0+128),7
  2500  049B  03E1               	decf	(??_sprintf^(0+128)+1),f
  2501  049C  0860               	movf	??_sprintf^(0+128),w
  2502  049D  02EA               	subwf	sprintf@width^(0+128),f
  2503  049E  0861               	movf	(??_sprintf+1)^(0+128),w
  2504  049F  1C03               	skipc
  2505  04A0  03EB               	decf	(sprintf@width+1)^(0+128),f
  2506  04A1  02EB               	subwf	(sprintf@width+1)^(0+128),f
  2507  04A2  2CA7               	goto	l3064
  2508  04A3                     l3062:	
  2509                           
  2510                           ;doprnt.c: 1392: else
  2511                           ;doprnt.c: 1393: width = 0;
  2512  04A3  1683               	bsf	3,5	;RP0=1, select bank1
  2513  04A4  1303               	bcf	3,6	;RP1=0, select bank1
  2514  04A5  01EA               	clrf	sprintf@width^(0+128)
  2515  04A6  01EB               	clrf	(sprintf@width+1)^(0+128)
  2516  04A7                     l3064:	
  2517                           
  2518                           ;doprnt.c: 1396: if(flag & 0x04) {
  2519  04A7  1D69               	btfss	sprintf@flag^(0+128),2
  2520  04A8  2CCE               	goto	l3080
  2521                           
  2522                           ;doprnt.c: 1401: if(flag & 0x03)
  2523  04A9  0869               	movf	sprintf@flag^(0+128),w
  2524  04AA  3903               	andlw	3
  2525  04AB  1903               	btfsc	3,2
  2526  04AC  2CB8               	goto	l3072
  2527                           
  2528                           ;doprnt.c: 1402: ((*sp++ = ('-')));
  2529  04AD  302D               	movlw	45
  2530  04AE  00E0               	movwf	??_sprintf^(0+128)
  2531  04AF  086C               	movf	sprintf@sp^(0+128),w
  2532  04B0  0084               	movwf	4
  2533  04B1  0860               	movf	??_sprintf^(0+128),w
  2534  04B2  1383               	bcf	3,7	;select IRP bank0
  2535  04B3  0080               	movwf	0
  2536  04B4  3001               	movlw	1
  2537  04B5  00E0               	movwf	??_sprintf^(0+128)
  2538  04B6  0860               	movf	??_sprintf^(0+128),w
  2539  04B7  07EC               	addwf	sprintf@sp^(0+128),f
  2540  04B8                     l3072:	
  2541                           
  2542                           ;doprnt.c: 1424: if(width)
  2543  04B8  086B               	movf	(sprintf@width+1)^(0+128),w
  2544  04B9  046A               	iorwf	sprintf@width^(0+128),w
  2545  04BA  1903               	skipnz
  2546  04BB  2CF6               	goto	l3094
  2547                           
  2548                           ;doprnt.c: 1426: ((*sp++ = ('0')));
  2549                           
  2550                           ;doprnt.c: 1425: do
  2551  04BC  3030               	movlw	48
  2552  04BD  00E0               	movwf	??_sprintf^(0+128)
  2553  04BE  086C               	movf	sprintf@sp^(0+128),w
  2554  04BF  0084               	movwf	4
  2555  04C0  0860               	movf	??_sprintf^(0+128),w
  2556  04C1  1383               	bcf	3,7	;select IRP bank0
  2557  04C2  0080               	movwf	0
  2558  04C3  3001               	movlw	1
  2559  04C4  00E0               	movwf	??_sprintf^(0+128)
  2560  04C5  0860               	movf	??_sprintf^(0+128),w
  2561  04C6  07EC               	addwf	sprintf@sp^(0+128),f
  2562                           
  2563                           ;doprnt.c: 1427: while(--width);
  2564  04C7  30FF               	movlw	255
  2565  04C8  07EA               	addwf	sprintf@width^(0+128),f
  2566  04C9  1803               	skipnc
  2567  04CA  0AEB               	incf	(sprintf@width+1)^(0+128),f
  2568  04CB  30FF               	movlw	255
  2569  04CC  07EB               	addwf	(sprintf@width+1)^(0+128),f
  2570  04CD  2CB8               	goto	l3072
  2571  04CE                     l3080:	
  2572                           ;doprnt.c: 1429: } else
  2573                           
  2574                           
  2575                           ;doprnt.c: 1431: {
  2576                           ;doprnt.c: 1433: if(width
  2577                           ;doprnt.c: 1437: )
  2578  04CE  086B               	movf	(sprintf@width+1)^(0+128),w
  2579  04CF  046A               	iorwf	sprintf@width^(0+128),w
  2580  04D0  1903               	skipnz
  2581  04D1  2CE7               	goto	l3088
  2582  04D2                     l3082:	
  2583                           ;doprnt.c: 1438: do
  2584                           
  2585                           
  2586                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  2587  04D2  3020               	movlw	32
  2588  04D3  00E0               	movwf	??_sprintf^(0+128)
  2589  04D4  086C               	movf	sprintf@sp^(0+128),w
  2590  04D5  0084               	movwf	4
  2591  04D6  0860               	movf	??_sprintf^(0+128),w
  2592  04D7  1383               	bcf	3,7	;select IRP bank0
  2593  04D8  0080               	movwf	0
  2594  04D9  3001               	movlw	1
  2595  04DA  00E0               	movwf	??_sprintf^(0+128)
  2596  04DB  0860               	movf	??_sprintf^(0+128),w
  2597  04DC  07EC               	addwf	sprintf@sp^(0+128),f
  2598                           
  2599                           ;doprnt.c: 1440: while(--width);
  2600  04DD  30FF               	movlw	255
  2601  04DE  07EA               	addwf	sprintf@width^(0+128),f
  2602  04DF  1803               	skipnc
  2603  04E0  0AEB               	incf	(sprintf@width+1)^(0+128),f
  2604  04E1  30FF               	movlw	255
  2605  04E2  07EB               	addwf	(sprintf@width+1)^(0+128),f
  2606  04E3  086B               	movf	(sprintf@width+1)^(0+128),w
  2607  04E4  046A               	iorwf	sprintf@width^(0+128),w
  2608  04E5  1D03               	skipz
  2609  04E6  2CD2               	goto	l3082
  2610  04E7                     l3088:	
  2611                           
  2612                           ;doprnt.c: 1447: if(flag & 0x03)
  2613  04E7  0869               	movf	sprintf@flag^(0+128),w
  2614  04E8  3903               	andlw	3
  2615  04E9  1903               	btfsc	3,2
  2616  04EA  2CF6               	goto	l3094
  2617                           
  2618                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2619  04EB  302D               	movlw	45
  2620  04EC  00E0               	movwf	??_sprintf^(0+128)
  2621  04ED  086C               	movf	sprintf@sp^(0+128),w
  2622  04EE  0084               	movwf	4
  2623  04EF  0860               	movf	??_sprintf^(0+128),w
  2624  04F0  1383               	bcf	3,7	;select IRP bank0
  2625  04F1  0080               	movwf	0
  2626  04F2  3001               	movlw	1
  2627  04F3  00E0               	movwf	??_sprintf^(0+128)
  2628  04F4  0860               	movf	??_sprintf^(0+128),w
  2629  04F5  07EC               	addwf	sprintf@sp^(0+128),f
  2630  04F6                     l3094:	
  2631                           
  2632                           ;doprnt.c: 1478: }
  2633                           ;doprnt.c: 1481: prec = c;
  2634  04F6  086D               	movf	sprintf@c^(0+128),w
  2635  04F7  00E0               	movwf	??_sprintf^(0+128)
  2636  04F8  0860               	movf	??_sprintf^(0+128),w
  2637  04F9  00E4               	movwf	sprintf@prec^(0+128)
  2638  04FA                     l3102:	
  2639                           ;doprnt.c: 1483: while(prec--) {
  2640                           
  2641  04FA  30FF               	movlw	-1
  2642  04FB  00E0               	movwf	??_sprintf^(0+128)
  2643  04FC  0860               	movf	??_sprintf^(0+128),w
  2644  04FD  07E4               	addwf	sprintf@prec^(0+128),f
  2645  04FE  0864               	movf	sprintf@prec^(0+128),w
  2646  04FF  3AFF               	xorlw	-1
  2647  0500  1903               	btfsc	3,2
  2648  0501  2B3B               	goto	l3104
  2649                           
  2650                           ;doprnt.c: 1487: {
  2651                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2652  0502  300A               	movlw	10
  2653  0503  00D8               	movwf	___lwmod@divisor^(0+128)
  2654  0504  3000               	movlw	0
  2655  0505  00D9               	movwf	(___lwmod@divisor^(0+128)+1)
  2656  0506  0864               	movf	sprintf@prec^(0+128),w
  2657  0507  00E0               	movwf	??_sprintf^(0+128)
  2658  0508  0760               	addwf	??_sprintf^(0+128),w
  2659  0509  3E12               	addlw	low (_dpowers| (0+32768))
  2660  050A  0084               	movwf	4
  2661  050B  3090               	movlw	high (_dpowers| (0+32768))
  2662  050C  1803               	skipnc
  2663  050D  3E01               	addlw	1
  2664  050E  1283               	bcf	3,5	;RP0=0, select bank0
  2665  050F  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0510  00FF               	movwf	127
  2667  0511  160A  118A  2000  120A  118A  	fcall	stringtab
  2668  0516  00B7               	movwf	___lwdiv@divisor
  2669  0517  160A  118A  2000  120A  118A  	fcall	stringtab
  2670  051C  00B8               	movwf	___lwdiv@divisor+1
  2671  051D  1683               	bsf	3,5	;RP0=1, select bank1
  2672  051E  1303               	bcf	3,6	;RP1=0, select bank1
  2673  051F  0866               	movf	(sprintf@_val+1)^(0+128),w
  2674  0520  1283               	bcf	3,5	;RP0=0, select bank0
  2675  0521  1303               	bcf	3,6	;RP1=0, select bank0
  2676  0522  01BA               	clrf	___lwdiv@dividend+1
  2677  0523  07BA               	addwf	___lwdiv@dividend+1,f
  2678  0524  1683               	bsf	3,5	;RP0=1, select bank1
  2679  0525  1303               	bcf	3,6	;RP1=0, select bank1
  2680  0526  0865               	movf	sprintf@_val^(0+128),w
  2681  0527  1283               	bcf	3,5	;RP0=0, select bank0
  2682  0528  1303               	bcf	3,6	;RP1=0, select bank0
  2683  0529  01B9               	clrf	___lwdiv@dividend
  2684  052A  07B9               	addwf	___lwdiv@dividend,f
  2685  052B  120A  158A  23D2  120A  118A  	fcall	___lwdiv
  2686  0530  1283               	bcf	3,5	;RP0=0, select bank0
  2687  0531  1303               	bcf	3,6	;RP1=0, select bank0
  2688  0532  0838               	movf	?___lwdiv+1,w
  2689  0533  1683               	bsf	3,5	;RP0=1, select bank1
  2690  0534  1303               	bcf	3,6	;RP1=0, select bank1
  2691  0535  01DB               	clrf	(___lwmod@dividend+1)^(0+128)
  2692  0536  07DB               	addwf	(___lwmod@dividend+1)^(0+128),f
  2693  0537  1283               	bcf	3,5	;RP0=0, select bank0
  2694  0538  1303               	bcf	3,6	;RP1=0, select bank0
  2695  0539  0837               	movf	?___lwdiv,w
  2696  053A  1683               	bsf	3,5	;RP0=1, select bank1
  2697  053B  1303               	bcf	3,6	;RP1=0, select bank1
  2698  053C  01DA               	clrf	___lwmod@dividend^(0+128)
  2699  053D  07DA               	addwf	___lwmod@dividend^(0+128),f
  2700  053E  120A  158A  2412  120A  118A  	fcall	___lwmod
  2701  0543  1683               	bsf	3,5	;RP0=1, select bank1
  2702  0544  1303               	bcf	3,6	;RP1=0, select bank1
  2703  0545  0858               	movf	?___lwmod^(0+128),w
  2704  0546  3E30               	addlw	48
  2705  0547  00E1               	movwf	(??_sprintf+1)^(0+128)
  2706  0548  0861               	movf	(??_sprintf+1)^(0+128),w
  2707  0549  00ED               	movwf	sprintf@c^(0+128)
  2708                           
  2709                           ;doprnt.c: 1532: }
  2710                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2711  054A  086D               	movf	sprintf@c^(0+128),w
  2712  054B  00E0               	movwf	??_sprintf^(0+128)
  2713  054C  086C               	movf	sprintf@sp^(0+128),w
  2714  054D  0084               	movwf	4
  2715  054E  0860               	movf	??_sprintf^(0+128),w
  2716  054F  1383               	bcf	3,7	;select IRP bank0
  2717  0550  0080               	movwf	0
  2718  0551  3001               	movlw	1
  2719  0552  00E0               	movwf	??_sprintf^(0+128)
  2720  0553  0860               	movf	??_sprintf^(0+128),w
  2721  0554  07EC               	addwf	sprintf@sp^(0+128),f
  2722  0555  2CFA               	goto	l3102
  2723  0556                     l3106:	
  2724                           ;doprnt.c: 1534: }
  2725                           ;doprnt.c: 1542: }
  2726                           ;doprnt.c: 1544: alldone:
  2727                           
  2728                           
  2729                           ;doprnt.c: 1547: *sp = 0;
  2730  0556  1683               	bsf	3,5	;RP0=1, select bank1
  2731  0557  1303               	bcf	3,6	;RP1=0, select bank1
  2732  0558  086C               	movf	sprintf@sp^(0+128),w
  2733  0559  0084               	movwf	4
  2734  055A  1383               	bcf	3,7	;select IRP bank0
  2735  055B  0180               	clrf	0
  2736  055C  0008               	return
  2737  055D                     __end_of_sprintf:	
  2738                           ;doprnt.c: 1549: return 0;
  2739                           ;	Return value of _sprintf is never used
  2740                           
  2741                           
  2742                           	psect	text2
  2743  09DA                     __ptext2:	
  2744 ;; *************** function _isdigit *****************
  2745 ;; Defined at:
  2746 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;  c               1    wreg     unsigned char 
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;  c               1   24[BANK0 ] unsigned char 
  2751 ;; Return value:  Size  Location     Type
  2752 ;;		None               void
  2753 ;; Registers used:
  2754 ;;		wreg, status,2, status,0
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2760 ;;      Params:         0       0       0       0       0
  2761 ;;      Locals:         0       2       0       0       0
  2762 ;;      Temps:          0       0       0       0       0
  2763 ;;      Totals:         0       2       0       0       0
  2764 ;;Total ram usage:        2 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    4
  2767 ;; This function calls:
  2768 ;;		Nothing
  2769 ;; This function is called by:
  2770 ;;		_sprintf
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           
  2775                           ;psect for function _isdigit
  2776  09DA                     _isdigit:	
  2777                           
  2778                           ;incstack = 0
  2779                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2780                           ;isdigit@c stored from wreg
  2781  09DA  1283               	bcf	3,5	;RP0=0, select bank0
  2782  09DB  1303               	bcf	3,6	;RP1=0, select bank0
  2783  09DC  00B8               	movwf	isdigit@c
  2784  09DD  01B7               	clrf	_isdigit$1450
  2785  09DE  303A               	movlw	58
  2786  09DF  0238               	subwf	isdigit@c,w
  2787  09E0  1803               	skipnc
  2788  09E1  29E8               	goto	l2858
  2789  09E2  3030               	movlw	48
  2790  09E3  0238               	subwf	isdigit@c,w
  2791  09E4  1C03               	skipc
  2792  09E5  29E8               	goto	l2858
  2793  09E6  01B7               	clrf	_isdigit$1450
  2794  09E7  0AB7               	incf	_isdigit$1450,f
  2795  09E8                     l2858:	
  2796  09E8  0C37               	rrf	_isdigit$1450,w
  2797  09E9  0008               	return
  2798  09EA                     __end_of_isdigit:	
  2799                           
  2800                           	psect	text3
  2801  0B46                     __ptext3:	
  2802 ;; *************** function ___wmul *****************
  2803 ;; Defined at:
  2804 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  multiplier      2   23[BANK0 ] unsigned int 
  2807 ;;  multiplicand    2   25[BANK0 ] unsigned int 
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;  product         2   27[BANK0 ] unsigned int 
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  2   23[BANK0 ] unsigned int 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, status,0
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2819 ;;      Params:         0       4       0       0       0
  2820 ;;      Locals:         0       2       0       0       0
  2821 ;;      Temps:          0       0       0       0       0
  2822 ;;      Totals:         0       6       0       0       0
  2823 ;;Total ram usage:        6 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:    4
  2826 ;; This function calls:
  2827 ;;		Nothing
  2828 ;; This function is called by:
  2829 ;;		_sprintf
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           
  2834                           ;psect for function ___wmul
  2835  0B46                     ___wmul:	
  2836                           
  2837                           ;incstack = 0
  2838                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2839  0B46  1283               	bcf	3,5	;RP0=0, select bank0
  2840  0B47  1303               	bcf	3,6	;RP1=0, select bank0
  2841  0B48  01BB               	clrf	___wmul@product
  2842  0B49  01BC               	clrf	___wmul@product+1
  2843  0B4A                     l2864:	
  2844  0B4A  1C37               	btfss	___wmul@multiplier,0
  2845  0B4B  2B52               	goto	l604
  2846  0B4C  0839               	movf	___wmul@multiplicand,w
  2847  0B4D  07BB               	addwf	___wmul@product,f
  2848  0B4E  1803               	skipnc
  2849  0B4F  0ABC               	incf	___wmul@product+1,f
  2850  0B50  083A               	movf	___wmul@multiplicand+1,w
  2851  0B51  07BC               	addwf	___wmul@product+1,f
  2852  0B52                     l604:	
  2853  0B52  3001               	movlw	1
  2854  0B53                     u2835:	
  2855  0B53  1003               	clrc
  2856  0B54  0DB9               	rlf	___wmul@multiplicand,f
  2857  0B55  0DBA               	rlf	___wmul@multiplicand+1,f
  2858  0B56  3EFF               	addlw	-1
  2859  0B57  1D03               	skipz
  2860  0B58  2B53               	goto	u2835
  2861  0B59  3001               	movlw	1
  2862  0B5A                     u2845:	
  2863  0B5A  1003               	clrc
  2864  0B5B  0CB8               	rrf	___wmul@multiplier+1,f
  2865  0B5C  0CB7               	rrf	___wmul@multiplier,f
  2866  0B5D  3EFF               	addlw	-1
  2867  0B5E  1D03               	skipz
  2868  0B5F  2B5A               	goto	u2845
  2869  0B60  0838               	movf	___wmul@multiplier+1,w
  2870  0B61  0437               	iorwf	___wmul@multiplier,w
  2871  0B62  1D03               	skipz
  2872  0B63  2B4A               	goto	l2864
  2873  0B64  083C               	movf	___wmul@product+1,w
  2874  0B65  01B8               	clrf	?___wmul+1
  2875  0B66  07B8               	addwf	?___wmul+1,f
  2876  0B67  083B               	movf	___wmul@product,w
  2877  0B68  01B7               	clrf	?___wmul
  2878  0B69  07B7               	addwf	?___wmul,f
  2879  0B6A  0008               	return
  2880  0B6B                     __end_of___wmul:	
  2881                           
  2882                           	psect	text4
  2883  0C12                     __ptext4:	
  2884 ;; *************** function ___lwmod *****************
  2885 ;; Defined at:
  2886 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  divisor         2    0[BANK1 ] unsigned int 
  2889 ;;  dividend        2    2[BANK1 ] unsigned int 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  counter         1   32[BANK0 ] unsigned char 
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  2    0[BANK1 ] unsigned int 
  2894 ;; Registers used:
  2895 ;;		wreg, status,2, status,0
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2901 ;;      Params:         0       0       4       0       0
  2902 ;;      Locals:         0       1       0       0       0
  2903 ;;      Temps:          0       1       0       0       0
  2904 ;;      Totals:         0       2       4       0       0
  2905 ;;Total ram usage:        6 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:    4
  2908 ;; This function calls:
  2909 ;;		Nothing
  2910 ;; This function is called by:
  2911 ;;		_sprintf
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           
  2916                           ;psect for function ___lwmod
  2917  0C12                     ___lwmod:	
  2918                           
  2919                           ;incstack = 0
  2920                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2921  0C12  1683               	bsf	3,5	;RP0=1, select bank1
  2922  0C13  1303               	bcf	3,6	;RP1=0, select bank1
  2923  0C14  0859               	movf	(___lwmod@divisor+1)^(0+128),w
  2924  0C15  0458               	iorwf	___lwmod@divisor^(0+128),w
  2925  0C16  1903               	skipnz
  2926  0C17  2C4D               	goto	l2958
  2927  0C18  1283               	bcf	3,5	;RP0=0, select bank0
  2928  0C19  1303               	bcf	3,6	;RP1=0, select bank0
  2929  0C1A  01C0               	clrf	___lwmod@counter
  2930  0C1B  0AC0               	incf	___lwmod@counter,f
  2931  0C1C                     l2948:	
  2932  0C1C  1683               	bsf	3,5	;RP0=1, select bank1
  2933  0C1D  1303               	bcf	3,6	;RP1=0, select bank1
  2934  0C1E  1BD9               	btfsc	(___lwmod@divisor+1)^(0+128),7
  2935  0C1F  2C30               	goto	l2950
  2936  0C20  3001               	movlw	1
  2937  0C21  1683               	bsf	3,5	;RP0=1, select bank1
  2938  0C22  1303               	bcf	3,6	;RP1=0, select bank1
  2939  0C23                     u3045:	
  2940  0C23  1003               	clrc
  2941  0C24  0DD8               	rlf	___lwmod@divisor^(0+128),f
  2942  0C25  0DD9               	rlf	(___lwmod@divisor+1)^(0+128),f
  2943  0C26  3EFF               	addlw	-1
  2944  0C27  1D03               	skipz
  2945  0C28  2C23               	goto	u3045
  2946  0C29  3001               	movlw	1
  2947  0C2A  1283               	bcf	3,5	;RP0=0, select bank0
  2948  0C2B  1303               	bcf	3,6	;RP1=0, select bank0
  2949  0C2C  00BF               	movwf	??___lwmod
  2950  0C2D  083F               	movf	??___lwmod,w
  2951  0C2E  07C0               	addwf	___lwmod@counter,f
  2952  0C2F  2C1C               	goto	l2948
  2953  0C30                     l2950:	
  2954  0C30  1683               	bsf	3,5	;RP0=1, select bank1
  2955  0C31  1303               	bcf	3,6	;RP1=0, select bank1
  2956  0C32  0859               	movf	(___lwmod@divisor+1)^(0+128),w
  2957  0C33  025B               	subwf	(___lwmod@dividend+1)^(0+128),w
  2958  0C34  1D03               	skipz
  2959  0C35  2C38               	goto	u3065
  2960  0C36  0858               	movf	___lwmod@divisor^(0+128),w
  2961  0C37  025A               	subwf	___lwmod@dividend^(0+128),w
  2962  0C38                     u3065:	
  2963  0C38  1C03               	skipc
  2964  0C39  2C40               	goto	l2954
  2965  0C3A  0858               	movf	___lwmod@divisor^(0+128),w
  2966  0C3B  02DA               	subwf	___lwmod@dividend^(0+128),f
  2967  0C3C  0859               	movf	(___lwmod@divisor+1)^(0+128),w
  2968  0C3D  1C03               	skipc
  2969  0C3E  03DB               	decf	(___lwmod@dividend+1)^(0+128),f
  2970  0C3F  02DB               	subwf	(___lwmod@dividend+1)^(0+128),f
  2971  0C40                     l2954:	
  2972  0C40  3001               	movlw	1
  2973  0C41                     u3075:	
  2974  0C41  1003               	clrc
  2975  0C42  0CD9               	rrf	(___lwmod@divisor+1)^(0+128),f
  2976  0C43  0CD8               	rrf	___lwmod@divisor^(0+128),f
  2977  0C44  3EFF               	addlw	-1
  2978  0C45  1D03               	skipz
  2979  0C46  2C41               	goto	u3075
  2980  0C47  3001               	movlw	1
  2981  0C48  1283               	bcf	3,5	;RP0=0, select bank0
  2982  0C49  1303               	bcf	3,6	;RP1=0, select bank0
  2983  0C4A  02C0               	subwf	___lwmod@counter,f
  2984  0C4B  1D03               	btfss	3,2
  2985  0C4C  2C30               	goto	l2950
  2986  0C4D                     l2958:	
  2987  0C4D  1683               	bsf	3,5	;RP0=1, select bank1
  2988  0C4E  1303               	bcf	3,6	;RP1=0, select bank1
  2989  0C4F  085B               	movf	(___lwmod@dividend+1)^(0+128),w
  2990  0C50  01D9               	clrf	(?___lwmod+1)^(0+128)
  2991  0C51  07D9               	addwf	(?___lwmod+1)^(0+128),f
  2992  0C52  085A               	movf	___lwmod@dividend^(0+128),w
  2993  0C53  01D8               	clrf	?___lwmod^(0+128)
  2994  0C54  07D8               	addwf	?___lwmod^(0+128),f
  2995  0C55  0008               	return
  2996  0C56                     __end_of___lwmod:	
  2997                           
  2998                           	psect	text5
  2999  0BD2                     __ptext5:	
  3000 ;; *************** function ___lwdiv *****************
  3001 ;; Defined at:
  3002 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  3003 ;; Parameters:    Size  Location     Type
  3004 ;;  divisor         2   23[BANK0 ] unsigned int 
  3005 ;;  dividend        2   25[BANK0 ] unsigned int 
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  quotient        2   29[BANK0 ] unsigned int 
  3008 ;;  counter         1   28[BANK0 ] unsigned char 
  3009 ;; Return value:  Size  Location     Type
  3010 ;;                  2   23[BANK0 ] unsigned int 
  3011 ;; Registers used:
  3012 ;;		wreg, status,2, status,0
  3013 ;; Tracked objects:
  3014 ;;		On entry : 0/0
  3015 ;;		On exit  : 0/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3018 ;;      Params:         0       4       0       0       0
  3019 ;;      Locals:         0       3       0       0       0
  3020 ;;      Temps:          0       1       0       0       0
  3021 ;;      Totals:         0       8       0       0       0
  3022 ;;Total ram usage:        8 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:    4
  3025 ;; This function calls:
  3026 ;;		Nothing
  3027 ;; This function is called by:
  3028 ;;		_sprintf
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           
  3033                           ;psect for function ___lwdiv
  3034  0BD2                     ___lwdiv:	
  3035                           
  3036                           ;incstack = 0
  3037                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3038  0BD2  1283               	bcf	3,5	;RP0=0, select bank0
  3039  0BD3  1303               	bcf	3,6	;RP1=0, select bank0
  3040  0BD4  01BD               	clrf	___lwdiv@quotient
  3041  0BD5  01BE               	clrf	___lwdiv@quotient+1
  3042  0BD6  0838               	movf	___lwdiv@divisor+1,w
  3043  0BD7  0437               	iorwf	___lwdiv@divisor,w
  3044  0BD8  1903               	skipnz
  3045  0BD9  2C0B               	goto	l2936
  3046  0BDA  01BC               	clrf	___lwdiv@counter
  3047  0BDB  0ABC               	incf	___lwdiv@counter,f
  3048  0BDC                     l2924:	
  3049  0BDC  1BB8               	btfsc	___lwdiv@divisor+1,7
  3050  0BDD  2BEA               	goto	l2926
  3051  0BDE  3001               	movlw	1
  3052  0BDF                     u2975:	
  3053  0BDF  1003               	clrc
  3054  0BE0  0DB7               	rlf	___lwdiv@divisor,f
  3055  0BE1  0DB8               	rlf	___lwdiv@divisor+1,f
  3056  0BE2  3EFF               	addlw	-1
  3057  0BE3  1D03               	skipz
  3058  0BE4  2BDF               	goto	u2975
  3059  0BE5  3001               	movlw	1
  3060  0BE6  00BB               	movwf	??___lwdiv
  3061  0BE7  083B               	movf	??___lwdiv,w
  3062  0BE8  07BC               	addwf	___lwdiv@counter,f
  3063  0BE9  2BDC               	goto	l2924
  3064  0BEA                     l2926:	
  3065  0BEA  3001               	movlw	1
  3066  0BEB                     u2995:	
  3067  0BEB  1003               	clrc
  3068  0BEC  0DBD               	rlf	___lwdiv@quotient,f
  3069  0BED  0DBE               	rlf	___lwdiv@quotient+1,f
  3070  0BEE  3EFF               	addlw	-1
  3071  0BEF  1D03               	skipz
  3072  0BF0  2BEB               	goto	u2995
  3073  0BF1  0838               	movf	___lwdiv@divisor+1,w
  3074  0BF2  023A               	subwf	___lwdiv@dividend+1,w
  3075  0BF3  1D03               	skipz
  3076  0BF4  2BF7               	goto	u3005
  3077  0BF5  0837               	movf	___lwdiv@divisor,w
  3078  0BF6  0239               	subwf	___lwdiv@dividend,w
  3079  0BF7                     u3005:	
  3080  0BF7  1C03               	skipc
  3081  0BF8  2C00               	goto	l2932
  3082  0BF9  0837               	movf	___lwdiv@divisor,w
  3083  0BFA  02B9               	subwf	___lwdiv@dividend,f
  3084  0BFB  0838               	movf	___lwdiv@divisor+1,w
  3085  0BFC  1C03               	skipc
  3086  0BFD  03BA               	decf	___lwdiv@dividend+1,f
  3087  0BFE  02BA               	subwf	___lwdiv@dividend+1,f
  3088  0BFF  143D               	bsf	___lwdiv@quotient,0
  3089  0C00                     l2932:	
  3090  0C00  3001               	movlw	1
  3091  0C01                     u3015:	
  3092  0C01  1003               	clrc
  3093  0C02  0CB8               	rrf	___lwdiv@divisor+1,f
  3094  0C03  0CB7               	rrf	___lwdiv@divisor,f
  3095  0C04  3EFF               	addlw	-1
  3096  0C05  1D03               	skipz
  3097  0C06  2C01               	goto	u3015
  3098  0C07  3001               	movlw	1
  3099  0C08  02BC               	subwf	___lwdiv@counter,f
  3100  0C09  1D03               	btfss	3,2
  3101  0C0A  2BEA               	goto	l2926
  3102  0C0B                     l2936:	
  3103  0C0B  083E               	movf	___lwdiv@quotient+1,w
  3104  0C0C  01B8               	clrf	?___lwdiv+1
  3105  0C0D  07B8               	addwf	?___lwdiv+1,f
  3106  0C0E  083D               	movf	___lwdiv@quotient,w
  3107  0C0F  01B7               	clrf	?___lwdiv
  3108  0C10  07B7               	addwf	?___lwdiv,f
  3109  0C11  0008               	return
  3110  0C12                     __end_of___lwdiv:	
  3111                           
  3112                           	psect	text6
  3113  0B21                     __ptext6:	
  3114 ;; *************** function _USART_WriteString *****************
  3115 ;; Defined at:
  3116 ;;		line 52 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  str             2   24[BANK0 ] PTR const unsigned char 
  3119 ;;		 -> STR_19(40), STR_16(3), display_rpm(10), STR_12(20), 
  3120 ;;		 -> STR_11(29), STR_10(15), STR_9(15), STR_8(14), 
  3121 ;;		 -> STR_7(14), STR_6(14), STR_5(14), STR_4(14), 
  3122 ;;		 -> STR_3(13), STR_2(13), STR_1(14), 
  3123 ;; Auto vars:     Size  Location     Type
  3124 ;;		None
  3125 ;; Return value:  Size  Location     Type
  3126 ;;		None               void
  3127 ;; Registers used:
  3128 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3134 ;;      Params:         0       2       0       0       0
  3135 ;;      Locals:         0       0       0       0       0
  3136 ;;      Temps:          0       0       0       0       0
  3137 ;;      Totals:         0       2       0       0       0
  3138 ;;Total ram usage:        2 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; Hardware stack levels required when called:    5
  3141 ;; This function calls:
  3142 ;;		_USART_WriteChar
  3143 ;; This function is called by:
  3144 ;;		_main
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           
  3149                           ;psect for function _USART_WriteString
  3150  0B21                     _USART_WriteString:	
  3151  0B21                     l2434:	
  3152                           ;usart.c: 54: while(*str != '\0')
  3153                           
  3154                           ;incstack = 0
  3155                           ; Regs used in _USART_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3156                           
  3157  0B21  1283               	bcf	3,5	;RP0=0, select bank0
  3158  0B22  1303               	bcf	3,6	;RP1=0, select bank0
  3159  0B23  0839               	movf	USART_WriteString@str+1,w
  3160  0B24  00FF               	movwf	127
  3161  0B25  0838               	movf	USART_WriteString@str,w
  3162  0B26  0084               	movwf	4
  3163  0B27  160A  118A  2000  120A  158A  	fcall	stringtab
  3164  0B2C  3800               	iorlw	0
  3165  0B2D  1903               	btfsc	3,2
  3166  0B2E  0008               	return
  3167                           
  3168                           ;usart.c: 55: {
  3169                           ;usart.c: 56: USART_WriteChar(*str);
  3170  0B2F  1283               	bcf	3,5	;RP0=0, select bank0
  3171  0B30  1303               	bcf	3,6	;RP1=0, select bank0
  3172  0B31  0839               	movf	USART_WriteString@str+1,w
  3173  0B32  00FF               	movwf	127
  3174  0B33  0838               	movf	USART_WriteString@str,w
  3175  0B34  0084               	movwf	4
  3176  0B35  160A  118A  2000  120A  158A  	fcall	stringtab
  3177  0B3A  120A  158A  219A  120A  158A  	fcall	_USART_WriteChar
  3178                           
  3179                           ;usart.c: 57: str++;
  3180  0B3F  3001               	movlw	1
  3181  0B40  1283               	bcf	3,5	;RP0=0, select bank0
  3182  0B41  1303               	bcf	3,6	;RP1=0, select bank0
  3183  0B42  07B8               	addwf	USART_WriteString@str,f
  3184  0B43  1803               	skipnc
  3185  0B44  0AB9               	incf	USART_WriteString@str+1,f
  3186  0B45  2B21               	goto	l2434
  3187  0B46                     __end_of_USART_WriteString:	
  3188                           
  3189                           	psect	text7
  3190  099A                     __ptext7:	
  3191 ;; *************** function _USART_WriteChar *****************
  3192 ;; Defined at:
  3193 ;;		line 44 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  byte            1    wreg     unsigned char 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  byte            1   23[BANK0 ] unsigned char 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;		None               void
  3200 ;; Registers used:
  3201 ;;		wreg
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3207 ;;      Params:         0       0       0       0       0
  3208 ;;      Locals:         0       1       0       0       0
  3209 ;;      Temps:          0       0       0       0       0
  3210 ;;      Totals:         0       1       0       0       0
  3211 ;;Total ram usage:        1 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    4
  3214 ;; This function calls:
  3215 ;;		Nothing
  3216 ;; This function is called by:
  3217 ;;		_USART_WriteString
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           
  3222                           ;psect for function _USART_WriteChar
  3223  099A                     _USART_WriteChar:	
  3224                           
  3225                           ;incstack = 0
  3226                           ; Regs used in _USART_WriteChar: [wreg]
  3227                           ;USART_WriteChar@byte stored from wreg
  3228  099A  1283               	bcf	3,5	;RP0=0, select bank0
  3229  099B  1303               	bcf	3,6	;RP1=0, select bank0
  3230  099C  00B7               	movwf	USART_WriteChar@byte
  3231  099D                     l233:	
  3232                           ;usart.c: 46: while(!PIR1bits.TXIF);
  3233                           
  3234  099D  1E0C               	btfss	12,4	;volatile
  3235  099E  299D               	goto	l233
  3236                           
  3237                           ;usart.c: 47: TXREG = byte;
  3238  099F  0837               	movf	USART_WriteChar@byte,w
  3239  09A0  0099               	movwf	25	;volatile
  3240  09A1  0008               	return
  3241  09A2                     __end_of_USART_WriteChar:	
  3242                           
  3243                           	psect	text8
  3244  0C56                     __ptext8:	
  3245 ;; *************** function _USART_Init *****************
  3246 ;; Defined at:
  3247 ;;		line 6 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  BaudRate        4    6[BANK1 ] long 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;		None
  3252 ;; Return value:  Size  Location     Type
  3253 ;;		None               void
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0, pclath, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3261 ;;      Params:         0       0       4       0       0
  3262 ;;      Locals:         0       0       0       0       0
  3263 ;;      Temps:          0       0       4       0       0
  3264 ;;      Totals:         0       0       8       0       0
  3265 ;;Total ram usage:        8 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    5
  3268 ;; This function calls:
  3269 ;;		___aldiv
  3270 ;; This function is called by:
  3271 ;;		_main
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           
  3276                           ;psect for function _USART_Init
  3277  0C56                     _USART_Init:	
  3278                           
  3279                           ;usart.c: 13: SPBRG = (unsigned char)(18432000 / (16 * BaudRate)) - 1;
  3280                           
  3281                           ;incstack = 0
  3282                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
  3283  0C56  1683               	bsf	3,5	;RP0=1, select bank1
  3284  0C57  1303               	bcf	3,6	;RP1=0, select bank1
  3285  0C58  085E               	movf	USART_Init@BaudRate^(0+128),w
  3286  0C59  00E2               	movwf	??_USART_Init^(0+128)
  3287  0C5A  085F               	movf	(USART_Init@BaudRate+1)^(0+128),w
  3288  0C5B  00E3               	movwf	(??_USART_Init^(0+128)+1)
  3289  0C5C  0860               	movf	(USART_Init@BaudRate+2)^(0+128),w
  3290  0C5D  00E4               	movwf	(??_USART_Init^(0+128)+2)
  3291  0C5E  0861               	movf	(USART_Init@BaudRate+3)^(0+128),w
  3292  0C5F  00E5               	movwf	(??_USART_Init^(0+128)+3)
  3293  0C60  3004               	movlw	4
  3294  0C61                     u3095:	
  3295  0C61  1003               	clrc
  3296  0C62  0DE2               	rlf	??_USART_Init^(0+128),f
  3297  0C63  0DE3               	rlf	(??_USART_Init^(0+128)+1),f
  3298  0C64  0DE4               	rlf	(??_USART_Init^(0+128)+2),f
  3299  0C65  0DE5               	rlf	(??_USART_Init^(0+128)+3),f
  3300  0C66  3EFF               	addlw	-1
  3301  0C67  1D03               	skipz
  3302  0C68  2C61               	goto	u3095
  3303  0C69  0865               	movf	(??_USART_Init+3)^(0+128),w
  3304  0C6A  1283               	bcf	3,5	;RP0=0, select bank0
  3305  0C6B  1303               	bcf	3,6	;RP1=0, select bank0
  3306  0C6C  00BA               	movwf	___aldiv@divisor+3
  3307  0C6D  1683               	bsf	3,5	;RP0=1, select bank1
  3308  0C6E  1303               	bcf	3,6	;RP1=0, select bank1
  3309  0C6F  0864               	movf	(??_USART_Init+2)^(0+128),w
  3310  0C70  1283               	bcf	3,5	;RP0=0, select bank0
  3311  0C71  1303               	bcf	3,6	;RP1=0, select bank0
  3312  0C72  00B9               	movwf	___aldiv@divisor+2
  3313  0C73  1683               	bsf	3,5	;RP0=1, select bank1
  3314  0C74  1303               	bcf	3,6	;RP1=0, select bank1
  3315  0C75  0863               	movf	(??_USART_Init+1)^(0+128),w
  3316  0C76  1283               	bcf	3,5	;RP0=0, select bank0
  3317  0C77  1303               	bcf	3,6	;RP1=0, select bank0
  3318  0C78  00B8               	movwf	___aldiv@divisor+1
  3319  0C79  1683               	bsf	3,5	;RP0=1, select bank1
  3320  0C7A  1303               	bcf	3,6	;RP1=0, select bank1
  3321  0C7B  0862               	movf	??_USART_Init^(0+128),w
  3322  0C7C  1283               	bcf	3,5	;RP0=0, select bank0
  3323  0C7D  1303               	bcf	3,6	;RP1=0, select bank0
  3324  0C7E  00B7               	movwf	___aldiv@divisor
  3325  0C7F  3001               	movlw	1
  3326  0C80  00BE               	movwf	___aldiv@dividend+3
  3327  0C81  3019               	movlw	25
  3328  0C82  00BD               	movwf	___aldiv@dividend+2
  3329  0C83  3040               	movlw	64
  3330  0C84  00BC               	movwf	___aldiv@dividend+1
  3331  0C85  3000               	movlw	0
  3332  0C86  00BB               	movwf	___aldiv@dividend
  3333  0C87  120A  118A  26DE   	fcall	___aldiv
  3334  0C8A  1283               	bcf	3,5	;RP0=0, select bank0
  3335  0C8B  1303               	bcf	3,6	;RP1=0, select bank0
  3336  0C8C  0837               	movf	?___aldiv,w
  3337  0C8D  3EFF               	addlw	255
  3338  0C8E  1683               	bsf	3,5	;RP0=1, select bank1
  3339  0C8F  1303               	bcf	3,6	;RP1=0, select bank1
  3340  0C90  0099               	movwf	25	;volatile
  3341                           
  3342                           ;usart.c: 16: TXSTAbits.CSRC = 0;
  3343  0C91  1398               	bcf	24,7	;volatile
  3344                           
  3345                           ;usart.c: 17: TXSTAbits.TX9 = 0;
  3346  0C92  1318               	bcf	24,6	;volatile
  3347                           
  3348                           ;usart.c: 18: TXSTAbits.TXEN = 1;
  3349  0C93  1698               	bsf	24,5	;volatile
  3350                           
  3351                           ;usart.c: 19: TXSTAbits.SYNC = 0;
  3352  0C94  1218               	bcf	24,4	;volatile
  3353                           
  3354                           ;usart.c: 21: TXSTAbits.BRGH = 1;
  3355  0C95  1518               	bsf	24,2	;volatile
  3356                           
  3357                           ;usart.c: 22: TXSTAbits.TRMT = 1;
  3358  0C96  1498               	bsf	24,1	;volatile
  3359                           
  3360                           ;usart.c: 23: TXSTAbits.TX9D = 0;
  3361  0C97  1018               	bcf	24,0	;volatile
  3362                           
  3363                           ;usart.c: 26: RCSTAbits.SPEN = 1;
  3364  0C98  1283               	bcf	3,5	;RP0=0, select bank0
  3365  0C99  1303               	bcf	3,6	;RP1=0, select bank0
  3366  0C9A  1798               	bsf	24,7	;volatile
  3367                           
  3368                           ;usart.c: 27: RCSTAbits.RX9 = 0;
  3369  0C9B  1318               	bcf	24,6	;volatile
  3370                           
  3371                           ;usart.c: 28: RCSTAbits.SREN = 0;
  3372  0C9C  1298               	bcf	24,5	;volatile
  3373                           
  3374                           ;usart.c: 29: RCSTAbits.CREN = 1;
  3375  0C9D  1618               	bsf	24,4	;volatile
  3376                           
  3377                           ;usart.c: 30: RCSTAbits.ADDEN = 0;
  3378  0C9E  1198               	bcf	24,3	;volatile
  3379                           
  3380                           ;usart.c: 31: RCSTAbits.FERR = 0;
  3381  0C9F  1118               	bcf	24,2	;volatile
  3382                           
  3383                           ;usart.c: 32: RCSTAbits.OERR = 0;
  3384  0CA0  1098               	bcf	24,1	;volatile
  3385                           
  3386                           ;usart.c: 33: RCSTAbits.RX9D = 0;
  3387  0CA1  1018               	bcf	24,0	;volatile
  3388                           
  3389                           ;usart.c: 36: PIE1bits.TXIE = 0;
  3390  0CA2  1683               	bsf	3,5	;RP0=1, select bank1
  3391  0CA3  1303               	bcf	3,6	;RP1=0, select bank1
  3392  0CA4  120C               	bcf	12,4	;volatile
  3393                           
  3394                           ;usart.c: 37: PIR1bits.TXIF = 0;
  3395  0CA5  1283               	bcf	3,5	;RP0=0, select bank0
  3396  0CA6  1303               	bcf	3,6	;RP1=0, select bank0
  3397  0CA7  120C               	bcf	12,4	;volatile
  3398                           
  3399                           ;usart.c: 38: PIE1bits.RCIE = 1;
  3400  0CA8  1683               	bsf	3,5	;RP0=1, select bank1
  3401  0CA9  1303               	bcf	3,6	;RP1=0, select bank1
  3402  0CAA  168C               	bsf	12,5	;volatile
  3403                           
  3404                           ;usart.c: 39: PIR1bits.RCIF = 0;
  3405  0CAB  1283               	bcf	3,5	;RP0=0, select bank0
  3406  0CAC  1303               	bcf	3,6	;RP1=0, select bank0
  3407  0CAD  128C               	bcf	12,5	;volatile
  3408  0CAE  0008               	return
  3409  0CAF                     __end_of_USART_Init:	
  3410                           
  3411                           	psect	text9
  3412  06DE                     __ptext9:	
  3413 ;; *************** function ___aldiv *****************
  3414 ;; Defined at:
  3415 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;  divisor         4   23[BANK0 ] long 
  3418 ;;  dividend        4   27[BANK0 ] long 
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  quotient        4    2[BANK1 ] long 
  3421 ;;  sign            1    1[BANK1 ] unsigned char 
  3422 ;;  counter         1    0[BANK1 ] unsigned char 
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  4   23[BANK0 ] long 
  3425 ;; Registers used:
  3426 ;;		wreg, status,2, status,0
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3432 ;;      Params:         0       8       0       0       0
  3433 ;;      Locals:         0       0       6       0       0
  3434 ;;      Temps:          0       1       0       0       0
  3435 ;;      Totals:         0       9       6       0       0
  3436 ;;Total ram usage:       15 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    4
  3439 ;; This function calls:
  3440 ;;		Nothing
  3441 ;; This function is called by:
  3442 ;;		_USART_Init
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           
  3447                           ;psect for function ___aldiv
  3448  06DE                     ___aldiv:	
  3449                           
  3450                           ;incstack = 0
  3451                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3452  06DE  1683               	bsf	3,5	;RP0=1, select bank1
  3453  06DF  1303               	bcf	3,6	;RP1=0, select bank1
  3454  06E0  01D9               	clrf	___aldiv@sign^(0+128)
  3455  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  3456  06E2  1303               	bcf	3,6	;RP1=0, select bank0
  3457  06E3  1FBA               	btfss	___aldiv@divisor+3,7
  3458  06E4  2EF4               	goto	l659
  3459  06E5  09B7               	comf	___aldiv@divisor,f
  3460  06E6  09B8               	comf	___aldiv@divisor+1,f
  3461  06E7  09B9               	comf	___aldiv@divisor+2,f
  3462  06E8  09BA               	comf	___aldiv@divisor+3,f
  3463  06E9  0AB7               	incf	___aldiv@divisor,f
  3464  06EA  1903               	skipnz
  3465  06EB  0AB8               	incf	___aldiv@divisor+1,f
  3466  06EC  1903               	skipnz
  3467  06ED  0AB9               	incf	___aldiv@divisor+2,f
  3468  06EE  1903               	skipnz
  3469  06EF  0ABA               	incf	___aldiv@divisor+3,f
  3470  06F0  1683               	bsf	3,5	;RP0=1, select bank1
  3471  06F1  1303               	bcf	3,6	;RP1=0, select bank1
  3472  06F2  01D9               	clrf	___aldiv@sign^(0+128)
  3473  06F3  0AD9               	incf	___aldiv@sign^(0+128),f
  3474  06F4                     l659:	
  3475  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  3476  06F5  1FBE               	btfss	___aldiv@dividend+3,7
  3477  06F6  2F08               	goto	l2884
  3478  06F7  09BB               	comf	___aldiv@dividend,f
  3479  06F8  09BC               	comf	___aldiv@dividend+1,f
  3480  06F9  09BD               	comf	___aldiv@dividend+2,f
  3481  06FA  09BE               	comf	___aldiv@dividend+3,f
  3482  06FB  0ABB               	incf	___aldiv@dividend,f
  3483  06FC  1903               	skipnz
  3484  06FD  0ABC               	incf	___aldiv@dividend+1,f
  3485  06FE  1903               	skipnz
  3486  06FF  0ABD               	incf	___aldiv@dividend+2,f
  3487  0700  1903               	skipnz
  3488  0701  0ABE               	incf	___aldiv@dividend+3,f
  3489  0702  3001               	movlw	1
  3490  0703  00BF               	movwf	??___aldiv
  3491  0704  083F               	movf	??___aldiv,w
  3492  0705  1683               	bsf	3,5	;RP0=1, select bank1
  3493  0706  1303               	bcf	3,6	;RP1=0, select bank1
  3494  0707  06D9               	xorwf	___aldiv@sign^(0+128),f
  3495  0708                     l2884:	
  3496  0708  3000               	movlw	0
  3497  0709  1683               	bsf	3,5	;RP0=1, select bank1
  3498  070A  1303               	bcf	3,6	;RP1=0, select bank1
  3499  070B  00DD               	movwf	(___aldiv@quotient+3)^(0+128)
  3500  070C  3000               	movlw	0
  3501  070D  00DC               	movwf	(___aldiv@quotient+2)^(0+128)
  3502  070E  3000               	movlw	0
  3503  070F  00DB               	movwf	(___aldiv@quotient+1)^(0+128)
  3504  0710  3000               	movlw	0
  3505  0711  00DA               	movwf	___aldiv@quotient^(0+128)
  3506  0712  1283               	bcf	3,5	;RP0=0, select bank0
  3507  0713  1303               	bcf	3,6	;RP1=0, select bank0
  3508  0714  083A               	movf	___aldiv@divisor+3,w
  3509  0715  0439               	iorwf	___aldiv@divisor+2,w
  3510  0716  0438               	iorwf	___aldiv@divisor+1,w
  3511  0717  0437               	iorwf	___aldiv@divisor,w
  3512  0718  1903               	skipnz
  3513  0719  2F72               	goto	l2906
  3514  071A  1683               	bsf	3,5	;RP0=1, select bank1
  3515  071B  1303               	bcf	3,6	;RP1=0, select bank1
  3516  071C  01D8               	clrf	___aldiv@counter^(0+128)
  3517  071D  0AD8               	incf	___aldiv@counter^(0+128),f
  3518  071E                     l2892:	
  3519  071E  1283               	bcf	3,5	;RP0=0, select bank0
  3520  071F  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0720  1BBA               	btfsc	___aldiv@divisor+3,7
  3522  0721  2F33               	goto	l2894
  3523  0722  3001               	movlw	1
  3524  0723  1283               	bcf	3,5	;RP0=0, select bank0
  3525  0724  00BF               	movwf	??___aldiv
  3526  0725                     u2895:	
  3527  0725  1003               	clrc
  3528  0726  0DB7               	rlf	___aldiv@divisor,f
  3529  0727  0DB8               	rlf	___aldiv@divisor+1,f
  3530  0728  0DB9               	rlf	___aldiv@divisor+2,f
  3531  0729  0DBA               	rlf	___aldiv@divisor+3,f
  3532  072A  0BBF               	decfsz	??___aldiv,f
  3533  072B  2F25               	goto	u2895
  3534  072C  3001               	movlw	1
  3535  072D  00BF               	movwf	??___aldiv
  3536  072E  083F               	movf	??___aldiv,w
  3537  072F  1683               	bsf	3,5	;RP0=1, select bank1
  3538  0730  1303               	bcf	3,6	;RP1=0, select bank1
  3539  0731  07D8               	addwf	___aldiv@counter^(0+128),f
  3540  0732  2F1E               	goto	l2892
  3541  0733                     l2894:	
  3542  0733  3001               	movlw	1
  3543  0734  1283               	bcf	3,5	;RP0=0, select bank0
  3544  0735  00BF               	movwf	??___aldiv
  3545  0736                     u2915:	
  3546  0736  1003               	clrc
  3547  0737  1683               	bsf	3,5	;RP0=1, select bank1
  3548  0738  1303               	bcf	3,6	;RP1=0, select bank1
  3549  0739  0DDA               	rlf	___aldiv@quotient^(0+128),f
  3550  073A  0DDB               	rlf	(___aldiv@quotient+1)^(0+128),f
  3551  073B  0DDC               	rlf	(___aldiv@quotient+2)^(0+128),f
  3552  073C  0DDD               	rlf	(___aldiv@quotient+3)^(0+128),f
  3553  073D  1283               	bcf	3,5	;RP0=0, select bank0
  3554  073E  1303               	bcf	3,6	;RP1=0, select bank0
  3555  073F  0BBF               	decfsz	??___aldiv,f
  3556  0740  2F36               	goto	u2915
  3557  0741  083A               	movf	___aldiv@divisor+3,w
  3558  0742  023E               	subwf	___aldiv@dividend+3,w
  3559  0743  1D03               	skipz
  3560  0744  2F4F               	goto	u2925
  3561  0745  0839               	movf	___aldiv@divisor+2,w
  3562  0746  023D               	subwf	___aldiv@dividend+2,w
  3563  0747  1D03               	skipz
  3564  0748  2F4F               	goto	u2925
  3565  0749  0838               	movf	___aldiv@divisor+1,w
  3566  074A  023C               	subwf	___aldiv@dividend+1,w
  3567  074B  1D03               	skipz
  3568  074C  2F4F               	goto	u2925
  3569  074D  0837               	movf	___aldiv@divisor,w
  3570  074E  023B               	subwf	___aldiv@dividend,w
  3571  074F                     u2925:	
  3572  074F  1C03               	skipc
  3573  0750  2F62               	goto	l2902
  3574  0751  0837               	movf	___aldiv@divisor,w
  3575  0752  02BB               	subwf	___aldiv@dividend,f
  3576  0753  0838               	movf	___aldiv@divisor+1,w
  3577  0754  1C03               	skipc
  3578  0755  0F38               	incfsz	___aldiv@divisor+1,w
  3579  0756  02BC               	subwf	___aldiv@dividend+1,f
  3580  0757  0839               	movf	___aldiv@divisor+2,w
  3581  0758  1C03               	skipc
  3582  0759  0F39               	incfsz	___aldiv@divisor+2,w
  3583  075A  02BD               	subwf	___aldiv@dividend+2,f
  3584  075B  083A               	movf	___aldiv@divisor+3,w
  3585  075C  1C03               	skipc
  3586  075D  0F3A               	incfsz	___aldiv@divisor+3,w
  3587  075E  02BE               	subwf	___aldiv@dividend+3,f
  3588  075F  1683               	bsf	3,5	;RP0=1, select bank1
  3589  0760  1303               	bcf	3,6	;RP1=0, select bank1
  3590  0761  145A               	bsf	___aldiv@quotient^(0+128),0
  3591  0762                     l2902:	
  3592  0762  3001               	movlw	1
  3593  0763                     u2935:	
  3594  0763  1003               	clrc
  3595  0764  1283               	bcf	3,5	;RP0=0, select bank0
  3596  0765  0CBA               	rrf	___aldiv@divisor+3,f
  3597  0766  0CB9               	rrf	___aldiv@divisor+2,f
  3598  0767  0CB8               	rrf	___aldiv@divisor+1,f
  3599  0768  0CB7               	rrf	___aldiv@divisor,f
  3600  0769  3EFF               	addlw	-1
  3601  076A  1D03               	skipz
  3602  076B  2F63               	goto	u2935
  3603  076C  3001               	movlw	1
  3604  076D  1683               	bsf	3,5	;RP0=1, select bank1
  3605  076E  1303               	bcf	3,6	;RP1=0, select bank1
  3606  076F  02D8               	subwf	___aldiv@counter^(0+128),f
  3607  0770  1D03               	btfss	3,2
  3608  0771  2F33               	goto	l2894
  3609  0772                     l2906:	
  3610  0772  1683               	bsf	3,5	;RP0=1, select bank1
  3611  0773  1303               	bcf	3,6	;RP1=0, select bank1
  3612  0774  0859               	movf	___aldiv@sign^(0+128),w
  3613  0775  1903               	btfsc	3,2
  3614  0776  2F82               	goto	l2910
  3615  0777  09DA               	comf	___aldiv@quotient^(0+128),f
  3616  0778  09DB               	comf	(___aldiv@quotient+1)^(0+128),f
  3617  0779  09DC               	comf	(___aldiv@quotient+2)^(0+128),f
  3618  077A  09DD               	comf	(___aldiv@quotient+3)^(0+128),f
  3619  077B  0ADA               	incf	___aldiv@quotient^(0+128),f
  3620  077C  1903               	skipnz
  3621  077D  0ADB               	incf	(___aldiv@quotient+1)^(0+128),f
  3622  077E  1903               	skipnz
  3623  077F  0ADC               	incf	(___aldiv@quotient+2)^(0+128),f
  3624  0780  1903               	skipnz
  3625  0781  0ADD               	incf	(___aldiv@quotient+3)^(0+128),f
  3626  0782                     l2910:	
  3627  0782  085D               	movf	(___aldiv@quotient+3)^(0+128),w
  3628  0783  1283               	bcf	3,5	;RP0=0, select bank0
  3629  0784  1303               	bcf	3,6	;RP1=0, select bank0
  3630  0785  00BA               	movwf	?___aldiv+3
  3631  0786  1683               	bsf	3,5	;RP0=1, select bank1
  3632  0787  1303               	bcf	3,6	;RP1=0, select bank1
  3633  0788  085C               	movf	(___aldiv@quotient+2)^(0+128),w
  3634  0789  1283               	bcf	3,5	;RP0=0, select bank0
  3635  078A  1303               	bcf	3,6	;RP1=0, select bank0
  3636  078B  00B9               	movwf	?___aldiv+2
  3637  078C  1683               	bsf	3,5	;RP0=1, select bank1
  3638  078D  1303               	bcf	3,6	;RP1=0, select bank1
  3639  078E  085B               	movf	(___aldiv@quotient+1)^(0+128),w
  3640  078F  1283               	bcf	3,5	;RP0=0, select bank0
  3641  0790  1303               	bcf	3,6	;RP1=0, select bank0
  3642  0791  00B8               	movwf	?___aldiv+1
  3643  0792  1683               	bsf	3,5	;RP0=1, select bank1
  3644  0793  1303               	bcf	3,6	;RP1=0, select bank1
  3645  0794  085A               	movf	___aldiv@quotient^(0+128),w
  3646  0795  1283               	bcf	3,5	;RP0=0, select bank0
  3647  0796  1303               	bcf	3,6	;RP1=0, select bank0
  3648  0797  00B7               	movwf	?___aldiv
  3649  0798  0008               	return
  3650  0799                     __end_of___aldiv:	
  3651                           
  3652                           	psect	text10
  3653  098C                     __ptext10:	
  3654 ;; *************** function _TIMER0_Set *****************
  3655 ;; Defined at:
  3656 ;;		line 20 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\timers.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;  contagens       1    wreg     unsigned char 
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  contagens       1   23[BANK0 ] unsigned char 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;		None               void
  3663 ;; Registers used:
  3664 ;;		wreg
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3670 ;;      Params:         0       0       0       0       0
  3671 ;;      Locals:         0       1       0       0       0
  3672 ;;      Temps:          0       0       0       0       0
  3673 ;;      Totals:         0       1       0       0       0
  3674 ;;Total ram usage:        1 bytes
  3675 ;; Hardware stack levels used:    1
  3676 ;; Hardware stack levels required when called:    4
  3677 ;; This function calls:
  3678 ;;		Nothing
  3679 ;; This function is called by:
  3680 ;;		_main
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           
  3685                           ;psect for function _TIMER0_Set
  3686  098C                     _TIMER0_Set:	
  3687                           
  3688                           ;incstack = 0
  3689                           ; Regs used in _TIMER0_Set: [wreg]
  3690                           ;TIMER0_Set@contagens stored from wreg
  3691  098C  1283               	bcf	3,5	;RP0=0, select bank0
  3692  098D  1303               	bcf	3,6	;RP1=0, select bank0
  3693  098E  00B7               	movwf	TIMER0_Set@contagens
  3694                           
  3695                           ;timers.c: 22: TMR0 = contagens;
  3696  098F  0837               	movf	TIMER0_Set@contagens,w
  3697  0990  0081               	movwf	1	;volatile
  3698  0991  0008               	return
  3699  0992                     __end_of_TIMER0_Set:	
  3700                           
  3701                           	psect	text11
  3702  09A2                     __ptext11:	
  3703 ;; *************** function _TIMER0_Init *****************
  3704 ;; Defined at:
  3705 ;;		line 6 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\timers.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;		None
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;		None
  3710 ;; Return value:  Size  Location     Type
  3711 ;;		None               void
  3712 ;; Registers used:
  3713 ;;		None
  3714 ;; Tracked objects:
  3715 ;;		On entry : 0/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3719 ;;      Params:         0       0       0       0       0
  3720 ;;      Locals:         0       0       0       0       0
  3721 ;;      Temps:          0       0       0       0       0
  3722 ;;      Totals:         0       0       0       0       0
  3723 ;;Total ram usage:        0 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    4
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_main
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           
  3734                           ;psect for function _TIMER0_Init
  3735  09A2                     _TIMER0_Init:	
  3736                           
  3737                           ;timers.c: 8: OPTION_REGbits.T0CS = 0;
  3738                           
  3739                           ;incstack = 0
  3740                           ; Regs used in _TIMER0_Init: []
  3741  09A2  1683               	bsf	3,5	;RP0=1, select bank1
  3742  09A3  1303               	bcf	3,6	;RP1=0, select bank1
  3743  09A4  1281               	bcf	1,5	;volatile
  3744                           
  3745                           ;timers.c: 9: OPTION_REGbits.T0SE = 0;
  3746  09A5  1201               	bcf	1,4	;volatile
  3747                           
  3748                           ;timers.c: 10: OPTION_REGbits.PSA = 0;
  3749  09A6  1181               	bcf	1,3	;volatile
  3750                           
  3751                           ;timers.c: 11: OPTION_REGbits.PS2 = 1;
  3752  09A7  1501               	bsf	1,2	;volatile
  3753                           
  3754                           ;timers.c: 12: OPTION_REGbits.PS1 = 1;
  3755  09A8  1481               	bsf	1,1	;volatile
  3756                           
  3757                           ;timers.c: 13: OPTION_REGbits.PS0 = 1;
  3758  09A9  1401               	bsf	1,0	;volatile
  3759                           
  3760                           ;timers.c: 14: INTCONbits.TMR0IF = 0;
  3761  09AA  110B               	bcf	11,2	;volatile
  3762                           
  3763                           ;timers.c: 15: INTCONbits.TMR0IE = 1;
  3764  09AB  168B               	bsf	11,5	;volatile
  3765  09AC  0008               	return
  3766  09AD                     __end_of_TIMER0_Init:	
  3767                           
  3768                           	psect	text12
  3769  0AD8                     __ptext12:	
  3770 ;; *************** function _PWM_Init *****************
  3771 ;; Defined at:
  3772 ;;		line 5 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;		None
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;		None
  3777 ;; Return value:  Size  Location     Type
  3778 ;;		None               void
  3779 ;; Registers used:
  3780 ;;		wreg
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3786 ;;      Params:         0       0       0       0       0
  3787 ;;      Locals:         0       0       0       0       0
  3788 ;;      Temps:          0       0       0       0       0
  3789 ;;      Totals:         0       0       0       0       0
  3790 ;;Total ram usage:        0 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; Hardware stack levels required when called:    4
  3793 ;; This function calls:
  3794 ;;		Nothing
  3795 ;; This function is called by:
  3796 ;;		_main
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           
  3801                           ;psect for function _PWM_Init
  3802  0AD8                     _PWM_Init:	
  3803                           
  3804                           ;pwm.c: 14: T2CONbits.T2CKPS1 = 1;
  3805                           
  3806                           ;incstack = 0
  3807                           ; Regs used in _PWM_Init: [wreg]
  3808  0AD8  1283               	bcf	3,5	;RP0=0, select bank0
  3809  0AD9  1303               	bcf	3,6	;RP1=0, select bank0
  3810  0ADA  1492               	bsf	18,1	;volatile
  3811                           
  3812                           ;pwm.c: 15: T2CONbits.T2CKPS0 = 0;
  3813  0ADB  1012               	bcf	18,0	;volatile
  3814                           
  3815                           ;pwm.c: 18: T2CONbits.TOUTPS3 = 0;
  3816  0ADC  1312               	bcf	18,6	;volatile
  3817                           
  3818                           ;pwm.c: 19: T2CONbits.TOUTPS2 = 0;
  3819  0ADD  1292               	bcf	18,5	;volatile
  3820                           
  3821                           ;pwm.c: 20: T2CONbits.TOUTPS1 = 0;
  3822  0ADE  1212               	bcf	18,4	;volatile
  3823                           
  3824                           ;pwm.c: 21: T2CONbits.TOUTPS0 = 0;
  3825  0ADF  1192               	bcf	18,3	;volatile
  3826                           
  3827                           ;pwm.c: 24: T2CONbits.TMR2ON = 1;
  3828  0AE0  1512               	bsf	18,2	;volatile
  3829                           
  3830                           ;pwm.c: 27: PR2 = 255;
  3831  0AE1  30FF               	movlw	255
  3832  0AE2  1683               	bsf	3,5	;RP0=1, select bank1
  3833  0AE3  1303               	bcf	3,6	;RP1=0, select bank1
  3834  0AE4  0092               	movwf	18	;volatile
  3835                           
  3836                           ;pwm.c: 43: CCP1CONbits.CCP1M3 = 1;
  3837  0AE5  1283               	bcf	3,5	;RP0=0, select bank0
  3838  0AE6  1303               	bcf	3,6	;RP1=0, select bank0
  3839  0AE7  1597               	bsf	23,3	;volatile
  3840                           
  3841                           ;pwm.c: 44: CCP1CONbits.CCP1M2 = 1;
  3842  0AE8  1517               	bsf	23,2	;volatile
  3843                           
  3844                           ;pwm.c: 45: CCP1CONbits.CCP1M1 = 1;
  3845  0AE9  1497               	bsf	23,1	;volatile
  3846                           
  3847                           ;pwm.c: 46: CCP1CONbits.CCP1M0 = 1;
  3848  0AEA  1417               	bsf	23,0	;volatile
  3849                           
  3850                           ;pwm.c: 49: PIE1bits.CCP1IE = 1;
  3851  0AEB  1683               	bsf	3,5	;RP0=1, select bank1
  3852  0AEC  1303               	bcf	3,6	;RP1=0, select bank1
  3853  0AED  150C               	bsf	12,2	;volatile
  3854                           
  3855                           ;pwm.c: 50: PIR1bits.CCP1IF = 0;
  3856  0AEE  1283               	bcf	3,5	;RP0=0, select bank0
  3857  0AEF  1303               	bcf	3,6	;RP1=0, select bank0
  3858  0AF0  110C               	bcf	12,2	;volatile
  3859                           
  3860                           ;pwm.c: 53: CCP2CONbits.CCP2M3 = 1;
  3861  0AF1  159D               	bsf	29,3	;volatile
  3862                           
  3863                           ;pwm.c: 54: CCP2CONbits.CCP2M2 = 1;
  3864  0AF2  151D               	bsf	29,2	;volatile
  3865                           
  3866                           ;pwm.c: 55: CCP2CONbits.CCP2M1 = 1;
  3867  0AF3  149D               	bsf	29,1	;volatile
  3868                           
  3869                           ;pwm.c: 56: CCP2CONbits.CCP2M0 = 1;
  3870  0AF4  141D               	bsf	29,0	;volatile
  3871                           
  3872                           ;pwm.c: 59: PIE2bits.CCP2IE = 1;
  3873  0AF5  1683               	bsf	3,5	;RP0=1, select bank1
  3874  0AF6  1303               	bcf	3,6	;RP1=0, select bank1
  3875  0AF7  140D               	bsf	13,0	;volatile
  3876                           
  3877                           ;pwm.c: 60: PIR2bits.CCP2IF = 0;
  3878  0AF8  1283               	bcf	3,5	;RP0=0, select bank0
  3879  0AF9  1303               	bcf	3,6	;RP1=0, select bank0
  3880  0AFA  100D               	bcf	13,0	;volatile
  3881  0AFB  0008               	return
  3882  0AFC                     __end_of_PWM_Init:	
  3883                           
  3884                           	psect	text13
  3885  0A77                     __ptext13:	
  3886 ;; *************** function _PWM_DutyCycle2 *****************
  3887 ;; Defined at:
  3888 ;;		line 96 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;  valor           2   23[BANK0 ] int 
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;		None
  3893 ;; Return value:  Size  Location     Type
  3894 ;;		None               void
  3895 ;; Registers used:
  3896 ;;		wreg, status,2, status,0
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3902 ;;      Params:         0       2       0       0       0
  3903 ;;      Locals:         0       0       0       0       0
  3904 ;;      Temps:          0       2       0       0       0
  3905 ;;      Totals:         0       4       0       0       0
  3906 ;;Total ram usage:        4 bytes
  3907 ;; Hardware stack levels used:    1
  3908 ;; Hardware stack levels required when called:    4
  3909 ;; This function calls:
  3910 ;;		Nothing
  3911 ;; This function is called by:
  3912 ;;		_main
  3913 ;; This function uses a non-reentrant model
  3914 ;;
  3915                           
  3916                           
  3917                           ;psect for function _PWM_DutyCycle2
  3918  0A77                     _PWM_DutyCycle2:	
  3919                           
  3920                           ;pwm.c: 98: CCPR2L = valor >> 2;
  3921                           
  3922                           ;incstack = 0
  3923                           ; Regs used in _PWM_DutyCycle2: [wreg+status,2+status,0]
  3924  0A77  1283               	bcf	3,5	;RP0=0, select bank0
  3925  0A78  1303               	bcf	3,6	;RP1=0, select bank0
  3926  0A79  0838               	movf	PWM_DutyCycle2@valor+1,w
  3927  0A7A  00BA               	movwf	??_PWM_DutyCycle2+1
  3928  0A7B  0837               	movf	PWM_DutyCycle2@valor,w
  3929  0A7C  00B9               	movwf	??_PWM_DutyCycle2
  3930  0A7D  0D3A               	rlf	??_PWM_DutyCycle2+1,w
  3931  0A7E  0CBA               	rrf	??_PWM_DutyCycle2+1,f
  3932  0A7F  0CB9               	rrf	??_PWM_DutyCycle2,f
  3933  0A80  0D3A               	rlf	??_PWM_DutyCycle2+1,w
  3934  0A81  0CBA               	rrf	??_PWM_DutyCycle2+1,f
  3935  0A82  0CB9               	rrf	??_PWM_DutyCycle2,f
  3936  0A83  0839               	movf	??_PWM_DutyCycle2,w
  3937  0A84  009B               	movwf	27	;volatile
  3938                           
  3939                           ;pwm.c: 99: CCP2CON = (valor << 4)|0X0C;
  3940  0A85  0837               	movf	PWM_DutyCycle2@valor,w
  3941  0A86  00B9               	movwf	??_PWM_DutyCycle2
  3942  0A87  3003               	movlw	3
  3943  0A88                     u2365:	
  3944  0A88  1003               	clrc
  3945  0A89  0DB9               	rlf	??_PWM_DutyCycle2,f
  3946  0A8A  3EFF               	addlw	-1
  3947  0A8B  1D03               	skipz
  3948  0A8C  2A88               	goto	u2365
  3949  0A8D  1003               	clrc
  3950  0A8E  0D39               	rlf	??_PWM_DutyCycle2,w
  3951  0A8F  380C               	iorlw	12
  3952  0A90  009D               	movwf	29	;volatile
  3953  0A91  0008               	return
  3954  0A92                     __end_of_PWM_DutyCycle2:	
  3955                           
  3956                           	psect	text14
  3957  0A5C                     __ptext14:	
  3958 ;; *************** function _PWM_DutyCycle1 *****************
  3959 ;; Defined at:
  3960 ;;		line 64 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  3961 ;; Parameters:    Size  Location     Type
  3962 ;;  valor           2   23[BANK0 ] int 
  3963 ;; Auto vars:     Size  Location     Type
  3964 ;;		None
  3965 ;; Return value:  Size  Location     Type
  3966 ;;		None               void
  3967 ;; Registers used:
  3968 ;;		wreg, status,2, status,0
  3969 ;; Tracked objects:
  3970 ;;		On entry : 0/0
  3971 ;;		On exit  : 0/0
  3972 ;;		Unchanged: 0/0
  3973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3974 ;;      Params:         0       2       0       0       0
  3975 ;;      Locals:         0       0       0       0       0
  3976 ;;      Temps:          0       2       0       0       0
  3977 ;;      Totals:         0       4       0       0       0
  3978 ;;Total ram usage:        4 bytes
  3979 ;; Hardware stack levels used:    1
  3980 ;; Hardware stack levels required when called:    4
  3981 ;; This function calls:
  3982 ;;		Nothing
  3983 ;; This function is called by:
  3984 ;;		_main
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           
  3989                           ;psect for function _PWM_DutyCycle1
  3990  0A5C                     _PWM_DutyCycle1:	
  3991                           
  3992                           ;pwm.c: 91: CCPR1L = valor >> 2;
  3993                           
  3994                           ;incstack = 0
  3995                           ; Regs used in _PWM_DutyCycle1: [wreg+status,2+status,0]
  3996  0A5C  1283               	bcf	3,5	;RP0=0, select bank0
  3997  0A5D  1303               	bcf	3,6	;RP1=0, select bank0
  3998  0A5E  0838               	movf	PWM_DutyCycle1@valor+1,w
  3999  0A5F  00BA               	movwf	??_PWM_DutyCycle1+1
  4000  0A60  0837               	movf	PWM_DutyCycle1@valor,w
  4001  0A61  00B9               	movwf	??_PWM_DutyCycle1
  4002  0A62  0D3A               	rlf	??_PWM_DutyCycle1+1,w
  4003  0A63  0CBA               	rrf	??_PWM_DutyCycle1+1,f
  4004  0A64  0CB9               	rrf	??_PWM_DutyCycle1,f
  4005  0A65  0D3A               	rlf	??_PWM_DutyCycle1+1,w
  4006  0A66  0CBA               	rrf	??_PWM_DutyCycle1+1,f
  4007  0A67  0CB9               	rrf	??_PWM_DutyCycle1,f
  4008  0A68  0839               	movf	??_PWM_DutyCycle1,w
  4009  0A69  0095               	movwf	21	;volatile
  4010                           
  4011                           ;pwm.c: 92: CCP1CON = (valor << 4)|0X0C;
  4012  0A6A  0837               	movf	PWM_DutyCycle1@valor,w
  4013  0A6B  00B9               	movwf	??_PWM_DutyCycle1
  4014  0A6C  3003               	movlw	3
  4015  0A6D                     u2425:	
  4016  0A6D  1003               	clrc
  4017  0A6E  0DB9               	rlf	??_PWM_DutyCycle1,f
  4018  0A6F  3EFF               	addlw	-1
  4019  0A70  1D03               	skipz
  4020  0A71  2A6D               	goto	u2425
  4021  0A72  1003               	clrc
  4022  0A73  0D39               	rlf	??_PWM_DutyCycle1,w
  4023  0A74  380C               	iorlw	12
  4024  0A75  0097               	movwf	23	;volatile
  4025  0A76  0008               	return
  4026  0A77                     __end_of_PWM_DutyCycle1:	
  4027                           
  4028                           	psect	text15
  4029  0AFC                     __ptext15:	
  4030 ;; *************** function _LCD_WriteString *****************
  4031 ;; Defined at:
  4032 ;;		line 61 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;  Str             2   25[BANK0 ] PTR const unsigned char 
  4035 ;;		 -> STR_18(6), STR_17(6), display_pwm(10), display_rpm(10), 
  4036 ;;		 -> STR_13(17), 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;		None
  4039 ;; Return value:  Size  Location     Type
  4040 ;;		None               void
  4041 ;; Registers used:
  4042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4048 ;;      Params:         0       2       0       0       0
  4049 ;;      Locals:         0       0       0       0       0
  4050 ;;      Temps:          0       0       0       0       0
  4051 ;;      Totals:         0       2       0       0       0
  4052 ;;Total ram usage:        2 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    5
  4055 ;; This function calls:
  4056 ;;		_LCD_WriteData
  4057 ;; This function is called by:
  4058 ;;		_main
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           
  4063                           ;psect for function _LCD_WriteString
  4064  0AFC                     _LCD_WriteString:	
  4065  0AFC                     l2554:	
  4066                           ;lcd.c: 63: while(*Str != '\0')
  4067                           
  4068                           ;incstack = 0
  4069                           ; Regs used in _LCD_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4070                           
  4071  0AFC  1283               	bcf	3,5	;RP0=0, select bank0
  4072  0AFD  1303               	bcf	3,6	;RP1=0, select bank0
  4073  0AFE  083A               	movf	LCD_WriteString@Str+1,w
  4074  0AFF  00FF               	movwf	127
  4075  0B00  0839               	movf	LCD_WriteString@Str,w
  4076  0B01  0084               	movwf	4
  4077  0B02  160A  118A  2000  120A  158A  	fcall	stringtab
  4078  0B07  3800               	iorlw	0
  4079  0B08  1903               	btfsc	3,2
  4080  0B09  0008               	return
  4081                           
  4082                           ;lcd.c: 64: {
  4083                           ;lcd.c: 65: LCD_WriteData(*Str);
  4084  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  4085  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  4086  0B0C  083A               	movf	LCD_WriteString@Str+1,w
  4087  0B0D  00FF               	movwf	127
  4088  0B0E  0839               	movf	LCD_WriteString@Str,w
  4089  0B0F  0084               	movwf	4
  4090  0B10  160A  118A  2000  120A  158A  	fcall	stringtab
  4091  0B15  120A  158A  21CB  120A  158A  	fcall	_LCD_WriteData
  4092                           
  4093                           ;lcd.c: 66: Str++;
  4094  0B1A  3001               	movlw	1
  4095  0B1B  1283               	bcf	3,5	;RP0=0, select bank0
  4096  0B1C  1303               	bcf	3,6	;RP1=0, select bank0
  4097  0B1D  07B9               	addwf	LCD_WriteString@Str,f
  4098  0B1E  1803               	skipnc
  4099  0B1F  0ABA               	incf	LCD_WriteString@Str+1,f
  4100  0B20  2AFC               	goto	l2554
  4101  0B21                     __end_of_LCD_WriteString:	
  4102                           
  4103                           	psect	text16
  4104  09CB                     __ptext16:	
  4105 ;; *************** function _LCD_WriteData *****************
  4106 ;; Defined at:
  4107 ;;		line 47 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;  Byte            1    wreg     unsigned char 
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;  Byte            1   24[BANK0 ] unsigned char 
  4112 ;; Return value:  Size  Location     Type
  4113 ;;		None               void
  4114 ;; Registers used:
  4115 ;;		wreg
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4121 ;;      Params:         0       0       0       0       0
  4122 ;;      Locals:         0       1       0       0       0
  4123 ;;      Temps:          0       1       0       0       0
  4124 ;;      Totals:         0       2       0       0       0
  4125 ;;Total ram usage:        2 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; Hardware stack levels required when called:    4
  4128 ;; This function calls:
  4129 ;;		Nothing
  4130 ;; This function is called by:
  4131 ;;		_LCD_WriteString
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           
  4136                           ;psect for function _LCD_WriteData
  4137  09CB                     _LCD_WriteData:	
  4138                           
  4139                           ;incstack = 0
  4140                           ; Regs used in _LCD_WriteData: [wreg]
  4141                           ;LCD_WriteData@Byte stored from wreg
  4142  09CB  1283               	bcf	3,5	;RP0=0, select bank0
  4143  09CC  1303               	bcf	3,6	;RP1=0, select bank0
  4144  09CD  00B8               	movwf	LCD_WriteData@Byte
  4145                           
  4146                           ;lcd.c: 49: PORTEbits.RE0 = 1;
  4147  09CE  1409               	bsf	9,0	;volatile
  4148                           
  4149                           ;lcd.c: 51: PORTD = Byte;
  4150  09CF  0838               	movf	LCD_WriteData@Byte,w
  4151  09D0  0088               	movwf	8	;volatile
  4152                           
  4153                           ;lcd.c: 53: PORTEbits.RE1 = 1;
  4154  09D1  1489               	bsf	9,1	;volatile
  4155                           
  4156                           ;lcd.c: 55: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4157  09D2  303D               	movlw	61
  4158  09D3  00B7               	movwf	??_LCD_WriteData
  4159  09D4                     u3317:	
  4160  09D4  0BB7               	decfsz	??_LCD_WriteData,f
  4161  09D5  29D4               	goto	u3317
  4162                           
  4163                           ;lcd.c: 57: PORTEbits.RE1 = 0;
  4164  09D6  1283               	bcf	3,5	;RP0=0, select bank0
  4165  09D7  1303               	bcf	3,6	;RP1=0, select bank0
  4166  09D8  1089               	bcf	9,1	;volatile
  4167  09D9  0008               	return
  4168  09DA                     __end_of_LCD_WriteData:	
  4169                           
  4170                           	psect	text17
  4171  0D17                     __ptext17:	
  4172 ;; *************** function _LCD_Init *****************
  4173 ;; Defined at:
  4174 ;;		line 87 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;		None
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;		None
  4179 ;; Return value:  Size  Location     Type
  4180 ;;		None               void
  4181 ;; Registers used:
  4182 ;;		wreg, status,2, status,0, pclath, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4188 ;;      Params:         0       0       0       0       0
  4189 ;;      Locals:         0       0       0       0       0
  4190 ;;      Temps:          0       2       0       0       0
  4191 ;;      Totals:         0       2       0       0       0
  4192 ;;Total ram usage:        2 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    5
  4195 ;; This function calls:
  4196 ;;		_LCD_WriteCmd
  4197 ;; This function is called by:
  4198 ;;		_main
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           
  4203                           ;psect for function _LCD_Init
  4204  0D17                     _LCD_Init:	
  4205                           
  4206                           ;lcd.c: 90: ADCON1bits.PCFG3 = 0;
  4207                           
  4208                           ;incstack = 0
  4209                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  4210  0D17  1683               	bsf	3,5	;RP0=1, select bank1
  4211  0D18  1303               	bcf	3,6	;RP1=0, select bank1
  4212  0D19  119F               	bcf	31,3	;volatile
  4213                           
  4214                           ;lcd.c: 91: ADCON1bits.PCFG2 = 1;
  4215  0D1A  151F               	bsf	31,2	;volatile
  4216                           
  4217                           ;lcd.c: 92: ADCON1bits.PCFG1 = 0;
  4218  0D1B  109F               	bcf	31,1	;volatile
  4219                           
  4220                           ;lcd.c: 93: ADCON1bits.PCFG0 = 0;
  4221  0D1C  101F               	bcf	31,0	;volatile
  4222                           
  4223                           ;lcd.c: 95: _delay((unsigned long)((15)*(18432000/4000.0)));
  4224  0D1D  305A               	movlw	90
  4225  0D1E  1283               	bcf	3,5	;RP0=0, select bank0
  4226  0D1F  1303               	bcf	3,6	;RP1=0, select bank0
  4227  0D20  00BA               	movwf	??_LCD_Init+1
  4228  0D21  30C3               	movlw	195
  4229  0D22  00B9               	movwf	??_LCD_Init
  4230  0D23                     u3327:	
  4231  0D23  0BB9               	decfsz	??_LCD_Init,f
  4232  0D24  2D23               	goto	u3327
  4233  0D25  0BBA               	decfsz	??_LCD_Init+1,f
  4234  0D26  2D23               	goto	u3327
  4235                           
  4236                           ;lcd.c: 97: LCD_WriteCmd(0x30);
  4237  0D27  3030               	movlw	48
  4238  0D28  120A  158A  21BC  120A  158A  	fcall	_LCD_WriteCmd
  4239                           
  4240                           ;lcd.c: 98: _delay((unsigned long)((4)*(18432000/4000.0)));
  4241  0D2D  3018               	movlw	24
  4242  0D2E  1283               	bcf	3,5	;RP0=0, select bank0
  4243  0D2F  1303               	bcf	3,6	;RP1=0, select bank0
  4244  0D30  00BA               	movwf	??_LCD_Init+1
  4245  0D31  30EF               	movlw	239
  4246  0D32  00B9               	movwf	??_LCD_Init
  4247  0D33                     u3337:	
  4248  0D33  0BB9               	decfsz	??_LCD_Init,f
  4249  0D34  2D33               	goto	u3337
  4250  0D35  0BBA               	decfsz	??_LCD_Init+1,f
  4251  0D36  2D33               	goto	u3337
  4252                           
  4253                           ;lcd.c: 100: LCD_WriteCmd(0x30);
  4254  0D37  3030               	movlw	48
  4255  0D38  120A  158A  21BC  120A  158A  	fcall	_LCD_WriteCmd
  4256                           
  4257                           ;lcd.c: 101: _delay((unsigned long)((100)*(18432000/4000000.0)));
  4258  0D3D  3099               	movlw	153
  4259  0D3E  1283               	bcf	3,5	;RP0=0, select bank0
  4260  0D3F  1303               	bcf	3,6	;RP1=0, select bank0
  4261  0D40  00B9               	movwf	??_LCD_Init
  4262  0D41                     u3347:	
  4263  0D41  0BB9               	decfsz	??_LCD_Init,f
  4264  0D42  2D41               	goto	u3347
  4265                           
  4266                           ;lcd.c: 103: LCD_WriteCmd(0x30);
  4267  0D43  3030               	movlw	48
  4268  0D44  120A  158A  21BC  120A  158A  	fcall	_LCD_WriteCmd
  4269                           
  4270                           ;lcd.c: 104: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4271  0D49  303D               	movlw	61
  4272  0D4A  1283               	bcf	3,5	;RP0=0, select bank0
  4273  0D4B  1303               	bcf	3,6	;RP1=0, select bank0
  4274  0D4C  00B9               	movwf	??_LCD_Init
  4275  0D4D                     u3357:	
  4276  0D4D  0BB9               	decfsz	??_LCD_Init,f
  4277  0D4E  2D4D               	goto	u3357
  4278                           
  4279                           ;lcd.c: 106: LCD_WriteCmd(0x38);
  4280  0D4F  3038               	movlw	56
  4281  0D50  120A  158A  21BC  120A  158A  	fcall	_LCD_WriteCmd
  4282                           
  4283                           ;lcd.c: 107: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4284  0D55  303D               	movlw	61
  4285  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  4286  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  4287  0D58  00B9               	movwf	??_LCD_Init
  4288  0D59                     u3367:	
  4289  0D59  0BB9               	decfsz	??_LCD_Init,f
  4290  0D5A  2D59               	goto	u3367
  4291                           
  4292                           ;lcd.c: 109: LCD_WriteCmd(0x01);
  4293  0D5B  3001               	movlw	1
  4294  0D5C  120A  158A  21BC  120A  158A  	fcall	_LCD_WriteCmd
  4295                           
  4296                           ;lcd.c: 110: _delay((unsigned long)((2)*(18432000/4000.0)));
  4297  0D61  300C               	movlw	12
  4298  0D62  1283               	bcf	3,5	;RP0=0, select bank0
  4299  0D63  1303               	bcf	3,6	;RP1=0, select bank0
  4300  0D64  00BA               	movwf	??_LCD_Init+1
  4301  0D65  30F7               	movlw	247
  4302  0D66  00B9               	movwf	??_LCD_Init
  4303  0D67                     u3377:	
  4304  0D67  0BB9               	decfsz	??_LCD_Init,f
  4305  0D68  2D67               	goto	u3377
  4306  0D69  0BBA               	decfsz	??_LCD_Init+1,f
  4307  0D6A  2D67               	goto	u3377
  4308                           
  4309                           ;lcd.c: 112: LCD_WriteCmd(0x0C);
  4310  0D6B  300C               	movlw	12
  4311  0D6C  120A  158A  21BC  120A  158A  	fcall	_LCD_WriteCmd
  4312                           
  4313                           ;lcd.c: 113: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4314  0D71  303D               	movlw	61
  4315  0D72  1283               	bcf	3,5	;RP0=0, select bank0
  4316  0D73  1303               	bcf	3,6	;RP1=0, select bank0
  4317  0D74  00B9               	movwf	??_LCD_Init
  4318  0D75                     u3387:	
  4319  0D75  0BB9               	decfsz	??_LCD_Init,f
  4320  0D76  2D75               	goto	u3387
  4321                           
  4322                           ;lcd.c: 115: LCD_WriteCmd(0x06);
  4323  0D77  3006               	movlw	6
  4324  0D78  120A  158A  21BC  120A  158A  	fcall	_LCD_WriteCmd
  4325                           
  4326                           ;lcd.c: 116: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4327  0D7D  303D               	movlw	61
  4328  0D7E  1283               	bcf	3,5	;RP0=0, select bank0
  4329  0D7F  1303               	bcf	3,6	;RP1=0, select bank0
  4330  0D80  00B9               	movwf	??_LCD_Init
  4331  0D81                     u3397:	
  4332  0D81  0BB9               	decfsz	??_LCD_Init,f
  4333  0D82  2D81               	goto	u3397
  4334  0D83  0008               	return
  4335  0D84                     __end_of_LCD_Init:	
  4336                           
  4337                           	psect	text18
  4338  0A10                     __ptext18:	
  4339 ;; *************** function _LCD_Cursor *****************
  4340 ;; Defined at:
  4341 ;;		line 10 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;  Row             1    wreg     unsigned char 
  4344 ;;  Col             1   23[BANK0 ] unsigned char 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  Row             1   25[BANK0 ] unsigned char 
  4347 ;; Return value:  Size  Location     Type
  4348 ;;		None               void
  4349 ;; Registers used:
  4350 ;;		wreg, status,2, status,0
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4356 ;;      Params:         0       1       0       0       0
  4357 ;;      Locals:         0       1       0       0       0
  4358 ;;      Temps:          0       1       0       0       0
  4359 ;;      Totals:         0       3       0       0       0
  4360 ;;Total ram usage:        3 bytes
  4361 ;; Hardware stack levels used:    1
  4362 ;; Hardware stack levels required when called:    4
  4363 ;; This function calls:
  4364 ;;		Nothing
  4365 ;; This function is called by:
  4366 ;;		_main
  4367 ;; This function uses a non-reentrant model
  4368 ;;
  4369                           
  4370                           
  4371                           ;psect for function _LCD_Cursor
  4372  0A10                     _LCD_Cursor:	
  4373                           
  4374                           ;incstack = 0
  4375                           ; Regs used in _LCD_Cursor: [wreg+status,2+status,0]
  4376                           ;LCD_Cursor@Row stored from wreg
  4377  0A10  1283               	bcf	3,5	;RP0=0, select bank0
  4378  0A11  1303               	bcf	3,6	;RP1=0, select bank0
  4379  0A12  00B9               	movwf	LCD_Cursor@Row
  4380                           
  4381                           ;lcd.c: 12: PORTEbits.RE0 = 0;
  4382  0A13  1009               	bcf	9,0	;volatile
  4383                           
  4384                           ;lcd.c: 14: if (Row == 0)
  4385  0A14  08B9               	movf	LCD_Cursor@Row,f
  4386  0A15  1D03               	skipz
  4387  0A16  2A1A               	goto	l2540
  4388                           
  4389                           ;lcd.c: 15: {
  4390                           ;lcd.c: 16: PORTD = 0x80 + Col;
  4391  0A17  0837               	movf	LCD_Cursor@Col,w
  4392  0A18  3E80               	addlw	128
  4393  0A19  2A1C               	goto	L2
  4394  0A1A                     l2540:	
  4395                           ;lcd.c: 17: }
  4396                           
  4397                           
  4398                           ;lcd.c: 18: else
  4399                           ;lcd.c: 19: {
  4400                           ;lcd.c: 20: PORTD = 0xC0 + Col;
  4401  0A1A  0837               	movf	LCD_Cursor@Col,w
  4402  0A1B  3EC0               	addlw	192
  4403  0A1C                     L2:	
  4404  0A1C  0088               	movwf	8	;volatile
  4405                           
  4406                           ;lcd.c: 21: }
  4407                           ;lcd.c: 24: PORTEbits.RE1 = 1;
  4408  0A1D  1489               	bsf	9,1	;volatile
  4409                           
  4410                           ;lcd.c: 26: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4411  0A1E  303D               	movlw	61
  4412  0A1F  00B8               	movwf	??_LCD_Cursor
  4413  0A20                     u3407:	
  4414  0A20  0BB8               	decfsz	??_LCD_Cursor,f
  4415  0A21  2A20               	goto	u3407
  4416                           
  4417                           ;lcd.c: 28: PORTEbits.RE1 = 0;
  4418  0A22  1283               	bcf	3,5	;RP0=0, select bank0
  4419  0A23  1303               	bcf	3,6	;RP1=0, select bank0
  4420  0A24  1089               	bcf	9,1	;volatile
  4421  0A25  0008               	return
  4422  0A26                     __end_of_LCD_Cursor:	
  4423                           
  4424                           	psect	text19
  4425  0B6B                     __ptext19:	
  4426 ;; *************** function _LCD_Clear *****************
  4427 ;; Defined at:
  4428 ;;		line 71 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;		None
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;		None
  4433 ;; Return value:  Size  Location     Type
  4434 ;;		None               void
  4435 ;; Registers used:
  4436 ;;		wreg, status,2, status,0, pclath, cstack
  4437 ;; Tracked objects:
  4438 ;;		On entry : 0/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4442 ;;      Params:         0       0       0       0       0
  4443 ;;      Locals:         0       0       0       0       0
  4444 ;;      Temps:          0       2       0       0       0
  4445 ;;      Totals:         0       2       0       0       0
  4446 ;;Total ram usage:        2 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; Hardware stack levels required when called:    5
  4449 ;; This function calls:
  4450 ;;		_LCD_WriteCmd
  4451 ;; This function is called by:
  4452 ;;		_main
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           
  4457                           ;psect for function _LCD_Clear
  4458  0B6B                     _LCD_Clear:	
  4459                           
  4460                           ;lcd.c: 73: LCD_WriteCmd(0x01);
  4461                           
  4462                           ;incstack = 0
  4463                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  4464  0B6B  3001               	movlw	1
  4465  0B6C  120A  158A  21BC  120A  158A  	fcall	_LCD_WriteCmd
  4466                           
  4467                           ;lcd.c: 75: _delay((unsigned long)((2)*(18432000/4000.0)));
  4468  0B71  300C               	movlw	12
  4469  0B72  1283               	bcf	3,5	;RP0=0, select bank0
  4470  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  4471  0B74  00BA               	movwf	??_LCD_Clear+1
  4472  0B75  30F7               	movlw	247
  4473  0B76  00B9               	movwf	??_LCD_Clear
  4474  0B77                     u3417:	
  4475  0B77  0BB9               	decfsz	??_LCD_Clear,f
  4476  0B78  2B77               	goto	u3417
  4477  0B79  0BBA               	decfsz	??_LCD_Clear+1,f
  4478  0B7A  2B77               	goto	u3417
  4479                           
  4480                           ;lcd.c: 77: LCD_WriteCmd(0x0C);
  4481  0B7B  300C               	movlw	12
  4482  0B7C  120A  158A  21BC  120A  158A  	fcall	_LCD_WriteCmd
  4483                           
  4484                           ;lcd.c: 79: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4485  0B81  303D               	movlw	61
  4486  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  4487  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  4488  0B84  00B9               	movwf	??_LCD_Clear
  4489  0B85                     u3427:	
  4490  0B85  0BB9               	decfsz	??_LCD_Clear,f
  4491  0B86  2B85               	goto	u3427
  4492                           
  4493                           ;lcd.c: 81: LCD_WriteCmd(0x06);
  4494  0B87  3006               	movlw	6
  4495  0B88  120A  158A  21BC  120A  158A  	fcall	_LCD_WriteCmd
  4496                           
  4497                           ;lcd.c: 83: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4498  0B8D  303D               	movlw	61
  4499  0B8E  1283               	bcf	3,5	;RP0=0, select bank0
  4500  0B8F  1303               	bcf	3,6	;RP1=0, select bank0
  4501  0B90  00B9               	movwf	??_LCD_Clear
  4502  0B91                     u3437:	
  4503  0B91  0BB9               	decfsz	??_LCD_Clear,f
  4504  0B92  2B91               	goto	u3437
  4505  0B93  0008               	return
  4506  0B94                     __end_of_LCD_Clear:	
  4507                           
  4508                           	psect	text20
  4509  09BC                     __ptext20:	
  4510 ;; *************** function _LCD_WriteCmd *****************
  4511 ;; Defined at:
  4512 ;;		line 32 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\lcd.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;  Byte            1    wreg     unsigned char 
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;  Byte            1   24[BANK0 ] unsigned char 
  4517 ;; Return value:  Size  Location     Type
  4518 ;;		None               void
  4519 ;; Registers used:
  4520 ;;		wreg
  4521 ;; Tracked objects:
  4522 ;;		On entry : 0/0
  4523 ;;		On exit  : 0/0
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4526 ;;      Params:         0       0       0       0       0
  4527 ;;      Locals:         0       1       0       0       0
  4528 ;;      Temps:          0       1       0       0       0
  4529 ;;      Totals:         0       2       0       0       0
  4530 ;;Total ram usage:        2 bytes
  4531 ;; Hardware stack levels used:    1
  4532 ;; Hardware stack levels required when called:    4
  4533 ;; This function calls:
  4534 ;;		Nothing
  4535 ;; This function is called by:
  4536 ;;		_LCD_Clear
  4537 ;;		_LCD_Init
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541                           
  4542                           ;psect for function _LCD_WriteCmd
  4543  09BC                     _LCD_WriteCmd:	
  4544                           
  4545                           ;incstack = 0
  4546                           ; Regs used in _LCD_WriteCmd: [wreg]
  4547                           ;LCD_WriteCmd@Byte stored from wreg
  4548  09BC  1283               	bcf	3,5	;RP0=0, select bank0
  4549  09BD  1303               	bcf	3,6	;RP1=0, select bank0
  4550  09BE  00B8               	movwf	LCD_WriteCmd@Byte
  4551                           
  4552                           ;lcd.c: 34: PORTEbits.RE0 = 0;
  4553  09BF  1009               	bcf	9,0	;volatile
  4554                           
  4555                           ;lcd.c: 36: PORTD = Byte;
  4556  09C0  0838               	movf	LCD_WriteCmd@Byte,w
  4557  09C1  0088               	movwf	8	;volatile
  4558                           
  4559                           ;lcd.c: 39: PORTEbits.RE1 = 1;
  4560  09C2  1489               	bsf	9,1	;volatile
  4561                           
  4562                           ;lcd.c: 41: _delay((unsigned long)((40)*(18432000/4000000.0)));
  4563  09C3  303D               	movlw	61
  4564  09C4  00B7               	movwf	??_LCD_WriteCmd
  4565  09C5                     u3447:	
  4566  09C5  0BB7               	decfsz	??_LCD_WriteCmd,f
  4567  09C6  29C5               	goto	u3447
  4568                           
  4569                           ;lcd.c: 43: PORTEbits.RE1 = 0;
  4570  09C7  1283               	bcf	3,5	;RP0=0, select bank0
  4571  09C8  1303               	bcf	3,6	;RP1=0, select bank0
  4572  09C9  1089               	bcf	9,1	;volatile
  4573  09CA  0008               	return
  4574  09CB                     __end_of_LCD_WriteCmd:	
  4575                           
  4576                           	psect	text21
  4577  09EA                     __ptext21:	
  4578 ;; *************** function _ADC_Init *****************
  4579 ;; Defined at:
  4580 ;;		line 6 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\adc.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;		None
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;		None
  4585 ;; Return value:  Size  Location     Type
  4586 ;;		None               void
  4587 ;; Registers used:
  4588 ;;		None
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4594 ;;      Params:         0       0       0       0       0
  4595 ;;      Locals:         0       0       0       0       0
  4596 ;;      Temps:          0       0       0       0       0
  4597 ;;      Totals:         0       0       0       0       0
  4598 ;;Total ram usage:        0 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; Hardware stack levels required when called:    4
  4601 ;; This function calls:
  4602 ;;		Nothing
  4603 ;; This function is called by:
  4604 ;;		_main
  4605 ;; This function uses a non-reentrant model
  4606 ;;
  4607                           
  4608                           
  4609                           ;psect for function _ADC_Init
  4610  09EA                     _ADC_Init:	
  4611                           
  4612                           ;adc.c: 9: ADCON1bits.ADFM = 1;
  4613                           
  4614                           ;incstack = 0
  4615                           ; Regs used in _ADC_Init: []
  4616  09EA  1683               	bsf	3,5	;RP0=1, select bank1
  4617  09EB  1303               	bcf	3,6	;RP1=0, select bank1
  4618  09EC  179F               	bsf	31,7	;volatile
  4619                           
  4620                           ;adc.c: 32: ADCON1bits.PCFG3 = 1;
  4621  09ED  159F               	bsf	31,3	;volatile
  4622                           
  4623                           ;adc.c: 33: ADCON1bits.PCFG2 = 1;
  4624  09EE  151F               	bsf	31,2	;volatile
  4625                           
  4626                           ;adc.c: 34: ADCON1bits.PCFG1 = 1;
  4627  09EF  149F               	bsf	31,1	;volatile
  4628                           
  4629                           ;adc.c: 35: ADCON1bits.PCFG0 = 0;
  4630  09F0  101F               	bcf	31,0	;volatile
  4631                           
  4632                           ;adc.c: 38: ADCON0bits.ADCS1 = 1;
  4633  09F1  1283               	bcf	3,5	;RP0=0, select bank0
  4634  09F2  1303               	bcf	3,6	;RP1=0, select bank0
  4635  09F3  179F               	bsf	31,7	;volatile
  4636                           
  4637                           ;adc.c: 39: ADCON0bits.ADCS0 = 0;
  4638  09F4  131F               	bcf	31,6	;volatile
  4639                           
  4640                           ;adc.c: 42: PIE1bits.ADIE = 0;
  4641  09F5  1683               	bsf	3,5	;RP0=1, select bank1
  4642  09F6  1303               	bcf	3,6	;RP1=0, select bank1
  4643  09F7  130C               	bcf	12,6	;volatile
  4644                           
  4645                           ;adc.c: 43: PIR1bits.ADIF = 0;
  4646  09F8  1283               	bcf	3,5	;RP0=0, select bank0
  4647  09F9  1303               	bcf	3,6	;RP1=0, select bank0
  4648  09FA  130C               	bcf	12,6	;volatile
  4649  09FB  0008               	return
  4650  09FC                     __end_of_ADC_Init:	
  4651                           
  4652                           	psect	text22
  4653  055D                     __ptext22:	
  4654 ;; *************** function _ISR *****************
  4655 ;; Defined at:
  4656 ;;		line 324 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;		None
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;		None
  4661 ;; Return value:  Size  Location     Type
  4662 ;;		None               void
  4663 ;; Registers used:
  4664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4670 ;;      Params:         0       0       0       0       0
  4671 ;;      Locals:         0       0       0       0       0
  4672 ;;      Temps:          0       4       0       0       0
  4673 ;;      Totals:         0       4       0       0       0
  4674 ;;Total ram usage:        4 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    3
  4677 ;; This function calls:
  4678 ;;		_Fuzzy
  4679 ;;		_USART_ReceiveChar
  4680 ;;		i1_PWM_DutyCycle2
  4681 ;;		i1_TIMER0_Set
  4682 ;;		i1_USART_WriteString
  4683 ;;		i1___lwdiv
  4684 ;;		i1___wmul
  4685 ;; This function is called by:
  4686 ;;		Interrupt level 1
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           
  4691                           ;psect for function _ISR
  4692  055D                     _ISR:	
  4693                           
  4694                           ;main.c: 327: if (PIR1bits.RCIF)
  4695  055D  1E8C               	btfss	12,5	;volatile
  4696  055E  2E6E               	goto	i1l2758
  4697                           
  4698                           ;main.c: 328: {
  4699                           ;main.c: 329: pwmAnt = pwm;
  4700  055F  084A               	movf	_pwm+1,w
  4701  0560  01CC               	clrf	_pwmAnt+1
  4702  0561  07CC               	addwf	_pwmAnt+1,f
  4703  0562  0849               	movf	_pwm,w
  4704  0563  01CB               	clrf	_pwmAnt
  4705  0564  07CB               	addwf	_pwmAnt,f
  4706                           
  4707                           ;main.c: 330: if (USART_ReceiveChar() == '0')
  4708  0565  120A  158A  2241  120A  118A  	fcall	_USART_ReceiveChar
  4709  056A  3A30               	xorlw	48
  4710  056B  1D03               	skipz
  4711  056C  2D85               	goto	i1l2692
  4712                           
  4713                           ;main.c: 331: {
  4714                           ;main.c: 332: USART_WriteString("\n\rdesligado\n\r");
  4715  056D  30EA               	movlw	low (STR_1| (0+32768))
  4716  056E  00F1               	movwf	i1USART_WriteString@str
  4717  056F  3090               	movlw	high (STR_1| (0+32768))
  4718  0570  00F2               	movwf	i1USART_WriteString@str+1
  4719  0571  120A  158A  22B5  120A  118A  	fcall	i1_USART_WriteString
  4720                           
  4721                           ;main.c: 333: pwm = 0;
  4722  0576  1283               	bcf	3,5	;RP0=0, select bank0
  4723  0577  1303               	bcf	3,6	;RP1=0, select bank0
  4724  0578  01C9               	clrf	_pwm
  4725  0579  01CA               	clrf	_pwm+1
  4726                           
  4727                           ;main.c: 334: PWM_DutyCycle2(pwm);
  4728  057A  084A               	movf	_pwm+1,w
  4729  057B  01F1               	clrf	i1PWM_DutyCycle2@valor+1
  4730  057C  07F1               	addwf	i1PWM_DutyCycle2@valor+1,f
  4731  057D  0849               	movf	_pwm,w
  4732  057E  01F0               	clrf	i1PWM_DutyCycle2@valor
  4733  057F  07F0               	addwf	i1PWM_DutyCycle2@valor,f
  4734  0580  120A  158A  2226  120A  118A  	fcall	i1_PWM_DutyCycle2
  4735  0585                     i1l2692:	
  4736                           
  4737                           ;main.c: 336: }
  4738                           ;main.c: 338: if (USART_ReceiveChar() == '1')
  4739  0585  120A  158A  2241  120A  118A  	fcall	_USART_ReceiveChar
  4740  058A  3A31               	xorlw	49
  4741  058B  1D03               	skipz
  4742  058C  2D9C               	goto	i1l2698
  4743                           
  4744                           ;main.c: 339: {
  4745                           ;main.c: 340: USART_WriteString("\n\rpwm = 32\n\r");
  4746  058D  30F8               	movlw	low (STR_2| (0+32768))
  4747  058E  00F1               	movwf	i1USART_WriteString@str
  4748  058F  3090               	movlw	high (STR_2| (0+32768))
  4749  0590  00F2               	movwf	i1USART_WriteString@str+1
  4750  0591  120A  158A  22B5  120A  118A  	fcall	i1_USART_WriteString
  4751                           
  4752                           ;main.c: 341: pwm = 32;
  4753  0596  3020               	movlw	32
  4754  0597  1283               	bcf	3,5	;RP0=0, select bank0
  4755  0598  1303               	bcf	3,6	;RP1=0, select bank0
  4756  0599  00C9               	movwf	_pwm
  4757  059A  3000               	movlw	0
  4758  059B  00CA               	movwf	_pwm+1
  4759  059C                     i1l2698:	
  4760                           
  4761                           ;main.c: 343: }
  4762                           ;main.c: 345: if (USART_ReceiveChar() == '2')
  4763  059C  120A  158A  2241  120A  118A  	fcall	_USART_ReceiveChar
  4764  05A1  3A32               	xorlw	50
  4765  05A2  1D03               	skipz
  4766  05A3  2DB3               	goto	i1l2704
  4767                           
  4768                           ;main.c: 346: {
  4769                           ;main.c: 347: USART_WriteString("\n\rpwm = 64\n\r");
  4770  05A4  3005               	movlw	low (STR_3| (0+32768))
  4771  05A5  00F1               	movwf	i1USART_WriteString@str
  4772  05A6  3091               	movlw	high (STR_3| (0+32768))
  4773  05A7  00F2               	movwf	i1USART_WriteString@str+1
  4774  05A8  120A  158A  22B5  120A  118A  	fcall	i1_USART_WriteString
  4775                           
  4776                           ;main.c: 348: pwm = 64;
  4777  05AD  3040               	movlw	64
  4778  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  4779  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  4780  05B0  00C9               	movwf	_pwm
  4781  05B1  3000               	movlw	0
  4782  05B2  00CA               	movwf	_pwm+1
  4783  05B3                     i1l2704:	
  4784                           
  4785                           ;main.c: 350: }
  4786                           ;main.c: 352: if (USART_ReceiveChar() == '3')
  4787  05B3  120A  158A  2241  120A  118A  	fcall	_USART_ReceiveChar
  4788  05B8  3A33               	xorlw	51
  4789  05B9  1D03               	skipz
  4790  05BA  2DCF               	goto	i1l2714
  4791                           
  4792                           ;main.c: 353: {
  4793                           ;main.c: 354: USART_WriteString("\n\rpwm = 128\n\r");
  4794  05BB  30CE               	movlw	low (STR_4| (0+32768))
  4795  05BC  00F1               	movwf	i1USART_WriteString@str
  4796  05BD  3090               	movlw	high (STR_4| (0+32768))
  4797  05BE  00F2               	movwf	i1USART_WriteString@str+1
  4798  05BF  120A  158A  22B5  120A  118A  	fcall	i1_USART_WriteString
  4799                           
  4800                           ;main.c: 355: pwm = 128;
  4801  05C4  3080               	movlw	128
  4802  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  4803  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  4804  05C7  00C9               	movwf	_pwm
  4805  05C8  3000               	movlw	0
  4806  05C9  00CA               	movwf	_pwm+1
  4807                           
  4808                           ;main.c: 357: if(PORTBbits.RB0 == 0)
  4809  05CA  1806               	btfsc	6,0	;volatile
  4810  05CB  2DCE               	goto	i1l189
  4811                           
  4812                           ;main.c: 358: {
  4813                           ;main.c: 359: PORTBbits.RB0 = 1;
  4814  05CC  1406               	bsf	6,0	;volatile
  4815                           
  4816                           ;main.c: 360: }else{
  4817  05CD  2DCF               	goto	i1l2714
  4818  05CE                     i1l189:	
  4819                           
  4820                           ;main.c: 361: PORTBbits.RB0 = 0;
  4821  05CE  1006               	bcf	6,0	;volatile
  4822  05CF                     i1l2714:	
  4823                           
  4824                           ;main.c: 362: }
  4825                           ;main.c: 363: }
  4826                           ;main.c: 365: if (USART_ReceiveChar() == '4')
  4827  05CF  120A  158A  2241  120A  118A  	fcall	_USART_ReceiveChar
  4828  05D4  3A34               	xorlw	52
  4829  05D5  1D03               	skipz
  4830  05D6  2DEB               	goto	i1l2724
  4831                           
  4832                           ;main.c: 366: {
  4833                           ;main.c: 367: USART_WriteString("\n\rpwm = 256\n\r");
  4834  05D7  30B2               	movlw	low (STR_5| (0+32768))
  4835  05D8  00F1               	movwf	i1USART_WriteString@str
  4836  05D9  3090               	movlw	high (STR_5| (0+32768))
  4837  05DA  00F2               	movwf	i1USART_WriteString@str+1
  4838  05DB  120A  158A  22B5  120A  118A  	fcall	i1_USART_WriteString
  4839                           
  4840                           ;main.c: 368: pwm = 256;
  4841  05E0  3000               	movlw	0
  4842  05E1  1283               	bcf	3,5	;RP0=0, select bank0
  4843  05E2  1303               	bcf	3,6	;RP1=0, select bank0
  4844  05E3  00C9               	movwf	_pwm
  4845  05E4  3001               	movlw	1
  4846  05E5  00CA               	movwf	_pwm+1
  4847                           
  4848                           ;main.c: 370: if(PORTBbits.RB1 == 0)
  4849  05E6  1886               	btfsc	6,1	;volatile
  4850  05E7  2DEA               	goto	i1l192
  4851                           
  4852                           ;main.c: 371: {
  4853                           ;main.c: 372: PORTBbits.RB1 = 1;
  4854  05E8  1486               	bsf	6,1	;volatile
  4855                           
  4856                           ;main.c: 373: }else{
  4857  05E9  2DEB               	goto	i1l2724
  4858  05EA                     i1l192:	
  4859                           
  4860                           ;main.c: 374: PORTBbits.RB1 = 0;
  4861  05EA  1086               	bcf	6,1	;volatile
  4862  05EB                     i1l2724:	
  4863                           
  4864                           ;main.c: 375: }
  4865                           ;main.c: 376: }
  4866                           ;main.c: 378: if (USART_ReceiveChar() == '5')
  4867  05EB  120A  158A  2241  120A  118A  	fcall	_USART_ReceiveChar
  4868  05F0  3A35               	xorlw	53
  4869  05F1  1D03               	skipz
  4870  05F2  2E02               	goto	i1l2730
  4871                           
  4872                           ;main.c: 379: {
  4873                           ;main.c: 380: USART_WriteString("\n\rpwm = 512\n\r");
  4874  05F3  30A4               	movlw	low (STR_6| (0+32768))
  4875  05F4  00F1               	movwf	i1USART_WriteString@str
  4876  05F5  3090               	movlw	high (STR_6| (0+32768))
  4877  05F6  00F2               	movwf	i1USART_WriteString@str+1
  4878  05F7  120A  158A  22B5  120A  118A  	fcall	i1_USART_WriteString
  4879                           
  4880                           ;main.c: 381: pwm = 512;
  4881  05FC  3000               	movlw	0
  4882  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  4883  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  4884  05FF  00C9               	movwf	_pwm
  4885  0600  3002               	movlw	2
  4886  0601  00CA               	movwf	_pwm+1
  4887  0602                     i1l2730:	
  4888                           
  4889                           ;main.c: 383: }
  4890                           ;main.c: 385: if (USART_ReceiveChar() == '6')
  4891  0602  120A  158A  2241  120A  118A  	fcall	_USART_ReceiveChar
  4892  0607  3A36               	xorlw	54
  4893  0608  1D03               	skipz
  4894  0609  2E19               	goto	i1l2736
  4895                           
  4896                           ;main.c: 386: {
  4897                           ;main.c: 387: USART_WriteString("\n\rpwm = 768\n\r");
  4898  060A  30DC               	movlw	low (STR_7| (0+32768))
  4899  060B  00F1               	movwf	i1USART_WriteString@str
  4900  060C  3090               	movlw	high (STR_7| (0+32768))
  4901  060D  00F2               	movwf	i1USART_WriteString@str+1
  4902  060E  120A  158A  22B5  120A  118A  	fcall	i1_USART_WriteString
  4903                           
  4904                           ;main.c: 388: pwm = 768;
  4905  0613  3000               	movlw	0
  4906  0614  1283               	bcf	3,5	;RP0=0, select bank0
  4907  0615  1303               	bcf	3,6	;RP1=0, select bank0
  4908  0616  00C9               	movwf	_pwm
  4909  0617  3003               	movlw	3
  4910  0618  00CA               	movwf	_pwm+1
  4911  0619                     i1l2736:	
  4912                           
  4913                           ;main.c: 390: }
  4914                           ;main.c: 392: if (USART_ReceiveChar() == '7')
  4915  0619  120A  158A  2241  120A  118A  	fcall	_USART_ReceiveChar
  4916  061E  3A37               	xorlw	55
  4917  061F  1D03               	skipz
  4918  0620  2E30               	goto	i1l2742
  4919                           
  4920                           ;main.c: 393: {
  4921                           ;main.c: 394: USART_WriteString("\n\rpwm = 896\n\r");
  4922  0621  30C0               	movlw	low (STR_8| (0+32768))
  4923  0622  00F1               	movwf	i1USART_WriteString@str
  4924  0623  3090               	movlw	high (STR_8| (0+32768))
  4925  0624  00F2               	movwf	i1USART_WriteString@str+1
  4926  0625  120A  158A  22B5  120A  118A  	fcall	i1_USART_WriteString
  4927                           
  4928                           ;main.c: 395: pwm = 896;
  4929  062A  3080               	movlw	128
  4930  062B  1283               	bcf	3,5	;RP0=0, select bank0
  4931  062C  1303               	bcf	3,6	;RP1=0, select bank0
  4932  062D  00C9               	movwf	_pwm
  4933  062E  3003               	movlw	3
  4934  062F  00CA               	movwf	_pwm+1
  4935  0630                     i1l2742:	
  4936                           
  4937                           ;main.c: 397: }
  4938                           ;main.c: 399: if (USART_ReceiveChar() == '8')
  4939  0630  120A  158A  2241  120A  118A  	fcall	_USART_ReceiveChar
  4940  0635  3A38               	xorlw	56
  4941  0636  1D03               	skipz
  4942  0637  2E47               	goto	i1l2748
  4943                           
  4944                           ;main.c: 400: {
  4945                           ;main.c: 401: USART_WriteString("\n\rpwm = 1000\n\r");
  4946  0638  3086               	movlw	low (STR_9| (0+32768))
  4947  0639  00F1               	movwf	i1USART_WriteString@str
  4948  063A  3090               	movlw	high (STR_9| (0+32768))
  4949  063B  00F2               	movwf	i1USART_WriteString@str+1
  4950  063C  120A  158A  22B5  120A  118A  	fcall	i1_USART_WriteString
  4951                           
  4952                           ;main.c: 402: pwm = 1000;
  4953  0641  30E8               	movlw	232
  4954  0642  1283               	bcf	3,5	;RP0=0, select bank0
  4955  0643  1303               	bcf	3,6	;RP1=0, select bank0
  4956  0644  00C9               	movwf	_pwm
  4957  0645  3003               	movlw	3
  4958  0646  00CA               	movwf	_pwm+1
  4959  0647                     i1l2748:	
  4960                           
  4961                           ;main.c: 404: }
  4962                           ;main.c: 406: if (USART_ReceiveChar() == '9')
  4963  0647  120A  158A  2241  120A  118A  	fcall	_USART_ReceiveChar
  4964  064C  3A39               	xorlw	57
  4965  064D  1D03               	skipz
  4966  064E  2E5E               	goto	i1l2754
  4967                           
  4968                           ;main.c: 407: {
  4969                           ;main.c: 408: USART_WriteString("\n\rpwm = 1023\n\r");
  4970  064F  3095               	movlw	low (STR_10| (0+32768))
  4971  0650  00F1               	movwf	i1USART_WriteString@str
  4972  0651  3090               	movlw	high (STR_10| (0+32768))
  4973  0652  00F2               	movwf	i1USART_WriteString@str+1
  4974  0653  120A  158A  22B5  120A  118A  	fcall	i1_USART_WriteString
  4975                           
  4976                           ;main.c: 409: pwm = 1023;
  4977  0658  30FF               	movlw	255
  4978  0659  1283               	bcf	3,5	;RP0=0, select bank0
  4979  065A  1303               	bcf	3,6	;RP1=0, select bank0
  4980  065B  00C9               	movwf	_pwm
  4981  065C  3003               	movlw	3
  4982  065D  00CA               	movwf	_pwm+1
  4983  065E                     i1l2754:	
  4984                           
  4985                           ;main.c: 411: }
  4986                           ;main.c: 415: Fuzzy(pwm);
  4987  065E  1283               	bcf	3,5	;RP0=0, select bank0
  4988  065F  1303               	bcf	3,6	;RP1=0, select bank0
  4989  0660  084A               	movf	_pwm+1,w
  4990  0661  01AD               	clrf	Fuzzy@setpoint+1
  4991  0662  07AD               	addwf	Fuzzy@setpoint+1,f
  4992  0663  0849               	movf	_pwm,w
  4993  0664  01AC               	clrf	Fuzzy@setpoint
  4994  0665  07AC               	addwf	Fuzzy@setpoint,f
  4995  0666  120A  118A  2044  120A  118A  	fcall	_Fuzzy
  4996                           
  4997                           ;main.c: 418: PIR1bits.RCIF = 0;
  4998  066B  1283               	bcf	3,5	;RP0=0, select bank0
  4999  066C  1303               	bcf	3,6	;RP1=0, select bank0
  5000  066D  128C               	bcf	12,5	;volatile
  5001  066E                     i1l2758:	
  5002                           
  5003                           ;main.c: 419: }
  5004                           ;main.c: 422: if (PIR1bits.ADIF)
  5005  066E  1B0C               	btfsc	12,6	;volatile
  5006                           
  5007                           ;main.c: 423: {
  5008                           ;main.c: 427: PIR1bits.ADIF = 0;
  5009  066F  130C               	bcf	12,6	;volatile
  5010                           
  5011                           ;main.c: 428: }
  5012                           ;main.c: 432: if (INTCONbits.T0IF)
  5013  0670  1D0B               	btfss	11,2	;volatile
  5014  0671  2ECF               	goto	i1l2784
  5015                           
  5016                           ;main.c: 433: {
  5017                           ;main.c: 435: TIMER0_Set(238);
  5018  0672  30EE               	movlw	238
  5019  0673  120A  158A  2186  120A  118A  	fcall	i1_TIMER0_Set
  5020                           
  5021                           ;main.c: 438: if (contagens_tm0 < 499)
  5022  0678  3001               	movlw	1
  5023  0679  1683               	bsf	3,5	;RP0=1, select bank1
  5024  067A  1303               	bcf	3,6	;RP1=0, select bank1
  5025  067B  0225               	subwf	(_contagens_tm0+1)^(0+128),w
  5026  067C  30F3               	movlw	243
  5027  067D  1903               	skipnz
  5028  067E  0224               	subwf	_contagens_tm0^(0+128),w
  5029  067F  1803               	skipnc
  5030  0680  2E8B               	goto	i1l2770
  5031                           
  5032                           ;main.c: 439: {
  5033                           ;main.c: 441: contagens_tm0++;
  5034  0681  3001               	movlw	1
  5035  0682  07A4               	addwf	_contagens_tm0^(0+128),f
  5036  0683  1803               	skipnc
  5037  0684  0AA5               	incf	(_contagens_tm0+1)^(0+128),f
  5038  0685  3000               	movlw	0
  5039  0686  07A5               	addwf	(_contagens_tm0+1)^(0+128),f
  5040                           
  5041                           ;main.c: 444: PORTBbits.RB6 = 1;
  5042  0687  1283               	bcf	3,5	;RP0=0, select bank0
  5043  0688  1303               	bcf	3,6	;RP1=0, select bank0
  5044  0689  1706               	bsf	6,6	;volatile
  5045                           
  5046                           ;main.c: 445: }
  5047  068A  2ECE               	goto	i1l2782
  5048  068B                     i1l2770:	
  5049                           
  5050                           ;main.c: 446: else
  5051                           ;main.c: 447: {
  5052                           ;main.c: 449: contagens_tm0 = 0;
  5053  068B  1683               	bsf	3,5	;RP0=1, select bank1
  5054  068C  1303               	bcf	3,6	;RP1=0, select bank1
  5055  068D  01A4               	clrf	_contagens_tm0^(0+128)
  5056  068E  01A5               	clrf	(_contagens_tm0+1)^(0+128)
  5057                           
  5058                           ;main.c: 452: pulsos = (TMR1H << 8) + TMR1L;
  5059  068F  1283               	bcf	3,5	;RP0=0, select bank0
  5060  0690  1303               	bcf	3,6	;RP1=0, select bank0
  5061  0691  080F               	movf	15,w	;volatile
  5062  0692  1683               	bsf	3,5	;RP0=1, select bank1
  5063  0693  1303               	bcf	3,6	;RP1=0, select bank1
  5064  0694  01B5               	clrf	(_pulsos+1)^(0+128)
  5065  0695  07B5               	addwf	(_pulsos+1)^(0+128),f
  5066  0696  1283               	bcf	3,5	;RP0=0, select bank0
  5067  0697  1303               	bcf	3,6	;RP1=0, select bank0
  5068  0698  080E               	movf	14,w	;volatile
  5069  0699  1683               	bsf	3,5	;RP0=1, select bank1
  5070  069A  1303               	bcf	3,6	;RP1=0, select bank1
  5071  069B  01B4               	clrf	_pulsos^(0+128)
  5072  069C  07B4               	addwf	_pulsos^(0+128),f
  5073                           
  5074                           ;main.c: 453: rpm = ((pulsos / pas_cooler) * 120);
  5075  069D  1283               	bcf	3,5	;RP0=0, select bank0
  5076  069E  1303               	bcf	3,6	;RP1=0, select bank0
  5077  069F  0858               	movf	_pas_cooler+1,w
  5078  06A0  01F1               	clrf	i1___lwdiv@divisor+1
  5079  06A1  07F1               	addwf	i1___lwdiv@divisor+1,f
  5080  06A2  0857               	movf	_pas_cooler,w
  5081  06A3  01F0               	clrf	i1___lwdiv@divisor
  5082  06A4  07F0               	addwf	i1___lwdiv@divisor,f
  5083  06A5  1683               	bsf	3,5	;RP0=1, select bank1
  5084  06A6  1303               	bcf	3,6	;RP1=0, select bank1
  5085  06A7  0835               	movf	(_pulsos+1)^(0+128),w
  5086  06A8  01F3               	clrf	i1___lwdiv@dividend+1
  5087  06A9  07F3               	addwf	i1___lwdiv@dividend+1,f
  5088  06AA  0834               	movf	_pulsos^(0+128),w
  5089  06AB  01F2               	clrf	i1___lwdiv@dividend
  5090  06AC  07F2               	addwf	i1___lwdiv@dividend,f
  5091  06AD  120A  158A  2394  120A  118A  	fcall	i1___lwdiv
  5092  06B2  0871               	movf	?i1___lwdiv+1,w
  5093  06B3  01F9               	clrf	i1___wmul@multiplier+1
  5094  06B4  07F9               	addwf	i1___wmul@multiplier+1,f
  5095  06B5  0870               	movf	?i1___lwdiv,w
  5096  06B6  01F8               	clrf	i1___wmul@multiplier
  5097  06B7  07F8               	addwf	i1___wmul@multiplier,f
  5098  06B8  3078               	movlw	120
  5099  06B9  00FA               	movwf	i1___wmul@multiplicand
  5100  06BA  3000               	movlw	0
  5101  06BB  00FB               	movwf	i1___wmul@multiplicand+1
  5102  06BC  120A  158A  2292  120A  118A  	fcall	i1___wmul
  5103  06C1  0879               	movf	?i1___wmul+1,w
  5104  06C2  1683               	bsf	3,5	;RP0=1, select bank1
  5105  06C3  1303               	bcf	3,6	;RP1=0, select bank1
  5106  06C4  01B7               	clrf	(_rpm+1)^(0+128)
  5107  06C5  07B7               	addwf	(_rpm+1)^(0+128),f
  5108  06C6  0878               	movf	?i1___wmul,w
  5109  06C7  01B6               	clrf	_rpm^(0+128)
  5110  06C8  07B6               	addwf	_rpm^(0+128),f
  5111                           
  5112                           ;main.c: 456: TMR1L = 0x00;
  5113  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  5114  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  5115  06CB  018E               	clrf	14	;volatile
  5116                           
  5117                           ;main.c: 457: TMR1H = 0x00;
  5118  06CC  018F               	clrf	15	;volatile
  5119                           
  5120                           ;main.c: 460: PORTBbits.RB6 = 0;
  5121  06CD  1306               	bcf	6,6	;volatile
  5122  06CE                     i1l2782:	
  5123                           
  5124                           ;main.c: 461: }
  5125                           ;main.c: 464: INTCONbits.T0IF = 0;
  5126  06CE  110B               	bcf	11,2	;volatile
  5127  06CF                     i1l2784:	
  5128                           
  5129                           ;main.c: 465: }
  5130                           ;main.c: 468: if (PIR1bits.TMR1IF)
  5131  06CF  180C               	btfsc	12,0	;volatile
  5132                           
  5133                           ;main.c: 469: {
  5134                           ;main.c: 473: PIR1bits.TMR1IF = 0;
  5135  06D0  100C               	bcf	12,0	;volatile
  5136                           
  5137                           ;main.c: 474: }
  5138                           ;main.c: 477: if (PIR1bits.SSPIF)
  5139  06D1  198C               	btfsc	12,3	;volatile
  5140                           
  5141                           ;main.c: 478: {
  5142                           ;main.c: 482: PIR1bits.SSPIF = 0;
  5143  06D2  118C               	bcf	12,3	;volatile
  5144  06D3  0836               	movf	??_ISR+3,w
  5145  06D4  00FF               	movwf	127
  5146  06D5  0835               	movf	??_ISR+2,w
  5147  06D6  008A               	movwf	10
  5148  06D7  0834               	movf	??_ISR+1,w
  5149  06D8  0084               	movwf	4
  5150  06D9  0E33               	swapf	??_ISR^0,w
  5151  06DA  0083               	movwf	3
  5152  06DB  0EFE               	swapf	126,f
  5153  06DC  0E7E               	swapf	126,w
  5154  06DD  0009               	retfie
  5155  06DE                     __end_of_ISR:	
  5156                           
  5157                           	psect	intentry
  5158  0004                     __pintentry:	
  5159                           ;incstack = 0
  5160                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5161                           
  5162  0004                     interrupt_function:	
  5163  007E                     saved_w	set	btemp
  5164  0004  00FE               	movwf	btemp
  5165  0005  0E03               	swapf	3,w
  5166  0006  1283               	bcf	3,5	;RP0=0, select bank0
  5167  0007  1303               	bcf	3,6	;RP1=0, select bank0
  5168  0008  00B3               	movwf	??_ISR
  5169  0009  0804               	movf	4,w
  5170  000A  00B4               	movwf	??_ISR+1
  5171  000B  080A               	movf	10,w
  5172  000C  00B5               	movwf	??_ISR+2
  5173  000D  087F               	movf	btemp+1,w
  5174  000E  00B6               	movwf	??_ISR+3
  5175  000F  120A  118A  2D5D   	ljmp	_ISR
  5176                           
  5177                           	psect	text23
  5178  0986                     __ptext23:	
  5179 ;; *************** function i1_TIMER0_Set *****************
  5180 ;; Defined at:
  5181 ;;		line 20 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\timers.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;  contagens       1    wreg     unsigned char 
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;  contagens       1    0[COMMON] unsigned char 
  5186 ;; Return value:  Size  Location     Type
  5187 ;;		None               void
  5188 ;; Registers used:
  5189 ;;		wreg
  5190 ;; Tracked objects:
  5191 ;;		On entry : 0/0
  5192 ;;		On exit  : 0/0
  5193 ;;		Unchanged: 0/0
  5194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5195 ;;      Params:         0       0       0       0       0
  5196 ;;      Locals:         1       0       0       0       0
  5197 ;;      Temps:          0       0       0       0       0
  5198 ;;      Totals:         1       0       0       0       0
  5199 ;;Total ram usage:        1 bytes
  5200 ;; Hardware stack levels used:    1
  5201 ;; This function calls:
  5202 ;;		Nothing
  5203 ;; This function is called by:
  5204 ;;		_ISR
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           
  5209                           ;psect for function i1_TIMER0_Set
  5210  0986                     i1_TIMER0_Set:	
  5211                           
  5212                           ;incstack = 0
  5213                           ; Regs used in i1_TIMER0_Set: [wreg]
  5214                           ;i1TIMER0_Set@contagens stored from wreg
  5215  0986  00F0               	movwf	i1TIMER0_Set@contagens
  5216                           
  5217                           ;timers.c: 22: TMR0 = contagens;
  5218  0987  0870               	movf	i1TIMER0_Set@contagens,w
  5219  0988  1283               	bcf	3,5	;RP0=0, select bank0
  5220  0989  1303               	bcf	3,6	;RP1=0, select bank0
  5221  098A  0081               	movwf	1	;volatile
  5222  098B  0008               	return
  5223  098C                     __end_ofi1_TIMER0_Set:	
  5224                           
  5225                           	psect	text24
  5226  0A41                     __ptext24:	
  5227 ;; *************** function _USART_ReceiveChar *****************
  5228 ;; Defined at:
  5229 ;;		line 63 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;		None
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  byte            1    4[COMMON] unsigned char 
  5234 ;; Return value:  Size  Location     Type
  5235 ;;                  1    wreg      unsigned char 
  5236 ;; Registers used:
  5237 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5243 ;;      Params:         0       0       0       0       0
  5244 ;;      Locals:         1       0       0       0       0
  5245 ;;      Temps:          1       0       0       0       0
  5246 ;;      Totals:         2       0       0       0       0
  5247 ;;Total ram usage:        2 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:    2
  5250 ;; This function calls:
  5251 ;;		i1_USART_WriteString
  5252 ;; This function is called by:
  5253 ;;		_ISR
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           
  5258                           ;psect for function _USART_ReceiveChar
  5259  0A41                     _USART_ReceiveChar:	
  5260                           
  5261                           ;usart.c: 65: unsigned char byte;
  5262                           ;usart.c: 67: if (!OERR)
  5263                           
  5264                           ;incstack = 0
  5265                           ; Regs used in _USART_ReceiveChar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5266  0A41  1283               	bcf	3,5	;RP0=0, select bank0
  5267  0A42  1303               	bcf	3,6	;RP1=0, select bank0
  5268  0A43  1898               	btfsc	24,1	;volatile
  5269  0A44  2A4A               	goto	i1l2414
  5270                           
  5271                           ;usart.c: 68: {
  5272                           ;usart.c: 69: byte = RCREG;
  5273  0A45  081A               	movf	26,w	;volatile
  5274  0A46  00F3               	movwf	??_USART_ReceiveChar
  5275  0A47  0873               	movf	??_USART_ReceiveChar,w
  5276  0A48  00F4               	movwf	USART_ReceiveChar@byte
  5277  0A49  2A59               	goto	i1l2422
  5278  0A4A                     i1l2414:	
  5279                           ;usart.c: 71: }
  5280                           
  5281                           ;usart.c: 70: PIR1bits.RCIF = 0;
  5282                           
  5283                           
  5284                           ;usart.c: 72: else
  5285                           ;usart.c: 73: {
  5286                           ;usart.c: 74: USART_WriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  5287  0A4A  301C               	movlw	low (STR_19| (0+32768))
  5288  0A4B  00F1               	movwf	i1USART_WriteString@str
  5289  0A4C  3090               	movlw	high (STR_19| (0+32768))
  5290  0A4D  00F2               	movwf	i1USART_WriteString@str+1
  5291  0A4E  120A  158A  22B5   	fcall	i1_USART_WriteString
  5292                           
  5293                           ;usart.c: 76: RCSTAbits.CREN = 0;
  5294  0A51  1283               	bcf	3,5	;RP0=0, select bank0
  5295  0A52  1303               	bcf	3,6	;RP1=0, select bank0
  5296  0A53  1218               	bcf	24,4	;volatile
  5297                           
  5298                           ;usart.c: 77: byte = RCREG;
  5299  0A54  081A               	movf	26,w	;volatile
  5300  0A55  00F3               	movwf	??_USART_ReceiveChar
  5301  0A56  0873               	movf	??_USART_ReceiveChar,w
  5302  0A57  00F4               	movwf	USART_ReceiveChar@byte
  5303                           
  5304                           ;usart.c: 78: RCSTAbits.CREN = 1;
  5305  0A58  1618               	bsf	24,4	;volatile
  5306  0A59                     i1l2422:	
  5307                           
  5308                           ;usart.c: 79: PIR1bits.RCIF = 0;
  5309  0A59  128C               	bcf	12,5	;volatile
  5310                           
  5311                           ;usart.c: 80: }
  5312                           ;usart.c: 82: return(byte);
  5313  0A5A  0874               	movf	USART_ReceiveChar@byte,w
  5314  0A5B  0008               	return
  5315  0A5C                     __end_of_USART_ReceiveChar:	
  5316                           
  5317                           	psect	text25
  5318  0AB5                     __ptext25:	
  5319 ;; *************** function i1_USART_WriteString *****************
  5320 ;; Defined at:
  5321 ;;		line 52 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;  str             2    1[COMMON] PTR const unsigned char 
  5324 ;;		 -> STR_19(40), STR_16(3), display_rpm(10), STR_12(20), 
  5325 ;;		 -> STR_11(29), STR_10(15), STR_9(15), STR_8(14), 
  5326 ;;		 -> STR_7(14), STR_6(14), STR_5(14), STR_4(14), 
  5327 ;;		 -> STR_3(13), STR_2(13), STR_1(14), 
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;		None
  5330 ;; Return value:  Size  Location     Type
  5331 ;;		None               void
  5332 ;; Registers used:
  5333 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5339 ;;      Params:         2       0       0       0       0
  5340 ;;      Locals:         0       0       0       0       0
  5341 ;;      Temps:          0       0       0       0       0
  5342 ;;      Totals:         2       0       0       0       0
  5343 ;;Total ram usage:        2 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    1
  5346 ;; This function calls:
  5347 ;;		i1_USART_WriteChar
  5348 ;; This function is called by:
  5349 ;;		_ISR
  5350 ;;		_USART_ReceiveChar
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           
  5355                           ;psect for function i1_USART_WriteString
  5356  0AB5                     i1_USART_WriteString:	
  5357  0AB5                     i1l2292:	
  5358                           ;usart.c: 54: while(*str != '\0')
  5359                           
  5360                           ;incstack = 0
  5361                           ; Regs used in i1_USART_WriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  5362                           
  5363  0AB5  0872               	movf	i1USART_WriteString@str+1,w
  5364  0AB6  1283               	bcf	3,5	;RP0=0, select bank0
  5365  0AB7  1303               	bcf	3,6	;RP1=0, select bank0
  5366  0AB8  00FF               	movwf	127
  5367  0AB9  0871               	movf	i1USART_WriteString@str,w
  5368  0ABA  0084               	movwf	4
  5369  0ABB  160A  118A  2000  120A  158A  	fcall	stringtab
  5370  0AC0  3800               	iorlw	0
  5371  0AC1  1903               	btfsc	3,2
  5372  0AC2  0008               	return
  5373                           
  5374                           ;usart.c: 55: {
  5375                           ;usart.c: 56: USART_WriteChar(*str);
  5376  0AC3  0872               	movf	i1USART_WriteString@str+1,w
  5377  0AC4  1283               	bcf	3,5	;RP0=0, select bank0
  5378  0AC5  1303               	bcf	3,6	;RP1=0, select bank0
  5379  0AC6  00FF               	movwf	127
  5380  0AC7  0871               	movf	i1USART_WriteString@str,w
  5381  0AC8  0084               	movwf	4
  5382  0AC9  160A  118A  2000  120A  158A  	fcall	stringtab
  5383  0ACE  120A  158A  2192  120A  158A  	fcall	i1_USART_WriteChar
  5384                           
  5385                           ;usart.c: 57: str++;
  5386  0AD3  3001               	movlw	1
  5387  0AD4  07F1               	addwf	i1USART_WriteString@str,f
  5388  0AD5  1803               	skipnc
  5389  0AD6  0AF2               	incf	i1USART_WriteString@str+1,f
  5390  0AD7  2AB5               	goto	i1l2292
  5391  0AD8                     __end_ofi1_USART_WriteString:	
  5392                           
  5393                           	psect	text26
  5394  0992                     __ptext26:	
  5395 ;; *************** function i1_USART_WriteChar *****************
  5396 ;; Defined at:
  5397 ;;		line 44 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\usart.c"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;  byte            1    wreg     unsigned char 
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;  byte            1    0[COMMON] unsigned char 
  5402 ;; Return value:  Size  Location     Type
  5403 ;;		None               void
  5404 ;; Registers used:
  5405 ;;		wreg
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5411 ;;      Params:         0       0       0       0       0
  5412 ;;      Locals:         1       0       0       0       0
  5413 ;;      Temps:          0       0       0       0       0
  5414 ;;      Totals:         1       0       0       0       0
  5415 ;;Total ram usage:        1 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; This function calls:
  5418 ;;		Nothing
  5419 ;; This function is called by:
  5420 ;;		i1_USART_WriteString
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           
  5425                           ;psect for function i1_USART_WriteChar
  5426  0992                     i1_USART_WriteChar:	
  5427                           
  5428                           ;incstack = 0
  5429                           ; Regs used in i1_USART_WriteChar: [wreg]
  5430                           ;i1USART_WriteChar@byte stored from wreg
  5431  0992  00F0               	movwf	i1USART_WriteChar@byte
  5432  0993                     i1l233:	
  5433                           ;usart.c: 46: while(!PIR1bits.TXIF);
  5434                           
  5435  0993  1283               	bcf	3,5	;RP0=0, select bank0
  5436  0994  1303               	bcf	3,6	;RP1=0, select bank0
  5437  0995  1E0C               	btfss	12,4	;volatile
  5438  0996  2993               	goto	i1l233
  5439                           
  5440                           ;usart.c: 47: TXREG = byte;
  5441  0997  0870               	movf	i1USART_WriteChar@byte,w
  5442  0998  0099               	movwf	25	;volatile
  5443  0999  0008               	return
  5444  099A                     __end_ofi1_USART_WriteChar:	
  5445                           
  5446                           	psect	text27
  5447  0044                     __ptext27:	
  5448 ;; *************** function _Fuzzy *****************
  5449 ;; Defined at:
  5450 ;;		line 136 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  setpoint        2   12[BANK0 ] unsigned int 
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;  sum             2   17[BANK0 ] unsigned int 
  5455 ;;  velocidade      1   16[BANK0 ] unsigned char [1]
  5456 ;; Return value:  Size  Location     Type
  5457 ;;		None               void
  5458 ;; Registers used:
  5459 ;;		wreg, status,2, status,0, pclath, cstack
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5465 ;;      Params:         0       2       0       0       0
  5466 ;;      Locals:         0       3       0       0       0
  5467 ;;      Temps:          0       2       0       0       0
  5468 ;;      Totals:         0       7       0       0       0
  5469 ;;Total ram usage:        7 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:    2
  5472 ;; This function calls:
  5473 ;;		___ftge
  5474 ;;		___lwtoft
  5475 ;;		_max_val
  5476 ;;		_trapmf
  5477 ;;		_trimf
  5478 ;;		i1_PWM_DutyCycle2
  5479 ;;		i1___lwdiv
  5480 ;;		i1___wmul
  5481 ;; This function is called by:
  5482 ;;		_ISR
  5483 ;; This function uses a non-reentrant model
  5484 ;;
  5485                           
  5486                           
  5487                           ;psect for function _Fuzzy
  5488  0044                     _Fuzzy:	
  5489                           
  5490                           ;main.c: 147: fitemp =0;
  5491                           
  5492                           ;incstack = 0
  5493                           ; Regs used in _Fuzzy: [wreg+status,2+status,0+pclath+cstack]
  5494  0044  1283               	bcf	3,5	;RP0=0, select bank0
  5495  0045  1303               	bcf	3,6	;RP1=0, select bank0
  5496  0046  01C5               	clrf	_fitemp
  5497  0047  01C6               	clrf	_fitemp+1
  5498                           
  5499                           ;main.c: 150: temp = (setpoint - pwmAnt);
  5500  0048  094B               	comf	_pwmAnt,w
  5501  0049  00AE               	movwf	??_Fuzzy
  5502  004A  094C               	comf	_pwmAnt+1,w
  5503  004B  00AF               	movwf	??_Fuzzy+1
  5504  004C  0AAE               	incf	??_Fuzzy,f
  5505  004D  1903               	skipnz
  5506  004E  0AAF               	incf	??_Fuzzy+1,f
  5507  004F  082C               	movf	Fuzzy@setpoint,w
  5508  0050  072E               	addwf	??_Fuzzy,w
  5509  0051  00CD               	movwf	_temp
  5510  0052  082D               	movf	Fuzzy@setpoint+1,w
  5511  0053  1803               	skipnc
  5512  0054  0A2D               	incf	Fuzzy@setpoint+1,w
  5513  0055  072F               	addwf	??_Fuzzy+1,w
  5514  0056  00CE               	movwf	_temp+1
  5515                           
  5516                           ;main.c: 152: if(PORTBbits.RB2 == 0)
  5517  0057  1906               	btfsc	6,2	;volatile
  5518  0058  285B               	goto	i1l163
  5519                           
  5520                           ;main.c: 153: {
  5521                           ;main.c: 154: PORTBbits.RB2 = 1;
  5522  0059  1506               	bsf	6,2	;volatile
  5523                           
  5524                           ;main.c: 155: }else{
  5525  005A  285C               	goto	i1l2318
  5526  005B                     i1l163:	
  5527                           
  5528                           ;main.c: 156: PORTBbits.RB2 = 0;
  5529  005B  1106               	bcf	6,2	;volatile
  5530  005C                     i1l2318:	
  5531                           
  5532                           ;main.c: 157: }
  5533                           ;main.c: 159: deltaV = (setpoint - pwmAnt);
  5534  005C  094B               	comf	_pwmAnt,w
  5535  005D  00AE               	movwf	??_Fuzzy
  5536  005E  094C               	comf	_pwmAnt+1,w
  5537  005F  00AF               	movwf	??_Fuzzy+1
  5538  0060  0AAE               	incf	??_Fuzzy,f
  5539  0061  1903               	skipnz
  5540  0062  0AAF               	incf	??_Fuzzy+1,f
  5541  0063  082C               	movf	Fuzzy@setpoint,w
  5542  0064  072E               	addwf	??_Fuzzy,w
  5543  0065  00C3               	movwf	_deltaV
  5544  0066  082D               	movf	Fuzzy@setpoint+1,w
  5545  0067  1803               	skipnc
  5546  0068  0A2D               	incf	Fuzzy@setpoint+1,w
  5547  0069  072F               	addwf	??_Fuzzy+1,w
  5548  006A  00C4               	movwf	_deltaV+1
  5549                           
  5550                           ;main.c: 162: if (temp >10) temp = 10;
  5551  006B  3000               	movlw	0
  5552  006C  024E               	subwf	_temp+1,w
  5553  006D  300B               	movlw	11
  5554  006E  1903               	skipnz
  5555  006F  024D               	subwf	_temp,w
  5556  0070  1C03               	skipc
  5557  0071  2876               	goto	i1l2326
  5558  0072  300A               	movlw	10
  5559  0073  00CD               	movwf	_temp
  5560  0074  3000               	movlw	0
  5561  0075  00CE               	movwf	_temp+1
  5562  0076                     i1l2326:	
  5563                           ;main.c: 163: if (temp <0) temp = 0;
  5564                           
  5565                           
  5566                           ;main.c: 166: if (temp < 2.5)
  5567  0076  084E               	movf	_temp+1,w
  5568  0077  01F9               	clrf	___lwtoft@c+1
  5569  0078  07F9               	addwf	___lwtoft@c+1,f
  5570  0079  084D               	movf	_temp,w
  5571  007A  01F8               	clrf	___lwtoft@c
  5572  007B  07F8               	addwf	___lwtoft@c,f
  5573  007C  120A  158A  21FC  120A  118A  	fcall	___lwtoft
  5574  0081  0878               	movf	?___lwtoft,w
  5575  0082  1283               	bcf	3,5	;RP0=0, select bank0
  5576  0083  1303               	bcf	3,6	;RP1=0, select bank0
  5577  0084  00A0               	movwf	___ftge@ff1
  5578  0085  0879               	movf	?___lwtoft+1,w
  5579  0086  00A1               	movwf	___ftge@ff1+1
  5580  0087  087A               	movf	?___lwtoft+2,w
  5581  0088  00A2               	movwf	___ftge@ff1+2
  5582  0089  3000               	movlw	0
  5583  008A  00A3               	movwf	___ftge@ff2
  5584  008B  3020               	movlw	32
  5585  008C  00A4               	movwf	___ftge@ff2+1
  5586  008D  3040               	movlw	64
  5587  008E  00A5               	movwf	___ftge@ff2+2
  5588  008F  120A  118A  2799  120A  118A  	fcall	___ftge
  5589  0094  1803               	btfsc	3,0
  5590  0095  2917               	goto	i1l2340
  5591                           
  5592                           ;main.c: 167: {
  5593                           ;main.c: 169: fitemp = trapmf(temp,-1,0,1.5,3);
  5594  0096  1283               	bcf	3,5	;RP0=0, select bank0
  5595  0097  1303               	bcf	3,6	;RP1=0, select bank0
  5596  0098  084E               	movf	_temp+1,w
  5597  0099  01A1               	clrf	trapmf@x+1
  5598  009A  07A1               	addwf	trapmf@x+1,f
  5599  009B  084D               	movf	_temp,w
  5600  009C  01A0               	clrf	trapmf@x
  5601  009D  07A0               	addwf	trapmf@x,f
  5602  009E  30FF               	movlw	255
  5603  009F  00A2               	movwf	trapmf@a
  5604  00A0  30FF               	movlw	255
  5605  00A1  00A3               	movwf	trapmf@a+1
  5606  00A2  3000               	movlw	0
  5607  00A3  00A4               	movwf	trapmf@b
  5608  00A4  3000               	movlw	0
  5609  00A5  00A5               	movwf	trapmf@b+1
  5610  00A6  3001               	movlw	1
  5611  00A7  00A6               	movwf	trapmf@c
  5612  00A8  3000               	movlw	0
  5613  00A9  00A7               	movwf	trapmf@c+1
  5614  00AA  3003               	movlw	3
  5615  00AB  00A8               	movwf	trapmf@d
  5616  00AC  3000               	movlw	0
  5617  00AD  00A9               	movwf	trapmf@d+1
  5618  00AE  120A  158A  2604  120A  118A  	fcall	_trapmf
  5619  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  5620  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  5621  00B5  0821               	movf	?_trapmf+1,w
  5622  00B6  01C6               	clrf	_fitemp+1
  5623  00B7  07C6               	addwf	_fitemp+1,f
  5624  00B8  0820               	movf	?_trapmf,w
  5625  00B9  01C5               	clrf	_fitemp
  5626  00BA  07C5               	addwf	_fitemp,f
  5627                           
  5628                           ;main.c: 172: fop_rule1 = max_val(fitemp,0.1);
  5629  00BB  0846               	movf	_fitemp+1,w
  5630  00BC  01F1               	clrf	max_val@a+1
  5631  00BD  07F1               	addwf	max_val@a+1,f
  5632  00BE  0845               	movf	_fitemp,w
  5633  00BF  01F0               	clrf	max_val@a
  5634  00C0  07F0               	addwf	max_val@a,f
  5635  00C1  3000               	movlw	0
  5636  00C2  00F2               	movwf	max_val@b
  5637  00C3  3000               	movlw	0
  5638  00C4  00F3               	movwf	max_val@b+1
  5639  00C5  120A  158A  21AD  120A  118A  	fcall	_max_val
  5640  00CA  0871               	movf	?_max_val+1,w
  5641  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  5642  00CC  1303               	bcf	3,6	;RP1=0, select bank0
  5643  00CD  01C8               	clrf	_fop_rule1+1
  5644  00CE  07C8               	addwf	_fop_rule1+1,f
  5645  00CF  0870               	movf	?_max_val,w
  5646  00D0  01C7               	clrf	_fop_rule1
  5647  00D1  07C7               	addwf	_fop_rule1,f
  5648                           
  5649                           ;main.c: 175: x=0;
  5650  00D2  01D3               	clrf	_x
  5651  00D3  01D4               	clrf	_x+1
  5652                           
  5653                           ;main.c: 176: y=0;
  5654  00D4  01D5               	clrf	_y
  5655  00D5  01D6               	clrf	_y+1
  5656                           
  5657                           ;main.c: 178: y = trapmf(x,-1,0,1.5,3);
  5658  00D6  0854               	movf	_x+1,w
  5659  00D7  01A1               	clrf	trapmf@x+1
  5660  00D8  07A1               	addwf	trapmf@x+1,f
  5661  00D9  0853               	movf	_x,w
  5662  00DA  01A0               	clrf	trapmf@x
  5663  00DB  07A0               	addwf	trapmf@x,f
  5664  00DC  30FF               	movlw	255
  5665  00DD  00A2               	movwf	trapmf@a
  5666  00DE  30FF               	movlw	255
  5667  00DF  00A3               	movwf	trapmf@a+1
  5668  00E0  3000               	movlw	0
  5669  00E1  00A4               	movwf	trapmf@b
  5670  00E2  3000               	movlw	0
  5671  00E3  00A5               	movwf	trapmf@b+1
  5672  00E4  3001               	movlw	1
  5673  00E5  00A6               	movwf	trapmf@c
  5674  00E6  3000               	movlw	0
  5675  00E7  00A7               	movwf	trapmf@c+1
  5676  00E8  3003               	movlw	3
  5677  00E9  00A8               	movwf	trapmf@d
  5678  00EA  3000               	movlw	0
  5679  00EB  00A9               	movwf	trapmf@d+1
  5680  00EC  120A  158A  2604  120A  118A  	fcall	_trapmf
  5681  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  5682  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  5683  00F3  0821               	movf	?_trapmf+1,w
  5684  00F4  01D6               	clrf	_y+1
  5685  00F5  07D6               	addwf	_y+1,f
  5686  00F6  0820               	movf	?_trapmf,w
  5687  00F7  01D5               	clrf	_y
  5688  00F8  07D5               	addwf	_y,f
  5689                           
  5690                           ;main.c: 180: if (y > fop_rule1)
  5691  00F9  0856               	movf	_y+1,w
  5692  00FA  0248               	subwf	_fop_rule1+1,w
  5693  00FB  1D03               	skipz
  5694  00FC  28FF               	goto	u225_25
  5695  00FD  0855               	movf	_y,w
  5696  00FE  0247               	subwf	_fop_rule1,w
  5697  00FF                     u225_25:	
  5698  00FF  1803               	skipnc
  5699  0100  290A               	goto	i1l2338
  5700                           
  5701                           ;main.c: 181: {
  5702                           ;main.c: 182: ideal = fop_rule1;
  5703  0101  0848               	movf	_fop_rule1+1,w
  5704  0102  1683               	bsf	3,5	;RP0=1, select bank1
  5705  0103  1303               	bcf	3,6	;RP1=0, select bank1
  5706  0104  01AD               	clrf	(_ideal+1)^(0+128)
  5707  0105  07AD               	addwf	(_ideal+1)^(0+128),f
  5708  0106  1283               	bcf	3,5	;RP0=0, select bank0
  5709  0107  1303               	bcf	3,6	;RP1=0, select bank0
  5710  0108  0847               	movf	_fop_rule1,w
  5711  0109  2913               	goto	L3
  5712  010A                     i1l2338:	
  5713                           ;main.c: 183: }
  5714                           
  5715                           
  5716                           ;main.c: 184: else
  5717                           ;main.c: 185: {
  5718                           ;main.c: 186: ideal = y;
  5719  010A  1283               	bcf	3,5	;RP0=0, select bank0
  5720  010B  0856               	movf	_y+1,w
  5721  010C  1683               	bsf	3,5	;RP0=1, select bank1
  5722  010D  1303               	bcf	3,6	;RP1=0, select bank1
  5723  010E  01AD               	clrf	(_ideal+1)^(0+128)
  5724  010F  07AD               	addwf	(_ideal+1)^(0+128),f
  5725  0110  1283               	bcf	3,5	;RP0=0, select bank0
  5726  0111  1303               	bcf	3,6	;RP1=0, select bank0
  5727  0112  0855               	movf	_y,w
  5728  0113                     L3:	
  5729  0113  1683               	bsf	3,5	;RP0=1, select bank1
  5730  0114  1303               	bcf	3,6	;RP1=0, select bank1
  5731  0115  01AC               	clrf	_ideal^(0+128)
  5732  0116  07AC               	addwf	_ideal^(0+128),f
  5733  0117                     i1l2340:	
  5734                           
  5735                           ;main.c: 187: }
  5736                           ;main.c: 189: }
  5737                           ;main.c: 193: if ((temp > 2) && (temp < 7))
  5738  0117  3000               	movlw	0
  5739  0118  1283               	bcf	3,5	;RP0=0, select bank0
  5740  0119  1303               	bcf	3,6	;RP1=0, select bank0
  5741  011A  024E               	subwf	_temp+1,w
  5742  011B  3003               	movlw	3
  5743  011C  1903               	skipnz
  5744  011D  024D               	subwf	_temp,w
  5745  011E  1C03               	skipc
  5746  011F  299E               	goto	i1l2356
  5747  0120  3000               	movlw	0
  5748  0121  024E               	subwf	_temp+1,w
  5749  0122  3007               	movlw	7
  5750  0123  1903               	skipnz
  5751  0124  024D               	subwf	_temp,w
  5752  0125  1803               	skipnc
  5753  0126  299E               	goto	i1l2356
  5754                           
  5755                           ;main.c: 194: {
  5756                           ;main.c: 196: fitemp = trimf(temp,2,5,8);
  5757  0127  084E               	movf	_temp+1,w
  5758  0128  01A1               	clrf	trimf@x+1
  5759  0129  07A1               	addwf	trimf@x+1,f
  5760  012A  084D               	movf	_temp,w
  5761  012B  01A0               	clrf	trimf@x
  5762  012C  07A0               	addwf	trimf@x,f
  5763  012D  3002               	movlw	2
  5764  012E  00A2               	movwf	trimf@a
  5765  012F  3000               	movlw	0
  5766  0130  00A3               	movwf	trimf@a+1
  5767  0131  3005               	movlw	5
  5768  0132  00A4               	movwf	trimf@b
  5769  0133  3000               	movlw	0
  5770  0134  00A5               	movwf	trimf@b+1
  5771  0135  3008               	movlw	8
  5772  0136  00A6               	movwf	trimf@c
  5773  0137  3000               	movlw	0
  5774  0138  00A7               	movwf	trimf@c+1
  5775  0139  120A  158A  2584  120A  118A  	fcall	_trimf
  5776  013E  1283               	bcf	3,5	;RP0=0, select bank0
  5777  013F  1303               	bcf	3,6	;RP1=0, select bank0
  5778  0140  0821               	movf	?_trimf+1,w
  5779  0141  01C6               	clrf	_fitemp+1
  5780  0142  07C6               	addwf	_fitemp+1,f
  5781  0143  0820               	movf	?_trimf,w
  5782  0144  01C5               	clrf	_fitemp
  5783  0145  07C5               	addwf	_fitemp,f
  5784                           
  5785                           ;main.c: 199: fop_rule1 = max_val(fitemp,0.1);
  5786  0146  0846               	movf	_fitemp+1,w
  5787  0147  01F1               	clrf	max_val@a+1
  5788  0148  07F1               	addwf	max_val@a+1,f
  5789  0149  0845               	movf	_fitemp,w
  5790  014A  01F0               	clrf	max_val@a
  5791  014B  07F0               	addwf	max_val@a,f
  5792  014C  3000               	movlw	0
  5793  014D  00F2               	movwf	max_val@b
  5794  014E  3000               	movlw	0
  5795  014F  00F3               	movwf	max_val@b+1
  5796  0150  120A  158A  21AD  120A  118A  	fcall	_max_val
  5797  0155  0871               	movf	?_max_val+1,w
  5798  0156  1283               	bcf	3,5	;RP0=0, select bank0
  5799  0157  1303               	bcf	3,6	;RP1=0, select bank0
  5800  0158  01C8               	clrf	_fop_rule1+1
  5801  0159  07C8               	addwf	_fop_rule1+1,f
  5802  015A  0870               	movf	?_max_val,w
  5803  015B  01C7               	clrf	_fop_rule1
  5804  015C  07C7               	addwf	_fop_rule1,f
  5805                           
  5806                           ;main.c: 202: x=0;
  5807  015D  01D3               	clrf	_x
  5808  015E  01D4               	clrf	_x+1
  5809                           
  5810                           ;main.c: 203: y=0;
  5811  015F  01D5               	clrf	_y
  5812  0160  01D6               	clrf	_y+1
  5813                           
  5814                           ;main.c: 205: y = trimf(x,2,5,8);
  5815  0161  0854               	movf	_x+1,w
  5816  0162  01A1               	clrf	trimf@x+1
  5817  0163  07A1               	addwf	trimf@x+1,f
  5818  0164  0853               	movf	_x,w
  5819  0165  01A0               	clrf	trimf@x
  5820  0166  07A0               	addwf	trimf@x,f
  5821  0167  3002               	movlw	2
  5822  0168  00A2               	movwf	trimf@a
  5823  0169  3000               	movlw	0
  5824  016A  00A3               	movwf	trimf@a+1
  5825  016B  3005               	movlw	5
  5826  016C  00A4               	movwf	trimf@b
  5827  016D  3000               	movlw	0
  5828  016E  00A5               	movwf	trimf@b+1
  5829  016F  3008               	movlw	8
  5830  0170  00A6               	movwf	trimf@c
  5831  0171  3000               	movlw	0
  5832  0172  00A7               	movwf	trimf@c+1
  5833  0173  120A  158A  2584  120A  118A  	fcall	_trimf
  5834  0178  1283               	bcf	3,5	;RP0=0, select bank0
  5835  0179  1303               	bcf	3,6	;RP1=0, select bank0
  5836  017A  0821               	movf	?_trimf+1,w
  5837  017B  01D6               	clrf	_y+1
  5838  017C  07D6               	addwf	_y+1,f
  5839  017D  0820               	movf	?_trimf,w
  5840  017E  01D5               	clrf	_y
  5841  017F  07D5               	addwf	_y,f
  5842                           
  5843                           ;main.c: 207: if (y >= fop_rule1)
  5844  0180  0848               	movf	_fop_rule1+1,w
  5845  0181  0256               	subwf	_y+1,w
  5846  0182  1D03               	skipz
  5847  0183  2986               	goto	u228_25
  5848  0184  0847               	movf	_fop_rule1,w
  5849  0185  0255               	subwf	_y,w
  5850  0186                     u228_25:	
  5851  0186  1C03               	skipc
  5852  0187  2991               	goto	i1l2354
  5853                           
  5854                           ;main.c: 208: {
  5855                           ;main.c: 209: tip_average = fop_rule1;
  5856  0188  0848               	movf	_fop_rule1+1,w
  5857  0189  1683               	bsf	3,5	;RP0=1, select bank1
  5858  018A  1303               	bcf	3,6	;RP1=0, select bank1
  5859  018B  01C1               	clrf	(_tip_average+1)^(0+128)
  5860  018C  07C1               	addwf	(_tip_average+1)^(0+128),f
  5861  018D  1283               	bcf	3,5	;RP0=0, select bank0
  5862  018E  1303               	bcf	3,6	;RP1=0, select bank0
  5863  018F  0847               	movf	_fop_rule1,w
  5864  0190  299A               	goto	L4
  5865  0191                     i1l2354:	
  5866                           ;main.c: 210: }
  5867                           
  5868                           
  5869                           ;main.c: 211: else
  5870                           ;main.c: 212: {
  5871                           ;main.c: 213: tip_average = y;
  5872  0191  1283               	bcf	3,5	;RP0=0, select bank0
  5873  0192  0856               	movf	_y+1,w
  5874  0193  1683               	bsf	3,5	;RP0=1, select bank1
  5875  0194  1303               	bcf	3,6	;RP1=0, select bank1
  5876  0195  01C1               	clrf	(_tip_average+1)^(0+128)
  5877  0196  07C1               	addwf	(_tip_average+1)^(0+128),f
  5878  0197  1283               	bcf	3,5	;RP0=0, select bank0
  5879  0198  1303               	bcf	3,6	;RP1=0, select bank0
  5880  0199  0855               	movf	_y,w
  5881  019A                     L4:	
  5882  019A  1683               	bsf	3,5	;RP0=1, select bank1
  5883  019B  1303               	bcf	3,6	;RP1=0, select bank1
  5884  019C  01C0               	clrf	_tip_average^(0+128)
  5885  019D  07C0               	addwf	_tip_average^(0+128),f
  5886  019E                     i1l2356:	
  5887                           
  5888                           ;main.c: 214: }
  5889                           ;main.c: 217: }
  5890                           ;main.c: 221: if (temp > 7 )
  5891  019E  3000               	movlw	0
  5892  019F  1283               	bcf	3,5	;RP0=0, select bank0
  5893  01A0  024E               	subwf	_temp+1,w
  5894  01A1  3008               	movlw	8
  5895  01A2  1903               	skipnz
  5896  01A3  024D               	subwf	_temp,w
  5897  01A4  1C03               	skipc
  5898  01A5  2A25               	goto	i1l2370
  5899                           
  5900                           ;main.c: 222: {
  5901                           ;main.c: 224: fitemp = trapmf(temp,6,8.5,10,11);
  5902  01A6  084E               	movf	_temp+1,w
  5903  01A7  01A1               	clrf	trapmf@x+1
  5904  01A8  07A1               	addwf	trapmf@x+1,f
  5905  01A9  084D               	movf	_temp,w
  5906  01AA  01A0               	clrf	trapmf@x
  5907  01AB  07A0               	addwf	trapmf@x,f
  5908  01AC  3006               	movlw	6
  5909  01AD  00A2               	movwf	trapmf@a
  5910  01AE  3000               	movlw	0
  5911  01AF  00A3               	movwf	trapmf@a+1
  5912  01B0  3008               	movlw	8
  5913  01B1  00A4               	movwf	trapmf@b
  5914  01B2  3000               	movlw	0
  5915  01B3  00A5               	movwf	trapmf@b+1
  5916  01B4  300A               	movlw	10
  5917  01B5  00A6               	movwf	trapmf@c
  5918  01B6  3000               	movlw	0
  5919  01B7  00A7               	movwf	trapmf@c+1
  5920  01B8  300B               	movlw	11
  5921  01B9  00A8               	movwf	trapmf@d
  5922  01BA  3000               	movlw	0
  5923  01BB  00A9               	movwf	trapmf@d+1
  5924  01BC  120A  158A  2604  120A  118A  	fcall	_trapmf
  5925  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  5926  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  5927  01C3  0821               	movf	?_trapmf+1,w
  5928  01C4  01C6               	clrf	_fitemp+1
  5929  01C5  07C6               	addwf	_fitemp+1,f
  5930  01C6  0820               	movf	?_trapmf,w
  5931  01C7  01C5               	clrf	_fitemp
  5932  01C8  07C5               	addwf	_fitemp,f
  5933                           
  5934                           ;main.c: 228: fop_rule1 = max_val(fitemp,0.1);
  5935  01C9  0846               	movf	_fitemp+1,w
  5936  01CA  01F1               	clrf	max_val@a+1
  5937  01CB  07F1               	addwf	max_val@a+1,f
  5938  01CC  0845               	movf	_fitemp,w
  5939  01CD  01F0               	clrf	max_val@a
  5940  01CE  07F0               	addwf	max_val@a,f
  5941  01CF  3000               	movlw	0
  5942  01D0  00F2               	movwf	max_val@b
  5943  01D1  3000               	movlw	0
  5944  01D2  00F3               	movwf	max_val@b+1
  5945  01D3  120A  158A  21AD  120A  118A  	fcall	_max_val
  5946  01D8  0871               	movf	?_max_val+1,w
  5947  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  5948  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  5949  01DB  01C8               	clrf	_fop_rule1+1
  5950  01DC  07C8               	addwf	_fop_rule1+1,f
  5951  01DD  0870               	movf	?_max_val,w
  5952  01DE  01C7               	clrf	_fop_rule1
  5953  01DF  07C7               	addwf	_fop_rule1,f
  5954                           
  5955                           ;main.c: 231: x=0;
  5956  01E0  01D3               	clrf	_x
  5957  01E1  01D4               	clrf	_x+1
  5958                           
  5959                           ;main.c: 232: y=0;
  5960  01E2  01D5               	clrf	_y
  5961  01E3  01D6               	clrf	_y+1
  5962                           
  5963                           ;main.c: 234: y = trapmf(x,7,8.5,10,11);
  5964  01E4  0854               	movf	_x+1,w
  5965  01E5  01A1               	clrf	trapmf@x+1
  5966  01E6  07A1               	addwf	trapmf@x+1,f
  5967  01E7  0853               	movf	_x,w
  5968  01E8  01A0               	clrf	trapmf@x
  5969  01E9  07A0               	addwf	trapmf@x,f
  5970  01EA  3007               	movlw	7
  5971  01EB  00A2               	movwf	trapmf@a
  5972  01EC  3000               	movlw	0
  5973  01ED  00A3               	movwf	trapmf@a+1
  5974  01EE  3008               	movlw	8
  5975  01EF  00A4               	movwf	trapmf@b
  5976  01F0  3000               	movlw	0
  5977  01F1  00A5               	movwf	trapmf@b+1
  5978  01F2  300A               	movlw	10
  5979  01F3  00A6               	movwf	trapmf@c
  5980  01F4  3000               	movlw	0
  5981  01F5  00A7               	movwf	trapmf@c+1
  5982  01F6  300B               	movlw	11
  5983  01F7  00A8               	movwf	trapmf@d
  5984  01F8  3000               	movlw	0
  5985  01F9  00A9               	movwf	trapmf@d+1
  5986  01FA  120A  158A  2604  120A  118A  	fcall	_trapmf
  5987  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  5988  0200  1303               	bcf	3,6	;RP1=0, select bank0
  5989  0201  0821               	movf	?_trapmf+1,w
  5990  0202  01D6               	clrf	_y+1
  5991  0203  07D6               	addwf	_y+1,f
  5992  0204  0820               	movf	?_trapmf,w
  5993  0205  01D5               	clrf	_y
  5994  0206  07D5               	addwf	_y,f
  5995                           
  5996                           ;main.c: 236: if (y >= fop_rule1)
  5997  0207  0848               	movf	_fop_rule1+1,w
  5998  0208  0256               	subwf	_y+1,w
  5999  0209  1D03               	skipz
  6000  020A  2A0D               	goto	u230_25
  6001  020B  0847               	movf	_fop_rule1,w
  6002  020C  0255               	subwf	_y,w
  6003  020D                     u230_25:	
  6004  020D  1C03               	skipc
  6005  020E  2A18               	goto	i1l2368
  6006                           
  6007                           ;main.c: 237: {
  6008                           ;main.c: 238: tip_gorgeous = fop_rule1;
  6009  020F  0848               	movf	_fop_rule1+1,w
  6010  0210  1683               	bsf	3,5	;RP0=1, select bank1
  6011  0211  1303               	bcf	3,6	;RP1=0, select bank1
  6012  0212  01C3               	clrf	(_tip_gorgeous+1)^(0+128)
  6013  0213  07C3               	addwf	(_tip_gorgeous+1)^(0+128),f
  6014  0214  1283               	bcf	3,5	;RP0=0, select bank0
  6015  0215  1303               	bcf	3,6	;RP1=0, select bank0
  6016  0216  0847               	movf	_fop_rule1,w
  6017  0217  2A21               	goto	L5
  6018  0218                     i1l2368:	
  6019                           ;main.c: 239: }
  6020                           
  6021                           
  6022                           ;main.c: 240: else
  6023                           ;main.c: 241: {
  6024                           ;main.c: 242: tip_gorgeous = y;
  6025  0218  1283               	bcf	3,5	;RP0=0, select bank0
  6026  0219  0856               	movf	_y+1,w
  6027  021A  1683               	bsf	3,5	;RP0=1, select bank1
  6028  021B  1303               	bcf	3,6	;RP1=0, select bank1
  6029  021C  01C3               	clrf	(_tip_gorgeous+1)^(0+128)
  6030  021D  07C3               	addwf	(_tip_gorgeous+1)^(0+128),f
  6031  021E  1283               	bcf	3,5	;RP0=0, select bank0
  6032  021F  1303               	bcf	3,6	;RP1=0, select bank0
  6033  0220  0855               	movf	_y,w
  6034  0221                     L5:	
  6035  0221  1683               	bsf	3,5	;RP0=1, select bank1
  6036  0222  1303               	bcf	3,6	;RP1=0, select bank1
  6037  0223  01C2               	clrf	_tip_gorgeous^(0+128)
  6038  0224  07C2               	addwf	_tip_gorgeous^(0+128),f
  6039  0225                     i1l2370:	
  6040                           
  6041                           ;main.c: 243: }
  6042                           ;main.c: 245: }
  6043                           ;main.c: 267: total_area = 1;
  6044  0225  3001               	movlw	1
  6045  0226  1283               	bcf	3,5	;RP0=0, select bank0
  6046  0227  00D1               	movwf	_total_area
  6047  0228  3000               	movlw	0
  6048  0229  00D2               	movwf	_total_area+1
  6049                           
  6050                           ;main.c: 268: tip = fop_rule1*1000;
  6051  022A  0848               	movf	_fop_rule1+1,w
  6052  022B  01F9               	clrf	i1___wmul@multiplier+1
  6053  022C  07F9               	addwf	i1___wmul@multiplier+1,f
  6054  022D  0847               	movf	_fop_rule1,w
  6055  022E  01F8               	clrf	i1___wmul@multiplier
  6056  022F  07F8               	addwf	i1___wmul@multiplier,f
  6057  0230  30E8               	movlw	232
  6058  0231  00FA               	movwf	i1___wmul@multiplicand
  6059  0232  3003               	movlw	3
  6060  0233  00FB               	movwf	i1___wmul@multiplicand+1
  6061  0234  120A  158A  2292  120A  118A  	fcall	i1___wmul
  6062  0239  0879               	movf	?i1___wmul+1,w
  6063  023A  1283               	bcf	3,5	;RP0=0, select bank0
  6064  023B  1303               	bcf	3,6	;RP1=0, select bank0
  6065  023C  01D0               	clrf	_tip+1
  6066  023D  07D0               	addwf	_tip+1,f
  6067  023E  0878               	movf	?i1___wmul,w
  6068  023F  01CF               	clrf	_tip
  6069  0240  07CF               	addwf	_tip,f
  6070                           
  6071                           ;main.c: 269: unsigned int sum = 0;
  6072  0241  01B1               	clrf	Fuzzy@sum
  6073  0242  01B2               	clrf	Fuzzy@sum+1
  6074                           
  6075                           ;main.c: 271: total_area = total_area + tip;
  6076  0243  084F               	movf	_tip,w
  6077  0244  0751               	addwf	_total_area,w
  6078  0245  00D1               	movwf	_total_area
  6079  0246  0850               	movf	_tip+1,w
  6080  0247  1803               	skipnc
  6081  0248  0A50               	incf	_tip+1,w
  6082  0249  0752               	addwf	_total_area+1,w
  6083  024A  00D2               	movwf	_total_area+1
  6084                           
  6085                           ;main.c: 272: sum = tip;
  6086  024B  0850               	movf	_tip+1,w
  6087  024C  01B2               	clrf	Fuzzy@sum+1
  6088  024D  07B2               	addwf	Fuzzy@sum+1,f
  6089  024E  084F               	movf	_tip,w
  6090  024F  01B1               	clrf	Fuzzy@sum
  6091  0250  07B1               	addwf	Fuzzy@sum,f
  6092                           
  6093                           ;main.c: 277: ativa_fan = sum/total_area;
  6094  0251  0852               	movf	_total_area+1,w
  6095  0252  01F1               	clrf	i1___lwdiv@divisor+1
  6096  0253  07F1               	addwf	i1___lwdiv@divisor+1,f
  6097  0254  0851               	movf	_total_area,w
  6098  0255  01F0               	clrf	i1___lwdiv@divisor
  6099  0256  07F0               	addwf	i1___lwdiv@divisor,f
  6100  0257  0832               	movf	Fuzzy@sum+1,w
  6101  0258  01F3               	clrf	i1___lwdiv@dividend+1
  6102  0259  07F3               	addwf	i1___lwdiv@dividend+1,f
  6103  025A  0831               	movf	Fuzzy@sum,w
  6104  025B  01F2               	clrf	i1___lwdiv@dividend
  6105  025C  07F2               	addwf	i1___lwdiv@dividend,f
  6106  025D  120A  158A  2394  120A  118A  	fcall	i1___lwdiv
  6107  0262  0871               	movf	?i1___lwdiv+1,w
  6108  0263  1283               	bcf	3,5	;RP0=0, select bank0
  6109  0264  1303               	bcf	3,6	;RP1=0, select bank0
  6110  0265  01C2               	clrf	_ativa_fan+1
  6111  0266  07C2               	addwf	_ativa_fan+1,f
  6112  0267  0870               	movf	?i1___lwdiv,w
  6113  0268  01C1               	clrf	_ativa_fan
  6114  0269  07C1               	addwf	_ativa_fan,f
  6115                           
  6116                           ;main.c: 281: char velocidade[1];
  6117                           ;main.c: 283: if(ativa_fan <= 2.5 )
  6118  026A  3000               	movlw	0
  6119  026B  00A0               	movwf	___ftge@ff1
  6120  026C  3020               	movlw	32
  6121  026D  00A1               	movwf	___ftge@ff1+1
  6122  026E  3040               	movlw	64
  6123  026F  00A2               	movwf	___ftge@ff1+2
  6124  0270  0842               	movf	_ativa_fan+1,w
  6125  0271  01F9               	clrf	___lwtoft@c+1
  6126  0272  07F9               	addwf	___lwtoft@c+1,f
  6127  0273  0841               	movf	_ativa_fan,w
  6128  0274  01F8               	clrf	___lwtoft@c
  6129  0275  07F8               	addwf	___lwtoft@c,f
  6130  0276  120A  158A  21FC  120A  118A  	fcall	___lwtoft
  6131  027B  0878               	movf	?___lwtoft,w
  6132  027C  1283               	bcf	3,5	;RP0=0, select bank0
  6133  027D  1303               	bcf	3,6	;RP1=0, select bank0
  6134  027E  00A3               	movwf	___ftge@ff2
  6135  027F  0879               	movf	?___lwtoft+1,w
  6136  0280  00A4               	movwf	___ftge@ff2+1
  6137  0281  087A               	movf	?___lwtoft+2,w
  6138  0282  00A5               	movwf	___ftge@ff2+2
  6139  0283  120A  118A  2799  120A  118A  	fcall	___ftge
  6140  0288  1C03               	btfss	3,0
  6141  0289  2A90               	goto	i1l2386
  6142                           
  6143                           ;main.c: 284: {
  6144                           ;main.c: 286: velocidade[0] = '0';
  6145  028A  3030               	movlw	48
  6146  028B  1283               	bcf	3,5	;RP0=0, select bank0
  6147  028C  1303               	bcf	3,6	;RP1=0, select bank0
  6148  028D  00AE               	movwf	??_Fuzzy
  6149  028E  082E               	movf	??_Fuzzy,w
  6150  028F  00B0               	movwf	Fuzzy@velocidade
  6151  0290                     i1l2386:	
  6152                           
  6153                           ;main.c: 287: }
  6154                           ;main.c: 288: if(ativa_fan > 2.5 && ativa_fan < 7.5)
  6155  0290  3000               	movlw	0
  6156  0291  1283               	bcf	3,5	;RP0=0, select bank0
  6157  0292  1303               	bcf	3,6	;RP1=0, select bank0
  6158  0293  00A0               	movwf	___ftge@ff1
  6159  0294  3020               	movlw	32
  6160  0295  00A1               	movwf	___ftge@ff1+1
  6161  0296  3040               	movlw	64
  6162  0297  00A2               	movwf	___ftge@ff1+2
  6163  0298  0842               	movf	_ativa_fan+1,w
  6164  0299  01F9               	clrf	___lwtoft@c+1
  6165  029A  07F9               	addwf	___lwtoft@c+1,f
  6166  029B  0841               	movf	_ativa_fan,w
  6167  029C  01F8               	clrf	___lwtoft@c
  6168  029D  07F8               	addwf	___lwtoft@c,f
  6169  029E  120A  158A  21FC  120A  118A  	fcall	___lwtoft
  6170  02A3  0878               	movf	?___lwtoft,w
  6171  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  6172  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  6173  02A6  00A3               	movwf	___ftge@ff2
  6174  02A7  0879               	movf	?___lwtoft+1,w
  6175  02A8  00A4               	movwf	___ftge@ff2+1
  6176  02A9  087A               	movf	?___lwtoft+2,w
  6177  02AA  00A5               	movwf	___ftge@ff2+2
  6178  02AB  120A  118A  2799  120A  118A  	fcall	___ftge
  6179  02B0  1803               	btfsc	3,0
  6180  02B1  2ADA               	goto	i1l2392
  6181  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  6182  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  6183  02B4  0842               	movf	_ativa_fan+1,w
  6184  02B5  01F9               	clrf	___lwtoft@c+1
  6185  02B6  07F9               	addwf	___lwtoft@c+1,f
  6186  02B7  0841               	movf	_ativa_fan,w
  6187  02B8  01F8               	clrf	___lwtoft@c
  6188  02B9  07F8               	addwf	___lwtoft@c,f
  6189  02BA  120A  158A  21FC  120A  118A  	fcall	___lwtoft
  6190  02BF  0878               	movf	?___lwtoft,w
  6191  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  6192  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  6193  02C2  00A0               	movwf	___ftge@ff1
  6194  02C3  0879               	movf	?___lwtoft+1,w
  6195  02C4  00A1               	movwf	___ftge@ff1+1
  6196  02C5  087A               	movf	?___lwtoft+2,w
  6197  02C6  00A2               	movwf	___ftge@ff1+2
  6198  02C7  3000               	movlw	0
  6199  02C8  00A3               	movwf	___ftge@ff2
  6200  02C9  30F0               	movlw	240
  6201  02CA  00A4               	movwf	___ftge@ff2+1
  6202  02CB  3040               	movlw	64
  6203  02CC  00A5               	movwf	___ftge@ff2+2
  6204  02CD  120A  118A  2799  120A  118A  	fcall	___ftge
  6205  02D2  1803               	btfsc	3,0
  6206  02D3  2ADA               	goto	i1l2392
  6207                           
  6208                           ;main.c: 289: {
  6209                           ;main.c: 291: velocidade[0] = '7';
  6210  02D4  3037               	movlw	55
  6211  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  6212  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  6213  02D7  00AE               	movwf	??_Fuzzy
  6214  02D8  082E               	movf	??_Fuzzy,w
  6215  02D9  00B0               	movwf	Fuzzy@velocidade
  6216  02DA                     i1l2392:	
  6217                           
  6218                           ;main.c: 292: }
  6219                           ;main.c: 294: if(ativa_fan >= 7.5)
  6220  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  6221  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  6222  02DC  0842               	movf	_ativa_fan+1,w
  6223  02DD  01F9               	clrf	___lwtoft@c+1
  6224  02DE  07F9               	addwf	___lwtoft@c+1,f
  6225  02DF  0841               	movf	_ativa_fan,w
  6226  02E0  01F8               	clrf	___lwtoft@c
  6227  02E1  07F8               	addwf	___lwtoft@c,f
  6228  02E2  120A  158A  21FC  120A  118A  	fcall	___lwtoft
  6229  02E7  0878               	movf	?___lwtoft,w
  6230  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  6231  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  6232  02EA  00A0               	movwf	___ftge@ff1
  6233  02EB  0879               	movf	?___lwtoft+1,w
  6234  02EC  00A1               	movwf	___ftge@ff1+1
  6235  02ED  087A               	movf	?___lwtoft+2,w
  6236  02EE  00A2               	movwf	___ftge@ff1+2
  6237  02EF  3000               	movlw	0
  6238  02F0  00A3               	movwf	___ftge@ff2
  6239  02F1  30F0               	movlw	240
  6240  02F2  00A4               	movwf	___ftge@ff2+1
  6241  02F3  3040               	movlw	64
  6242  02F4  00A5               	movwf	___ftge@ff2+2
  6243  02F5  120A  118A  2799  120A  118A  	fcall	___ftge
  6244  02FA  1C03               	btfss	3,0
  6245  02FB  2B02               	goto	i1l2396
  6246                           
  6247                           ;main.c: 295: {
  6248                           ;main.c: 297: velocidade[0] = '9';
  6249  02FC  3039               	movlw	57
  6250  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  6251  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  6252  02FF  00AE               	movwf	??_Fuzzy
  6253  0300  082E               	movf	??_Fuzzy,w
  6254  0301  00B0               	movwf	Fuzzy@velocidade
  6255  0302                     i1l2396:	
  6256                           
  6257                           ;main.c: 298: }
  6258                           ;main.c: 301: deltaV = fop_rule1*1000;
  6259  0302  1283               	bcf	3,5	;RP0=0, select bank0
  6260  0303  1303               	bcf	3,6	;RP1=0, select bank0
  6261  0304  0848               	movf	_fop_rule1+1,w
  6262  0305  01F9               	clrf	i1___wmul@multiplier+1
  6263  0306  07F9               	addwf	i1___wmul@multiplier+1,f
  6264  0307  0847               	movf	_fop_rule1,w
  6265  0308  01F8               	clrf	i1___wmul@multiplier
  6266  0309  07F8               	addwf	i1___wmul@multiplier,f
  6267  030A  30E8               	movlw	232
  6268  030B  00FA               	movwf	i1___wmul@multiplicand
  6269  030C  3003               	movlw	3
  6270  030D  00FB               	movwf	i1___wmul@multiplicand+1
  6271  030E  120A  158A  2292  120A  118A  	fcall	i1___wmul
  6272  0313  0879               	movf	?i1___wmul+1,w
  6273  0314  1283               	bcf	3,5	;RP0=0, select bank0
  6274  0315  1303               	bcf	3,6	;RP1=0, select bank0
  6275  0316  01C4               	clrf	_deltaV+1
  6276  0317  07C4               	addwf	_deltaV+1,f
  6277  0318  0878               	movf	?i1___wmul,w
  6278  0319  01C3               	clrf	_deltaV
  6279  031A  07C3               	addwf	_deltaV,f
  6280                           
  6281                           ;main.c: 303: if(deltaV >= 0 && deltaV < 9000 ){
  6282  031B  3023               	movlw	35
  6283  031C  0244               	subwf	_deltaV+1,w
  6284  031D  3028               	movlw	40
  6285  031E  1903               	skipnz
  6286  031F  0243               	subwf	_deltaV,w
  6287  0320  1803               	skipnc
  6288  0321  2B2C               	goto	i1l2402
  6289                           
  6290                           ;main.c: 304: PWM_DutyCycle2(deltaV);
  6291  0322  0844               	movf	_deltaV+1,w
  6292  0323  01F1               	clrf	i1PWM_DutyCycle2@valor+1
  6293  0324  07F1               	addwf	i1PWM_DutyCycle2@valor+1,f
  6294  0325  0843               	movf	_deltaV,w
  6295  0326  01F0               	clrf	i1PWM_DutyCycle2@valor
  6296  0327  07F0               	addwf	i1PWM_DutyCycle2@valor,f
  6297  0328  120A  158A  2226   	fcall	i1_PWM_DutyCycle2
  6298                           
  6299                           ;main.c: 305: }else
  6300  032B  0008               	return
  6301  032C                     i1l2402:	
  6302                           
  6303                           ;main.c: 306: {
  6304                           ;main.c: 307: PWM_DutyCycle2(0);
  6305  032C  3000               	movlw	0
  6306  032D  00F0               	movwf	i1PWM_DutyCycle2@valor
  6307  032E  3000               	movlw	0
  6308  032F  00F1               	movwf	i1PWM_DutyCycle2@valor+1
  6309  0330  120A  158A  2226   	fcall	i1_PWM_DutyCycle2
  6310  0333  0008               	return
  6311  0334                     __end_of_Fuzzy:	
  6312                           
  6313                           	psect	text28
  6314  0A92                     __ptext28:	
  6315 ;; *************** function i1___wmul *****************
  6316 ;; Defined at:
  6317 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;  multiplier      2    8[COMMON] unsigned int 
  6320 ;;  multiplicand    2   10[COMMON] unsigned int 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;  __wmul          2   12[COMMON] unsigned int 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  2    8[COMMON] unsigned int 
  6325 ;; Registers used:
  6326 ;;		wreg, status,2, status,0
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6332 ;;      Params:         4       0       0       0       0
  6333 ;;      Locals:         2       0       0       0       0
  6334 ;;      Temps:          0       0       0       0       0
  6335 ;;      Totals:         6       0       0       0       0
  6336 ;;Total ram usage:        6 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; This function calls:
  6339 ;;		Nothing
  6340 ;; This function is called by:
  6341 ;;		_Fuzzy
  6342 ;;		_ISR
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           
  6347                           ;psect for function i1___wmul
  6348  0A92                     i1___wmul:	
  6349                           
  6350                           ;incstack = 0
  6351                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  6352  0A92  01FC               	clrf	i1___wmul@product
  6353  0A93  01FD               	clrf	i1___wmul@product+1
  6354  0A94                     i1l2300:	
  6355  0A94  1C78               	btfss	i1___wmul@multiplier,0
  6356  0A95  2A9C               	goto	i1l604
  6357  0A96  087A               	movf	i1___wmul@multiplicand,w
  6358  0A97  07FC               	addwf	i1___wmul@product,f
  6359  0A98  1803               	skipnc
  6360  0A99  0AFD               	incf	i1___wmul@product+1,f
  6361  0A9A  087B               	movf	i1___wmul@multiplicand+1,w
  6362  0A9B  07FD               	addwf	i1___wmul@product+1,f
  6363  0A9C                     i1l604:	
  6364  0A9C  3001               	movlw	1
  6365  0A9D                     u219_25:	
  6366  0A9D  1003               	clrc
  6367  0A9E  0DFA               	rlf	i1___wmul@multiplicand,f
  6368  0A9F  0DFB               	rlf	i1___wmul@multiplicand+1,f
  6369  0AA0  3EFF               	addlw	-1
  6370  0AA1  1D03               	skipz
  6371  0AA2  2A9D               	goto	u219_25
  6372  0AA3  3001               	movlw	1
  6373  0AA4                     u220_25:	
  6374  0AA4  1003               	clrc
  6375  0AA5  0CF9               	rrf	i1___wmul@multiplier+1,f
  6376  0AA6  0CF8               	rrf	i1___wmul@multiplier,f
  6377  0AA7  3EFF               	addlw	-1
  6378  0AA8  1D03               	skipz
  6379  0AA9  2AA4               	goto	u220_25
  6380  0AAA  0879               	movf	i1___wmul@multiplier+1,w
  6381  0AAB  0478               	iorwf	i1___wmul@multiplier,w
  6382  0AAC  1D03               	skipz
  6383  0AAD  2A94               	goto	i1l2300
  6384  0AAE  087D               	movf	i1___wmul@product+1,w
  6385  0AAF  01F9               	clrf	?i1___wmul+1
  6386  0AB0  07F9               	addwf	?i1___wmul+1,f
  6387  0AB1  087C               	movf	i1___wmul@product,w
  6388  0AB2  01F8               	clrf	?i1___wmul
  6389  0AB3  07F8               	addwf	?i1___wmul,f
  6390  0AB4  0008               	return
  6391  0AB5                     __end_ofi1___wmul:	
  6392                           
  6393                           	psect	text29
  6394  0A26                     __ptext29:	
  6395 ;; *************** function i1_PWM_DutyCycle2 *****************
  6396 ;; Defined at:
  6397 ;;		line 96 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\pwm.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;  valor           2    0[COMMON] int 
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;		None
  6402 ;; Return value:  Size  Location     Type
  6403 ;;		None               void
  6404 ;; Registers used:
  6405 ;;		wreg, status,2, status,0
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6411 ;;      Params:         2       0       0       0       0
  6412 ;;      Locals:         0       0       0       0       0
  6413 ;;      Temps:          2       0       0       0       0
  6414 ;;      Totals:         4       0       0       0       0
  6415 ;;Total ram usage:        4 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; This function calls:
  6418 ;;		Nothing
  6419 ;; This function is called by:
  6420 ;;		_Fuzzy
  6421 ;;		_ISR
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           
  6426                           ;psect for function i1_PWM_DutyCycle2
  6427  0A26                     i1_PWM_DutyCycle2:	
  6428                           
  6429                           ;pwm.c: 98: CCPR2L = valor >> 2;
  6430                           
  6431                           ;incstack = 0
  6432                           ; Regs used in i1_PWM_DutyCycle2: [wreg+status,2+status,0]
  6433  0A26  0871               	movf	i1PWM_DutyCycle2@valor+1,w
  6434  0A27  00F3               	movwf	??i1_PWM_DutyCycle2+1
  6435  0A28  0870               	movf	i1PWM_DutyCycle2@valor,w
  6436  0A29  00F2               	movwf	??i1_PWM_DutyCycle2
  6437  0A2A  0D73               	rlf	??i1_PWM_DutyCycle2+1,w
  6438  0A2B  0CF3               	rrf	??i1_PWM_DutyCycle2+1,f
  6439  0A2C  0CF2               	rrf	??i1_PWM_DutyCycle2,f
  6440  0A2D  0D73               	rlf	??i1_PWM_DutyCycle2+1,w
  6441  0A2E  0CF3               	rrf	??i1_PWM_DutyCycle2+1,f
  6442  0A2F  0CF2               	rrf	??i1_PWM_DutyCycle2,f
  6443  0A30  0872               	movf	??i1_PWM_DutyCycle2,w
  6444  0A31  1283               	bcf	3,5	;RP0=0, select bank0
  6445  0A32  1303               	bcf	3,6	;RP1=0, select bank0
  6446  0A33  009B               	movwf	27	;volatile
  6447                           
  6448                           ;pwm.c: 99: CCP2CON = (valor << 4)|0X0C;
  6449  0A34  0870               	movf	i1PWM_DutyCycle2@valor,w
  6450  0A35  00F2               	movwf	??i1_PWM_DutyCycle2
  6451  0A36  3003               	movlw	3
  6452  0A37                     u217_25:	
  6453  0A37  1003               	clrc
  6454  0A38  0DF2               	rlf	??i1_PWM_DutyCycle2,f
  6455  0A39  3EFF               	addlw	-1
  6456  0A3A  1D03               	skipz
  6457  0A3B  2A37               	goto	u217_25
  6458  0A3C  1003               	clrc
  6459  0A3D  0D72               	rlf	??i1_PWM_DutyCycle2,w
  6460  0A3E  380C               	iorlw	12
  6461  0A3F  009D               	movwf	29	;volatile
  6462  0A40  0008               	return
  6463  0A41                     __end_ofi1_PWM_DutyCycle2:	
  6464                           
  6465                           	psect	text30
  6466  0D84                     __ptext30:	
  6467 ;; *************** function _trimf *****************
  6468 ;; Defined at:
  6469 ;;		line 78 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;  x               2    0[BANK0 ] unsigned int 
  6472 ;;  a               2    2[BANK0 ] unsigned int 
  6473 ;;  b               2    4[BANK0 ] unsigned int 
  6474 ;;  c               2    6[BANK0 ] unsigned int 
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;  ua              2   12[COMMON] unsigned int 
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  2    0[BANK0 ] unsigned int 
  6479 ;; Registers used:
  6480 ;;		wreg, status,2, status,0, pclath, cstack
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6486 ;;      Params:         0       8       0       0       0
  6487 ;;      Locals:         2       0       0       0       0
  6488 ;;      Temps:          4       0       0       0       0
  6489 ;;      Totals:         6       8       0       0       0
  6490 ;;Total ram usage:       14 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    1
  6493 ;; This function calls:
  6494 ;;		i1___lwdiv
  6495 ;; This function is called by:
  6496 ;;		_Fuzzy
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           
  6501                           ;psect for function _trimf
  6502  0D84                     _trimf:	
  6503                           
  6504                           ;main.c: 80: unsigned int ua = 0;
  6505                           
  6506                           ;incstack = 0
  6507                           ; Regs used in _trimf: [wreg+status,2+status,0+pclath+cstack]
  6508  0D84  01FC               	clrf	trimf@ua
  6509  0D85  01FD               	clrf	trimf@ua+1
  6510                           
  6511                           ;main.c: 82: if (x <= a)
  6512  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  6513  0D87  1303               	bcf	3,6	;RP1=0, select bank0
  6514  0D88  0821               	movf	trimf@x+1,w
  6515  0D89  0223               	subwf	trimf@a+1,w
  6516  0D8A  1D03               	skipz
  6517  0D8B  2D8E               	goto	u166_25
  6518  0D8C  0820               	movf	trimf@x,w
  6519  0D8D  0222               	subwf	trimf@a,w
  6520  0D8E                     u166_25:	
  6521  0D8E  1803               	btfsc	3,0
  6522  0D8F  2DF9               	goto	i1l2082
  6523                           
  6524                           ;main.c: 84: else if ((a < x) && (x <= b))
  6525                           
  6526                           ;main.c: 83: ua = 0;
  6527  0D90  0821               	movf	trimf@x+1,w
  6528  0D91  0223               	subwf	trimf@a+1,w
  6529  0D92  1D03               	skipz
  6530  0D93  2D96               	goto	u167_25
  6531  0D94  0820               	movf	trimf@x,w
  6532  0D95  0222               	subwf	trimf@a,w
  6533  0D96                     u167_25:	
  6534  0D96  1803               	skipnc
  6535  0D97  2DB3               	goto	i1l2074
  6536  0D98  0821               	movf	trimf@x+1,w
  6537  0D99  0225               	subwf	trimf@b+1,w
  6538  0D9A  1D03               	skipz
  6539  0D9B  2D9E               	goto	u168_25
  6540  0D9C  0820               	movf	trimf@x,w
  6541  0D9D  0224               	subwf	trimf@b,w
  6542  0D9E                     u168_25:	
  6543  0D9E  1C03               	skipc
  6544  0D9F  2DB3               	goto	i1l2074
  6545                           
  6546                           ;main.c: 85: ua = ((x - a) / (b - a));
  6547  0DA0  0922               	comf	trimf@a,w
  6548  0DA1  00F8               	movwf	??_trimf
  6549  0DA2  0923               	comf	trimf@a+1,w
  6550  0DA3  00F9               	movwf	??_trimf+1
  6551  0DA4  0AF8               	incf	??_trimf,f
  6552  0DA5  1903               	skipnz
  6553  0DA6  0AF9               	incf	??_trimf+1,f
  6554  0DA7  0824               	movf	trimf@b,w
  6555  0DA8  0778               	addwf	??_trimf,w
  6556  0DA9  00F0               	movwf	i1___lwdiv@divisor
  6557  0DAA  0825               	movf	trimf@b+1,w
  6558  0DAB  1803               	skipnc
  6559  0DAC  0A25               	incf	trimf@b+1,w
  6560  0DAD  0779               	addwf	??_trimf+1,w
  6561  0DAE  00F1               	movwf	i1___lwdiv@divisor+1
  6562  0DAF  0922               	comf	trimf@a,w
  6563  0DB0  00FA               	movwf	??_trimf+2
  6564  0DB1  0923               	comf	trimf@a+1,w
  6565  0DB2  2DD7               	goto	L7
  6566  0DB3                     i1l2074:	
  6567                           
  6568                           ;main.c: 86: else if ((b < x) && (x <= c))
  6569  0DB3  1283               	bcf	3,5	;RP0=0, select bank0
  6570  0DB4  1303               	bcf	3,6	;RP1=0, select bank0
  6571  0DB5  0821               	movf	trimf@x+1,w
  6572  0DB6  0225               	subwf	trimf@b+1,w
  6573  0DB7  1D03               	skipz
  6574  0DB8  2DBB               	goto	u169_25
  6575  0DB9  0820               	movf	trimf@x,w
  6576  0DBA  0224               	subwf	trimf@b,w
  6577  0DBB                     u169_25:	
  6578  0DBB  1803               	skipnc
  6579  0DBC  2DEF               	goto	i1l2080
  6580  0DBD  0821               	movf	trimf@x+1,w
  6581  0DBE  0227               	subwf	trimf@c+1,w
  6582  0DBF  1D03               	skipz
  6583  0DC0  2DC3               	goto	u170_25
  6584  0DC1  0820               	movf	trimf@x,w
  6585  0DC2  0226               	subwf	trimf@c,w
  6586  0DC3                     u170_25:	
  6587  0DC3  1C03               	skipc
  6588  0DC4  2DEF               	goto	i1l2080
  6589                           
  6590                           ;main.c: 87: ua = ((x - c) / (b - c));
  6591  0DC5  0926               	comf	trimf@c,w
  6592  0DC6  00F8               	movwf	??_trimf
  6593  0DC7  0927               	comf	trimf@c+1,w
  6594  0DC8  00F9               	movwf	??_trimf+1
  6595  0DC9  0AF8               	incf	??_trimf,f
  6596  0DCA  1903               	skipnz
  6597  0DCB  0AF9               	incf	??_trimf+1,f
  6598  0DCC  0824               	movf	trimf@b,w
  6599  0DCD  0778               	addwf	??_trimf,w
  6600  0DCE  00F0               	movwf	i1___lwdiv@divisor
  6601  0DCF  0825               	movf	trimf@b+1,w
  6602  0DD0  1803               	skipnc
  6603  0DD1  0A25               	incf	trimf@b+1,w
  6604  0DD2  0779               	addwf	??_trimf+1,w
  6605  0DD3  00F1               	movwf	i1___lwdiv@divisor+1
  6606  0DD4  0926               	comf	trimf@c,w
  6607  0DD5  00FA               	movwf	??_trimf+2
  6608  0DD6  0927               	comf	trimf@c+1,w
  6609  0DD7                     L7:	
  6610  0DD7  00FB               	movwf	??_trimf+3
  6611  0DD8  0AFA               	incf	??_trimf+2,f
  6612  0DD9  1903               	skipnz
  6613  0DDA  0AFB               	incf	??_trimf+3,f
  6614  0DDB  0820               	movf	trimf@x,w
  6615  0DDC  077A               	addwf	??_trimf+2,w
  6616  0DDD  00F2               	movwf	i1___lwdiv@dividend
  6617  0DDE  0821               	movf	trimf@x+1,w
  6618  0DDF  1803               	skipnc
  6619  0DE0  0A21               	incf	trimf@x+1,w
  6620  0DE1  077B               	addwf	??_trimf+3,w
  6621  0DE2  00F3               	movwf	i1___lwdiv@dividend+1
  6622  0DE3  120A  158A  2394  120A  158A  	fcall	i1___lwdiv
  6623  0DE8  0871               	movf	?i1___lwdiv+1,w
  6624  0DE9  01FD               	clrf	trimf@ua+1
  6625  0DEA  07FD               	addwf	trimf@ua+1,f
  6626  0DEB  0870               	movf	?i1___lwdiv,w
  6627  0DEC  01FC               	clrf	trimf@ua
  6628  0DED  07FC               	addwf	trimf@ua,f
  6629  0DEE  2DFB               	goto	i1l2084
  6630  0DEF                     i1l2080:	
  6631                           
  6632                           ;main.c: 88: else if (x > c)
  6633  0DEF  1283               	bcf	3,5	;RP0=0, select bank0
  6634  0DF0  1303               	bcf	3,6	;RP1=0, select bank0
  6635  0DF1  0821               	movf	trimf@x+1,w
  6636  0DF2  0227               	subwf	trimf@c+1,w
  6637  0DF3  1D03               	skipz
  6638  0DF4  2DF7               	goto	u171_25
  6639  0DF5  0820               	movf	trimf@x,w
  6640  0DF6  0226               	subwf	trimf@c,w
  6641  0DF7                     u171_25:	
  6642  0DF7  1803               	skipnc
  6643  0DF8  2DFB               	goto	i1l2084
  6644  0DF9                     i1l2082:	
  6645                           
  6646                           ;main.c: 89: ua = 0;
  6647  0DF9  01FC               	clrf	trimf@ua
  6648  0DFA  01FD               	clrf	trimf@ua+1
  6649  0DFB                     i1l2084:	
  6650                           
  6651                           ;main.c: 91: return(ua);
  6652  0DFB  087D               	movf	trimf@ua+1,w
  6653  0DFC  1283               	bcf	3,5	;RP0=0, select bank0
  6654  0DFD  1303               	bcf	3,6	;RP1=0, select bank0
  6655  0DFE  01A1               	clrf	?_trimf+1
  6656  0DFF  07A1               	addwf	?_trimf+1,f
  6657  0E00  087C               	movf	trimf@ua,w
  6658  0E01  01A0               	clrf	?_trimf
  6659  0E02  07A0               	addwf	?_trimf,f
  6660  0E03  0008               	return
  6661  0E04                     __end_of_trimf:	
  6662                           
  6663                           	psect	text31
  6664  0E04                     __ptext31:	
  6665 ;; *************** function _trapmf *****************
  6666 ;; Defined at:
  6667 ;;		line 97 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;  x               2    0[BANK0 ] unsigned int 
  6670 ;;  a               2    2[BANK0 ] unsigned int 
  6671 ;;  b               2    4[BANK0 ] unsigned int 
  6672 ;;  c               2    6[BANK0 ] unsigned int 
  6673 ;;  d               2    8[BANK0 ] unsigned int 
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  ua              2   12[COMMON] unsigned int 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  2    0[BANK0 ] unsigned int 
  6678 ;; Registers used:
  6679 ;;		wreg, status,2, status,0, pclath, cstack
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6685 ;;      Params:         0      10       0       0       0
  6686 ;;      Locals:         2       0       0       0       0
  6687 ;;      Temps:          4       0       0       0       0
  6688 ;;      Totals:         6      10       0       0       0
  6689 ;;Total ram usage:       16 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    1
  6692 ;; This function calls:
  6693 ;;		i1___lwdiv
  6694 ;; This function is called by:
  6695 ;;		_Fuzzy
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           
  6700                           ;psect for function _trapmf
  6701  0E04                     _trapmf:	
  6702                           
  6703                           ;main.c: 99: unsigned int ua = 0;
  6704                           
  6705                           ;incstack = 0
  6706                           ; Regs used in _trapmf: [wreg+status,2+status,0+pclath+cstack]
  6707  0E04  01FC               	clrf	trapmf@ua
  6708  0E05  01FD               	clrf	trapmf@ua+1
  6709                           
  6710                           ;main.c: 101: if (x <= a)
  6711  0E06  1283               	bcf	3,5	;RP0=0, select bank0
  6712  0E07  1303               	bcf	3,6	;RP1=0, select bank0
  6713  0E08  0821               	movf	trapmf@x+1,w
  6714  0E09  0223               	subwf	trapmf@a+1,w
  6715  0E0A  1D03               	skipz
  6716  0E0B  2E0E               	goto	u172_25
  6717  0E0C  0820               	movf	trapmf@x,w
  6718  0E0D  0222               	subwf	trapmf@a,w
  6719  0E0E                     u172_25:	
  6720  0E0E  1803               	btfsc	3,0
  6721  0E0F  2E98               	goto	i1l2114
  6722                           
  6723                           ;main.c: 103: else if ((a < x) && (x <= b))
  6724                           
  6725                           ;main.c: 102: ua = 0;
  6726  0E10  0821               	movf	trapmf@x+1,w
  6727  0E11  0223               	subwf	trapmf@a+1,w
  6728  0E12  1D03               	skipz
  6729  0E13  2E16               	goto	u173_25
  6730  0E14  0820               	movf	trapmf@x,w
  6731  0E15  0222               	subwf	trapmf@a,w
  6732  0E16                     u173_25:	
  6733  0E16  1803               	skipnc
  6734  0E17  2E3D               	goto	i1l2100
  6735  0E18  0821               	movf	trapmf@x+1,w
  6736  0E19  0225               	subwf	trapmf@b+1,w
  6737  0E1A  1D03               	skipz
  6738  0E1B  2E1E               	goto	u174_25
  6739  0E1C  0820               	movf	trapmf@x,w
  6740  0E1D  0224               	subwf	trapmf@b,w
  6741  0E1E                     u174_25:	
  6742  0E1E  1C03               	skipc
  6743  0E1F  2E3D               	goto	i1l2100
  6744                           
  6745                           ;main.c: 104: ua = ((x - a) / (b - a));
  6746  0E20  0922               	comf	trapmf@a,w
  6747  0E21  00F8               	movwf	??_trapmf
  6748  0E22  0923               	comf	trapmf@a+1,w
  6749  0E23  00F9               	movwf	??_trapmf+1
  6750  0E24  0AF8               	incf	??_trapmf,f
  6751  0E25  1903               	skipnz
  6752  0E26  0AF9               	incf	??_trapmf+1,f
  6753  0E27  0824               	movf	trapmf@b,w
  6754  0E28  0778               	addwf	??_trapmf,w
  6755  0E29  00F0               	movwf	i1___lwdiv@divisor
  6756  0E2A  0825               	movf	trapmf@b+1,w
  6757  0E2B  1803               	skipnc
  6758  0E2C  0A25               	incf	trapmf@b+1,w
  6759  0E2D  0779               	addwf	??_trapmf+1,w
  6760  0E2E  00F1               	movwf	i1___lwdiv@divisor+1
  6761  0E2F  0922               	comf	trapmf@a,w
  6762  0E30  00FA               	movwf	??_trapmf+2
  6763  0E31  0923               	comf	trapmf@a+1,w
  6764  0E32  00FB               	movwf	??_trapmf+3
  6765  0E33  0AFA               	incf	??_trapmf+2,f
  6766  0E34  1903               	skipnz
  6767  0E35  0AFB               	incf	??_trapmf+3,f
  6768  0E36  0820               	movf	trapmf@x,w
  6769  0E37  077A               	addwf	??_trapmf+2,w
  6770  0E38  00F2               	movwf	i1___lwdiv@dividend
  6771  0E39  0821               	movf	trapmf@x+1,w
  6772  0E3A  1803               	skipnc
  6773  0E3B  0A21               	incf	trapmf@x+1,w
  6774  0E3C  2E80               	goto	L9
  6775  0E3D                     i1l2100:	
  6776                           
  6777                           ;main.c: 105: else if ((b <= x) && (x <= c))
  6778  0E3D  1283               	bcf	3,5	;RP0=0, select bank0
  6779  0E3E  1303               	bcf	3,6	;RP1=0, select bank0
  6780  0E3F  0825               	movf	trapmf@b+1,w
  6781  0E40  0221               	subwf	trapmf@x+1,w
  6782  0E41  1D03               	skipz
  6783  0E42  2E45               	goto	u175_25
  6784  0E43  0824               	movf	trapmf@b,w
  6785  0E44  0220               	subwf	trapmf@x,w
  6786  0E45                     u175_25:	
  6787  0E45  1C03               	skipc
  6788  0E46  2E54               	goto	i1l2106
  6789  0E47  0821               	movf	trapmf@x+1,w
  6790  0E48  0227               	subwf	trapmf@c+1,w
  6791  0E49  1D03               	skipz
  6792  0E4A  2E4D               	goto	u176_25
  6793  0E4B  0820               	movf	trapmf@x,w
  6794  0E4C  0226               	subwf	trapmf@c,w
  6795  0E4D                     u176_25:	
  6796  0E4D  1C03               	skipc
  6797  0E4E  2E54               	goto	i1l2106
  6798                           
  6799                           ;main.c: 106: ua = 1;
  6800  0E4F  3001               	movlw	1
  6801  0E50  00FC               	movwf	trapmf@ua
  6802  0E51  3000               	movlw	0
  6803  0E52  00FD               	movwf	trapmf@ua+1
  6804  0E53  2E9A               	goto	i1l2116
  6805  0E54                     i1l2106:	
  6806                           
  6807                           ;main.c: 107: else if ((c < x) && (x <= d))
  6808  0E54  0821               	movf	trapmf@x+1,w
  6809  0E55  0227               	subwf	trapmf@c+1,w
  6810  0E56  1D03               	skipz
  6811  0E57  2E5A               	goto	u177_25
  6812  0E58  0820               	movf	trapmf@x,w
  6813  0E59  0226               	subwf	trapmf@c,w
  6814  0E5A                     u177_25:	
  6815  0E5A  1803               	skipnc
  6816  0E5B  2E8E               	goto	i1l2112
  6817  0E5C  0821               	movf	trapmf@x+1,w
  6818  0E5D  0229               	subwf	trapmf@d+1,w
  6819  0E5E  1D03               	skipz
  6820  0E5F  2E62               	goto	u178_25
  6821  0E60  0820               	movf	trapmf@x,w
  6822  0E61  0228               	subwf	trapmf@d,w
  6823  0E62                     u178_25:	
  6824  0E62  1C03               	skipc
  6825  0E63  2E8E               	goto	i1l2112
  6826                           
  6827                           ;main.c: 108: ua = ((d - x) / (d - c));
  6828  0E64  0926               	comf	trapmf@c,w
  6829  0E65  00F8               	movwf	??_trapmf
  6830  0E66  0927               	comf	trapmf@c+1,w
  6831  0E67  00F9               	movwf	??_trapmf+1
  6832  0E68  0AF8               	incf	??_trapmf,f
  6833  0E69  1903               	skipnz
  6834  0E6A  0AF9               	incf	??_trapmf+1,f
  6835  0E6B  0828               	movf	trapmf@d,w
  6836  0E6C  0778               	addwf	??_trapmf,w
  6837  0E6D  00F0               	movwf	i1___lwdiv@divisor
  6838  0E6E  0829               	movf	trapmf@d+1,w
  6839  0E6F  1803               	skipnc
  6840  0E70  0A29               	incf	trapmf@d+1,w
  6841  0E71  0779               	addwf	??_trapmf+1,w
  6842  0E72  00F1               	movwf	i1___lwdiv@divisor+1
  6843  0E73  0920               	comf	trapmf@x,w
  6844  0E74  00FA               	movwf	??_trapmf+2
  6845  0E75  0921               	comf	trapmf@x+1,w
  6846  0E76  00FB               	movwf	??_trapmf+3
  6847  0E77  0AFA               	incf	??_trapmf+2,f
  6848  0E78  1903               	skipnz
  6849  0E79  0AFB               	incf	??_trapmf+3,f
  6850  0E7A  0828               	movf	trapmf@d,w
  6851  0E7B  077A               	addwf	??_trapmf+2,w
  6852  0E7C  00F2               	movwf	i1___lwdiv@dividend
  6853  0E7D  0829               	movf	trapmf@d+1,w
  6854  0E7E  1803               	skipnc
  6855  0E7F  0A29               	incf	trapmf@d+1,w
  6856  0E80                     L9:	
  6857  0E80  077B               	addwf	??_trapmf+3,w
  6858  0E81  00F3               	movwf	i1___lwdiv@dividend+1
  6859  0E82  120A  158A  2394  120A  158A  	fcall	i1___lwdiv
  6860  0E87  0871               	movf	?i1___lwdiv+1,w
  6861  0E88  01FD               	clrf	trapmf@ua+1
  6862  0E89  07FD               	addwf	trapmf@ua+1,f
  6863  0E8A  0870               	movf	?i1___lwdiv,w
  6864  0E8B  01FC               	clrf	trapmf@ua
  6865  0E8C  07FC               	addwf	trapmf@ua,f
  6866  0E8D  2E9A               	goto	i1l2116
  6867  0E8E                     i1l2112:	
  6868                           
  6869                           ;main.c: 109: else if (x > d)
  6870  0E8E  1283               	bcf	3,5	;RP0=0, select bank0
  6871  0E8F  1303               	bcf	3,6	;RP1=0, select bank0
  6872  0E90  0821               	movf	trapmf@x+1,w
  6873  0E91  0229               	subwf	trapmf@d+1,w
  6874  0E92  1D03               	skipz
  6875  0E93  2E96               	goto	u179_25
  6876  0E94  0820               	movf	trapmf@x,w
  6877  0E95  0228               	subwf	trapmf@d,w
  6878  0E96                     u179_25:	
  6879  0E96  1803               	skipnc
  6880  0E97  2E9A               	goto	i1l2116
  6881  0E98                     i1l2114:	
  6882                           
  6883                           ;main.c: 110: ua = 0;
  6884  0E98  01FC               	clrf	trapmf@ua
  6885  0E99  01FD               	clrf	trapmf@ua+1
  6886  0E9A                     i1l2116:	
  6887                           
  6888                           ;main.c: 112: return(ua);
  6889  0E9A  087D               	movf	trapmf@ua+1,w
  6890  0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  6891  0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  6892  0E9D  01A1               	clrf	?_trapmf+1
  6893  0E9E  07A1               	addwf	?_trapmf+1,f
  6894  0E9F  087C               	movf	trapmf@ua,w
  6895  0EA0  01A0               	clrf	?_trapmf
  6896  0EA1  07A0               	addwf	?_trapmf,f
  6897  0EA2  0008               	return
  6898  0EA3                     __end_of_trapmf:	
  6899                           
  6900                           	psect	text32
  6901  0B94                     __ptext32:	
  6902 ;; *************** function i1___lwdiv *****************
  6903 ;; Defined at:
  6904 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  6905 ;; Parameters:    Size  Location     Type
  6906 ;;  divisor         2    0[COMMON] unsigned int 
  6907 ;;  dividend        2    2[COMMON] unsigned int 
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;  __lwdiv         2    5[COMMON] unsigned int 
  6910 ;;  __lwdiv         1    7[COMMON] unsigned char 
  6911 ;; Return value:  Size  Location     Type
  6912 ;;                  2    0[COMMON] unsigned int 
  6913 ;; Registers used:
  6914 ;;		wreg, status,2, status,0
  6915 ;; Tracked objects:
  6916 ;;		On entry : 0/0
  6917 ;;		On exit  : 0/0
  6918 ;;		Unchanged: 0/0
  6919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6920 ;;      Params:         4       0       0       0       0
  6921 ;;      Locals:         3       0       0       0       0
  6922 ;;      Temps:          1       0       0       0       0
  6923 ;;      Totals:         8       0       0       0       0
  6924 ;;Total ram usage:        8 bytes
  6925 ;; Hardware stack levels used:    1
  6926 ;; This function calls:
  6927 ;;		Nothing
  6928 ;; This function is called by:
  6929 ;;		_trimf
  6930 ;;		_trapmf
  6931 ;;		_Fuzzy
  6932 ;;		_ISR
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           
  6937                           ;psect for function i1___lwdiv
  6938  0B94                     i1___lwdiv:	
  6939                           
  6940                           ;incstack = 0
  6941                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  6942  0B94  01F5               	clrf	i1___lwdiv@quotient
  6943  0B95  01F6               	clrf	i1___lwdiv@quotient+1
  6944  0B96  0871               	movf	i1___lwdiv@divisor+1,w
  6945  0B97  0470               	iorwf	i1___lwdiv@divisor,w
  6946  0B98  1903               	skipnz
  6947  0B99  2BCB               	goto	i1l2058
  6948  0B9A  01F7               	clrf	i1___lwdiv@counter
  6949  0B9B  0AF7               	incf	i1___lwdiv@counter,f
  6950  0B9C                     i1l2046:	
  6951  0B9C  1BF1               	btfsc	i1___lwdiv@divisor+1,7
  6952  0B9D  2BAA               	goto	i1l2048
  6953  0B9E  3001               	movlw	1
  6954  0B9F                     u160_25:	
  6955  0B9F  1003               	clrc
  6956  0BA0  0DF0               	rlf	i1___lwdiv@divisor,f
  6957  0BA1  0DF1               	rlf	i1___lwdiv@divisor+1,f
  6958  0BA2  3EFF               	addlw	-1
  6959  0BA3  1D03               	skipz
  6960  0BA4  2B9F               	goto	u160_25
  6961  0BA5  3001               	movlw	1
  6962  0BA6  00F4               	movwf	??i1___lwdiv
  6963  0BA7  0874               	movf	??i1___lwdiv,w
  6964  0BA8  07F7               	addwf	i1___lwdiv@counter,f
  6965  0BA9  2B9C               	goto	i1l2046
  6966  0BAA                     i1l2048:	
  6967  0BAA  3001               	movlw	1
  6968  0BAB                     u162_25:	
  6969  0BAB  1003               	clrc
  6970  0BAC  0DF5               	rlf	i1___lwdiv@quotient,f
  6971  0BAD  0DF6               	rlf	i1___lwdiv@quotient+1,f
  6972  0BAE  3EFF               	addlw	-1
  6973  0BAF  1D03               	skipz
  6974  0BB0  2BAB               	goto	u162_25
  6975  0BB1  0871               	movf	i1___lwdiv@divisor+1,w
  6976  0BB2  0273               	subwf	i1___lwdiv@dividend+1,w
  6977  0BB3  1D03               	skipz
  6978  0BB4  2BB7               	goto	u163_25
  6979  0BB5  0870               	movf	i1___lwdiv@divisor,w
  6980  0BB6  0272               	subwf	i1___lwdiv@dividend,w
  6981  0BB7                     u163_25:	
  6982  0BB7  1C03               	skipc
  6983  0BB8  2BC0               	goto	i1l2054
  6984  0BB9  0870               	movf	i1___lwdiv@divisor,w
  6985  0BBA  02F2               	subwf	i1___lwdiv@dividend,f
  6986  0BBB  0871               	movf	i1___lwdiv@divisor+1,w
  6987  0BBC  1C03               	skipc
  6988  0BBD  03F3               	decf	i1___lwdiv@dividend+1,f
  6989  0BBE  02F3               	subwf	i1___lwdiv@dividend+1,f
  6990  0BBF  1475               	bsf	i1___lwdiv@quotient,0
  6991  0BC0                     i1l2054:	
  6992  0BC0  3001               	movlw	1
  6993  0BC1                     u164_25:	
  6994  0BC1  1003               	clrc
  6995  0BC2  0CF1               	rrf	i1___lwdiv@divisor+1,f
  6996  0BC3  0CF0               	rrf	i1___lwdiv@divisor,f
  6997  0BC4  3EFF               	addlw	-1
  6998  0BC5  1D03               	skipz
  6999  0BC6  2BC1               	goto	u164_25
  7000  0BC7  3001               	movlw	1
  7001  0BC8  02F7               	subwf	i1___lwdiv@counter,f
  7002  0BC9  1D03               	btfss	3,2
  7003  0BCA  2BAA               	goto	i1l2048
  7004  0BCB                     i1l2058:	
  7005  0BCB  0876               	movf	i1___lwdiv@quotient+1,w
  7006  0BCC  01F1               	clrf	?i1___lwdiv+1
  7007  0BCD  07F1               	addwf	?i1___lwdiv+1,f
  7008  0BCE  0875               	movf	i1___lwdiv@quotient,w
  7009  0BCF  01F0               	clrf	?i1___lwdiv
  7010  0BD0  07F0               	addwf	?i1___lwdiv,f
  7011  0BD1  0008               	return
  7012  0BD2                     __end_ofi1___lwdiv:	
  7013                           
  7014                           	psect	text33
  7015  09AD                     __ptext33:	
  7016 ;; *************** function _max_val *****************
  7017 ;; Defined at:
  7018 ;;		line 127 in file "C:\Users\Ninguem\Desktop\Trabalho Sistemas Inteligentes Cruzeiro\Retrab C no MPLAB\main.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;  a               2    0[COMMON] unsigned int 
  7021 ;;  b               2    2[COMMON] unsigned int 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;		None
  7024 ;; Return value:  Size  Location     Type
  7025 ;;                  2    0[COMMON] unsigned int 
  7026 ;; Registers used:
  7027 ;;		wreg, status,2, status,0
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7033 ;;      Params:         4       0       0       0       0
  7034 ;;      Locals:         0       0       0       0       0
  7035 ;;      Temps:          0       0       0       0       0
  7036 ;;      Totals:         4       0       0       0       0
  7037 ;;Total ram usage:        4 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; This function calls:
  7040 ;;		Nothing
  7041 ;; This function is called by:
  7042 ;;		_Fuzzy
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           
  7047                           ;psect for function _max_val
  7048  09AD                     _max_val:	
  7049                           
  7050                           ;main.c: 129: if (a > b)
  7051                           
  7052                           ;incstack = 0
  7053                           ; Regs used in _max_val: [wreg+status,2+status,0]
  7054  09AD  0871               	movf	max_val@a+1,w
  7055  09AE  0273               	subwf	max_val@b+1,w
  7056  09AF  1D03               	skipz
  7057  09B0  29B3               	goto	u180_25
  7058  09B1  0870               	movf	max_val@a,w
  7059  09B2  0272               	subwf	max_val@b,w
  7060  09B3                     u180_25:	
  7061  09B3  1C03               	btfss	3,0
  7062  09B4  0008               	return
  7063                           
  7064                           ;main.c: 131: else
  7065                           ;main.c: 132: return b;
  7066                           
  7067                           ;main.c: 130: return a;
  7068  09B5  0873               	movf	max_val@b+1,w
  7069  09B6  01F1               	clrf	?_max_val+1
  7070  09B7  07F1               	addwf	?_max_val+1,f
  7071  09B8  0872               	movf	max_val@b,w
  7072  09B9  01F0               	clrf	?_max_val
  7073  09BA  07F0               	addwf	?_max_val,f
  7074  09BB  0008               	return
  7075  09BC                     __end_of_max_val:	
  7076                           
  7077                           	psect	text34
  7078  09FC                     __ptext34:	
  7079 ;; *************** function ___lwtoft *****************
  7080 ;; Defined at:
  7081 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwtoft.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;  c               2    8[COMMON] unsigned int 
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;		None
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  3    8[COMMON] float 
  7088 ;; Registers used:
  7089 ;;		wreg, status,2, status,0, pclath, cstack
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7095 ;;      Params:         3       0       0       0       0
  7096 ;;      Locals:         0       0       0       0       0
  7097 ;;      Temps:          1       0       0       0       0
  7098 ;;      Totals:         4       0       0       0       0
  7099 ;;Total ram usage:        4 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:    1
  7102 ;; This function calls:
  7103 ;;		___ftpack
  7104 ;; This function is called by:
  7105 ;;		_Fuzzy
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function ___lwtoft
  7111  09FC                     ___lwtoft:	
  7112                           
  7113                           ;incstack = 0
  7114                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  7115  09FC  0878               	movf	___lwtoft@c,w
  7116  09FD  00F0               	movwf	___ftpack@arg
  7117  09FE  0879               	movf	___lwtoft@c+1,w
  7118  09FF  00F1               	movwf	___ftpack@arg+1
  7119  0A00  01F2               	clrf	___ftpack@arg+2
  7120  0A01  308E               	movlw	142
  7121  0A02  00FB               	movwf	??___lwtoft
  7122  0A03  087B               	movf	??___lwtoft,w
  7123  0A04  00F3               	movwf	___ftpack@exp
  7124  0A05  01F4               	clrf	___ftpack@sign
  7125  0A06  120A  158A  24AF   	fcall	___ftpack
  7126  0A09  0870               	movf	?___ftpack,w
  7127  0A0A  00F8               	movwf	?___lwtoft
  7128  0A0B  0871               	movf	?___ftpack+1,w
  7129  0A0C  00F9               	movwf	?___lwtoft+1
  7130  0A0D  0872               	movf	?___ftpack+2,w
  7131  0A0E  00FA               	movwf	?___lwtoft+2
  7132  0A0F  0008               	return
  7133  0A10                     __end_of___lwtoft:	
  7134                           
  7135                           	psect	text35
  7136  0CAF                     __ptext35:	
  7137 ;; *************** function ___ftpack *****************
  7138 ;; Defined at:
  7139 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  arg             3    0[COMMON] unsigned um
  7142 ;;  exp             1    3[COMMON] unsigned char 
  7143 ;;  sign            1    4[COMMON] unsigned char 
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;		None
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  3    0[COMMON] float 
  7148 ;; Registers used:
  7149 ;;		wreg, status,2, status,0
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7155 ;;      Params:         5       0       0       0       0
  7156 ;;      Locals:         0       0       0       0       0
  7157 ;;      Temps:          3       0       0       0       0
  7158 ;;      Totals:         8       0       0       0       0
  7159 ;;Total ram usage:        8 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; This function calls:
  7162 ;;		Nothing
  7163 ;; This function is called by:
  7164 ;;		___lwtoft
  7165 ;; This function uses a non-reentrant model
  7166 ;;
  7167                           
  7168                           
  7169                           ;psect for function ___ftpack
  7170  0CAF                     ___ftpack:	
  7171                           
  7172                           ;incstack = 0
  7173                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7174  0CAF  0873               	movf	___ftpack@exp,w
  7175  0CB0  1903               	btfsc	3,2
  7176  0CB1  2CB7               	goto	i1l2006
  7177  0CB2  0872               	movf	___ftpack@arg+2,w
  7178  0CB3  0471               	iorwf	___ftpack@arg+1,w
  7179  0CB4  0470               	iorwf	___ftpack@arg,w
  7180  0CB5  1D03               	skipz
  7181  0CB6  2CCA               	goto	i1l2012
  7182  0CB7                     i1l2006:	
  7183  0CB7  3000               	movlw	0
  7184  0CB8  00F0               	movwf	?___ftpack
  7185  0CB9  3000               	movlw	0
  7186  0CBA  00F1               	movwf	?___ftpack+1
  7187  0CBB  3000               	movlw	0
  7188  0CBC  00F2               	movwf	?___ftpack+2
  7189  0CBD  0008               	return
  7190  0CBE                     i1l2010:	
  7191  0CBE  3001               	movlw	1
  7192  0CBF  00F5               	movwf	??___ftpack
  7193  0CC0  0875               	movf	??___ftpack,w
  7194  0CC1  07F3               	addwf	___ftpack@exp,f
  7195  0CC2  3001               	movlw	1
  7196  0CC3                     u149_25:	
  7197  0CC3  1003               	clrc
  7198  0CC4  0CF2               	rrf	___ftpack@arg+2,f
  7199  0CC5  0CF1               	rrf	___ftpack@arg+1,f
  7200  0CC6  0CF0               	rrf	___ftpack@arg,f
  7201  0CC7  3EFF               	addlw	-1
  7202  0CC8  1D03               	skipz
  7203  0CC9  2CC3               	goto	u149_25
  7204  0CCA                     i1l2012:	
  7205  0CCA  30FE               	movlw	254
  7206  0CCB  0572               	andwf	___ftpack@arg+2,w
  7207  0CCC  1903               	btfsc	3,2
  7208  0CCD  2CE5               	goto	i1l765
  7209  0CCE  2CBE               	goto	i1l2010
  7210  0CCF                     i1l2014:	
  7211  0CCF  3001               	movlw	1
  7212  0CD0  00F5               	movwf	??___ftpack
  7213  0CD1  0875               	movf	??___ftpack,w
  7214  0CD2  07F3               	addwf	___ftpack@exp,f
  7215  0CD3  3001               	movlw	1
  7216  0CD4  07F0               	addwf	___ftpack@arg,f
  7217  0CD5  3000               	movlw	0
  7218  0CD6  1803               	skipnc
  7219  0CD7  3001               	movlw	1
  7220  0CD8  07F1               	addwf	___ftpack@arg+1,f
  7221  0CD9  3000               	movlw	0
  7222  0CDA  1803               	skipnc
  7223  0CDB  3001               	movlw	1
  7224  0CDC  07F2               	addwf	___ftpack@arg+2,f
  7225  0CDD  3001               	movlw	1
  7226  0CDE                     u151_25:	
  7227  0CDE  1003               	clrc
  7228  0CDF  0CF2               	rrf	___ftpack@arg+2,f
  7229  0CE0  0CF1               	rrf	___ftpack@arg+1,f
  7230  0CE1  0CF0               	rrf	___ftpack@arg,f
  7231  0CE2  3EFF               	addlw	-1
  7232  0CE3  1D03               	skipz
  7233  0CE4  2CDE               	goto	u151_25
  7234  0CE5                     i1l765:	
  7235  0CE5  30FF               	movlw	255
  7236  0CE6  0572               	andwf	___ftpack@arg+2,w
  7237  0CE7  1903               	btfsc	3,2
  7238  0CE8  2CF4               	goto	i1l2022
  7239  0CE9  2CCF               	goto	i1l2014
  7240  0CEA                     i1l2020:	
  7241  0CEA  3001               	movlw	1
  7242  0CEB  02F3               	subwf	___ftpack@exp,f
  7243  0CEC  3001               	movlw	1
  7244  0CED                     u153_25:	
  7245  0CED  1003               	clrc
  7246  0CEE  0DF0               	rlf	___ftpack@arg,f
  7247  0CEF  0DF1               	rlf	___ftpack@arg+1,f
  7248  0CF0  0DF2               	rlf	___ftpack@arg+2,f
  7249  0CF1  3EFF               	addlw	-1
  7250  0CF2  1D03               	skipz
  7251  0CF3  2CED               	goto	u153_25
  7252  0CF4                     i1l2022:	
  7253  0CF4  1FF1               	btfss	___ftpack@arg+1,7
  7254  0CF5  2CEA               	goto	i1l2020
  7255  0CF6  1873               	btfsc	___ftpack@exp,0
  7256  0CF7  2CFE               	goto	i1l771
  7257  0CF8  30FF               	movlw	255
  7258  0CF9  05F0               	andwf	___ftpack@arg,f
  7259  0CFA  307F               	movlw	127
  7260  0CFB  05F1               	andwf	___ftpack@arg+1,f
  7261  0CFC  30FF               	movlw	255
  7262  0CFD  05F2               	andwf	___ftpack@arg+2,f
  7263  0CFE                     i1l771:	
  7264  0CFE  1003               	clrc
  7265  0CFF  0CF3               	rrf	___ftpack@exp,f
  7266  0D00  0873               	movf	___ftpack@exp,w
  7267  0D01  00F5               	movwf	??___ftpack
  7268  0D02  01F6               	clrf	??___ftpack+1
  7269  0D03  01F7               	clrf	??___ftpack+2
  7270  0D04  3010               	movlw	16
  7271  0D05                     u156_25:	
  7272  0D05  1003               	clrc
  7273  0D06  0DF5               	rlf	??___ftpack,f
  7274  0D07  0DF6               	rlf	??___ftpack+1,f
  7275  0D08  0DF7               	rlf	??___ftpack+2,f
  7276  0D09  3EFF               	addlw	-1
  7277  0D0A  1D03               	skipz
  7278  0D0B  2D05               	goto	u156_25
  7279  0D0C  0875               	movf	??___ftpack,w
  7280  0D0D  04F0               	iorwf	___ftpack@arg,f
  7281  0D0E  0876               	movf	??___ftpack+1,w
  7282  0D0F  04F1               	iorwf	___ftpack@arg+1,f
  7283  0D10  0877               	movf	??___ftpack+2,w
  7284  0D11  04F2               	iorwf	___ftpack@arg+2,f
  7285  0D12  0874               	movf	___ftpack@sign,w
  7286  0D13  1903               	btfsc	3,2
  7287  0D14  0008               	return
  7288  0D15  17F2               	bsf	___ftpack@arg+2,7
  7289  0D16  0008               	return
  7290  0D17                     __end_of___ftpack:	
  7291                           
  7292                           	psect	text36
  7293  0799                     __ptext36:	
  7294 ;; *************** function ___ftge *****************
  7295 ;; Defined at:
  7296 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  ff1             3    0[BANK0 ] float 
  7299 ;;  ff2             3    3[BANK0 ] float 
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;		None
  7302 ;; Return value:  Size  Location     Type
  7303 ;;		None               void
  7304 ;; Registers used:
  7305 ;;		wreg, status,2, status,0
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7311 ;;      Params:         0       6       0       0       0
  7312 ;;      Locals:         0       0       0       0       0
  7313 ;;      Temps:          0       6       0       0       0
  7314 ;;      Totals:         0      12       0       0       0
  7315 ;;Total ram usage:       12 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; This function calls:
  7318 ;;		Nothing
  7319 ;; This function is called by:
  7320 ;;		_Fuzzy
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           
  7325                           ;psect for function ___ftge
  7326  0799                     ___ftge:	
  7327                           
  7328                           ;incstack = 0
  7329                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  7330  0799  1283               	bcf	3,5	;RP0=0, select bank0
  7331  079A  1303               	bcf	3,6	;RP1=0, select bank0
  7332  079B  1FA2               	btfss	___ftge@ff1+2,7
  7333  079C  2FC2               	goto	i1l2218
  7334  079D  3000               	movlw	0
  7335  079E  00A6               	movwf	??___ftge
  7336  079F  3000               	movlw	0
  7337  07A0  00A7               	movwf	??___ftge+1
  7338  07A1  3080               	movlw	128
  7339  07A2  00A8               	movwf	??___ftge+2
  7340  07A3  0920               	comf	___ftge@ff1,w
  7341  07A4  00A9               	movwf	??___ftge+3
  7342  07A5  0921               	comf	___ftge@ff1+1,w
  7343  07A6  00AA               	movwf	??___ftge+4
  7344  07A7  0922               	comf	___ftge@ff1+2,w
  7345  07A8  00AB               	movwf	??___ftge+5
  7346  07A9  0AA9               	incf	??___ftge+3,f
  7347  07AA  1903               	skipnz
  7348  07AB  0AAA               	incf	??___ftge+4,f
  7349  07AC  1903               	skipnz
  7350  07AD  0AAB               	incf	??___ftge+5,f
  7351  07AE  0829               	movf	??___ftge+3,w
  7352  07AF  07A6               	addwf	??___ftge,f
  7353  07B0  082A               	movf	??___ftge+4,w
  7354  07B1  1803               	skipnc
  7355  07B2  0F2A               	incfsz	??___ftge+4,w
  7356  07B3  2FB5               	goto	u199_21
  7357  07B4  2FB6               	goto	u199_22
  7358  07B5                     u199_21:	
  7359  07B5  07A7               	addwf	??___ftge+1,f
  7360  07B6                     u199_22:	
  7361  07B6  082B               	movf	??___ftge+5,w
  7362  07B7  1803               	skipnc
  7363  07B8  0F2B               	incfsz	??___ftge+5,w
  7364  07B9  2FBB               	goto	u199_23
  7365  07BA  2FBC               	goto	u199_24
  7366  07BB                     u199_23:	
  7367  07BB  07A8               	addwf	??___ftge+2,f
  7368  07BC                     u199_24:	
  7369  07BC  0826               	movf	??___ftge,w
  7370  07BD  00A0               	movwf	___ftge@ff1
  7371  07BE  0827               	movf	??___ftge+1,w
  7372  07BF  00A1               	movwf	___ftge@ff1+1
  7373  07C0  0828               	movf	??___ftge+2,w
  7374  07C1  00A2               	movwf	___ftge@ff1+2
  7375  07C2                     i1l2218:	
  7376  07C2  1FA5               	btfss	___ftge@ff2+2,7
  7377  07C3  2FE9               	goto	i1l2222
  7378  07C4  3000               	movlw	0
  7379  07C5  00A6               	movwf	??___ftge
  7380  07C6  3000               	movlw	0
  7381  07C7  00A7               	movwf	??___ftge+1
  7382  07C8  3080               	movlw	128
  7383  07C9  00A8               	movwf	??___ftge+2
  7384  07CA  0923               	comf	___ftge@ff2,w
  7385  07CB  00A9               	movwf	??___ftge+3
  7386  07CC  0924               	comf	___ftge@ff2+1,w
  7387  07CD  00AA               	movwf	??___ftge+4
  7388  07CE  0925               	comf	___ftge@ff2+2,w
  7389  07CF  00AB               	movwf	??___ftge+5
  7390  07D0  0AA9               	incf	??___ftge+3,f
  7391  07D1  1903               	skipnz
  7392  07D2  0AAA               	incf	??___ftge+4,f
  7393  07D3  1903               	skipnz
  7394  07D4  0AAB               	incf	??___ftge+5,f
  7395  07D5  0829               	movf	??___ftge+3,w
  7396  07D6  07A6               	addwf	??___ftge,f
  7397  07D7  082A               	movf	??___ftge+4,w
  7398  07D8  1803               	skipnc
  7399  07D9  0F2A               	incfsz	??___ftge+4,w
  7400  07DA  2FDC               	goto	u201_21
  7401  07DB  2FDD               	goto	u201_22
  7402  07DC                     u201_21:	
  7403  07DC  07A7               	addwf	??___ftge+1,f
  7404  07DD                     u201_22:	
  7405  07DD  082B               	movf	??___ftge+5,w
  7406  07DE  1803               	skipnc
  7407  07DF  0F2B               	incfsz	??___ftge+5,w
  7408  07E0  2FE2               	goto	u201_23
  7409  07E1  2FE3               	goto	u201_24
  7410  07E2                     u201_23:	
  7411  07E2  07A8               	addwf	??___ftge+2,f
  7412  07E3                     u201_24:	
  7413  07E3  0826               	movf	??___ftge,w
  7414  07E4  00A3               	movwf	___ftge@ff2
  7415  07E5  0827               	movf	??___ftge+1,w
  7416  07E6  00A4               	movwf	___ftge@ff2+1
  7417  07E7  0828               	movf	??___ftge+2,w
  7418  07E8  00A5               	movwf	___ftge@ff2+2
  7419  07E9                     i1l2222:	
  7420  07E9  3080               	movlw	128
  7421  07EA  06A2               	xorwf	___ftge@ff1+2,f
  7422  07EB  3080               	movlw	128
  7423  07EC  06A5               	xorwf	___ftge@ff2+2,f
  7424  07ED  0825               	movf	___ftge@ff2+2,w
  7425  07EE  0222               	subwf	___ftge@ff1+2,w
  7426  07EF  1D03               	skipz
  7427  07F0  0008               	return
  7428  07F1  0824               	movf	___ftge@ff2+1,w
  7429  07F2  0221               	subwf	___ftge@ff1+1,w
  7430  07F3  1D03               	skipz
  7431  07F4  0008               	return
  7432  07F5  0823               	movf	___ftge@ff2,w
  7433  07F6  0220               	subwf	___ftge@ff1,w
  7434  07F7  0008               	return
  7435  07F8                     __end_of___ftge:	
  7436  007E                     btemp	set	126	;btemp
  7437  007E                     wtemp	set	126
  7438  007E                     wtemp0	set	126
  7439  0080                     wtemp1	set	128
  7440  0082                     wtemp2	set	130
  7441  0084                     wtemp3	set	132
  7442  0086                     wtemp4	set	134
  7443  0088                     wtemp5	set	136
  7444  007F                     wtemp6	set	127
  7445  007E                     ttemp	set	126
  7446  007E                     ttemp0	set	126
  7447  0081                     ttemp1	set	129
  7448  0084                     ttemp2	set	132
  7449  0087                     ttemp3	set	135
  7450  007F                     ttemp4	set	127
  7451  007E                     ltemp	set	126
  7452  007E                     ltemp0	set	126
  7453  0082                     ltemp1	set	130
  7454  0086                     ltemp2	set	134
  7455  0080                     ltemp3	set	128


Data Sizes:
    Strings     263
    Constant    10
    Data        4
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     33      57
    BANK1            80     22      80
    BANK3            96      3       3
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_15(CODE[5]), STR_14(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> display_pwm(BANK1[10]), display_rpm(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    S1254$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    LCD_WriteString@Str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_18(CODE[6]), STR_17(CODE[6]), display_pwm(BANK1[10]), display_rpm(BANK1[10]), 
		 -> STR_13(CODE[17]), 

    USART_WriteString@str	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_19(CODE[40]), STR_16(CODE[3]), display_rpm(BANK1[10]), STR_12(CODE[20]), 
		 -> STR_11(CODE[29]), STR_10(CODE[15]), STR_9(CODE[15]), STR_8(CODE[14]), 
		 -> STR_7(CODE[14]), STR_6(CODE[14]), STR_5(CODE[14]), STR_4(CODE[14]), 
		 -> STR_3(CODE[13]), STR_2(CODE[13]), STR_1(CODE[14]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->i1___wmul
    _USART_ReceiveChar->i1_USART_WriteString
    i1_USART_WriteString->i1_USART_WriteChar
    _Fuzzy->_trapmf
    _Fuzzy->_trimf
    _Fuzzy->i1___wmul
    i1___wmul->i1___lwdiv
    _trimf->i1___lwdiv
    _trapmf->i1___lwdiv
    ___lwtoft->___ftpack
    ___ftge->___lwtoft

Critical Paths under _main in BANK0

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _USART_WriteString->_USART_WriteChar
    _USART_Init->___aldiv
    _LCD_WriteString->_LCD_WriteData
    _LCD_Init->_LCD_WriteCmd
    _LCD_Clear->_LCD_WriteCmd

Critical Paths under _ISR in BANK0

    _ISR->_Fuzzy
    _Fuzzy->___ftge

Critical Paths under _main in BANK1

    _main->_sprintf
    _sprintf->___lwmod
    _USART_Init->___aldiv

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    6105
                                              0 BANK3      3     3      0
                           _ADC_Init
                          _LCD_Clear
                         _LCD_Cursor
                           _LCD_Init
                    _LCD_WriteString
                     _PWM_DutyCycle1
                     _PWM_DutyCycle2
                           _PWM_Init
                        _TIMER0_Init
                         _TIMER0_Set
                         _USART_Init
                  _USART_WriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    14      4    3488
                                              4 BANK1     18    14      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                             23 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     542
                                             23 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     386
                                             31 BANK0      2     2      0
                                              0 BANK1      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     899
                                             23 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _USART_WriteString                                    2     0      2     741
                                             24 BANK0      2     0      2
                    _USART_WriteChar
 ---------------------------------------------------------------------------------
 (2) _USART_WriteChar                                      1     1      0      22
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           8     4      4     707
                                              6 BANK1      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     599
                                             23 BANK0      9     1      8
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_Set                                           1     1      0      22
                                             23 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TIMER0_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle2                                       4     2      2     222
                                             23 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM_DutyCycle1                                       4     2      2     108
                                             23 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_WriteString                                      2     0      2     387
                                             25 BANK0      2     0      2
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        2     2      0      22
                                             23 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0      22
                                             25 BANK0      2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Cursor                                           3     2      1     386
                                             23 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0      22
                                             25 BANK0      2     2      0
                       _LCD_WriteCmd
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteCmd                                         2     2      0      22
                                             23 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  4     4      0    9859
                                             19 BANK0      4     4      0
                              _Fuzzy
                  _USART_ReceiveChar
                   i1_PWM_DutyCycle2
                       i1_TIMER0_Set
                i1_USART_WriteString
                          i1___lwdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (4) i1_TIMER0_Set                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _USART_ReceiveChar                                    2     2      0     377
                                              3 COMMON     2     2      0
                i1_USART_WriteString
 ---------------------------------------------------------------------------------
 (4) i1_USART_WriteString                                  2     0      2     353
                                              1 COMMON     2     0      2
                  i1_USART_WriteChar
 ---------------------------------------------------------------------------------
 (5) i1_USART_WriteChar                                    1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Fuzzy                                                7     5      2    8263
                                             12 BANK0      7     5      2
                             ___ftge
                           ___lwtoft
                            _max_val
                             _trapmf
                              _trimf
                   i1_PWM_DutyCycle2
                          i1___lwdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (4) i1___wmul                                             6     2      4     248
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) i1_PWM_DutyCycle2                                     4     2      2     122
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) _trimf                                               14     6      8    1453
                                              8 COMMON     6     6      0
                                              0 BANK0      8     0      8
                          i1___lwdiv
 ---------------------------------------------------------------------------------
 (5) _trapmf                                              16     6     10    2310
                                              8 COMMON     6     6      0
                                              0 BANK0     10     0     10
                          i1___lwdiv
 ---------------------------------------------------------------------------------
 (4) i1___lwdiv                                            8     4      4     474
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (5) _max_val                                              4     0      4     472
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             4     1      3    2273
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    1931
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (5) ___ftge                                              12     6      6     776
                                              0 BANK0     12     6      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _LCD_Clear
     _LCD_WriteCmd
   _LCD_Cursor
   _LCD_Init
     _LCD_WriteCmd
   _LCD_WriteString
     _LCD_WriteData
   _PWM_DutyCycle1
   _PWM_DutyCycle2
   _PWM_Init
   _TIMER0_Init
   _TIMER0_Set
   _USART_Init
     ___aldiv
   _USART_WriteString
     _USART_WriteChar
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _ISR (ROOT)
   _Fuzzy
     ___ftge
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _max_val
     _trapmf
       i1___lwdiv
     _trimf
       i1___lwdiv
     i1_PWM_DutyCycle2
     i1___lwdiv
     i1___wmul
       i1___lwdiv (ARG)
   _USART_ReceiveChar
     i1_USART_WriteString
       i1_USART_WriteChar
   i1_PWM_DutyCycle2
   i1_TIMER0_Set
   i1_USART_WriteString
     i1_USART_WriteChar
   i1___lwdiv
   i1___wmul
     i1___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      3       3       9        3.1%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     16      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     21      39       5       71.3%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9A      12        0.0%
ABS                  0      0      9A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue May 24 17:03:25 2022

           ?i1_PWM_DutyCycle2 0070                             _x 0053                             _y 0055  
                           pc 0002                   ?_LCD_Cursor 0037       __size_of_PWM_DutyCycle1 001B  
     __size_of_PWM_DutyCycle2 001B                   __CFG_CP$OFF 0000                   _SSPSTATbits 0094  
                          _tf 00EE                            fsr 0004           ___wmul@multiplicand 0039  
          ??i1_PWM_DutyCycle2 0072              i1___wmul@product 007C                 _contagens_tm0 00A4  
                         l208 0F48                           l233 099D                           l503 0484  
                         l604 0B52                           l485 036F                           l659 06F4  
                         _PR2 0092                  __CFG_CPD$OFF 0000                           _ISR 055D  
                         _tip 004F                           _rpm 00B6                           fsr0 0004  
                         _pwm 0049                           _sum 00BA    __size_of_USART_WriteString 0025  
                         indf 0000                  __CFG_FOSC$HS 0000             ??_LCD_WriteString 003B  
                __CFG_LVP$OFF 0000                          ?_ISR 0070                          l3010 036B  
                        l3020 03A7            LCD_WriteString@Str 0039                          l3102 04FA  
                        l3030 0405                          l3014 0376                          l3032 042A  
                        l3016 038B                          l3104 033B                          l3042 0443  
                        l3106 0556                          l3062 04A3                          l3054 0476  
                        l3046 0449                          l3072 04B8                          l3080 04CE  
                        l3064 04A7                          l2434 0B21                          l3082 04D2  
                        l2540 0A1A                          l3094 04F6                          l3088 04E7  
                        l2554 0AFC                          l2910 0782                          l2902 0762  
                        l2906 0772                          l2932 0C00                          l2924 0BDC  
                        l2926 0BEA                          l2950 0C30                          l2936 0C0B  
                        l2864 0B4A                          l2954 0C40                          l2858 09E8  
                        l2892 071E                          l2884 0708                          l2948 0C1C  
                        l2894 0733                          l2958 0C4D                          STR_1 10EA  
                        STR_2 10F8                          STR_3 1105                          STR_4 10CE  
                        STR_5 10B2                          STR_6 10A4                          STR_7 10DC  
                        STR_8 10C0                          STR_9 1086                          u3005 0BF7  
                        u3015 0C01                          u3045 0C23                          u2425 0A6D  
                        u3065 0C38                          u3075 0C41                          u3155 046C  
                        u3307 0FF9                          u3317 09D4                          u2365 0A88  
                        u3407 0A20                          u3327 0D23                          u3095 0C61  
                        u3417 0B77                          u3337 0D33                          u3427 0B85  
                        u3347 0D41                          u3195 0493                          u3437 0B91  
                        u3357 0D4D                          u3447 09C5                          u3367 0D59  
                        u3377 0D67                          u3297 0F41                          u3387 0D75  
                        u2915 0736                          u2835 0B53                          u3397 0D81  
                        u2925 074F                          u2845 0B5A                          u2935 0763  
                        u2895 0725                          u2975 0BDF                          u2995 0BEB  
                        _OERR 00C1                          _TMR0 0001                          _TMR1 000E  
                        _main 0EA3                  ___ftpack@arg 0070            __size_of_LCD_Clear 0029  
                ___ftpack@exp 0073                          _temp 004D                          btemp 007E  
            __end_of_ADC_Init 09FC                          ltemp 007E                          start 0012  
                        ttemp 007E                          wtemp 007E                 ?_LCD_WriteCmd 0070  
               _LCD_WriteData 09CB       __end_of_USART_WriteChar 09A2                         ??_ISR 0033  
                 ?_TIMER0_Set 0070              __end_of_LCD_Init 0D84               __end_of___aldiv 0799  
                       ?_main 0070                         _EEADR 010D                         STR_10 1095  
                       STR_11 1044                         STR_12 1061                         STR_13 1075  
                       STR_14 111E                         STR_15 111E                         STR_16 1092  
                       STR_17 1118                 __CFG_WDTE$OFF 0000                         STR_18 1112  
                       STR_19 101C                         _T1CON 0010               __end_of___lwdiv 0C12  
                       i1l233 0993                         i1l163 005B                         i1l192 05EA  
             __end_of___lwmod 0C56                         i1l604 0A9C                         i1l189 05CE  
                       i1l771 0CFE                         i1l765 0CE5                         _RCREG 001A  
                       _TMR1H 000F                         _TMR1L 000E                         _SPBRG 0099  
                       _PORTA 0005                         _PORTB 0006                         _PORTC 0007  
                       _PORTD 0008                         _PORTE 0009                         _TRISA 0085  
                       _TRISB 0086                         _TRISC 0087                         _TRISD 0088  
                       _TRISE 0089                         _TXREG 0019                 __CFG_PWRTE$ON 0000  
                       _Fuzzy 0044                         _foTip 00AA                         _ideal 00AC  
                       _derro 00A6               __end_of_dpowers 101C               __end_of_max_val 09BC  
             __end_of_isdigit 09EA                 ___ftpack@sign 0074                         _trimf 0D84  
              __CFG_BOREN$OFF 0000           __size_of_LCD_Cursor 0016                         pclath 000A  
            __end_of_PWM_Init 0AFC              __end_ofi1___wmul 0AB5                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
         i1___wmul@multiplier 0078                         wtemp0 007E                         wtemp1 0080  
                       wtemp2 0082                         wtemp3 0084                         wtemp4 0086  
                       wtemp5 0088                         wtemp6 007F               __end_of_sprintf 055D  
          __size_ofi1___lwdiv 003E                ??_LCD_WriteCmd 0037                ?_LCD_WriteData 0070  
                 ?_USART_Init 00DE         i1TIMER0_Set@contagens 0070               __initialization 0015  
                __end_of_main 1000                        ??_main 0190                  ?_TIMER0_Init 0070  
           __end_of_LCD_Clear 0B94                        ?_Fuzzy 002C                        _ADRESH 001E  
                      _ADRESL 009E                        _EEDATA 010C                        _CCPR1L 0015  
                      _CCPR2L 001B                        _EECON2 018D              __end_of___ftpack 0D17  
                      ?_trimf 0020                        i1l2010 0CBE                        i1l2020 0CEA  
                      i1l2012 0CCA                        i1l2100 0E3D                        i1l2022 0CF4  
                      i1l2014 0CCF                        i1l2006 0CB7                        i1l2112 0E8E  
                      i1l2114 0E98                        i1l2106 0E54                        i1l2116 0E9A  
                      i1l2300 0A94                        i1l2222 07E9                        i1l2054 0BC0  
                      i1l2046 0B9C                        i1l2048 0BAA                        i1l2080 0DEF  
                      i1l2218 07C2                        i1l2058 0BCB                        i1l2082 0DF9  
                      i1l2074 0DB3                        i1l2402 032C                        i1l2084 0DFB  
                      i1l2340 0117                        i1l2326 0076                        i1l2318 005C  
                      i1l2422 0A59                        i1l2414 0A4A                        u201_21 07DC  
                      u201_22 07DD                        i1l2370 0225                        i1l2354 0191  
                      i1l2338 010A                        u201_23 07E2                        u201_24 07E3  
                      i1l2356 019E                        i1l2292 0AB5                        i1l2392 02DA  
                      i1l2368 0218                        i1l2704 05B3                        i1l2386 0290  
                      i1l2730 0602                        i1l2714 05CF                        i1l2396 0302  
                      i1l2724 05EB                        i1l2742 0630                        i1l2736 0619  
                      i1l2770 068B                        i1l2754 065E                        i1l2748 0647  
                      i1l2692 0585                        i1l2782 06CE                        i1l2758 066E  
                      i1l2784 06CF                        i1l2698 059C                        u220_25 0AA4  
                      u230_25 020D                        u151_25 0CDE                        u160_25 0B9F  
                      u153_25 0CED                        u217_25 0A37                        u225_25 00FF  
                      u162_25 0BAB                        u170_25 0DC3                        u163_25 0BB7  
                      u171_25 0DF7                        u219_25 0A9D                        u156_25 0D05  
                      u180_25 09B3                        u164_25 0BC1                        u172_25 0E0E  
                      u228_25 0186                        u149_25 0CC3                        u173_25 0E16  
                      u174_25 0E1E                        u166_25 0D8E                        u175_25 0E45  
                      u167_25 0D96                        u176_25 0E4D                        u168_25 0D9E  
                      u177_25 0E5A                        u169_25 0DBB              __end_of___lwtoft 0A10  
                      u178_25 0E62                        u179_25 0E96           __size_of_TIMER0_Set 0006  
                      u199_21 07B5                        u199_22 07B6                        u199_23 07BB  
                      u199_24 07BC                        _SSPADD 0093                        _SSPBUF 0013  
            LCD_WriteCmd@Byte 0038           i1_USART_WriteString 0AB5                        ___ftge 0799  
                   ??___aldiv 003F                        ___wmul 0B46                _PWM_DutyCycle1 0A5C  
              _PWM_DutyCycle2 0A77              ?_USART_WriteChar 0070                        _deltaV 0043  
                   ??___lwdiv 003B                     ??___lwmod 003F                        _fitemp 0045  
       USART_ReceiveChar@byte 0074                        _pwmAnt 004B                        _trapmf 0E04  
                      _pulsos 00B4                        _status 00B8                     ??_max_val 0074  
           __end_ofi1___lwdiv 0BD2                     ??_isdigit 0037                     ?_ADC_Init 0070  
                      saved_w 007E          ?i1_USART_WriteString 0071           __size_of_USART_Init 0059  
                      trimf@a 0022                        trimf@b 0024                        trimf@c 0026  
                      trimf@x 0020                     ??_sprintf 00E0                 ?i1_TIMER0_Set 0070  
     __end_of__initialization 0040                     ?_LCD_Init 0070               ??_LCD_WriteData 0037  
                  ___ftge@ff1 0020                    ___ftge@ff2 0023        __end_of_PWM_DutyCycle1 0A77  
      __end_of_PWM_DutyCycle2 0A92                __pcstackCOMMON 0070                 __end_of_Fuzzy 0334  
                __pidataBANK0 0984                  __pidataBANK1 0982                 LCD_Cursor@Col 0037  
               LCD_Cursor@Row 0039                  ??_LCD_Cursor 0038               _LCD_WriteString 0AFC  
               __end_of_trimf 0E04                    ___lwtoft@c 0078                     ?_PWM_Init 0070  
                   ?i1___wmul 0078                _OPTION_REGbits 0081                    ??_ADC_Init 0037  
        __end_of_LCD_WriteCmd 09CB         ??i1_USART_WriteString 0073                       ??_Fuzzy 002E  
   __size_ofi1_PWM_DutyCycle2 001B                ??i1_TIMER0_Set 0070                  sprintf@width 00EA  
                     ??_trimf 0078                    __pbssBANK0 0041                    __pbssBANK1 00A0  
          __end_of_LCD_Cursor 0A26                    ??_LCD_Init 0039         i1USART_WriteChar@byte 0070  
             ?_PWM_DutyCycle1 0037               ?_PWM_DutyCycle2 0037                    __pmaintext 0EA3  
                     ?___ftge 0020                       ?___wmul 0037                    __pintentry 0004  
                ??_TIMER0_Set 0037                       _CCP1CON 0017                       _CCP2CON 001D  
                   ?___ftpack 0070                       ?_trapmf 0020                    ??_PWM_Init 0037  
                  ??i1___wmul 007C                     ?___lwtoft 0078                 Fuzzy@setpoint 002C  
        __size_of_TIMER0_Init 000B       _posicao_do_grafico_food 00B0                       _SSPCON2 0091  
                  __stringtab 1000                    _fisetpoint 00A8            __end_of_TIMER0_Set 0992  
     __end_of_LCD_WriteString 0B21                     _ADCResult 00A0                  ??_USART_Init 00E2  
           LCD_WriteData@Byte 0038                       ___aldiv 06DE               __size_of___ftge 005F  
             __size_of___wmul 0025                       ___lwdiv 0BD2                       ___lwmod 0C12  
                  ??___ftpack 0075            _posicao_do_grafico 00AE                       __ptext1 0334  
                     __ptext2 09DA                       __ptext3 0B46                       __ptext4 0C12  
                     __ptext5 0BD2                       __ptext6 0B21                       __ptext7 099A  
                     __ptext8 0C56                       __ptext9 06DE                    _pas_cooler 0057  
                  ??___lwtoft 007B               __size_of_trapmf 009F                  __size_of_ISR 0181  
                   _T1CONbits 0010                       _dpowers 1012             i1___lwdiv@divisor 0070  
                   _T2CONbits 0012                       _max_val 09AD                       _isdigit 09DA  
           i1___lwdiv@counter 0077              ___aldiv@dividend 003B                     _LCD_Clear 0B6B  
          __end_of_USART_Init 0CAF                       _sprintf 0334                       clrloop0 07F9  
        end_of_initialization 0040               Fuzzy@velocidade 0030                     _RCSTAbits 0018  
            ___aldiv@quotient 00DA                       trapmf@a 0022                       trapmf@b 0024  
                     trapmf@c 0026                       trapmf@d 0028                       trapmf@x 0020  
                     trimf@ua 007C                  __pstringtext 1000          __end_ofi1_TIMER0_Set 098C  
       i1___wmul@multiplicand 007A         __size_of_LCD_WriteCmd 000F                     _PORTBbits 0006  
                   _PORTEbits 0009                    ?_LCD_Clear 0070              i1_PWM_DutyCycle2 0A26  
           __size_of_ADC_Init 0012                     i1___lwdiv 0B94                  _contador_rb6 00A2  
         PWM_DutyCycle1@valor 0037                    _total_area 0051           PWM_DutyCycle2@valor 0037  
                 _CCP1CONbits 0017                   _CCP2CONbits 001D                     _TXSTAbits 0098  
            ?_LCD_WriteString 0039             __size_of_LCD_Init 006D                  _LCD_WriteCmd 09BC  
              __end_of___ftge 07F8                __end_of___wmul 0B6B             i1_USART_WriteChar 0992  
          ?i1_USART_WriteChar 0070                __end_of_trapmf 0EA3      __size_of_USART_WriteChar 0008  
           __size_of_PWM_Init 0024           start_initialization 0015             __size_ofi1___wmul 0023  
                 __end_of_ISR 06DE           ??i1_USART_WriteChar 0070                    ?i1___lwdiv 0070  
            ??_PWM_DutyCycle1 0039              ??_PWM_DutyCycle2 0039         __end_of_LCD_WriteData 09DA  
           _USART_ReceiveChar 0A41                      ??___ftge 0026            ?_USART_ReceiveChar 0070  
   __end_ofi1_USART_WriteChar 099A                      ??___wmul 003B                   __pdataBANK0 0057  
                 __pdataBANK1 00EE   __end_ofi1_USART_WriteString 0AD8                      ??_trapmf 0078  
         ??_USART_ReceiveChar 0073             __size_of___ftpack 0068                     ___latbits 0002  
           __size_of___lwtoft 0014                 __pcstackBANK0 0020                 __pcstackBANK1 00D8  
               __pcstackBANK3 0190                   ??_LCD_Clear 0039           __end_of__stringdata 1123  
                _isdigit$1450 0037                   sprintf@_val 00E5                   sprintf@flag 00E9  
                 sprintf@prec 00E4     __end_of_USART_ReceiveChar 0A5C         __size_ofi1_TIMER0_Set 0006  
            ___lwdiv@dividend 0039           TIMER0_Set@contagens 0037                      ?___aldiv 0037  
                    ?___lwdiv 0037                      ?___lwmod 00D8                     _ativa_fan 0041  
               ??_TIMER0_Init 0037            USART_Init@BaudRate 00DE                      ?_max_val 0070  
                    ?_isdigit 0070                      _ADC_Init 09EA                     _fop_rule1 0047  
              __size_of_Fuzzy 02F0    _posicao_do_grafico_service 00B2              ___lwdiv@quotient 003D  
                 ??i1___lwdiv 0074                      ?_sprintf 00DC                __size_of_trimf 0080  
           ??_USART_WriteChar 0037                  i1_TIMER0_Set 0986               ___aldiv@divisor 0037  
           interrupt_function 0004               ___aldiv@counter 00D8                      _LCD_Init 0D17  
              ___wmul@product 003B                     clear_ram0 07F8                      _PIE1bits 008C  
                    _PIE2bits 008D                      _PIR1bits 000C                      _PIR2bits 000D  
                   _temp_lida 00BC      __end_ofi1_PWM_DutyCycle2 0A41                     _tempo_rb6 00BE  
  __size_ofi1_USART_WriteChar 0008                   _display_rpm 00CE                   _display_pwm 00C4  
                  _ADCON0bits 001F                   __stringbase 1012                    _ADCON1bits 009F  
                 __stringdata 101C                      _PWM_Init 0AD8             ___wmul@multiplier 0037  
                    i1___wmul 0A92           __end_of_TIMER0_Init 09AD    __size_of_USART_ReceiveChar 001B  
                  _EECON1bits 018C                      Fuzzy@sum 0031              __size_of___aldiv 00BB  
            __size_of___lwdiv 0040              __size_of___lwmod 0044                      ___ftpack 0CAF  
          __end_of__stringtab 1012                      ___lwtoft 09FC              __size_of_max_val 000F  
            __size_of_isdigit 0010               ___lwdiv@divisor 0037               ___lwdiv@counter 003C  
           _USART_WriteString 0B21                      __ptext10 098C                      __ptext11 09A2  
                    __ptext20 09BC                      __ptext12 0AD8                      __ptext21 09EA  
                    __ptext13 0A77                      __ptext30 0D84                      __ptext22 055D  
                    __ptext14 0A5C                      __ptext31 0E04                      __ptext23 0986  
                    __ptext15 0AFC                      __ptext32 0B94                      __ptext24 0A41  
                    __ptext16 09CB                      __ptext33 09AD                      __ptext25 0AB5  
                    __ptext17 0D17                      __ptext34 09FC                      __ptext26 0992  
                    __ptext18 0A10                      __ptext35 0CAF                      __ptext27 0044  
                    __ptext19 0B6B                      __ptext36 0799                      __ptext28 0A92  
                    __ptext29 0A26            ?_USART_WriteString 0038              __size_of_sprintf 0229  
          i1___lwdiv@dividend 0072                 __size_of_main 015D           USART_WriteChar@byte 0037  
         ??_USART_WriteString 003A        i1USART_WriteString@str 0071                    _LCD_Cursor 0A10  
    __size_of_LCD_WriteString 0025            i1___lwdiv@quotient 0075                   _TIMER0_Init 09A2  
                  _INTCONbits 000B     __end_of_USART_WriteString 0B46                      max_val@a 0070  
                    max_val@b 0072                      isdigit@c 0038                      intlevel1 0000  
                   sprintf@ap 00E3                     sprintf@sp 00EC              ___lwmod@dividend 00DA  
                   stringcode 100A                  _tip_gorgeous 00C2          USART_WriteString@str 0038  
                  _TIMER0_Set 098C                      trapmf@ua 007C               _USART_WriteChar 099A  
                    sprintf@c 00ED                      sprintf@f 00DC               ___lwmod@divisor 00D8  
             ___lwmod@counter 0040                   _tip_average 00C0                      stringtab 1000  
                ___aldiv@sign 00D9        __size_of_LCD_WriteData 000F  __size_ofi1_USART_WriteString 0023  
                 _SSPCON2bits 0091         i1PWM_DutyCycle2@valor 0070                    _SSPCONbits 0014  
                  _USART_Init 0C56  
